{
  "address": "0xe4Bf53DFba6aC5E632129b9D3c3b73Cd9491dD90",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwappedNative",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87af2f6e9cb2bbdfe190c06f11d39952e39357b99f882e69203d76dc3bbc907d",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xe4Bf53DFba6aC5E632129b9D3c3b73Cd9491dD90",
    "transactionIndex": 32,
    "gasUsed": "2054235",
    "logsBloom": "0x
    "blockHash": "0x11b8c804597c2bd1a4124259b5a9dfd441c678044be8412a979d701af691935e",
    "transactionHash": "0x87af2f6e9cb2bbdfe190c06f11d39952e39357b99f882e69203d76dc3bbc907d",
    "logs": [],
    "blockNumber": 10422380,
    "cumulativeGasUsed": "7437311",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "3909c62edb025ab537f9e0673fb15c8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwappedNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LiquidityRouter.sol\":\"LiquidityRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable {\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n\\n    // ----- Constructor -----\\n    function initialize(address _router) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = msg.sender;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsOut(inputAmount, path);\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsIn(outputAmount, path);\\n    }\\n\\n    function wrappedNative() external view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        token.transfer(receiver, amountInMax - amountInActual);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr);\\n        }\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn, amountOutMin, path, receiver, deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr);\\n        }\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut, amountInMax, path, receiver, deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        uint256 amountIn = msg.value;\\n        address[] memory path = getPath(this.wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{value:amountIn}(\\n            amountOutMin, path, receiver, deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(this.wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{value:amountInMax}(\\n            amountOut, path, receiver, deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        payable(receiver).transfer(amountInMax - amountInActual);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, uint256(2**256 - 1));\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x0bffdc4ed658dddd82940281732f26fafe88718ac84a6173c8cf7637e1eba673\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612437806100206000396000f3fe6080604052600436106100f35760003560e01c806388e5249f1161008a578063c4d66de811610059578063c4d66de814610297578063eb6d3a11146102b7578063ed9705da146102cc578063f5c13653146102df57600080fd5b806388e5249f146102175780638f6e53b7146102375780639d76ea581461024a578063bd7476781461026a57600080fd5b806365b8dbc0116100c657806365b8dbc0146101975780636e54a8a0146101b757806374cefd8a146101d757806380be66cf146101f757600080fd5b80630584aecf146100f8578063144fa6d7146101355780633268cc561461015757806349bd5a5e14610177575b600080fd5b34801561010457600080fd5b50600354610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004611ff8565b6102ff565b005b34801561016357600080fd5b50600154610118906001600160a01b031681565b34801561018357600080fd5b50600254610118906001600160a01b031681565b3480156101a357600080fd5b506101556101b2366004611ff8565b610869565b3480156101c357600080fd5b506101556101d2366004612032565b610996565b3480156101e357600080fd5b506101556101f2366004612032565b610b80565b34801561020357600080fd5b50610155610212366004612032565b610de9565b34801561022357600080fd5b50610155610232366004612032565b611201565b610155610245366004612083565b61156a565b34801561025657600080fd5b50600554610118906001600160a01b031681565b34801561027657600080fd5b5061028a61028536600461219a565b611761565b60405161012c9190612295565b3480156102a357600080fd5b506101556102b2366004611ff8565b611805565b3480156102c357600080fd5b5061011861194d565b6101556102da366004612083565b6119d9565b3480156102eb57600080fd5b5061028a6102fa36600461219a565b611ba8565b6005546001600160a01b031633148061032257506003546001600160a01b031633145b6103475760405162461bcd60e51b815260040161033e906122d9565b60405180910390fd5b6001600160a01b0381166103945760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161033e565b600580546001600160a01b03199081166001600160a01b0384811691821790935560048054909216178155600080546040805163c45a015560e01b815290519294620100009092049091169263c45a0155928282019260209290829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190612015565b6040518363ffffffff1660e01b81526004016104e7929190612238565b602060405180830381600087803b15801561050157600080fd5b505af1925050508015610531575060408051601f3d908101601f1916820190925261052e91810190612015565b60015b6106bf57600060029054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561061357600080fd5b505afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190612015565b6040518363ffffffff1660e01b8152600401610668929190612238565b60206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190612015565b9050610846565b50600060029054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612015565b6040518363ffffffff1660e01b81526004016107f3929190612238565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190612015565b90505b600280546001600160a01b0319166001600160a01b039290921691909117905550565b6005546001600160a01b031633148061088c57506003546001600160a01b031633145b6108a85760405162461bcd60e51b815260040161033e906122d9565b6000546001600160a01b038281166201000090920416141561091d5760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161033e565b600180546001600160a01b0319166001600160a01b038381169182179092556000805462010000600160b01b03191662010000928302178082556040805163c45a015560e01b815290519294939091049092169163c45a0155916004808301926020929190829003018186803b15801561040257600080fd5b6005546001600160a01b03163314806109b957506003546001600160a01b031633145b6109d55760405162461bcd60e51b815260040161033e906122d9565b600154604051636eb1769f60e11b815284916001600160a01b038088169263dd62ed3e92610a0a923092911690600401612238565b60206040518083038186803b158015610a2257600080fd5b505afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a91906121db565b1015610a6957610a6984611bef565b6000610a76856001611c7c565b600080546040516338ed173960e01b81529293509091620100009091046001600160a01b0316906338ed173990610ab9908890889087908d908a90600401612357565b600060405180830381600087803b158015610ad357600080fd5b505af1158015610ae7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0f91908101906120b8565b905060008051602061240b8339815191528686600560009054906101000a90046001600160a01b03168460018651610b479190612393565b81518110610b5757610b576123b8565b6020026020010151604051610b6f949392919061226b565b60405180910390a150505050505050565b6005546001600160a01b0316331480610ba357506003546001600160a01b031633145b610bbf5760405162461bcd60e51b815260040161033e906122d9565b600154604051636eb1769f60e11b815283916001600160a01b038088169263dd62ed3e92610bf4923092911690600401612238565b60206040518083038186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906121db565b1015610c5357610c5384611bef565b6000610c60856001611c7c565b60008054604051634401edf760e11b81529293509091620100009091046001600160a01b031690638803dbee90610ca3908890889087908d908a90600401612357565b600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf991908101906120b8565b9050600081600081518110610d1057610d106123b8565b60200260200101519050866001600160a01b031663a9059cbb898388610d369190612393565b6040518363ffffffff1660e01b8152600401610d53929190612252565b602060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da5919061217d565b5060055460405160008051602061240b83398151915291610dd7918a9185916001600160a01b03909116908b9061226b565b60405180910390a15050505050505050565b6005546001600160a01b0316331480610e0c57506003546001600160a01b031633145b610e285760405162461bcd60e51b815260040161033e906122d9565b60048054600154604051636eb1769f60e11b815285936001600160a01b039384169363dd62ed3e93610e61933093919092169101612238565b60206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906121db565b1015610f41576004805460015460405163095ea7b360e01b81526001600160a01b039283169363095ea7b393610eed9316916000199101612252565b602060405180830381600087803b158015610f0757600080fd5b505af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f919061217d565b505b6000610f4e856000611c7c565b90506060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa057600080fd5b505afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd89190612015565b6001600160a01b0316866001600160a01b0316141561108b57600054604051633d2120b560e11b8152620100009091046001600160a01b031690637a42416a9061102e908890889087908d908a90600401612357565b600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108491908101906120b8565b9050611121565b600054604051634401edf760e11b8152620100009091046001600160a01b031690638803dbee906110c8908890889087908d908a90600401612357565b600060405180830381600087803b1580156110e257600080fd5b505af11580156110f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261111e91908101906120b8565b90505b600081600081518110611136576111366123b8565b60209081029190910101516004549091506001600160a01b031663a9059cbb896111608489612393565b6040518363ffffffff1660e01b815260040161117d929190612252565b602060405180830381600087803b15801561119757600080fd5b505af11580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf919061217d565b5060055460405160008051602061240b83398151915291610dd7916001600160a01b039091169084908b908b9061226b565b6005546001600160a01b031633148061122457506003546001600160a01b031633145b6112405760405162461bcd60e51b815260040161033e906122d9565b60048054600154604051636eb1769f60e11b815286936001600160a01b039384169363dd62ed3e93611279933093919092169101612238565b60206040518083038186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906121db565b1015611359576004805460015460405163095ea7b360e01b81526001600160a01b039283169363095ea7b3936113059316916000199101612252565b602060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611357919061217d565b505b6000611366856000611c7c565b90506060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b857600080fd5b505afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190612015565b6001600160a01b0316866001600160a01b031614156114a35760005460405163676528d160e01b8152620100009091046001600160a01b03169063676528d190611446908890889087908d908a90600401612357565b600060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261149c91908101906120b8565b9050611539565b6000546040516338ed173960e01b8152620100009091046001600160a01b0316906338ed1739906114e0908890889087908d908a90600401612357565b600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261153691908101906120b8565b90505b600554815160008051602061240b833981519152916001600160a01b031690879089908590610b4790600190612393565b6005546001600160a01b031633148061158d57506003546001600160a01b031633145b6115a95760405162461bcd60e51b815260040161033e906122d9565b6000349050600061162b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116249190612015565b6001611c7c565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663a2a1623d8487858a896040518663ffffffff1660e01b81526004016116769493929190612322565b6000604051808303818588803b15801561168f57600080fd5b505af11580156116a3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116cc91908101906120b8565b60055481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059185916001600160a01b031690849061171090600190612393565b81518110611720576117206123b8565b6020026020010151604051611751939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1505050505050565b6060600061176f8486611c7c565b6000546040516307c0329d60e21b81529192506201000090046001600160a01b031690631f00ca74906117a89086908590600401612301565b60006040518083038186803b1580156117c057600080fd5b505afa1580156117d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fc91908101906120b8565b95945050505050565b600054610100900460ff166118205760005460ff1615611824565b303b155b6118875760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161033e565b600054610100900460ff161580156118a9576000805461ffff19166101011790555b6001600160a01b0382166118ed5760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161033e565b600180546001600160a01b0384166001600160a01b03199182168117909255600080546201000090930262010000600160b01b03199093169290921790915560038054909116331790558015611949576000805461ff00191690555b5050565b60008060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d49190612015565b905090565b6005546001600160a01b03163314806119fc57506003546001600160a01b031633145b611a185760405162461bcd60e51b815260040161033e906122d9565b60003490506000611a5b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ec57600080fd5b905060008060029054906101000a90046001600160a01b03166001600160a01b0316638a657e678487858a896040518663ffffffff1660e01b8152600401611aa69493929190612322565b6000604051808303818588803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611afc91908101906120b8565b9050600081600081518110611b1357611b136123b8565b60200260200101519050866001600160a01b03166108fc8286611b369190612393565b6040518115909202916000818181858888f19350505050158015611b5e573d6000803e3d6000fd5b50600554604080518381526001600160a01b03909216602083015281018790527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba80590606001610b6f565b60606000611bb68486611c7c565b60005460405163d06ca61f60e01b81529192506201000090046001600160a01b03169063d06ca61f906117a89086908590600401612301565b60015460405163095ea7b360e01b815282916001600160a01b038084169263095ea7b392611c2592169060001990600401612252565b602060405180830381600087803b158015611c3f57600080fd5b505af1158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c77919061217d565b505050565b6060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611ccc57600080fd5b505afa158015611ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d049190612015565b6001600160a01b0316836001600160a01b03161415611e2c576040805160028082526060820183526000926020830190803683370190505090508215611dae578381600081518110611d5857611d586123b8565b6001600160a01b039283166020918202929092010152600554825191169082906001908110611d8957611d896123b8565b60200260200101906001600160a01b031690816001600160a01b031681525050611e25565b60055481516001600160a01b03909116908290600090611dd057611dd06123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611e0457611e046123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050611ff2565b6040805160038082526080820190925260009160208201606080368337019050509050600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9d57600080fd5b505afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190612015565b81600181518110611ee857611ee86123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508215611f78578381600081518110611f2257611f226123b8565b6001600160a01b039283166020918202929092010152600554825191169082906002908110611f5357611f536123b8565b60200260200101906001600160a01b031690816001600160a01b031681525050611fef565b60055481516001600160a01b03909116908290600090611f9a57611f9a6123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110611fce57611fce6123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250505b90505b92915050565b60006020828403121561200a57600080fd5b8135611fef816123e4565b60006020828403121561202757600080fd5b8151611fef816123e4565b600080600080600060a0868803121561204a57600080fd5b8535612055816123e4565b94506020860135612065816123e4565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561209857600080fd5b83356120a3816123e4565b95602085013595506040909401359392505050565b600060208083850312156120cb57600080fd5b825167ffffffffffffffff808211156120e357600080fd5b818501915085601f8301126120f757600080fd5b815181811115612109576121096123ce565b8060051b604051601f19603f8301168101818110858211171561212e5761212e6123ce565b604052828152858101935084860182860187018a101561214d57600080fd5b600095505b83861015612170578051855260019590950194938601938601612152565b5098975050505050505050565b60006020828403121561218f57600080fd5b8151611fef816123fc565b6000806000606084860312156121af57600080fd5b83356121ba816123fc565b925060208401356121ca816123e4565b929592945050506040919091013590565b6000602082840312156121ed57600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561222d5781516001600160a01b031687529582019590820190600101612208565b509495945050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b818110156122cd578351835292840192918401916001016122b1565b50909695505050505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b82815260406020820152600061231a60408301846121f4565b949350505050565b84815260806020820152600061233b60808301866121f4565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061237660a08301866121f4565b6001600160a01b0394909416606083015250608001529392505050565b6000828210156123b357634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123f957600080fd5b50565b80151581146123f957600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806388e5249f1161008a578063c4d66de811610059578063c4d66de814610297578063eb6d3a11146102b7578063ed9705da146102cc578063f5c13653146102df57600080fd5b806388e5249f146102175780638f6e53b7146102375780639d76ea581461024a578063bd7476781461026a57600080fd5b806365b8dbc0116100c657806365b8dbc0146101975780636e54a8a0146101b757806374cefd8a146101d757806380be66cf146101f757600080fd5b80630584aecf146100f8578063144fa6d7146101355780633268cc561461015757806349bd5a5e14610177575b600080fd5b34801561010457600080fd5b50600354610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004611ff8565b6102ff565b005b34801561016357600080fd5b50600154610118906001600160a01b031681565b34801561018357600080fd5b50600254610118906001600160a01b031681565b3480156101a357600080fd5b506101556101b2366004611ff8565b610869565b3480156101c357600080fd5b506101556101d2366004612032565b610996565b3480156101e357600080fd5b506101556101f2366004612032565b610b80565b34801561020357600080fd5b50610155610212366004612032565b610de9565b34801561022357600080fd5b50610155610232366004612032565b611201565b610155610245366004612083565b61156a565b34801561025657600080fd5b50600554610118906001600160a01b031681565b34801561027657600080fd5b5061028a61028536600461219a565b611761565b60405161012c9190612295565b3480156102a357600080fd5b506101556102b2366004611ff8565b611805565b3480156102c357600080fd5b5061011861194d565b6101556102da366004612083565b6119d9565b3480156102eb57600080fd5b5061028a6102fa36600461219a565b611ba8565b6005546001600160a01b031633148061032257506003546001600160a01b031633145b6103475760405162461bcd60e51b815260040161033e906122d9565b60405180910390fd5b6001600160a01b0381166103945760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161033e565b600580546001600160a01b03199081166001600160a01b0384811691821790935560048054909216178155600080546040805163c45a015560e01b815290519294620100009092049091169263c45a0155928282019260209290829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190612015565b6040518363ffffffff1660e01b81526004016104e7929190612238565b602060405180830381600087803b15801561050157600080fd5b505af1925050508015610531575060408051601f3d908101601f1916820190925261052e91810190612015565b60015b6106bf57600060029054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561061357600080fd5b505afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190612015565b6040518363ffffffff1660e01b8152600401610668929190612238565b60206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190612015565b9050610846565b50600060029054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612015565b600554600054604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169362010000900416916373b295c2916004808301926020929190829003018186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612015565b6040518363ffffffff1660e01b81526004016107f3929190612238565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190612015565b90505b600280546001600160a01b0319166001600160a01b039290921691909117905550565b6005546001600160a01b031633148061088c57506003546001600160a01b031633145b6108a85760405162461bcd60e51b815260040161033e906122d9565b6000546001600160a01b038281166201000090920416141561091d5760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161033e565b600180546001600160a01b0319166001600160a01b038381169182179092556000805462010000600160b01b03191662010000928302178082556040805163c45a015560e01b815290519294939091049092169163c45a0155916004808301926020929190829003018186803b15801561040257600080fd5b6005546001600160a01b03163314806109b957506003546001600160a01b031633145b6109d55760405162461bcd60e51b815260040161033e906122d9565b600154604051636eb1769f60e11b815284916001600160a01b038088169263dd62ed3e92610a0a923092911690600401612238565b60206040518083038186803b158015610a2257600080fd5b505afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a91906121db565b1015610a6957610a6984611bef565b6000610a76856001611c7c565b600080546040516338ed173960e01b81529293509091620100009091046001600160a01b0316906338ed173990610ab9908890889087908d908a90600401612357565b600060405180830381600087803b158015610ad357600080fd5b505af1158015610ae7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0f91908101906120b8565b905060008051602061240b8339815191528686600560009054906101000a90046001600160a01b03168460018651610b479190612393565b81518110610b5757610b576123b8565b6020026020010151604051610b6f949392919061226b565b60405180910390a150505050505050565b6005546001600160a01b0316331480610ba357506003546001600160a01b031633145b610bbf5760405162461bcd60e51b815260040161033e906122d9565b600154604051636eb1769f60e11b815283916001600160a01b038088169263dd62ed3e92610bf4923092911690600401612238565b60206040518083038186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906121db565b1015610c5357610c5384611bef565b6000610c60856001611c7c565b60008054604051634401edf760e11b81529293509091620100009091046001600160a01b031690638803dbee90610ca3908890889087908d908a90600401612357565b600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf991908101906120b8565b9050600081600081518110610d1057610d106123b8565b60200260200101519050866001600160a01b031663a9059cbb898388610d369190612393565b6040518363ffffffff1660e01b8152600401610d53929190612252565b602060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da5919061217d565b5060055460405160008051602061240b83398151915291610dd7918a9185916001600160a01b03909116908b9061226b565b60405180910390a15050505050505050565b6005546001600160a01b0316331480610e0c57506003546001600160a01b031633145b610e285760405162461bcd60e51b815260040161033e906122d9565b60048054600154604051636eb1769f60e11b815285936001600160a01b039384169363dd62ed3e93610e61933093919092169101612238565b60206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906121db565b1015610f41576004805460015460405163095ea7b360e01b81526001600160a01b039283169363095ea7b393610eed9316916000199101612252565b602060405180830381600087803b158015610f0757600080fd5b505af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f919061217d565b505b6000610f4e856000611c7c565b90506060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa057600080fd5b505afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd89190612015565b6001600160a01b0316866001600160a01b0316141561108b57600054604051633d2120b560e11b8152620100009091046001600160a01b031690637a42416a9061102e908890889087908d908a90600401612357565b600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108491908101906120b8565b9050611121565b600054604051634401edf760e11b8152620100009091046001600160a01b031690638803dbee906110c8908890889087908d908a90600401612357565b600060405180830381600087803b1580156110e257600080fd5b505af11580156110f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261111e91908101906120b8565b90505b600081600081518110611136576111366123b8565b60209081029190910101516004549091506001600160a01b031663a9059cbb896111608489612393565b6040518363ffffffff1660e01b815260040161117d929190612252565b602060405180830381600087803b15801561119757600080fd5b505af11580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf919061217d565b5060055460405160008051602061240b83398151915291610dd7916001600160a01b039091169084908b908b9061226b565b6005546001600160a01b031633148061122457506003546001600160a01b031633145b6112405760405162461bcd60e51b815260040161033e906122d9565b60048054600154604051636eb1769f60e11b815286936001600160a01b039384169363dd62ed3e93611279933093919092169101612238565b60206040518083038186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906121db565b1015611359576004805460015460405163095ea7b360e01b81526001600160a01b039283169363095ea7b3936113059316916000199101612252565b602060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611357919061217d565b505b6000611366856000611c7c565b90506060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b857600080fd5b505afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190612015565b6001600160a01b0316866001600160a01b031614156114a35760005460405163676528d160e01b8152620100009091046001600160a01b03169063676528d190611446908890889087908d908a90600401612357565b600060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261149c91908101906120b8565b9050611539565b6000546040516338ed173960e01b8152620100009091046001600160a01b0316906338ed1739906114e0908890889087908d908a90600401612357565b600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261153691908101906120b8565b90505b600554815160008051602061240b833981519152916001600160a01b031690879089908590610b4790600190612393565b6005546001600160a01b031633148061158d57506003546001600160a01b031633145b6115a95760405162461bcd60e51b815260040161033e906122d9565b6000349050600061162b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116249190612015565b6001611c7c565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663a2a1623d8487858a896040518663ffffffff1660e01b81526004016116769493929190612322565b6000604051808303818588803b15801561168f57600080fd5b505af11580156116a3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116cc91908101906120b8565b60055481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059185916001600160a01b031690849061171090600190612393565b81518110611720576117206123b8565b6020026020010151604051611751939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1505050505050565b6060600061176f8486611c7c565b6000546040516307c0329d60e21b81529192506201000090046001600160a01b031690631f00ca74906117a89086908590600401612301565b60006040518083038186803b1580156117c057600080fd5b505afa1580156117d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fc91908101906120b8565b95945050505050565b600054610100900460ff166118205760005460ff1615611824565b303b155b6118875760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161033e565b600054610100900460ff161580156118a9576000805461ffff19166101011790555b6001600160a01b0382166118ed5760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161033e565b600180546001600160a01b0384166001600160a01b03199182168117909255600080546201000090930262010000600160b01b03199093169290921790915560038054909116331790558015611949576000805461ff00191690555b5050565b60008060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d49190612015565b905090565b6005546001600160a01b03163314806119fc57506003546001600160a01b031633145b611a185760405162461bcd60e51b815260040161033e906122d9565b60003490506000611a5b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ec57600080fd5b905060008060029054906101000a90046001600160a01b03166001600160a01b0316638a657e678487858a896040518663ffffffff1660e01b8152600401611aa69493929190612322565b6000604051808303818588803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611afc91908101906120b8565b9050600081600081518110611b1357611b136123b8565b60200260200101519050866001600160a01b03166108fc8286611b369190612393565b6040518115909202916000818181858888f19350505050158015611b5e573d6000803e3d6000fd5b50600554604080518381526001600160a01b03909216602083015281018790527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba80590606001610b6f565b60606000611bb68486611c7c565b60005460405163d06ca61f60e01b81529192506201000090046001600160a01b03169063d06ca61f906117a89086908590600401612301565b60015460405163095ea7b360e01b815282916001600160a01b038084169263095ea7b392611c2592169060001990600401612252565b602060405180830381600087803b158015611c3f57600080fd5b505af1158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c77919061217d565b505050565b6060600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611ccc57600080fd5b505afa158015611ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d049190612015565b6001600160a01b0316836001600160a01b03161415611e2c576040805160028082526060820183526000926020830190803683370190505090508215611dae578381600081518110611d5857611d586123b8565b6001600160a01b039283166020918202929092010152600554825191169082906001908110611d8957611d896123b8565b60200260200101906001600160a01b031690816001600160a01b031681525050611e25565b60055481516001600160a01b03909116908290600090611dd057611dd06123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611e0457611e046123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050611ff2565b6040805160038082526080820190925260009160208201606080368337019050509050600060029054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9d57600080fd5b505afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190612015565b81600181518110611ee857611ee86123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508215611f78578381600081518110611f2257611f226123b8565b6001600160a01b039283166020918202929092010152600554825191169082906002908110611f5357611f536123b8565b60200260200101906001600160a01b031690816001600160a01b031681525050611fef565b60055481516001600160a01b03909116908290600090611f9a57611f9a6123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110611fce57611fce6123b8565b60200260200101906001600160a01b031690816001600160a01b0316815250505b90505b92915050565b60006020828403121561200a57600080fd5b8135611fef816123e4565b60006020828403121561202757600080fd5b8151611fef816123e4565b600080600080600060a0868803121561204a57600080fd5b8535612055816123e4565b94506020860135612065816123e4565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561209857600080fd5b83356120a3816123e4565b95602085013595506040909401359392505050565b600060208083850312156120cb57600080fd5b825167ffffffffffffffff808211156120e357600080fd5b818501915085601f8301126120f757600080fd5b815181811115612109576121096123ce565b8060051b604051601f19603f8301168101818110858211171561212e5761212e6123ce565b604052828152858101935084860182860187018a101561214d57600080fd5b600095505b83861015612170578051855260019590950194938601938601612152565b5098975050505050505050565b60006020828403121561218f57600080fd5b8151611fef816123fc565b6000806000606084860312156121af57600080fd5b83356121ba816123fc565b925060208401356121ca816123e4565b929592945050506040919091013590565b6000602082840312156121ed57600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561222d5781516001600160a01b031687529582019590820190600101612208565b509495945050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b818110156122cd578351835292840192918401916001016122b1565b50909695505050505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b82815260406020820152600061231a60408301846121f4565b949350505050565b84815260806020820152600061233b60808301866121f4565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061237660a08301866121f4565b6001600160a01b0394909416606083015250608001529392505050565b6000828210156123b357634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123f957600080fd5b50565b80151581146123f957600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6717,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Router",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IJoeRouter02)8109"
      },
      {
        "astId": 6719,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "routerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6721,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6723,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "admin0xB",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6726,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "token",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 6728,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)8109": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      }
    }
  }
}