{
  "address": "0xC1e87700ec4012aB604782E2Dfb4bbbff94Cdee2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwappedNative",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForTokenNoFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTaxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "updateSwapTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x70e8b0de3b6066074906751a6cc48f32eaef7d806e059b7ada34e47ec8001c04",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xC1e87700ec4012aB604782E2Dfb4bbbff94Cdee2",
    "transactionIndex": 15,
    "gasUsed": "3509135",
    "logsBloom": "0x
    "blockHash": "0xd9132b8f69a983f199bafe983055b06ab01ef9a7f84ec1536fea35a0d5826100",
    "transactionHash": "0x70e8b0de3b6066074906751a6cc48f32eaef7d806e059b7ada34e47ec8001c04",
    "logs": [],
    "blockNumber": 10547595,
    "cumulativeGasUsed": "11989324",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "2614235b9912965acb78d8142094b540",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwappedNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForTokenNoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"updateSwapTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LiquidityRouter.sol\":\"LiquidityRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable, PaymentSplitterUpgradeable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address payable public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n    uint256 public swapTaxFee;\\n    address public swapTaxPool;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        address _router,\\n        uint256 _fee,\\n        address _pool\\n    ) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = payable(msg.sender);\\n\\n        swapTaxFee = _fee;\\n        swapTaxPool = _pool;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(inputAmount, path);\\n        uint256 result = amountsOut[amountsOut.length - 1];\\n        result = (result * (HUNDRED_PERCENT - swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsIn = uniswapV2Router.getAmountsIn(outputAmount, path);\\n        uint256 result = amountsIn[0];\\n        result = (result * (HUNDRED_PERCENT + swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function wrappedNative() public view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function updateSwapTaxPool(address payable newPool) external onlyAuthorities {\\n        require(newPool != address(0), \\\"UPD_WALL: zero addr\\\");\\n        swapTaxPool = newPool;\\n    }\\n\\n    function updateSwapFee(uint256 value) external onlyAuthorities {\\n        require(value <= HUNDRED_PERCENT, \\\"FEES: swap exceeding 100%\\\");\\n        swapTaxFee = value;\\n    }\\n\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    // Only use to fund wallets\\n    function swapExact0xBForTokenNoFee(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn\\n    ) external onlyAuthorities returns (uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn, 0, path, receiver, block.timestamp);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, receiver, block.timestamp);\\n        }\\n        return result[result.length - 1];\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(amountIn));\\n        }\\n\\n        require(getOutputAmount(false, outTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        token.transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(amountInMax));\\n        }\\n\\n        require(getInputAmount(false, outTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        token.transfer(swapTaxPool, fee);\\n        token.transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr, amountIn);\\n        }\\n        require(getOutputAmount(true, inTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn - fee,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr, amountInMax);\\n        }\\n        require(getInputAmount(true, inTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        uint256 amountIn = msg.value;\\n        require(getOutputAmount(true, wrappedNative(), amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        payable(swapTaxPool).transfer(fee);\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{ value: amountIn - fee }(\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        // uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        payable(swapTaxPool).transfer(fee);\\n        payable(receiver).transfer(msg.value - amountInActual - fee);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr, uint256 amount) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, amount);\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xc9932032cdce3e2d68b60d6a97338921089314e10ff64e5d7c9593623777c7d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e88806100206000396000f3fe6080604052600436106101b15760003560e01c80638b83209b116100e7578063c350a1b511610095578063eb6d3a1111610064578063eb6d3a1114610593578063ed9705da146105a8578063f5c13653146105bb578063fd53fce0146105db57600080fd5b8063c350a1b5146104f2578063ce7c2ac214610512578063d79779b214610548578063e33b7de31461057e57600080fd5b80638b83209b146104095780638f6e53b7146104295780639852595c1461043c5780639d76ea5814610472578063b698f04414610492578063bd747678146104b2578063bf16f65a146104d257600080fd5b806348b750441161015f5780636e54a8a01161012e5780636e54a8a01461037457806374cefd8a146103a957806380be66cf146103c957806388e5249f146103e957600080fd5b806348b75044146102f457806349bd5a5e1461031457806365b8dbc0146103345780636a63f5ee1461035457600080fd5b80630584aecf146101f657806311eb47dc14610233578063144fa6d71461025357806319165587146102755780633268cc56146102955780633a98ef39146102b5578063406072a9146102d457600080fd5b366101f1577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033346040516101e7929190613ae7565b60405180910390a1005b600080fd5b34801561020257600080fd5b50606854610216906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023f57600080fd5b50606c54610216906001600160a01b031681565b34801561025f57600080fd5b5061027361026e3660046137d7565b6105f1565b005b34801561028157600080fd5b506102736102903660046137d7565b610b47565b3480156102a157600080fd5b50606654610216906001600160a01b031681565b3480156102c157600080fd5b506033545b60405190815260200161022a565b3480156102e057600080fd5b506102c66102ef366004613a1c565b610c6c565b34801561030057600080fd5b5061027361030f366004613a1c565b610c99565b34801561032057600080fd5b50606754610216906001600160a01b031681565b34801561034057600080fd5b5061027361034f3660046137d7565b610e58565b34801561036057600080fd5b5061027361036f3660046137d7565b610f69565b34801561038057600080fd5b5061039461038f366004613852565b611016565b6040805192835260208301919091520161022a565b3480156103b557600080fd5b506103946103c4366004613852565b61130a565b3480156103d557600080fd5b506103946103e4366004613852565b61168b565b3480156103f557600080fd5b50610394610404366004613852565b611ba4565b34801561041557600080fd5b50610216610424366004613a55565b611fe9565b6103946104373660046138e5565b612019565b34801561044857600080fd5b506102c66104573660046137d7565b6001600160a01b031660009081526036602052604090205490565b34801561047e57600080fd5b50606a54610216906001600160a01b031681565b34801561049e57600080fd5b506102c66104ad366004613811565b61225e565b3480156104be57600080fd5b506102c66104cd3660046139fc565b6125c4565b3480156104de57600080fd5b506102736104ed366004613a55565b6126b4565b3480156104fe57600080fd5b5061027361050d3660046138a3565b61274c565b34801561051e57600080fd5b506102c661052d3660046137d7565b6001600160a01b031660009081526035602052604090205490565b34801561055457600080fd5b506102c66105633660046137d7565b6001600160a01b031660009081526038602052604090205490565b34801561058a57600080fd5b506034546102c6565b34801561059f57600080fd5b50610216612938565b6103946105b63660046138e5565b6129ba565b3480156105c757600080fd5b506102c66105d63660046139fc565b612bca565b3480156105e757600080fd5b506102c6606b5481565b606a546001600160a01b031633148061061457506068546001600160a01b031633145b6106395760405162461bcd60e51b815260040161063090613b77565b60405180910390fd5b6001600160a01b0381166106865760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b6044820152606401610630565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a91906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906137f4565b6040518363ffffffff1660e01b81526004016107d1929190613b00565b602060405180830381600087803b1580156107eb57600080fd5b505af192505050801561081b575060408051601f3d908101601f19168201909252610818918101906137f4565b60015b6109a357606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a591906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906137f4565b6040518363ffffffff1660e01b815260040161094c929190613b00565b60206040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c91906137f4565b9050610b24565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a91906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab491906137f4565b6040518363ffffffff1660e01b8152600401610ad1929190613b00565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2191906137f4565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610b7c5760405162461bcd60e51b815260040161063090613b9f565b6000610b8760345490565b610b919047613d3c565b90506000610bbe8383610bb9866001600160a01b031660009081526036602052604090205490565b612ca7565b905080610bdd5760405162461bcd60e51b815260040161063090613be5565b6001600160a01b03831660009081526036602052604081208054839290610c05908490613d3c565b925050819055508060346000828254610c1e9190613d3c565b90915550610c2e90508382612ced565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610c5f929190613ae7565b60405180910390a1505050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610cce5760405162461bcd60e51b815260040161063090613b9f565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190613a6e565b610d689190613d3c565b90506000610d7b8383610bb98787610c6c565b905080610d9a5760405162461bcd60e51b815260040161063090613be5565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610dd1908490613d3c565b90915550506001600160a01b03841660009081526038602052604081208054839290610dfe908490613d3c565b90915550610e0f9050848483612e0b565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610e4a929190613ae7565b60405180910390a250505050565b606a546001600160a01b0316331480610e7b57506068546001600160a01b031633145b610e975760405162461bcd60e51b815260040161063090613b77565b6065546001600160a01b0382811691161415610f065760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b6064820152608401610630565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b1580156106f257600080fd5b606a546001600160a01b0316331480610f8c57506068546001600160a01b031633145b610fa85760405162461bcd60e51b815260040161063090613b77565b6001600160a01b038116610ff45760405162461bcd60e51b81526020600482015260136024820152722aa8222faba0a6261d103d32b9379030b2323960691b6044820152606401610630565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b606a5460009081906001600160a01b031633148061103e57506068546001600160a01b031633145b61105a5760405162461bcd60e51b815260040161063090613b77565b606654604051636eb1769f60e11b815286916001600160a01b03808a169263dd62ed3e9261108f923092911690600401613b00565b60206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190613a6e565b10156110ef576110ef8686612e61565b836110fc60018888612bca565b101561111a5760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b548761112f9190613d76565b6111399190613d54565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808a169263a9059cbb9261116e9216908590600401613ae7565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906139df565b5060006111ce886001612ee7565b6065549091506000906001600160a01b03166338ed17396111ef858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611213959493929190613d00565b600060405180830381600087803b15801561122d57600080fd5b505af1158015611241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611269919081019061391a565b9050600080516020613e5c8339815191528989606a60009054906101000a90046001600160a01b031684600186516112a19190613d95565b815181106112b1576112b1613e09565b60200260200101516040516112c99493929190613b1a565b60405180910390a180600182516112e09190613d95565b815181106112f0576112f0613e09565b602002602001015183945094505050509550959350505050565b606a5460009081906001600160a01b031633148061133257506068546001600160a01b031633145b61134e5760405162461bcd60e51b815260040161063090613b77565b606654604051636eb1769f60e11b815285916001600160a01b03808a169263dd62ed3e92611383923092911690600401613b00565b60206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190613a6e565b10156113e3576113e38685612e61565b836113f0600188886125c4565b111561143a5760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b6044820152606401610630565b6000611447876001612ee7565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee90611485908a908a9087908f908c90600401613d00565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114db919081019061391a565b90506000816000815181106114f2576114f2613e09565b6020026020010151905060006305f5e100606b54836115119190613d76565b61151b9190613d54565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808d169263a9059cbb926115509216908590600401613ae7565b602060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a291906139df565b506001600160a01b038a1663a9059cbb8c836115be868d613d95565b6115c89190613d95565b6040518363ffffffff1660e01b81526004016115e5929190613ae7565b602060405180830381600087803b1580156115ff57600080fd5b505af1158015611613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163791906139df565b50606a54604051600080516020613e5c83398151915291611669918d9186916001600160a01b03909116908e90613b1a565b60405180910390a161167b8183613d3c565b9b909a5098505050505050505050565b606a5460009081906001600160a01b03163314806116b357506068546001600160a01b031633145b6116cf5760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815286926001600160a01b039081169263dd62ed3e926117069230921690600401613b00565b60206040518083038186803b15801561171e57600080fd5b505afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190613a6e565b10156117e65760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611792929116908890600401613ae7565b602060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e491906139df565b505b836117f3600088886125c4565b111561183d5760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b6044820152606401610630565b600061184a876000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906137f4565b6001600160a01b0316886001600160a01b0316141561198257606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a90611925908a908a9087908f908c90600401613d00565b600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197b919081019061391a565b9050611a13565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee906119ba908a908a9087908f908c90600401613d00565b600060405180830381600087803b1580156119d457600080fd5b505af11580156119e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a10919081019061391a565b90505b600081600081518110611a2857611a28613e09565b6020026020010151905060006305f5e100606b5483611a479190613d76565b611a519190613d54565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611a899216908590600401613ae7565b602060405180830381600087803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adb91906139df565b506069546001600160a01b031663a9059cbb8c83611af9868d613d95565b611b039190613d95565b6040518363ffffffff1660e01b8152600401611b20929190613ae7565b602060405180830381600087803b158015611b3a57600080fd5b505af1158015611b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7291906139df565b50606a54604051600080516020613e5c83398151915291611669916001600160a01b039091169085908e908e90613b1a565b606a5460009081906001600160a01b0316331480611bcc57506068546001600160a01b031633145b611be85760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815287926001600160a01b039081169263dd62ed3e92611c1f9230921690600401613b00565b60206040518083038186803b158015611c3757600080fd5b505afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f9190613a6e565b1015611cff5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611cab929116908990600401613ae7565b602060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfd91906139df565b505b83611d0c60008888612bca565b1015611d2a5760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b5487611d3f9190613d76565b611d499190613d54565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611d819216908590600401613ae7565b602060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd391906139df565b506000611de1886000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3357600080fd5b505afa158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b91906137f4565b6001600160a01b0316896001600160a01b03161415611f20576065546001600160a01b031663676528d1611e9f858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611ec3959493929190613d00565b600060405180830381600087803b158015611edd57600080fd5b505af1158015611ef1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f19919081019061391a565b9050611fb8565b6065546001600160a01b03166338ed1739611f3b858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611f5f959493929190613d00565b600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fb5919081019061391a565b90505b606a548151600080516020613e5c833981519152916001600160a01b0316908a908c9085906112a190600190613d95565b600060378281548110611ffe57611ffe613e09565b6000918252602090912001546001600160a01b031692915050565b606a5460009081906001600160a01b031633148061204157506068546001600160a01b031633145b61205d5760405162461bcd60e51b815260040161063090613b77565b3484612072600161206c612938565b84612bca565b10156120905760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b54836120a59190613d76565b6120af9190613d54565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156120ea573d6000803e3d6000fd5b5060006120ff6120f8612938565b6001612ee7565b6065549091506000906001600160a01b031663a2a1623d6121208587613d95565b8a858d8c6040518663ffffffff1660e01b81526004016121439493929190613ccb565b6000604051808303818588803b15801561215c57600080fd5b505af1158015612170573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612199919081019061391a565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059186916001600160a01b03169084906121dd90600190613d95565b815181106121ed576121ed613e09565b602002602001015160405161221e939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a180600182516122359190613d95565b8151811061224557612245613e09565b6020026020010151839550955050505050935093915050565b606a546000906001600160a01b031633148061228457506068546001600160a01b031633145b6122a05760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815284926001600160a01b039081169263dd62ed3e926122d79230921690600401613b00565b60206040518083038186803b1580156122ef57600080fd5b505afa158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190613a6e565b10156123b95760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926123659291169060001990600401613ae7565b602060405180830381600087803b15801561237f57600080fd5b505af1158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b791906139df565b505b60006123c6846000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245091906137f4565b6001600160a01b0316856001600160a01b031614156124ff5760655460405163676528d160e01b81526001600160a01b039091169063676528d1906124a290879060009087908c904290600401613d00565b600060405180830381600087803b1580156124bc57600080fd5b505af11580156124d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124f8919081019061391a565b9050612591565b6065546040516338ed173960e01b81526001600160a01b03909116906338ed17399061253890879060009087908c904290600401613d00565b600060405180830381600087803b15801561255257600080fd5b505af1158015612566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261258e919081019061391a565b90505b80600182516125a09190613d95565b815181106125b0576125b0613e09565b6020026020010151925050505b9392505050565b6000806125d18486612ee7565b6065546040516307c0329d60e21b81529192506000916001600160a01b0390911690631f00ca74906126099087908690600401613cb2565b60006040518083038186803b15801561262157600080fd5b505afa158015612635573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261265d919081019061391a565b905060008160008151811061267457612674613e09565b602002602001015190506305f5e100606b546305f5e1006126959190613d3c565b61269f9083613d76565b6126a99190613d54565b979650505050505050565b606a546001600160a01b03163314806126d757506068546001600160a01b031633145b6126f35760405162461bcd60e51b815260040161063090613b77565b6305f5e1008111156127475760405162461bcd60e51b815260206004820152601960248201527f464545533a207377617020657863656564696e672031303025000000000000006044820152606401610630565b606b55565b600054610100900460ff166127675760005460ff161561276b565b303b155b6127ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610630565b600054610100900460ff161580156127f0576000805461ffff19166101011790555b6001600160a01b0384166128345760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b6044820152606401610630565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061286a5761286a613e09565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090506001816000815181106128bc576128bc613e09565b6020026020010181815250506128d2828261324b565b5050606680546001600160a01b038087166001600160a01b0319928316811790935560658054831690931790925560688054821633179055606b859055606c8054928516929091169190911790558015612932576000805461ff00191690555b50505050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b591906137f4565b905090565b606a5460009081906001600160a01b03163314806129e257506068546001600160a01b031633145b6129fe5760405162461bcd60e51b815260040161063090613b77565b6000612a0b6120f8612938565b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490612a49908a9087908d908c90600401613ccb565b6000604051808303818588803b158015612a6257600080fd5b505af1158015612a76573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612a9f919081019061391a565b9050600081600081518110612ab657612ab6613e09565b6020026020010151905060006305f5e100606b5483612ad59190613d76565b612adf9190613d54565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612b1a573d6000803e3d6000fd5b506001600160a01b0389166108fc82612b338534613d95565b612b3d9190613d95565b6040518115909202916000818181858888f19350505050158015612b65573d6000803e3d6000fd5b50606a54604080518481526001600160a01b03909216602083015281018990527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059060600160405180910390a1612bbc8183613d3c565b999098509650505050505050565b600080612bd78486612ee7565b60655460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90612c0f9087908690600401613cb2565b60006040518083038186803b158015612c2757600080fd5b505afa158015612c3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c63919081019061391a565b905060008160018351612c769190613d95565b81518110612c8657612c86613e09565b602002602001015190506305f5e100606b546305f5e1006126959190613d95565b6033546001600160a01b03841660009081526035602052604081205490918391612cd19086613d76565b612cdb9190613d54565b612ce59190613d95565b949350505050565b80471015612d3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610630565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d8a576040519150601f19603f3d011682016040523d82523d6000602084013e612d8f565b606091505b5050905080612e065760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610630565b505050565b612e068363a9059cbb60e01b8484604051602401612e2a929190613ae7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613280565b60665460405163095ea7b360e01b815283916001600160a01b038084169263095ea7b392612e959216908690600401613ae7565b602060405180830381600087803b158015612eaf57600080fd5b505af1158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293291906139df565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015612f2c57600080fd5b505afa158015612f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6491906137f4565b6001600160a01b0316836001600160a01b0316141561308c57604080516002808252606082018352600092602083019080368337019050509050821561300e578381600081518110612fb857612fb8613e09565b6001600160a01b039283166020918202929092010152606a54825191169082906001908110612fe957612fe9613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050613085565b606a5481516001600160a01b0390911690829060009061303057613030613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061306457613064613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610c93565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b1580156130f357600080fd5b505afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b91906137f4565b8160018151811061313e5761313e613e09565b60200260200101906001600160a01b031690816001600160a01b03168152505082156131ce57838160008151811061317857613178613e09565b6001600160a01b039283166020918202929092010152606a548251911690829060029081106131a9576131a9613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250506125bd565b606a5481516001600160a01b039091169082906000906131f0576131f0613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061322457613224613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166132725760405162461bcd60e51b815260040161063090613c67565b61327c8282613352565b5050565b60006132d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134909092919063ffffffff16565b805190915015612e0657808060200190518101906132f391906139df565b612e065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610630565b600054610100900460ff166133795760405162461bcd60e51b815260040161063090613c67565b80518251146133e55760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610630565b60008251116134365760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610630565b60005b8251811015612e065761347e83828151811061345757613457613e09565b602002602001015183838151811061347157613471613e09565b602002602001015161349f565b8061348881613dd8565b915050613439565b6060612ce5848460008561367d565b6001600160a01b03821661350a5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610630565b6000811161355a5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610630565b6001600160a01b038216600090815260356020526040902054156135d45760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401610630565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b038416908117909155600090815260356020526040902081905560335461363c908290613d3c565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac906136719084908490613ae7565b60405180910390a15050565b6060824710156136de5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610630565b6001600160a01b0385163b6137355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610630565b600080866001600160a01b031685876040516137519190613acb565b60006040518083038185875af1925050503d806000811461378e576040519150601f19603f3d011682016040523d82523d6000602084013e613793565b606091505b50915091506126a9828286606083156137ad5750816125bd565b8251156137bd5782518084602001fd5b8160405162461bcd60e51b81526004016106309190613b44565b6000602082840312156137e957600080fd5b81356125bd81613e35565b60006020828403121561380657600080fd5b81516125bd81613e35565b60008060006060848603121561382657600080fd5b833561383181613e35565b9250602084013561384181613e35565b929592945050506040919091013590565b600080600080600060a0868803121561386a57600080fd5b853561387581613e35565b9450602086013561388581613e35565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156138b857600080fd5b83356138c381613e35565b92506020840135915060408401356138da81613e35565b809150509250925092565b6000806000606084860312156138fa57600080fd5b833561390581613e35565b95602085013595506040909401359392505050565b6000602080838503121561392d57600080fd5b825167ffffffffffffffff8082111561394557600080fd5b818501915085601f83011261395957600080fd5b81518181111561396b5761396b613e1f565b8060051b604051601f19603f8301168101818110858211171561399057613990613e1f565b604052828152858101935084860182860187018a10156139af57600080fd5b600095505b838610156139d25780518552600195909501949386019386016139b4565b5098975050505050505050565b6000602082840312156139f157600080fd5b81516125bd81613e4d565b600080600060608486031215613a1157600080fd5b833561383181613e4d565b60008060408385031215613a2f57600080fd5b8235613a3a81613e35565b91506020830135613a4a81613e35565b809150509250929050565b600060208284031215613a6757600080fd5b5035919050565b600060208284031215613a8057600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613ac05781516001600160a01b031687529582019590820190600101613a9b565b509495945050505050565b60008251613add818460208701613dac565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020815260008251806020840152613b63816040850160208701613dac565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b828152604060208201526000612ce56040830184613a87565b848152608060208201526000613ce46080830186613a87565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a060408201526000613d1f60a0830186613a87565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613d4f57613d4f613df3565b500190565b600082613d7157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613d9057613d90613df3565b500290565b600082821015613da757613da7613df3565b500390565b60005b83811015613dc7578181015183820152602001613daf565b838111156129325750506000910152565b6000600019821415613dec57613dec613df3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613e4a57600080fd5b50565b8015158114613e4a57600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106101b15760003560e01c80638b83209b116100e7578063c350a1b511610095578063eb6d3a1111610064578063eb6d3a1114610593578063ed9705da146105a8578063f5c13653146105bb578063fd53fce0146105db57600080fd5b8063c350a1b5146104f2578063ce7c2ac214610512578063d79779b214610548578063e33b7de31461057e57600080fd5b80638b83209b146104095780638f6e53b7146104295780639852595c1461043c5780639d76ea5814610472578063b698f04414610492578063bd747678146104b2578063bf16f65a146104d257600080fd5b806348b750441161015f5780636e54a8a01161012e5780636e54a8a01461037457806374cefd8a146103a957806380be66cf146103c957806388e5249f146103e957600080fd5b806348b75044146102f457806349bd5a5e1461031457806365b8dbc0146103345780636a63f5ee1461035457600080fd5b80630584aecf146101f657806311eb47dc14610233578063144fa6d71461025357806319165587146102755780633268cc56146102955780633a98ef39146102b5578063406072a9146102d457600080fd5b366101f1577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033346040516101e7929190613ae7565b60405180910390a1005b600080fd5b34801561020257600080fd5b50606854610216906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023f57600080fd5b50606c54610216906001600160a01b031681565b34801561025f57600080fd5b5061027361026e3660046137d7565b6105f1565b005b34801561028157600080fd5b506102736102903660046137d7565b610b47565b3480156102a157600080fd5b50606654610216906001600160a01b031681565b3480156102c157600080fd5b506033545b60405190815260200161022a565b3480156102e057600080fd5b506102c66102ef366004613a1c565b610c6c565b34801561030057600080fd5b5061027361030f366004613a1c565b610c99565b34801561032057600080fd5b50606754610216906001600160a01b031681565b34801561034057600080fd5b5061027361034f3660046137d7565b610e58565b34801561036057600080fd5b5061027361036f3660046137d7565b610f69565b34801561038057600080fd5b5061039461038f366004613852565b611016565b6040805192835260208301919091520161022a565b3480156103b557600080fd5b506103946103c4366004613852565b61130a565b3480156103d557600080fd5b506103946103e4366004613852565b61168b565b3480156103f557600080fd5b50610394610404366004613852565b611ba4565b34801561041557600080fd5b50610216610424366004613a55565b611fe9565b6103946104373660046138e5565b612019565b34801561044857600080fd5b506102c66104573660046137d7565b6001600160a01b031660009081526036602052604090205490565b34801561047e57600080fd5b50606a54610216906001600160a01b031681565b34801561049e57600080fd5b506102c66104ad366004613811565b61225e565b3480156104be57600080fd5b506102c66104cd3660046139fc565b6125c4565b3480156104de57600080fd5b506102736104ed366004613a55565b6126b4565b3480156104fe57600080fd5b5061027361050d3660046138a3565b61274c565b34801561051e57600080fd5b506102c661052d3660046137d7565b6001600160a01b031660009081526035602052604090205490565b34801561055457600080fd5b506102c66105633660046137d7565b6001600160a01b031660009081526038602052604090205490565b34801561058a57600080fd5b506034546102c6565b34801561059f57600080fd5b50610216612938565b6103946105b63660046138e5565b6129ba565b3480156105c757600080fd5b506102c66105d63660046139fc565b612bca565b3480156105e757600080fd5b506102c6606b5481565b606a546001600160a01b031633148061061457506068546001600160a01b031633145b6106395760405162461bcd60e51b815260040161063090613b77565b60405180910390fd5b6001600160a01b0381166106865760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b6044820152606401610630565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a91906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906137f4565b6040518363ffffffff1660e01b81526004016107d1929190613b00565b602060405180830381600087803b1580156107eb57600080fd5b505af192505050801561081b575060408051601f3d908101601f19168201909252610818918101906137f4565b60015b6109a357606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a591906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906137f4565b6040518363ffffffff1660e01b815260040161094c929190613b00565b60206040518083038186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c91906137f4565b9050610b24565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a91906137f4565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab491906137f4565b6040518363ffffffff1660e01b8152600401610ad1929190613b00565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2191906137f4565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610b7c5760405162461bcd60e51b815260040161063090613b9f565b6000610b8760345490565b610b919047613d3c565b90506000610bbe8383610bb9866001600160a01b031660009081526036602052604090205490565b612ca7565b905080610bdd5760405162461bcd60e51b815260040161063090613be5565b6001600160a01b03831660009081526036602052604081208054839290610c05908490613d3c565b925050819055508060346000828254610c1e9190613d3c565b90915550610c2e90508382612ced565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610c5f929190613ae7565b60405180910390a1505050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610cce5760405162461bcd60e51b815260040161063090613b9f565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190613a6e565b610d689190613d3c565b90506000610d7b8383610bb98787610c6c565b905080610d9a5760405162461bcd60e51b815260040161063090613be5565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610dd1908490613d3c565b90915550506001600160a01b03841660009081526038602052604081208054839290610dfe908490613d3c565b90915550610e0f9050848483612e0b565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610e4a929190613ae7565b60405180910390a250505050565b606a546001600160a01b0316331480610e7b57506068546001600160a01b031633145b610e975760405162461bcd60e51b815260040161063090613b77565b6065546001600160a01b0382811691161415610f065760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b6064820152608401610630565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b1580156106f257600080fd5b606a546001600160a01b0316331480610f8c57506068546001600160a01b031633145b610fa85760405162461bcd60e51b815260040161063090613b77565b6001600160a01b038116610ff45760405162461bcd60e51b81526020600482015260136024820152722aa8222faba0a6261d103d32b9379030b2323960691b6044820152606401610630565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b606a5460009081906001600160a01b031633148061103e57506068546001600160a01b031633145b61105a5760405162461bcd60e51b815260040161063090613b77565b606654604051636eb1769f60e11b815286916001600160a01b03808a169263dd62ed3e9261108f923092911690600401613b00565b60206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190613a6e565b10156110ef576110ef8686612e61565b836110fc60018888612bca565b101561111a5760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b548761112f9190613d76565b6111399190613d54565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808a169263a9059cbb9261116e9216908590600401613ae7565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906139df565b5060006111ce886001612ee7565b6065549091506000906001600160a01b03166338ed17396111ef858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611213959493929190613d00565b600060405180830381600087803b15801561122d57600080fd5b505af1158015611241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611269919081019061391a565b9050600080516020613e5c8339815191528989606a60009054906101000a90046001600160a01b031684600186516112a19190613d95565b815181106112b1576112b1613e09565b60200260200101516040516112c99493929190613b1a565b60405180910390a180600182516112e09190613d95565b815181106112f0576112f0613e09565b602002602001015183945094505050509550959350505050565b606a5460009081906001600160a01b031633148061133257506068546001600160a01b031633145b61134e5760405162461bcd60e51b815260040161063090613b77565b606654604051636eb1769f60e11b815285916001600160a01b03808a169263dd62ed3e92611383923092911690600401613b00565b60206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190613a6e565b10156113e3576113e38685612e61565b836113f0600188886125c4565b111561143a5760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b6044820152606401610630565b6000611447876001612ee7565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee90611485908a908a9087908f908c90600401613d00565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114db919081019061391a565b90506000816000815181106114f2576114f2613e09565b6020026020010151905060006305f5e100606b54836115119190613d76565b61151b9190613d54565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808d169263a9059cbb926115509216908590600401613ae7565b602060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a291906139df565b506001600160a01b038a1663a9059cbb8c836115be868d613d95565b6115c89190613d95565b6040518363ffffffff1660e01b81526004016115e5929190613ae7565b602060405180830381600087803b1580156115ff57600080fd5b505af1158015611613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163791906139df565b50606a54604051600080516020613e5c83398151915291611669918d9186916001600160a01b03909116908e90613b1a565b60405180910390a161167b8183613d3c565b9b909a5098505050505050505050565b606a5460009081906001600160a01b03163314806116b357506068546001600160a01b031633145b6116cf5760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815286926001600160a01b039081169263dd62ed3e926117069230921690600401613b00565b60206040518083038186803b15801561171e57600080fd5b505afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190613a6e565b10156117e65760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611792929116908890600401613ae7565b602060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e491906139df565b505b836117f3600088886125c4565b111561183d5760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b6044820152606401610630565b600061184a876000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906137f4565b6001600160a01b0316886001600160a01b0316141561198257606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a90611925908a908a9087908f908c90600401613d00565b600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197b919081019061391a565b9050611a13565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee906119ba908a908a9087908f908c90600401613d00565b600060405180830381600087803b1580156119d457600080fd5b505af11580156119e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a10919081019061391a565b90505b600081600081518110611a2857611a28613e09565b6020026020010151905060006305f5e100606b5483611a479190613d76565b611a519190613d54565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611a899216908590600401613ae7565b602060405180830381600087803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adb91906139df565b506069546001600160a01b031663a9059cbb8c83611af9868d613d95565b611b039190613d95565b6040518363ffffffff1660e01b8152600401611b20929190613ae7565b602060405180830381600087803b158015611b3a57600080fd5b505af1158015611b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7291906139df565b50606a54604051600080516020613e5c83398151915291611669916001600160a01b039091169085908e908e90613b1a565b606a5460009081906001600160a01b0316331480611bcc57506068546001600160a01b031633145b611be85760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815287926001600160a01b039081169263dd62ed3e92611c1f9230921690600401613b00565b60206040518083038186803b158015611c3757600080fd5b505afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f9190613a6e565b1015611cff5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611cab929116908990600401613ae7565b602060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfd91906139df565b505b83611d0c60008888612bca565b1015611d2a5760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b5487611d3f9190613d76565b611d499190613d54565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611d819216908590600401613ae7565b602060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd391906139df565b506000611de1886000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3357600080fd5b505afa158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b91906137f4565b6001600160a01b0316896001600160a01b03161415611f20576065546001600160a01b031663676528d1611e9f858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611ec3959493929190613d00565b600060405180830381600087803b158015611edd57600080fd5b505af1158015611ef1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f19919081019061391a565b9050611fb8565b6065546001600160a01b03166338ed1739611f3b858b613d95565b89858e8b6040518663ffffffff1660e01b8152600401611f5f959493929190613d00565b600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fb5919081019061391a565b90505b606a548151600080516020613e5c833981519152916001600160a01b0316908a908c9085906112a190600190613d95565b600060378281548110611ffe57611ffe613e09565b6000918252602090912001546001600160a01b031692915050565b606a5460009081906001600160a01b031633148061204157506068546001600160a01b031633145b61205d5760405162461bcd60e51b815260040161063090613b77565b3484612072600161206c612938565b84612bca565b10156120905760405162461bcd60e51b815260040161063090613c30565b60006305f5e100606b54836120a59190613d76565b6120af9190613d54565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156120ea573d6000803e3d6000fd5b5060006120ff6120f8612938565b6001612ee7565b6065549091506000906001600160a01b031663a2a1623d6121208587613d95565b8a858d8c6040518663ffffffff1660e01b81526004016121439493929190613ccb565b6000604051808303818588803b15801561215c57600080fd5b505af1158015612170573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612199919081019061391a565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059186916001600160a01b03169084906121dd90600190613d95565b815181106121ed576121ed613e09565b602002602001015160405161221e939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a180600182516122359190613d95565b8151811061224557612245613e09565b6020026020010151839550955050505050935093915050565b606a546000906001600160a01b031633148061228457506068546001600160a01b031633145b6122a05760405162461bcd60e51b815260040161063090613b77565b606954606654604051636eb1769f60e11b815284926001600160a01b039081169263dd62ed3e926122d79230921690600401613b00565b60206040518083038186803b1580156122ef57600080fd5b505afa158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190613a6e565b10156123b95760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926123659291169060001990600401613ae7565b602060405180830381600087803b15801561237f57600080fd5b505af1158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b791906139df565b505b60006123c6846000612ee7565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245091906137f4565b6001600160a01b0316856001600160a01b031614156124ff5760655460405163676528d160e01b81526001600160a01b039091169063676528d1906124a290879060009087908c904290600401613d00565b600060405180830381600087803b1580156124bc57600080fd5b505af11580156124d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124f8919081019061391a565b9050612591565b6065546040516338ed173960e01b81526001600160a01b03909116906338ed17399061253890879060009087908c904290600401613d00565b600060405180830381600087803b15801561255257600080fd5b505af1158015612566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261258e919081019061391a565b90505b80600182516125a09190613d95565b815181106125b0576125b0613e09565b6020026020010151925050505b9392505050565b6000806125d18486612ee7565b6065546040516307c0329d60e21b81529192506000916001600160a01b0390911690631f00ca74906126099087908690600401613cb2565b60006040518083038186803b15801561262157600080fd5b505afa158015612635573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261265d919081019061391a565b905060008160008151811061267457612674613e09565b602002602001015190506305f5e100606b546305f5e1006126959190613d3c565b61269f9083613d76565b6126a99190613d54565b979650505050505050565b606a546001600160a01b03163314806126d757506068546001600160a01b031633145b6126f35760405162461bcd60e51b815260040161063090613b77565b6305f5e1008111156127475760405162461bcd60e51b815260206004820152601960248201527f464545533a207377617020657863656564696e672031303025000000000000006044820152606401610630565b606b55565b600054610100900460ff166127675760005460ff161561276b565b303b155b6127ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610630565b600054610100900460ff161580156127f0576000805461ffff19166101011790555b6001600160a01b0384166128345760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b6044820152606401610630565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061286a5761286a613e09565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090506001816000815181106128bc576128bc613e09565b6020026020010181815250506128d2828261324b565b5050606680546001600160a01b038087166001600160a01b0319928316811790935560658054831690931790925560688054821633179055606b859055606c8054928516929091169190911790558015612932576000805461ff00191690555b50505050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b591906137f4565b905090565b606a5460009081906001600160a01b03163314806129e257506068546001600160a01b031633145b6129fe5760405162461bcd60e51b815260040161063090613b77565b6000612a0b6120f8612938565b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490612a49908a9087908d908c90600401613ccb565b6000604051808303818588803b158015612a6257600080fd5b505af1158015612a76573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612a9f919081019061391a565b9050600081600081518110612ab657612ab6613e09565b6020026020010151905060006305f5e100606b5483612ad59190613d76565b612adf9190613d54565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612b1a573d6000803e3d6000fd5b506001600160a01b0389166108fc82612b338534613d95565b612b3d9190613d95565b6040518115909202916000818181858888f19350505050158015612b65573d6000803e3d6000fd5b50606a54604080518481526001600160a01b03909216602083015281018990527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059060600160405180910390a1612bbc8183613d3c565b999098509650505050505050565b600080612bd78486612ee7565b60655460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90612c0f9087908690600401613cb2565b60006040518083038186803b158015612c2757600080fd5b505afa158015612c3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c63919081019061391a565b905060008160018351612c769190613d95565b81518110612c8657612c86613e09565b602002602001015190506305f5e100606b546305f5e1006126959190613d95565b6033546001600160a01b03841660009081526035602052604081205490918391612cd19086613d76565b612cdb9190613d54565b612ce59190613d95565b949350505050565b80471015612d3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610630565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d8a576040519150601f19603f3d011682016040523d82523d6000602084013e612d8f565b606091505b5050905080612e065760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610630565b505050565b612e068363a9059cbb60e01b8484604051602401612e2a929190613ae7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613280565b60665460405163095ea7b360e01b815283916001600160a01b038084169263095ea7b392612e959216908690600401613ae7565b602060405180830381600087803b158015612eaf57600080fd5b505af1158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293291906139df565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015612f2c57600080fd5b505afa158015612f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6491906137f4565b6001600160a01b0316836001600160a01b0316141561308c57604080516002808252606082018352600092602083019080368337019050509050821561300e578381600081518110612fb857612fb8613e09565b6001600160a01b039283166020918202929092010152606a54825191169082906001908110612fe957612fe9613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050613085565b606a5481516001600160a01b0390911690829060009061303057613030613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061306457613064613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610c93565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b1580156130f357600080fd5b505afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b91906137f4565b8160018151811061313e5761313e613e09565b60200260200101906001600160a01b031690816001600160a01b03168152505082156131ce57838160008151811061317857613178613e09565b6001600160a01b039283166020918202929092010152606a548251911690829060029081106131a9576131a9613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250506125bd565b606a5481516001600160a01b039091169082906000906131f0576131f0613e09565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061322457613224613e09565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166132725760405162461bcd60e51b815260040161063090613c67565b61327c8282613352565b5050565b60006132d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134909092919063ffffffff16565b805190915015612e0657808060200190518101906132f391906139df565b612e065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610630565b600054610100900460ff166133795760405162461bcd60e51b815260040161063090613c67565b80518251146133e55760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610630565b60008251116134365760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610630565b60005b8251811015612e065761347e83828151811061345757613457613e09565b602002602001015183838151811061347157613471613e09565b602002602001015161349f565b8061348881613dd8565b915050613439565b6060612ce5848460008561367d565b6001600160a01b03821661350a5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610630565b6000811161355a5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610630565b6001600160a01b038216600090815260356020526040902054156135d45760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401610630565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b038416908117909155600090815260356020526040902081905560335461363c908290613d3c565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac906136719084908490613ae7565b60405180910390a15050565b6060824710156136de5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610630565b6001600160a01b0385163b6137355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610630565b600080866001600160a01b031685876040516137519190613acb565b60006040518083038185875af1925050503d806000811461378e576040519150601f19603f3d011682016040523d82523d6000602084013e613793565b606091505b50915091506126a9828286606083156137ad5750816125bd565b8251156137bd5782518084602001fd5b8160405162461bcd60e51b81526004016106309190613b44565b6000602082840312156137e957600080fd5b81356125bd81613e35565b60006020828403121561380657600080fd5b81516125bd81613e35565b60008060006060848603121561382657600080fd5b833561383181613e35565b9250602084013561384181613e35565b929592945050506040919091013590565b600080600080600060a0868803121561386a57600080fd5b853561387581613e35565b9450602086013561388581613e35565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156138b857600080fd5b83356138c381613e35565b92506020840135915060408401356138da81613e35565b809150509250925092565b6000806000606084860312156138fa57600080fd5b833561390581613e35565b95602085013595506040909401359392505050565b6000602080838503121561392d57600080fd5b825167ffffffffffffffff8082111561394557600080fd5b818501915085601f83011261395957600080fd5b81518181111561396b5761396b613e1f565b8060051b604051601f19603f8301168101818110858211171561399057613990613e1f565b604052828152858101935084860182860187018a10156139af57600080fd5b600095505b838610156139d25780518552600195909501949386019386016139b4565b5098975050505050505050565b6000602082840312156139f157600080fd5b81516125bd81613e4d565b600080600060608486031215613a1157600080fd5b833561383181613e4d565b60008060408385031215613a2f57600080fd5b8235613a3a81613e35565b91506020830135613a4a81613e35565b809150509250929050565b600060208284031215613a6757600080fd5b5035919050565b600060208284031215613a8057600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613ac05781516001600160a01b031687529582019590820190600101613a9b565b509495945050505050565b60008251613add818460208701613dac565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020815260008251806020840152613b63816040850160208701613dac565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b828152604060208201526000612ce56040830184613a87565b848152608060208201526000613ce46080830186613a87565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a060408201526000613d1f60a0830186613a87565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613d4f57613d4f613df3565b500190565b600082613d7157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613d9057613d90613df3565b500290565b600082821015613da757613da7613df3565b500390565b60005b83811015613dc7578181015183820152602001613daf565b838111156129325750506000910152565b6000600019821415613dec57613dec613df3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613e4a57600080fd5b50565b8015158114613e4a57600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalShares",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_shares",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_released",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_payees",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 6987,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IJoeRouter02)8848"
      },
      {
        "astId": 6989,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "routerAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 6991,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6993,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "admin0xB",
        "offset": 0,
        "slot": "104",
        "type": "t_address_payable"
      },
      {
        "astId": 6996,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "token",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 6998,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 7000,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "swapTaxFee",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 7002,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "swapTaxPool",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)8848": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}