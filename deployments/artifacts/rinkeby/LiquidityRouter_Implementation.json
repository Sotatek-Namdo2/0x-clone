{
  "address": "0x347DE806F783e75c9CBDbbC848E82A97C1b525B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellTax",
          "type": "uint256"
        }
      ],
      "name": "InvalidSellTax",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwappedNative",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellTax",
          "type": "uint256"
        }
      ],
      "name": "setSellTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForTokenNoFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTaxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "updateAdmin0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "updateSwapTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x06f4e2430a4a6b6f1d27dc43d60a620d9c86ec90f3513a5d777f4b29006de365",
  "receipt": {
    "to": null,
    "from": "0x0AB01869EEC7240e63990F16Be309D8364814AA8",
    "contractAddress": "0x347DE806F783e75c9CBDbbC848E82A97C1b525B7",
    "transactionIndex": 1,
    "gasUsed": "3536143",
    "logsBloom": "0x
    "blockHash": "0x98e7d263292175161d108cae8d599169480a7cd6561b41b2946b46feee000a0c",
    "transactionHash": "0x06f4e2430a4a6b6f1d27dc43d60a620d9c86ec90f3513a5d777f4b29006de365",
    "logs": [],
    "blockNumber": 10742987,
    "cumulativeGasUsed": "3562138",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aa2fafca3ff81473fe0849379c09aad7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwappedNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForTokenNoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"updateSwapTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LiquidityRouter.sol\":\"LiquidityRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable, PaymentSplitterUpgradeable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address payable public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n    uint256 public swapTaxFee;\\n    address public swapTaxPool;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        address _router,\\n        uint256 _fee,\\n        address _pool\\n    ) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = payable(msg.sender);\\n\\n        swapTaxFee = _fee;\\n        swapTaxPool = _pool;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(inputAmount, path);\\n        uint256 result = amountsOut[amountsOut.length - 1];\\n        result = (result * (HUNDRED_PERCENT - swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsIn = uniswapV2Router.getAmountsIn(outputAmount, path);\\n        uint256 result = amountsIn[0];\\n        result = (result * (HUNDRED_PERCENT + swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function wrappedNative() public view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function updateAdmin0xB(address payable newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"UPD_ADMIN: zero addr\\\");\\n        admin0xB = newAdmin;\\n    }\\n\\n    function updateSwapTaxPool(address payable newPool) external onlyAuthorities {\\n        require(newPool != address(0), \\\"UPD_WALL: zero addr\\\");\\n        swapTaxPool = newPool;\\n    }\\n\\n    function updateSwapFee(uint256 value) external onlyAuthorities {\\n        require(value <= HUNDRED_PERCENT, \\\"FEES: swap exceeding 100%\\\");\\n        swapTaxFee = value;\\n    }\\n\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    // Only use to fund wallets\\n    function swapExact0xBForTokenNoFee(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n                amountIn,\\n                0,\\n                path,\\n                receiver,\\n                block.timestamp\\n            );\\n        } else {\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn,\\n                0,\\n                path,\\n                receiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(amountIn));\\n        }\\n\\n        require(getOutputAmount(false, outTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        token.transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(amountInMax));\\n        }\\n\\n        require(getInputAmount(false, outTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        token.transfer(swapTaxPool, fee);\\n        token.transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr, amountIn);\\n        }\\n        require(getOutputAmount(true, inTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn - fee,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr, amountInMax);\\n        }\\n        require(getInputAmount(true, inTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        uint256 amountIn = msg.value;\\n        require(getOutputAmount(true, wrappedNative(), amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        payable(swapTaxPool).transfer(fee);\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{ value: amountIn - fee }(\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        // uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        payable(swapTaxPool).transfer(fee);\\n        payable(receiver).transfer(msg.value - amountInActual - fee);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr, uint256 amount) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, amount);\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x3ec6157c4e270a2e2dbfd2c28acc8d4da2a619a5147ec53b6331d3941bf849b9\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f04806100206000396000f3fe6080604052600436106101cc5760003560e01c806388e5249f11610102578063c350a1b511610095578063eb6d3a1111610064578063eb6d3a11146105ce578063ed9705da146105e3578063f5c13653146105f6578063fd53fce01461061657600080fd5b8063c350a1b51461052d578063ce7c2ac21461054d578063d79779b214610583578063e33b7de3146105b957600080fd5b80639d76ea58116100d15780639d76ea58146104ad578063b698f044146104cd578063bd747678146104ed578063bf16f65a1461050d57600080fd5b806388e5249f146104245780638b83209b146104445780638f6e53b7146104645780639852595c1461047757600080fd5b8063406072a91161017a5780636a63f5ee116101495780636a63f5ee1461038f5780636e54a8a0146103af57806374cefd8a146103e457806380be66cf1461040457600080fd5b8063406072a91461030f57806348b750441461032f57806349bd5a5e1461034f57806365b8dbc01461036f57600080fd5b80630584aecf1461021157806311eb47dc1461024e578063144fa6d71461026e57806319165587146102905780631c293de5146102b05780633268cc56146102d05780633a98ef39146102f057600080fd5b3661020c577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610202929190613b63565b60405180910390a1005b600080fd5b34801561021d57600080fd5b50606854610231906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025a57600080fd5b50606c54610231906001600160a01b031681565b34801561027a57600080fd5b5061028e610289366004613853565b61062c565b005b34801561029c57600080fd5b5061028e6102ab366004613853565b610b82565b3480156102bc57600080fd5b5061028e6102cb366004613853565b610ca7565b3480156102dc57600080fd5b50606654610231906001600160a01b031681565b3480156102fc57600080fd5b506033545b604051908152602001610245565b34801561031b57600080fd5b5061030161032a366004613a98565b610d55565b34801561033b57600080fd5b5061028e61034a366004613a98565b610d82565b34801561035b57600080fd5b50606754610231906001600160a01b031681565b34801561037b57600080fd5b5061028e61038a366004613853565b610f41565b34801561039b57600080fd5b5061028e6103aa366004613853565b611052565b3480156103bb57600080fd5b506103cf6103ca3660046138ce565b6110ff565b60408051928352602083019190915201610245565b3480156103f057600080fd5b506103cf6103ff3660046138ce565b6113f3565b34801561041057600080fd5b506103cf61041f3660046138ce565b611774565b34801561043057600080fd5b506103cf61043f3660046138ce565b611c8d565b34801561045057600080fd5b5061023161045f366004613ad1565b6120d2565b6103cf610472366004613961565b612102565b34801561048357600080fd5b50610301610492366004613853565b6001600160a01b031660009081526036602052604090205490565b3480156104b957600080fd5b50606a54610231906001600160a01b031681565b3480156104d957600080fd5b5061028e6104e836600461388d565b612347565b3480156104f957600080fd5b50610301610508366004613a78565b61262f565b34801561051957600080fd5b5061028e610528366004613ad1565b612721565b34801561053957600080fd5b5061028e61054836600461391f565b6127b9565b34801561055957600080fd5b50610301610568366004613853565b6001600160a01b031660009081526035602052604090205490565b34801561058f57600080fd5b5061030161059e366004613853565b6001600160a01b031660009081526038602052604090205490565b3480156105c557600080fd5b50603454610301565b3480156105da57600080fd5b506102316129a4565b6103cf6105f1366004613961565b612a26565b34801561060257600080fd5b50610301610611366004613a78565b612c36565b34801561062257600080fd5b50610301606b5481565b606a546001600160a01b031633148061064f57506068546001600160a01b031633145b6106745760405162461bcd60e51b815260040161066b90613bf3565b60405180910390fd5b6001600160a01b0381166106c15760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161066b565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b15801561072d57600080fd5b505afa158015610741573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107659190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b1580156107b757600080fd5b505afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190613870565b6040518363ffffffff1660e01b815260040161080c929190613b7c565b602060405180830381600087803b15801561082657600080fd5b505af1925050508015610856575060408051601f3d908101601f1916820190925261085391810190613870565b60015b6109de57606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561093257600080fd5b505afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190613870565b6040518363ffffffff1660e01b8152600401610987929190613b7c565b60206040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190613870565b9050610b5f565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190613870565b6040518363ffffffff1660e01b8152600401610b0c929190613b7c565b60206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190613870565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610bb75760405162461bcd60e51b815260040161066b90613c1b565b6000610bc260345490565b610bcc9047613db8565b90506000610bf98383610bf4866001600160a01b031660009081526036602052604090205490565b612d13565b905080610c185760405162461bcd60e51b815260040161066b90613c61565b6001600160a01b03831660009081526036602052604081208054839290610c40908490613db8565b925050819055508060346000828254610c599190613db8565b90915550610c6990508382612d59565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610c9a929190613b63565b60405180910390a1505050565b606a546001600160a01b0316331480610cca57506068546001600160a01b031633145b610ce65760405162461bcd60e51b815260040161066b90613bf3565b6001600160a01b038116610d335760405162461bcd60e51b81526020600482015260146024820152732aa8222fa0a226a4a71d103d32b9379030b2323960611b604482015260640161066b565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610db75760405162461bcd60e51b815260040161066b90613c1b565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610e0f57600080fd5b505afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190613aea565b610e519190613db8565b90506000610e648383610bf48787610d55565b905080610e835760405162461bcd60e51b815260040161066b90613c61565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610eba908490613db8565b90915550506001600160a01b03841660009081526038602052604081208054839290610ee7908490613db8565b90915550610ef89050848483612e77565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610f33929190613b63565b60405180910390a250505050565b606a546001600160a01b0316331480610f6457506068546001600160a01b031633145b610f805760405162461bcd60e51b815260040161066b90613bf3565b6065546001600160a01b0382811691161415610fef5760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161066b565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b15801561072d57600080fd5b606a546001600160a01b031633148061107557506068546001600160a01b031633145b6110915760405162461bcd60e51b815260040161066b90613bf3565b6001600160a01b0381166110dd5760405162461bcd60e51b81526020600482015260136024820152722aa8222faba0a6261d103d32b9379030b2323960691b604482015260640161066b565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b606a5460009081906001600160a01b031633148061112757506068546001600160a01b031633145b6111435760405162461bcd60e51b815260040161066b90613bf3565b606654604051636eb1769f60e11b815286916001600160a01b03808a169263dd62ed3e92611178923092911690600401613b7c565b60206040518083038186803b15801561119057600080fd5b505afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190613aea565b10156111d8576111d88686612ecd565b836111e560018888612c36565b10156112035760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b54876112189190613df2565b6112229190613dd0565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808a169263a9059cbb926112579216908590600401613b63565b602060405180830381600087803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a99190613a5b565b5060006112b7886001612f53565b6065549091506000906001600160a01b03166338ed17396112d8858b613e11565b89858e8b6040518663ffffffff1660e01b81526004016112fc959493929190613d7c565b600060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113529190810190613996565b9050600080516020613ed88339815191528989606a60009054906101000a90046001600160a01b0316846001865161138a9190613e11565b8151811061139a5761139a613e85565b60200260200101516040516113b29493929190613b96565b60405180910390a180600182516113c99190613e11565b815181106113d9576113d9613e85565b602002602001015183945094505050509550959350505050565b606a5460009081906001600160a01b031633148061141b57506068546001600160a01b031633145b6114375760405162461bcd60e51b815260040161066b90613bf3565b606654604051636eb1769f60e11b815285916001600160a01b03808a169263dd62ed3e9261146c923092911690600401613b7c565b60206040518083038186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190613aea565b10156114cc576114cc8685612ecd565b836114d96001888861262f565b11156115235760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b604482015260640161066b565b6000611530876001612f53565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee9061156e908a908a9087908f908c90600401613d7c565b600060405180830381600087803b15801561158857600080fd5b505af115801561159c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c49190810190613996565b90506000816000815181106115db576115db613e85565b6020026020010151905060006305f5e100606b54836115fa9190613df2565b6116049190613dd0565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808d169263a9059cbb926116399216908590600401613b63565b602060405180830381600087803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190613a5b565b506001600160a01b038a1663a9059cbb8c836116a7868d613e11565b6116b19190613e11565b6040518363ffffffff1660e01b81526004016116ce929190613b63565b602060405180830381600087803b1580156116e857600080fd5b505af11580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117209190613a5b565b50606a54604051600080516020613ed883398151915291611752918d9186916001600160a01b03909116908e90613b96565b60405180910390a16117648183613db8565b9b909a5098505050505050505050565b606a5460009081906001600160a01b031633148061179c57506068546001600160a01b031633145b6117b85760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815286926001600160a01b039081169263dd62ed3e926117ef9230921690600401613b7c565b60206040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190613aea565b10156118cf5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261187b929116908890600401613b63565b602060405180830381600087803b15801561189557600080fd5b505af11580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190613a5b565b505b836118dc6000888861262f565b11156119265760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b604482015260640161066b565b6000611933876000612f53565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd9190613870565b6001600160a01b0316886001600160a01b03161415611a6b57606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a90611a0e908a908a9087908f908c90600401613d7c565b600060405180830381600087803b158015611a2857600080fd5b505af1158015611a3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a649190810190613996565b9050611afc565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee90611aa3908a908a9087908f908c90600401613d7c565b600060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611af99190810190613996565b90505b600081600081518110611b1157611b11613e85565b6020026020010151905060006305f5e100606b5483611b309190613df2565b611b3a9190613dd0565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611b729216908590600401613b63565b602060405180830381600087803b158015611b8c57600080fd5b505af1158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190613a5b565b506069546001600160a01b031663a9059cbb8c83611be2868d613e11565b611bec9190613e11565b6040518363ffffffff1660e01b8152600401611c09929190613b63565b602060405180830381600087803b158015611c2357600080fd5b505af1158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b9190613a5b565b50606a54604051600080516020613ed883398151915291611752916001600160a01b039091169085908e908e90613b96565b606a5460009081906001600160a01b0316331480611cb557506068546001600160a01b031633145b611cd15760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815287926001600160a01b039081169263dd62ed3e92611d089230921690600401613b7c565b60206040518083038186803b158015611d2057600080fd5b505afa158015611d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d589190613aea565b1015611de85760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611d94929116908990600401613b63565b602060405180830381600087803b158015611dae57600080fd5b505af1158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190613a5b565b505b83611df560008888612c36565b1015611e135760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b5487611e289190613df2565b611e329190613dd0565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611e6a9216908590600401613b63565b602060405180830381600087803b158015611e8457600080fd5b505af1158015611e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebc9190613a5b565b506000611eca886000612f53565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f549190613870565b6001600160a01b0316896001600160a01b03161415612009576065546001600160a01b031663676528d1611f88858b613e11565b89858e8b6040518663ffffffff1660e01b8152600401611fac959493929190613d7c565b600060405180830381600087803b158015611fc657600080fd5b505af1158015611fda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120029190810190613996565b90506120a1565b6065546001600160a01b03166338ed1739612024858b613e11565b89858e8b6040518663ffffffff1660e01b8152600401612048959493929190613d7c565b600060405180830381600087803b15801561206257600080fd5b505af1158015612076573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261209e9190810190613996565b90505b606a548151600080516020613ed8833981519152916001600160a01b0316908a908c90859061138a90600190613e11565b6000603782815481106120e7576120e7613e85565b6000918252602090912001546001600160a01b031692915050565b606a5460009081906001600160a01b031633148061212a57506068546001600160a01b031633145b6121465760405162461bcd60e51b815260040161066b90613bf3565b348461215b60016121556129a4565b84612c36565b10156121795760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b548361218e9190613df2565b6121989190613dd0565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156121d3573d6000803e3d6000fd5b5060006121e86121e16129a4565b6001612f53565b6065549091506000906001600160a01b031663a2a1623d6122098587613e11565b8a858d8c6040518663ffffffff1660e01b815260040161222c9493929190613d47565b6000604051808303818588803b15801561224557600080fd5b505af1158015612259573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526122829190810190613996565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059186916001600160a01b03169084906122c690600190613e11565b815181106122d6576122d6613e85565b6020026020010151604051612307939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1806001825161231e9190613e11565b8151811061232e5761232e613e85565b6020026020010151839550955050505050935093915050565b606a546001600160a01b031633148061236a57506068546001600160a01b031633145b6123865760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815283926001600160a01b039081169263dd62ed3e926123bd9230921690600401613b7c565b60206040518083038186803b1580156123d557600080fd5b505afa1580156123e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240d9190613aea565b101561249f5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261244b9291169060001990600401613b63565b602060405180830381600087803b15801561246557600080fd5b505af1158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190613a5b565b505b60006124ac836000612f53565b9050606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fc57600080fd5b505afa158015612510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125349190613870565b6001600160a01b0316836001600160a01b031614156125bd57606554604051633b158ab160e11b81526001600160a01b039091169063762b15629061258690859060009086908a904290600401613d7c565b600060405180830381600087803b1580156125a057600080fd5b505af11580156125b4573d6000803e3d6000fd5b50505050612629565b606554604051635c11d79560e01b81526001600160a01b0390911690635c11d795906125f690859060009086908a904290600401613d7c565b600060405180830381600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b505050505b50505050565b60008061263c8486612f53565b6065546040516307c0329d60e21b81529192506000916001600160a01b0390911690631f00ca74906126749087908690600401613d2e565b60006040518083038186803b15801561268c57600080fd5b505afa1580156126a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126c89190810190613996565b90506000816000815181106126df576126df613e85565b602002602001015190506305f5e100606b546305f5e1006127009190613db8565b61270a9083613df2565b6127149190613dd0565b93505050505b9392505050565b606a546001600160a01b031633148061274457506068546001600160a01b031633145b6127605760405162461bcd60e51b815260040161066b90613bf3565b6305f5e1008111156127b45760405162461bcd60e51b815260206004820152601960248201527f464545533a207377617020657863656564696e67203130302500000000000000604482015260640161066b565b606b55565b600054610100900460ff166127d45760005460ff16156127d8565b303b155b61283b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161066b565b600054610100900460ff1615801561285d576000805461ffff19166101011790555b6001600160a01b0384166128a15760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161066b565b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106128d7576128d7613e85565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060018160008151811061292957612929613e85565b60200260200101818152505061293f82826132b7565b5050606680546001600160a01b038087166001600160a01b0319928316811790935560658054831690931790925560688054821633179055606b859055606c8054928516929091169190911790558015612629576000805461ff001916905550505050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b1580156129e957600080fd5b505afa1580156129fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a219190613870565b905090565b606a5460009081906001600160a01b0316331480612a4e57506068546001600160a01b031633145b612a6a5760405162461bcd60e51b815260040161066b90613bf3565b6000612a776121e16129a4565b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490612ab5908a9087908d908c90600401613d47565b6000604051808303818588803b158015612ace57600080fd5b505af1158015612ae2573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612b0b9190810190613996565b9050600081600081518110612b2257612b22613e85565b6020026020010151905060006305f5e100606b5483612b419190613df2565b612b4b9190613dd0565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612b86573d6000803e3d6000fd5b506001600160a01b0389166108fc82612b9f8534613e11565b612ba99190613e11565b6040518115909202916000818181858888f19350505050158015612bd1573d6000803e3d6000fd5b50606a54604080518481526001600160a01b03909216602083015281018990527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059060600160405180910390a1612c288183613db8565b999098509650505050505050565b600080612c438486612f53565b60655460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90612c7b9087908690600401613d2e565b60006040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ccf9190810190613996565b905060008160018351612ce29190613e11565b81518110612cf257612cf2613e85565b602002602001015190506305f5e100606b546305f5e1006127009190613e11565b6033546001600160a01b03841660009081526035602052604081205490918391612d3d9086613df2565b612d479190613dd0565b612d519190613e11565b949350505050565b80471015612da95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612df6576040519150601f19603f3d011682016040523d82523d6000602084013e612dfb565b606091505b5050905080612e725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b612e728363a9059cbb60e01b8484604051602401612e96929190613b63565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132ec565b60665460405163095ea7b360e01b815283916001600160a01b038084169263095ea7b392612f019216908690600401613b63565b602060405180830381600087803b158015612f1b57600080fd5b505af1158015612f2f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126299190613a5b565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015612f9857600080fd5b505afa158015612fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd09190613870565b6001600160a01b0316836001600160a01b031614156130f857604080516002808252606082018352600092602083019080368337019050509050821561307a57838160008151811061302457613024613e85565b6001600160a01b039283166020918202929092010152606a5482519116908290600190811061305557613055613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250506130f1565b606a5481516001600160a01b0390911690829060009061309c5761309c613e85565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106130d0576130d0613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610d7c565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b15801561315f57600080fd5b505afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190613870565b816001815181106131aa576131aa613e85565b60200260200101906001600160a01b031690816001600160a01b031681525050821561323a5783816000815181106131e4576131e4613e85565b6001600160a01b039283166020918202929092010152606a5482519116908290600290811061321557613215613e85565b60200260200101906001600160a01b031690816001600160a01b03168152505061271a565b606a5481516001600160a01b0390911690829060009061325c5761325c613e85565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061329057613290613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166132de5760405162461bcd60e51b815260040161066b90613ce3565b6132e882826133be565b5050565b6000613341826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134fc9092919063ffffffff16565b805190915015612e72578080602001905181019061335f9190613a5b565b612e725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066b565b600054610100900460ff166133e55760405162461bcd60e51b815260040161066b90613ce3565b80518251146134515760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161066b565b60008251116134a25760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161066b565b60005b8251811015612e72576134ea8382815181106134c3576134c3613e85565b60200260200101518383815181106134dd576134dd613e85565b602002602001015161350b565b806134f481613e54565b9150506134a5565b6060612d5184846000856136e9565b6001600160a01b0382166135765760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161066b565b600081116135c65760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161066b565b6001600160a01b038216600090815260356020526040902054156136405760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161066b565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b03841690811790915560009081526035602052604090208190556033546136a8908290613db8565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac906136dd9084908490613b63565b60405180910390a15050565b60608247101561374a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066b565b6001600160a01b0385163b6137a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b600080866001600160a01b031685876040516137bd9190613b47565b60006040518083038185875af1925050503d80600081146137fa576040519150601f19603f3d011682016040523d82523d6000602084013e6137ff565b606091505b509150915061380f82828661381a565b979650505050505050565b6060831561382957508161271a565b8251156138395782518084602001fd5b8160405162461bcd60e51b815260040161066b9190613bc0565b60006020828403121561386557600080fd5b813561271a81613eb1565b60006020828403121561388257600080fd5b815161271a81613eb1565b6000806000606084860312156138a257600080fd5b83356138ad81613eb1565b925060208401356138bd81613eb1565b929592945050506040919091013590565b600080600080600060a086880312156138e657600080fd5b85356138f181613eb1565b9450602086013561390181613eb1565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561393457600080fd5b833561393f81613eb1565b925060208401359150604084013561395681613eb1565b809150509250925092565b60008060006060848603121561397657600080fd5b833561398181613eb1565b95602085013595506040909401359392505050565b600060208083850312156139a957600080fd5b825167ffffffffffffffff808211156139c157600080fd5b818501915085601f8301126139d557600080fd5b8151818111156139e7576139e7613e9b565b8060051b604051601f19603f83011681018181108582111715613a0c57613a0c613e9b565b604052828152858101935084860182860187018a1015613a2b57600080fd5b600095505b83861015613a4e578051855260019590950194938601938601613a30565b5098975050505050505050565b600060208284031215613a6d57600080fd5b815161271a81613ec9565b600080600060608486031215613a8d57600080fd5b83356138ad81613ec9565b60008060408385031215613aab57600080fd5b8235613ab681613eb1565b91506020830135613ac681613eb1565b809150509250929050565b600060208284031215613ae357600080fd5b5035919050565b600060208284031215613afc57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613b3c5781516001600160a01b031687529582019590820190600101613b17565b509495945050505050565b60008251613b59818460208701613e28565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020815260008251806020840152613bdf816040850160208701613e28565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b828152604060208201526000612d516040830184613b03565b848152608060208201526000613d606080830186613b03565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a060408201526000613d9b60a0830186613b03565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613dcb57613dcb613e6f565b500190565b600082613ded57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613e0c57613e0c613e6f565b500290565b600082821015613e2357613e23613e6f565b500390565b60005b83811015613e43578181015183820152602001613e2b565b838111156126295750506000910152565b6000600019821415613e6857613e68613e6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613ec657600080fd5b50565b8015158114613ec657600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106101cc5760003560e01c806388e5249f11610102578063c350a1b511610095578063eb6d3a1111610064578063eb6d3a11146105ce578063ed9705da146105e3578063f5c13653146105f6578063fd53fce01461061657600080fd5b8063c350a1b51461052d578063ce7c2ac21461054d578063d79779b214610583578063e33b7de3146105b957600080fd5b80639d76ea58116100d15780639d76ea58146104ad578063b698f044146104cd578063bd747678146104ed578063bf16f65a1461050d57600080fd5b806388e5249f146104245780638b83209b146104445780638f6e53b7146104645780639852595c1461047757600080fd5b8063406072a91161017a5780636a63f5ee116101495780636a63f5ee1461038f5780636e54a8a0146103af57806374cefd8a146103e457806380be66cf1461040457600080fd5b8063406072a91461030f57806348b750441461032f57806349bd5a5e1461034f57806365b8dbc01461036f57600080fd5b80630584aecf1461021157806311eb47dc1461024e578063144fa6d71461026e57806319165587146102905780631c293de5146102b05780633268cc56146102d05780633a98ef39146102f057600080fd5b3661020c577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610202929190613b63565b60405180910390a1005b600080fd5b34801561021d57600080fd5b50606854610231906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025a57600080fd5b50606c54610231906001600160a01b031681565b34801561027a57600080fd5b5061028e610289366004613853565b61062c565b005b34801561029c57600080fd5b5061028e6102ab366004613853565b610b82565b3480156102bc57600080fd5b5061028e6102cb366004613853565b610ca7565b3480156102dc57600080fd5b50606654610231906001600160a01b031681565b3480156102fc57600080fd5b506033545b604051908152602001610245565b34801561031b57600080fd5b5061030161032a366004613a98565b610d55565b34801561033b57600080fd5b5061028e61034a366004613a98565b610d82565b34801561035b57600080fd5b50606754610231906001600160a01b031681565b34801561037b57600080fd5b5061028e61038a366004613853565b610f41565b34801561039b57600080fd5b5061028e6103aa366004613853565b611052565b3480156103bb57600080fd5b506103cf6103ca3660046138ce565b6110ff565b60408051928352602083019190915201610245565b3480156103f057600080fd5b506103cf6103ff3660046138ce565b6113f3565b34801561041057600080fd5b506103cf61041f3660046138ce565b611774565b34801561043057600080fd5b506103cf61043f3660046138ce565b611c8d565b34801561045057600080fd5b5061023161045f366004613ad1565b6120d2565b6103cf610472366004613961565b612102565b34801561048357600080fd5b50610301610492366004613853565b6001600160a01b031660009081526036602052604090205490565b3480156104b957600080fd5b50606a54610231906001600160a01b031681565b3480156104d957600080fd5b5061028e6104e836600461388d565b612347565b3480156104f957600080fd5b50610301610508366004613a78565b61262f565b34801561051957600080fd5b5061028e610528366004613ad1565b612721565b34801561053957600080fd5b5061028e61054836600461391f565b6127b9565b34801561055957600080fd5b50610301610568366004613853565b6001600160a01b031660009081526035602052604090205490565b34801561058f57600080fd5b5061030161059e366004613853565b6001600160a01b031660009081526038602052604090205490565b3480156105c557600080fd5b50603454610301565b3480156105da57600080fd5b506102316129a4565b6103cf6105f1366004613961565b612a26565b34801561060257600080fd5b50610301610611366004613a78565b612c36565b34801561062257600080fd5b50610301606b5481565b606a546001600160a01b031633148061064f57506068546001600160a01b031633145b6106745760405162461bcd60e51b815260040161066b90613bf3565b60405180910390fd5b6001600160a01b0381166106c15760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161066b565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b15801561072d57600080fd5b505afa158015610741573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107659190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b1580156107b757600080fd5b505afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190613870565b6040518363ffffffff1660e01b815260040161080c929190613b7c565b602060405180830381600087803b15801561082657600080fd5b505af1925050508015610856575060408051601f3d908101601f1916820190925261085391810190613870565b60015b6109de57606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561093257600080fd5b505afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190613870565b6040518363ffffffff1660e01b8152600401610987929190613b7c565b60206040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190613870565b9050610b5f565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190613870565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190613870565b6040518363ffffffff1660e01b8152600401610b0c929190613b7c565b60206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190613870565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610bb75760405162461bcd60e51b815260040161066b90613c1b565b6000610bc260345490565b610bcc9047613db8565b90506000610bf98383610bf4866001600160a01b031660009081526036602052604090205490565b612d13565b905080610c185760405162461bcd60e51b815260040161066b90613c61565b6001600160a01b03831660009081526036602052604081208054839290610c40908490613db8565b925050819055508060346000828254610c599190613db8565b90915550610c6990508382612d59565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610c9a929190613b63565b60405180910390a1505050565b606a546001600160a01b0316331480610cca57506068546001600160a01b031633145b610ce65760405162461bcd60e51b815260040161066b90613bf3565b6001600160a01b038116610d335760405162461bcd60e51b81526020600482015260146024820152732aa8222fa0a226a4a71d103d32b9379030b2323960611b604482015260640161066b565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610db75760405162461bcd60e51b815260040161066b90613c1b565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610e0f57600080fd5b505afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190613aea565b610e519190613db8565b90506000610e648383610bf48787610d55565b905080610e835760405162461bcd60e51b815260040161066b90613c61565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610eba908490613db8565b90915550506001600160a01b03841660009081526038602052604081208054839290610ee7908490613db8565b90915550610ef89050848483612e77565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610f33929190613b63565b60405180910390a250505050565b606a546001600160a01b0316331480610f6457506068546001600160a01b031633145b610f805760405162461bcd60e51b815260040161066b90613bf3565b6065546001600160a01b0382811691161415610fef5760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161066b565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b15801561072d57600080fd5b606a546001600160a01b031633148061107557506068546001600160a01b031633145b6110915760405162461bcd60e51b815260040161066b90613bf3565b6001600160a01b0381166110dd5760405162461bcd60e51b81526020600482015260136024820152722aa8222faba0a6261d103d32b9379030b2323960691b604482015260640161066b565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b606a5460009081906001600160a01b031633148061112757506068546001600160a01b031633145b6111435760405162461bcd60e51b815260040161066b90613bf3565b606654604051636eb1769f60e11b815286916001600160a01b03808a169263dd62ed3e92611178923092911690600401613b7c565b60206040518083038186803b15801561119057600080fd5b505afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190613aea565b10156111d8576111d88686612ecd565b836111e560018888612c36565b10156112035760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b54876112189190613df2565b6112229190613dd0565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808a169263a9059cbb926112579216908590600401613b63565b602060405180830381600087803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a99190613a5b565b5060006112b7886001612f53565b6065549091506000906001600160a01b03166338ed17396112d8858b613e11565b89858e8b6040518663ffffffff1660e01b81526004016112fc959493929190613d7c565b600060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113529190810190613996565b9050600080516020613ed88339815191528989606a60009054906101000a90046001600160a01b0316846001865161138a9190613e11565b8151811061139a5761139a613e85565b60200260200101516040516113b29493929190613b96565b60405180910390a180600182516113c99190613e11565b815181106113d9576113d9613e85565b602002602001015183945094505050509550959350505050565b606a5460009081906001600160a01b031633148061141b57506068546001600160a01b031633145b6114375760405162461bcd60e51b815260040161066b90613bf3565b606654604051636eb1769f60e11b815285916001600160a01b03808a169263dd62ed3e9261146c923092911690600401613b7c565b60206040518083038186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190613aea565b10156114cc576114cc8685612ecd565b836114d96001888861262f565b11156115235760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b604482015260640161066b565b6000611530876001612f53565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee9061156e908a908a9087908f908c90600401613d7c565b600060405180830381600087803b15801561158857600080fd5b505af115801561159c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c49190810190613996565b90506000816000815181106115db576115db613e85565b6020026020010151905060006305f5e100606b54836115fa9190613df2565b6116049190613dd0565b606c5460405163a9059cbb60e01b81529192506001600160a01b03808d169263a9059cbb926116399216908590600401613b63565b602060405180830381600087803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190613a5b565b506001600160a01b038a1663a9059cbb8c836116a7868d613e11565b6116b19190613e11565b6040518363ffffffff1660e01b81526004016116ce929190613b63565b602060405180830381600087803b1580156116e857600080fd5b505af11580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117209190613a5b565b50606a54604051600080516020613ed883398151915291611752918d9186916001600160a01b03909116908e90613b96565b60405180910390a16117648183613db8565b9b909a5098505050505050505050565b606a5460009081906001600160a01b031633148061179c57506068546001600160a01b031633145b6117b85760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815286926001600160a01b039081169263dd62ed3e926117ef9230921690600401613b7c565b60206040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190613aea565b10156118cf5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261187b929116908890600401613b63565b602060405180830381600087803b15801561189557600080fd5b505af11580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190613a5b565b505b836118dc6000888861262f565b11156119265760405162461bcd60e51b8152602060048201526019602482015278125394d551919250d251539517d25394155517d05353d55395603a1b604482015260640161066b565b6000611933876000612f53565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd9190613870565b6001600160a01b0316886001600160a01b03161415611a6b57606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a90611a0e908a908a9087908f908c90600401613d7c565b600060405180830381600087803b158015611a2857600080fd5b505af1158015611a3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a649190810190613996565b9050611afc565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee90611aa3908a908a9087908f908c90600401613d7c565b600060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611af99190810190613996565b90505b600081600081518110611b1157611b11613e85565b6020026020010151905060006305f5e100606b5483611b309190613df2565b611b3a9190613dd0565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611b729216908590600401613b63565b602060405180830381600087803b158015611b8c57600080fd5b505af1158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190613a5b565b506069546001600160a01b031663a9059cbb8c83611be2868d613e11565b611bec9190613e11565b6040518363ffffffff1660e01b8152600401611c09929190613b63565b602060405180830381600087803b158015611c2357600080fd5b505af1158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b9190613a5b565b50606a54604051600080516020613ed883398151915291611752916001600160a01b039091169085908e908e90613b96565b606a5460009081906001600160a01b0316331480611cb557506068546001600160a01b031633145b611cd15760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815287926001600160a01b039081169263dd62ed3e92611d089230921690600401613b7c565b60206040518083038186803b158015611d2057600080fd5b505afa158015611d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d589190613aea565b1015611de85760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611d94929116908990600401613b63565b602060405180830381600087803b158015611dae57600080fd5b505af1158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190613a5b565b505b83611df560008888612c36565b1015611e135760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b5487611e289190613df2565b611e329190613dd0565b606954606c5460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611e6a9216908590600401613b63565b602060405180830381600087803b158015611e8457600080fd5b505af1158015611e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebc9190613a5b565b506000611eca886000612f53565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f549190613870565b6001600160a01b0316896001600160a01b03161415612009576065546001600160a01b031663676528d1611f88858b613e11565b89858e8b6040518663ffffffff1660e01b8152600401611fac959493929190613d7c565b600060405180830381600087803b158015611fc657600080fd5b505af1158015611fda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120029190810190613996565b90506120a1565b6065546001600160a01b03166338ed1739612024858b613e11565b89858e8b6040518663ffffffff1660e01b8152600401612048959493929190613d7c565b600060405180830381600087803b15801561206257600080fd5b505af1158015612076573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261209e9190810190613996565b90505b606a548151600080516020613ed8833981519152916001600160a01b0316908a908c90859061138a90600190613e11565b6000603782815481106120e7576120e7613e85565b6000918252602090912001546001600160a01b031692915050565b606a5460009081906001600160a01b031633148061212a57506068546001600160a01b031633145b6121465760405162461bcd60e51b815260040161066b90613bf3565b348461215b60016121556129a4565b84612c36565b10156121795760405162461bcd60e51b815260040161066b90613cac565b60006305f5e100606b548361218e9190613df2565b6121989190613dd0565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156121d3573d6000803e3d6000fd5b5060006121e86121e16129a4565b6001612f53565b6065549091506000906001600160a01b031663a2a1623d6122098587613e11565b8a858d8c6040518663ffffffff1660e01b815260040161222c9493929190613d47565b6000604051808303818588803b15801561224557600080fd5b505af1158015612259573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526122829190810190613996565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059186916001600160a01b03169084906122c690600190613e11565b815181106122d6576122d6613e85565b6020026020010151604051612307939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1806001825161231e9190613e11565b8151811061232e5761232e613e85565b6020026020010151839550955050505050935093915050565b606a546001600160a01b031633148061236a57506068546001600160a01b031633145b6123865760405162461bcd60e51b815260040161066b90613bf3565b606954606654604051636eb1769f60e11b815283926001600160a01b039081169263dd62ed3e926123bd9230921690600401613b7c565b60206040518083038186803b1580156123d557600080fd5b505afa1580156123e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240d9190613aea565b101561249f5760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261244b9291169060001990600401613b63565b602060405180830381600087803b15801561246557600080fd5b505af1158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190613a5b565b505b60006124ac836000612f53565b9050606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fc57600080fd5b505afa158015612510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125349190613870565b6001600160a01b0316836001600160a01b031614156125bd57606554604051633b158ab160e11b81526001600160a01b039091169063762b15629061258690859060009086908a904290600401613d7c565b600060405180830381600087803b1580156125a057600080fd5b505af11580156125b4573d6000803e3d6000fd5b50505050612629565b606554604051635c11d79560e01b81526001600160a01b0390911690635c11d795906125f690859060009086908a904290600401613d7c565b600060405180830381600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b505050505b50505050565b60008061263c8486612f53565b6065546040516307c0329d60e21b81529192506000916001600160a01b0390911690631f00ca74906126749087908690600401613d2e565b60006040518083038186803b15801561268c57600080fd5b505afa1580156126a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126c89190810190613996565b90506000816000815181106126df576126df613e85565b602002602001015190506305f5e100606b546305f5e1006127009190613db8565b61270a9083613df2565b6127149190613dd0565b93505050505b9392505050565b606a546001600160a01b031633148061274457506068546001600160a01b031633145b6127605760405162461bcd60e51b815260040161066b90613bf3565b6305f5e1008111156127b45760405162461bcd60e51b815260206004820152601960248201527f464545533a207377617020657863656564696e67203130302500000000000000604482015260640161066b565b606b55565b600054610100900460ff166127d45760005460ff16156127d8565b303b155b61283b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161066b565b600054610100900460ff1615801561285d576000805461ffff19166101011790555b6001600160a01b0384166128a15760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161066b565b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106128d7576128d7613e85565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060018160008151811061292957612929613e85565b60200260200101818152505061293f82826132b7565b5050606680546001600160a01b038087166001600160a01b0319928316811790935560658054831690931790925560688054821633179055606b859055606c8054928516929091169190911790558015612629576000805461ff001916905550505050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b1580156129e957600080fd5b505afa1580156129fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a219190613870565b905090565b606a5460009081906001600160a01b0316331480612a4e57506068546001600160a01b031633145b612a6a5760405162461bcd60e51b815260040161066b90613bf3565b6000612a776121e16129a4565b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490612ab5908a9087908d908c90600401613d47565b6000604051808303818588803b158015612ace57600080fd5b505af1158015612ae2573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612b0b9190810190613996565b9050600081600081518110612b2257612b22613e85565b6020026020010151905060006305f5e100606b5483612b419190613df2565b612b4b9190613dd0565b606c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612b86573d6000803e3d6000fd5b506001600160a01b0389166108fc82612b9f8534613e11565b612ba99190613e11565b6040518115909202916000818181858888f19350505050158015612bd1573d6000803e3d6000fd5b50606a54604080518481526001600160a01b03909216602083015281018990527fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059060600160405180910390a1612c288183613db8565b999098509650505050505050565b600080612c438486612f53565b60655460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90612c7b9087908690600401613d2e565b60006040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ccf9190810190613996565b905060008160018351612ce29190613e11565b81518110612cf257612cf2613e85565b602002602001015190506305f5e100606b546305f5e1006127009190613e11565b6033546001600160a01b03841660009081526035602052604081205490918391612d3d9086613df2565b612d479190613dd0565b612d519190613e11565b949350505050565b80471015612da95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612df6576040519150601f19603f3d011682016040523d82523d6000602084013e612dfb565b606091505b5050905080612e725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b612e728363a9059cbb60e01b8484604051602401612e96929190613b63565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132ec565b60665460405163095ea7b360e01b815283916001600160a01b038084169263095ea7b392612f019216908690600401613b63565b602060405180830381600087803b158015612f1b57600080fd5b505af1158015612f2f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126299190613a5b565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015612f9857600080fd5b505afa158015612fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd09190613870565b6001600160a01b0316836001600160a01b031614156130f857604080516002808252606082018352600092602083019080368337019050509050821561307a57838160008151811061302457613024613e85565b6001600160a01b039283166020918202929092010152606a5482519116908290600190811061305557613055613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250506130f1565b606a5481516001600160a01b0390911690829060009061309c5761309c613e85565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106130d0576130d0613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610d7c565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b15801561315f57600080fd5b505afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190613870565b816001815181106131aa576131aa613e85565b60200260200101906001600160a01b031690816001600160a01b031681525050821561323a5783816000815181106131e4576131e4613e85565b6001600160a01b039283166020918202929092010152606a5482519116908290600290811061321557613215613e85565b60200260200101906001600160a01b031690816001600160a01b03168152505061271a565b606a5481516001600160a01b0390911690829060009061325c5761325c613e85565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061329057613290613e85565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166132de5760405162461bcd60e51b815260040161066b90613ce3565b6132e882826133be565b5050565b6000613341826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134fc9092919063ffffffff16565b805190915015612e72578080602001905181019061335f9190613a5b565b612e725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066b565b600054610100900460ff166133e55760405162461bcd60e51b815260040161066b90613ce3565b80518251146134515760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161066b565b60008251116134a25760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161066b565b60005b8251811015612e72576134ea8382815181106134c3576134c3613e85565b60200260200101518383815181106134dd576134dd613e85565b602002602001015161350b565b806134f481613e54565b9150506134a5565b6060612d5184846000856136e9565b6001600160a01b0382166135765760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161066b565b600081116135c65760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161066b565b6001600160a01b038216600090815260356020526040902054156136405760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161066b565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b03841690811790915560009081526035602052604090208190556033546136a8908290613db8565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac906136dd9084908490613b63565b60405180910390a15050565b60608247101561374a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066b565b6001600160a01b0385163b6137a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b600080866001600160a01b031685876040516137bd9190613b47565b60006040518083038185875af1925050503d80600081146137fa576040519150601f19603f3d011682016040523d82523d6000602084013e6137ff565b606091505b509150915061380f82828661381a565b979650505050505050565b6060831561382957508161271a565b8251156138395782518084602001fd5b8160405162461bcd60e51b815260040161066b9190613bc0565b60006020828403121561386557600080fd5b813561271a81613eb1565b60006020828403121561388257600080fd5b815161271a81613eb1565b6000806000606084860312156138a257600080fd5b83356138ad81613eb1565b925060208401356138bd81613eb1565b929592945050506040919091013590565b600080600080600060a086880312156138e657600080fd5b85356138f181613eb1565b9450602086013561390181613eb1565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561393457600080fd5b833561393f81613eb1565b925060208401359150604084013561395681613eb1565b809150509250925092565b60008060006060848603121561397657600080fd5b833561398181613eb1565b95602085013595506040909401359392505050565b600060208083850312156139a957600080fd5b825167ffffffffffffffff808211156139c157600080fd5b818501915085601f8301126139d557600080fd5b8151818111156139e7576139e7613e9b565b8060051b604051601f19603f83011681018181108582111715613a0c57613a0c613e9b565b604052828152858101935084860182860187018a1015613a2b57600080fd5b600095505b83861015613a4e578051855260019590950194938601938601613a30565b5098975050505050505050565b600060208284031215613a6d57600080fd5b815161271a81613ec9565b600080600060608486031215613a8d57600080fd5b83356138ad81613ec9565b60008060408385031215613aab57600080fd5b8235613ab681613eb1565b91506020830135613ac681613eb1565b809150509250929050565b600060208284031215613ae357600080fd5b5035919050565b600060208284031215613afc57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015613b3c5781516001600160a01b031687529582019590820190600101613b17565b509495945050505050565b60008251613b59818460208701613e28565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020815260008251806020840152613bdf816040850160208701613e28565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b828152604060208201526000612d516040830184613b03565b848152608060208201526000613d606080830186613b03565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a060408201526000613d9b60a0830186613b03565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613dcb57613dcb613e6f565b500190565b600082613ded57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613e0c57613e0c613e6f565b500290565b600082821015613e2357613e23613e6f565b500390565b60005b83811015613e43578181015183820152602001613e2b565b838111156126295750506000910152565b6000600019821415613e6857613e68613e6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613ec657600080fd5b50565b8015158114613ec657600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalShares",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_shares",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_released",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_payees",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 8779,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IJoeRouter02)14610"
      },
      {
        "astId": 8781,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "routerAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8783,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 8785,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "admin0xB",
        "offset": 0,
        "slot": "104",
        "type": "t_address_payable"
      },
      {
        "astId": 8788,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "token",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 8790,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 8792,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "swapTaxFee",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 8794,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "swapTaxPool",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 8796,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "sellTax",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)14610": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
