{
  "address": "0x99F06105113F8652D60e94A6bf430f9E0fDA729b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwappedNative",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b20ef4c29d7a558c06066f316f556268b4789f294d15ece481ea0457079743b",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x99F06105113F8652D60e94A6bf430f9E0fDA729b",
    "transactionIndex": 33,
    "gasUsed": "2850405",
    "logsBloom": "0x
    "blockHash": "0x965473faace94df477172553fa43170d7718bd372febeadafe0cf4954f2b497a",
    "transactionHash": "0x6b20ef4c29d7a558c06066f316f556268b4789f294d15ece481ea0457079743b",
    "logs": [],
    "blockNumber": 10427603,
    "cumulativeGasUsed": "9188397",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d03b0fcf6c2113db243b4d7e87280464",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwappedNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LiquidityRouter.sol\":\"LiquidityRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable, PaymentSplitterUpgradeable {\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address payable public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n    // ----- Constructor -----\\n    function initialize(address _router) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = payable(msg.sender);\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsOut(inputAmount, path);\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsIn(outputAmount, path);\\n    }\\n\\n    function wrappedNative() external view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        token.transfer(receiver, amountInMax - amountInActual);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr);\\n        }\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr);\\n        }\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        uint256 amountIn = msg.value;\\n        address[] memory path = getPath(this.wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{ value: amountIn }(\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        // uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(this.wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        // payable(receiver).transfer(msg.value - amountInActual);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, uint256(2**256 - 1));\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xc4ad6cd79d54ccbda2652aaaa488b3654c2c8f85c33232ed6162441b4d7f8580\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061329b806100206000396000f3fe60806040526004361061015a5760003560e01c806388e5249f116100c1578063c4d66de81161007a578063c4d66de814610413578063ce7c2ac214610433578063d79779b214610469578063e33b7de31461049f578063eb6d3a11146104b4578063ed9705da146104c9578063f5c13653146104dc57600080fd5b806388e5249f1461033d5780638b83209b1461035d5780638f6e53b71461037d5780639852595c146103905780639d76ea58146103c6578063bd747678146103e657600080fd5b806348b750441161011357806348b750441461027d57806349bd5a5e1461029d57806365b8dbc0146102bd5780636e54a8a0146102dd57806374cefd8a146102fd57806380be66cf1461031d57600080fd5b80630584aecf1461019f578063144fa6d7146101dc57806319165587146101fe5780633268cc561461021e5780633a98ef391461023e578063406072a91461025d57600080fd5b3661019a577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610190929190612ee9565b60405180910390a1005b600080fd5b3480156101ab57600080fd5b506068546101bf906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e857600080fd5b506101fc6101f7366004612c3b565b6104fc565b005b34801561020a57600080fd5b506101fc610219366004612c3b565b610a52565b34801561022a57600080fd5b506066546101bf906001600160a01b031681565b34801561024a57600080fd5b506033545b6040519081526020016101d3565b34801561026957600080fd5b5061024f610278366004612e1e565b610b77565b34801561028957600080fd5b506101fc610298366004612e1e565b610ba4565b3480156102a957600080fd5b506067546101bf906001600160a01b031681565b3480156102c957600080fd5b506101fc6102d8366004612c3b565b610d63565b3480156102e957600080fd5b506101fc6102f8366004612c75565b610e74565b34801561030957600080fd5b506101fc610318366004612c75565b611059565b34801561032957600080fd5b506101fc610338366004612c75565b6112bd565b34801561034957600080fd5b506101fc610358366004612c75565b6116cb565b34801561036957600080fd5b506101bf610378366004612e57565b611a2a565b6101fc61038b366004612cc6565b611a5a565b34801561039c57600080fd5b5061024f6103ab366004612c3b565b6001600160a01b031660009081526036602052604090205490565b3480156103d257600080fd5b50606a546101bf906001600160a01b031681565b3480156103f257600080fd5b50610406610401366004612ddd565b611c44565b6040516101d39190612f46565b34801561041f57600080fd5b506101fc61042e366004612c3b565b611ce4565b34801561043f57600080fd5b5061024f61044e366004612c3b565b6001600160a01b031660009081526035602052604090205490565b34801561047557600080fd5b5061024f610484366004612c3b565b6001600160a01b031660009081526038602052604090205490565b3480156104ab57600080fd5b5060345461024f565b3480156104c057600080fd5b506101bf611eb8565b6101fc6104d7366004612cc6565b611f3a565b3480156104e857600080fd5b506104066104f7366004612ddd565b6120bc565b606a546001600160a01b031633148061051f57506068546001600160a01b031633145b6105445760405162461bcd60e51b815260040161053b90612fbd565b60405180910390fd5b6001600160a01b0381166105915760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161053b565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612c58565b6040518363ffffffff1660e01b81526004016106dc929190612f02565b602060405180830381600087803b1580156106f657600080fd5b505af1925050508015610726575060408051601f3d908101601f1916820190925261072391810190612c58565b60015b6108ae57606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561077857600080fd5b505afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190612c58565b6040518363ffffffff1660e01b8152600401610857929190612f02565b60206040518083038186803b15801561086f57600080fd5b505afa158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612c58565b9050610a2f565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190612c58565b6040518363ffffffff1660e01b81526004016109dc929190612f02565b60206040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190612c58565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610a875760405162461bcd60e51b815260040161053b90612fe5565b6000610a9260345490565b610a9c904761314b565b90506000610ac98383610ac4866001600160a01b031660009081526036602052604090205490565b6120fd565b905080610ae85760405162461bcd60e51b815260040161053b9061302b565b6001600160a01b03831660009081526036602052604081208054839290610b1090849061314b565b925050819055508060346000828254610b29919061314b565b90915550610b3990508382612143565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610b6a929190612ee9565b60405180910390a1505050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610bd95760405162461bcd60e51b815260040161053b90612fe5565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c699190612e70565b610c73919061314b565b90506000610c868383610ac48787610b77565b905080610ca55760405162461bcd60e51b815260040161053b9061302b565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610cdc90849061314b565b90915550506001600160a01b03841660009081526038602052604081208054839290610d0990849061314b565b90915550610d1a9050848483612261565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610d55929190612ee9565b60405180910390a250505050565b606a546001600160a01b0316331480610d8657506068546001600160a01b031633145b610da25760405162461bcd60e51b815260040161053b90612fbd565b6065546001600160a01b0382811691161415610e115760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161053b565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b1580156105fd57600080fd5b606a546001600160a01b0316331480610e9757506068546001600160a01b031633145b610eb35760405162461bcd60e51b815260040161053b90612fbd565b606654604051636eb1769f60e11b815284916001600160a01b038088169263dd62ed3e92610ee8923092911690600401612f02565b60206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190612e70565b1015610f4757610f47846122b7565b6000610f5485600161233f565b6065546040516338ed173960e01b81529192506000916001600160a01b03909116906338ed173990610f92908890889087908d908a9060040161310f565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe89190810190612cfb565b905060008051602061326f8339815191528686606a60009054906101000a90046001600160a01b0316846001865161102091906131a4565b815181106110305761103061321c565b60200260200101516040516110489493929190612f1c565b60405180910390a150505050505050565b606a546001600160a01b031633148061107c57506068546001600160a01b031633145b6110985760405162461bcd60e51b815260040161053b90612fbd565b606654604051636eb1769f60e11b815283916001600160a01b038088169263dd62ed3e926110cd923092911690600401612f02565b60206040518083038186803b1580156110e557600080fd5b505afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190612e70565b101561112c5761112c846122b7565b600061113985600161233f565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee90611177908890889087908d908a9060040161310f565b600060405180830381600087803b15801561119157600080fd5b505af11580156111a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111cd9190810190612cfb565b90506000816000815181106111e4576111e461321c565b60200260200101519050866001600160a01b031663a9059cbb89838861120a91906131a4565b6040518363ffffffff1660e01b8152600401611227929190612ee9565b602060405180830381600087803b15801561124157600080fd5b505af1158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612dc0565b50606a5460405160008051602061326f833981519152916112ab918a9185916001600160a01b03909116908b90612f1c565b60405180910390a15050505050505050565b606a546001600160a01b03163314806112e057506068546001600160a01b031633145b6112fc5760405162461bcd60e51b815260040161053b90612fbd565b606954606654604051636eb1769f60e11b815284926001600160a01b039081169263dd62ed3e926113339230921690600401612f02565b60206040518083038186803b15801561134b57600080fd5b505afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190612e70565b10156114155760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926113c19291169060001990600401612ee9565b602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612dc0565b505b600061142285600061233f565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190612c58565b6001600160a01b0316866001600160a01b0316141561155a57606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a906114fd908890889087908d908a9060040161310f565b600060405180830381600087803b15801561151757600080fd5b505af115801561152b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115539190810190612cfb565b90506115eb565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee90611592908890889087908d908a9060040161310f565b600060405180830381600087803b1580156115ac57600080fd5b505af11580156115c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e89190810190612cfb565b90505b6000816000815181106116005761160061321c565b60209081029190910101516069549091506001600160a01b031663a9059cbb8961162a84896131a4565b6040518363ffffffff1660e01b8152600401611647929190612ee9565b602060405180830381600087803b15801561166157600080fd5b505af1158015611675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116999190612dc0565b50606a5460405160008051602061326f833981519152916112ab916001600160a01b039091169084908b908b90612f1c565b606a546001600160a01b03163314806116ee57506068546001600160a01b031633145b61170a5760405162461bcd60e51b815260040161053b90612fbd565b606954606654604051636eb1769f60e11b815285926001600160a01b039081169263dd62ed3e926117419230921690600401612f02565b60206040518083038186803b15801561175957600080fd5b505afa15801561176d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117919190612e70565b10156118235760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926117cf9291169060001990600401612ee9565b602060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118219190612dc0565b505b600061183085600061233f565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190612c58565b6001600160a01b0316866001600160a01b031614156119685760655460405163676528d160e01b81526001600160a01b039091169063676528d19061190b908890889087908d908a9060040161310f565b600060405180830381600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119619190810190612cfb565b90506119f9565b6065546040516338ed173960e01b81526001600160a01b03909116906338ed1739906119a0908890889087908d908a9060040161310f565b600060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f69190810190612cfb565b90505b606a54815160008051602061326f833981519152916001600160a01b031690879089908590611020906001906131a4565b600060378281548110611a3f57611a3f61321c565b6000918252602090912001546001600160a01b031692915050565b606a546001600160a01b0316331480611a7d57506068546001600160a01b031633145b611a995760405162461bcd60e51b815260040161053b90612fbd565b60003490506000611b1b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b158015611adc57600080fd5b505afa158015611af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b149190612c58565b600161233f565b60655460405163a2a1623d60e01b81529192506000916001600160a01b039091169063a2a1623d908590611b5990899087908c908b906004016130da565b6000604051808303818588803b158015611b7257600080fd5b505af1158015611b86573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611baf9190810190612cfb565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059185916001600160a01b0316908490611bf3906001906131a4565b81518110611c0357611c0361321c565b6020026020010151604051611c34939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1505050505050565b60606000611c52848661233f565b6065546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490611c8590869085906004016130c1565b60006040518083038186803b158015611c9d57600080fd5b505afa158015611cb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cd99190810190612cfb565b9150505b9392505050565b600054610100900460ff16611cff5760005460ff1615611d03565b303b155b611d665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161053b565b600054610100900460ff16158015611d88576000805461ffff19166101011790555b6001600160a01b038216611dcc5760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161053b565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110611e0257611e0261321c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050600181600081518110611e5457611e5461321c565b602002602001018181525050611e6a82826126a3565b5050606680546001600160a01b0384166001600160a01b0319918216811790925560658054821690921790915560688054909116331790558015611eb4576000805461ff00191690555b5050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015611efd57600080fd5b505afa158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190612c58565b905090565b606a546001600160a01b0316331480611f5d57506068546001600160a01b031633145b611f795760405162461bcd60e51b815260040161053b90612fbd565b6000611fb7306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b158015611adc57600080fd5b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490611ff590889087908b908a906004016130da565b6000604051808303818588803b15801561200e57600080fd5b505af1158015612022573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261204b9190810190612cfb565b90506000816000815181106120625761206261321c565b602090810291909101810151606a54604080518381526001600160a01b039092169382019390935291820187905291507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba80590606001611c34565b606060006120ca848661233f565b60655460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f90611c8590869085906004016130c1565b6033546001600160a01b038416600090815260356020526040812054909183916121279086613185565b6121319190613163565b61213b91906131a4565b949350505050565b804710156121935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161053b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146121e0576040519150601f19603f3d011682016040523d82523d6000602084013e6121e5565b606091505b505090508061225c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161053b565b505050565b61225c8363a9059cbb60e01b8484604051602401612280929190612ee9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526126d4565b60665460405163095ea7b360e01b815282916001600160a01b038084169263095ea7b3926122ed92169060001990600401612ee9565b602060405180830381600087803b15801561230757600080fd5b505af115801561231b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190612dc0565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b15801561238457600080fd5b505afa158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc9190612c58565b6001600160a01b0316836001600160a01b031614156124e45760408051600280825260608201835260009260208301908036833701905050905082156124665783816000815181106124105761241061321c565b6001600160a01b039283166020918202929092010152606a548251911690829060019081106124415761244161321c565b60200260200101906001600160a01b031690816001600160a01b0316815250506124dd565b606a5481516001600160a01b039091169082906000906124885761248861321c565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106124bc576124bc61321c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610b9e565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b15801561254b57600080fd5b505afa15801561255f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125839190612c58565b816001815181106125965761259661321c565b60200260200101906001600160a01b031690816001600160a01b03168152505082156126265783816000815181106125d0576125d061321c565b6001600160a01b039283166020918202929092010152606a548251911690829060029081106126015761260161321c565b60200260200101906001600160a01b031690816001600160a01b031681525050611cdd565b606a5481516001600160a01b039091169082906000906126485761264861321c565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061267c5761267c61321c565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166126ca5760405162461bcd60e51b815260040161053b90613076565b611eb482826127a6565b6000612729826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128e49092919063ffffffff16565b80519091501561225c57808060200190518101906127479190612dc0565b61225c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161053b565b600054610100900460ff166127cd5760405162461bcd60e51b815260040161053b90613076565b80518251146128395760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161053b565b600082511161288a5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161053b565b60005b825181101561225c576128d28382815181106128ab576128ab61321c565b60200260200101518383815181106128c5576128c561321c565b60200260200101516128f3565b806128dc816131eb565b91505061288d565b606061213b8484600085612ad1565b6001600160a01b03821661295e5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161053b565b600081116129ae5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161053b565b6001600160a01b03821660009081526035602052604090205415612a285760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161053b565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152603560205260409020819055603354612a9090829061314b565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90612ac59084908490612ee9565b60405180910390a15050565b606082471015612b325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161053b565b6001600160a01b0385163b612b895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161053b565b600080866001600160a01b03168587604051612ba59190612ecd565b60006040518083038185875af1925050503d8060008114612be2576040519150601f19603f3d011682016040523d82523d6000602084013e612be7565b606091505b5091509150612bf7828286612c02565b979650505050505050565b60608315612c11575081611cdd565b825115612c215782518084602001fd5b8160405162461bcd60e51b815260040161053b9190612f8a565b600060208284031215612c4d57600080fd5b8135611cdd81613248565b600060208284031215612c6a57600080fd5b8151611cdd81613248565b600080600080600060a08688031215612c8d57600080fd5b8535612c9881613248565b94506020860135612ca881613248565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215612cdb57600080fd5b8335612ce681613248565b95602085013595506040909401359392505050565b60006020808385031215612d0e57600080fd5b825167ffffffffffffffff80821115612d2657600080fd5b818501915085601f830112612d3a57600080fd5b815181811115612d4c57612d4c613232565b8060051b604051601f19603f83011681018181108582111715612d7157612d71613232565b604052828152858101935084860182860187018a1015612d9057600080fd5b600095505b83861015612db3578051855260019590950194938601938601612d95565b5098975050505050505050565b600060208284031215612dd257600080fd5b8151611cdd81613260565b600080600060608486031215612df257600080fd5b8335612dfd81613260565b92506020840135612e0d81613248565b929592945050506040919091013590565b60008060408385031215612e3157600080fd5b8235612e3c81613248565b91506020830135612e4c81613248565b809150509250929050565b600060208284031215612e6957600080fd5b5035919050565b600060208284031215612e8257600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612ec25781516001600160a01b031687529582019590820190600101612e9d565b509495945050505050565b60008251612edf8184602087016131bb565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b81811015612f7e57835183529284019291840191600101612f62565b50909695505050505050565b6020815260008251806020840152612fa98160408501602087016131bb565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b82815260406020820152600061213b6040830184612e89565b8481526080602082015260006130f36080830186612e89565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061312e60a0830186612e89565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561315e5761315e613206565b500190565b60008261318057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561319f5761319f613206565b500290565b6000828210156131b6576131b6613206565b500390565b60005b838110156131d65781810151838201526020016131be565b838111156131e5576000848401525b50505050565b60006000198214156131ff576131ff613206565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461325d57600080fd5b50565b801515811461325d57600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "deployedBytecode": "0x60806040526004361061015a5760003560e01c806388e5249f116100c1578063c4d66de81161007a578063c4d66de814610413578063ce7c2ac214610433578063d79779b214610469578063e33b7de31461049f578063eb6d3a11146104b4578063ed9705da146104c9578063f5c13653146104dc57600080fd5b806388e5249f1461033d5780638b83209b1461035d5780638f6e53b71461037d5780639852595c146103905780639d76ea58146103c6578063bd747678146103e657600080fd5b806348b750441161011357806348b750441461027d57806349bd5a5e1461029d57806365b8dbc0146102bd5780636e54a8a0146102dd57806374cefd8a146102fd57806380be66cf1461031d57600080fd5b80630584aecf1461019f578063144fa6d7146101dc57806319165587146101fe5780633268cc561461021e5780633a98ef391461023e578063406072a91461025d57600080fd5b3661019a577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610190929190612ee9565b60405180910390a1005b600080fd5b3480156101ab57600080fd5b506068546101bf906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e857600080fd5b506101fc6101f7366004612c3b565b6104fc565b005b34801561020a57600080fd5b506101fc610219366004612c3b565b610a52565b34801561022a57600080fd5b506066546101bf906001600160a01b031681565b34801561024a57600080fd5b506033545b6040519081526020016101d3565b34801561026957600080fd5b5061024f610278366004612e1e565b610b77565b34801561028957600080fd5b506101fc610298366004612e1e565b610ba4565b3480156102a957600080fd5b506067546101bf906001600160a01b031681565b3480156102c957600080fd5b506101fc6102d8366004612c3b565b610d63565b3480156102e957600080fd5b506101fc6102f8366004612c75565b610e74565b34801561030957600080fd5b506101fc610318366004612c75565b611059565b34801561032957600080fd5b506101fc610338366004612c75565b6112bd565b34801561034957600080fd5b506101fc610358366004612c75565b6116cb565b34801561036957600080fd5b506101bf610378366004612e57565b611a2a565b6101fc61038b366004612cc6565b611a5a565b34801561039c57600080fd5b5061024f6103ab366004612c3b565b6001600160a01b031660009081526036602052604090205490565b3480156103d257600080fd5b50606a546101bf906001600160a01b031681565b3480156103f257600080fd5b50610406610401366004612ddd565b611c44565b6040516101d39190612f46565b34801561041f57600080fd5b506101fc61042e366004612c3b565b611ce4565b34801561043f57600080fd5b5061024f61044e366004612c3b565b6001600160a01b031660009081526035602052604090205490565b34801561047557600080fd5b5061024f610484366004612c3b565b6001600160a01b031660009081526038602052604090205490565b3480156104ab57600080fd5b5060345461024f565b3480156104c057600080fd5b506101bf611eb8565b6101fc6104d7366004612cc6565b611f3a565b3480156104e857600080fd5b506104066104f7366004612ddd565b6120bc565b606a546001600160a01b031633148061051f57506068546001600160a01b031633145b6105445760405162461bcd60e51b815260040161053b90612fbd565b60405180910390fd5b6001600160a01b0381166105915760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161053b565b606a80546001600160a01b03199081166001600160a01b03848116918217909355606980549092161790556065546040805163c45a015560e01b81529051600093929092169163c45a015591600480820192602092909190829003018186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463c9c653969481169316916373b295c2916004808301926020929190829003018186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612c58565b6040518363ffffffff1660e01b81526004016106dc929190612f02565b602060405180830381600087803b1580156106f657600080fd5b505af1925050508015610726575060408051601f3d908101601f1916820190925261072391810190612c58565b60015b6108ae57606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561077857600080fd5b505afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190612c58565b6040518363ffffffff1660e01b8152600401610857929190612f02565b60206040518083038186803b15801561086f57600080fd5b505afa158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612c58565b9050610a2f565b50606560009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190612c58565b606a54606554604080516339d94ae160e11b815290516001600160a01b039485169463e6a439059481169316916373b295c2916004808301926020929190829003018186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190612c58565b6040518363ffffffff1660e01b81526004016109dc929190612f02565b60206040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190612c58565b90505b606780546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b038116600090815260356020526040902054610a875760405162461bcd60e51b815260040161053b90612fe5565b6000610a9260345490565b610a9c904761314b565b90506000610ac98383610ac4866001600160a01b031660009081526036602052604090205490565b6120fd565b905080610ae85760405162461bcd60e51b815260040161053b9061302b565b6001600160a01b03831660009081526036602052604081208054839290610b1090849061314b565b925050819055508060346000828254610b29919061314b565b90915550610b3990508382612143565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610b6a929190612ee9565b60405180910390a1505050565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b038116600090815260356020526040902054610bd95760405162461bcd60e51b815260040161053b90612fe5565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c699190612e70565b610c73919061314b565b90506000610c868383610ac48787610b77565b905080610ca55760405162461bcd60e51b815260040161053b9061302b565b6001600160a01b03808516600090815260396020908152604080832093871683529290529081208054839290610cdc90849061314b565b90915550506001600160a01b03841660009081526038602052604081208054839290610d0990849061314b565b90915550610d1a9050848483612261565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051610d55929190612ee9565b60405180910390a250505050565b606a546001600160a01b0316331480610d8657506068546001600160a01b031633145b610da25760405162461bcd60e51b815260040161053b90612fbd565b6065546001600160a01b0382811691161415610e115760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b606482015260840161053b565b606680546001600160a01b0383166001600160a01b0319918216811790925560658054909116821790556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b1580156105fd57600080fd5b606a546001600160a01b0316331480610e9757506068546001600160a01b031633145b610eb35760405162461bcd60e51b815260040161053b90612fbd565b606654604051636eb1769f60e11b815284916001600160a01b038088169263dd62ed3e92610ee8923092911690600401612f02565b60206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190612e70565b1015610f4757610f47846122b7565b6000610f5485600161233f565b6065546040516338ed173960e01b81529192506000916001600160a01b03909116906338ed173990610f92908890889087908d908a9060040161310f565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe89190810190612cfb565b905060008051602061326f8339815191528686606a60009054906101000a90046001600160a01b0316846001865161102091906131a4565b815181106110305761103061321c565b60200260200101516040516110489493929190612f1c565b60405180910390a150505050505050565b606a546001600160a01b031633148061107c57506068546001600160a01b031633145b6110985760405162461bcd60e51b815260040161053b90612fbd565b606654604051636eb1769f60e11b815283916001600160a01b038088169263dd62ed3e926110cd923092911690600401612f02565b60206040518083038186803b1580156110e557600080fd5b505afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190612e70565b101561112c5761112c846122b7565b600061113985600161233f565b606554604051634401edf760e11b81529192506000916001600160a01b0390911690638803dbee90611177908890889087908d908a9060040161310f565b600060405180830381600087803b15801561119157600080fd5b505af11580156111a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111cd9190810190612cfb565b90506000816000815181106111e4576111e461321c565b60200260200101519050866001600160a01b031663a9059cbb89838861120a91906131a4565b6040518363ffffffff1660e01b8152600401611227929190612ee9565b602060405180830381600087803b15801561124157600080fd5b505af1158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612dc0565b50606a5460405160008051602061326f833981519152916112ab918a9185916001600160a01b03909116908b90612f1c565b60405180910390a15050505050505050565b606a546001600160a01b03163314806112e057506068546001600160a01b031633145b6112fc5760405162461bcd60e51b815260040161053b90612fbd565b606954606654604051636eb1769f60e11b815284926001600160a01b039081169263dd62ed3e926113339230921690600401612f02565b60206040518083038186803b15801561134b57600080fd5b505afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190612e70565b10156114155760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926113c19291169060001990600401612ee9565b602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612dc0565b505b600061142285600061233f565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190612c58565b6001600160a01b0316866001600160a01b0316141561155a57606554604051633d2120b560e11b81526001600160a01b0390911690637a42416a906114fd908890889087908d908a9060040161310f565b600060405180830381600087803b15801561151757600080fd5b505af115801561152b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115539190810190612cfb565b90506115eb565b606554604051634401edf760e11b81526001600160a01b0390911690638803dbee90611592908890889087908d908a9060040161310f565b600060405180830381600087803b1580156115ac57600080fd5b505af11580156115c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e89190810190612cfb565b90505b6000816000815181106116005761160061321c565b60209081029190910101516069549091506001600160a01b031663a9059cbb8961162a84896131a4565b6040518363ffffffff1660e01b8152600401611647929190612ee9565b602060405180830381600087803b15801561166157600080fd5b505af1158015611675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116999190612dc0565b50606a5460405160008051602061326f833981519152916112ab916001600160a01b039091169084908b908b90612f1c565b606a546001600160a01b03163314806116ee57506068546001600160a01b031633145b61170a5760405162461bcd60e51b815260040161053b90612fbd565b606954606654604051636eb1769f60e11b815285926001600160a01b039081169263dd62ed3e926117419230921690600401612f02565b60206040518083038186803b15801561175957600080fd5b505afa15801561176d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117919190612e70565b10156118235760695460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926117cf9291169060001990600401612ee9565b602060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118219190612dc0565b505b600061183085600061233f565b90506060606560009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba9190612c58565b6001600160a01b0316866001600160a01b031614156119685760655460405163676528d160e01b81526001600160a01b039091169063676528d19061190b908890889087908d908a9060040161310f565b600060405180830381600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119619190810190612cfb565b90506119f9565b6065546040516338ed173960e01b81526001600160a01b03909116906338ed1739906119a0908890889087908d908a9060040161310f565b600060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f69190810190612cfb565b90505b606a54815160008051602061326f833981519152916001600160a01b031690879089908590611020906001906131a4565b600060378281548110611a3f57611a3f61321c565b6000918252602090912001546001600160a01b031692915050565b606a546001600160a01b0316331480611a7d57506068546001600160a01b031633145b611a995760405162461bcd60e51b815260040161053b90612fbd565b60003490506000611b1b306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b158015611adc57600080fd5b505afa158015611af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b149190612c58565b600161233f565b60655460405163a2a1623d60e01b81529192506000916001600160a01b039091169063a2a1623d908590611b5990899087908c908b906004016130da565b6000604051808303818588803b158015611b7257600080fd5b505af1158015611b86573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611baf9190810190612cfb565b606a5481519192507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba8059185916001600160a01b0316908490611bf3906001906131a4565b81518110611c0357611c0361321c565b6020026020010151604051611c34939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1505050505050565b60606000611c52848661233f565b6065546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490611c8590869085906004016130c1565b60006040518083038186803b158015611c9d57600080fd5b505afa158015611cb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cd99190810190612cfb565b9150505b9392505050565b600054610100900460ff16611cff5760005460ff1615611d03565b303b155b611d665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161053b565b600054610100900460ff16158015611d88576000805461ffff19166101011790555b6001600160a01b038216611dcc5760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b604482015260640161053b565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110611e0257611e0261321c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050600181600081518110611e5457611e5461321c565b602002602001018181525050611e6a82826126a3565b5050606680546001600160a01b0384166001600160a01b0319918216811790925560658054821690921790915560688054909116331790558015611eb4576000805461ff00191690555b5050565b606554604080516339d94ae160e11b815290516000926001600160a01b0316916373b295c2916004808301926020929190829003018186803b158015611efd57600080fd5b505afa158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190612c58565b905090565b606a546001600160a01b0316331480611f5d57506068546001600160a01b031633145b611f795760405162461bcd60e51b815260040161053b90612fbd565b6000611fb7306001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b158015611adc57600080fd5b606554604051638a657e6760e01b81529192506000916001600160a01b0390911690638a657e67903490611ff590889087908b908a906004016130da565b6000604051808303818588803b15801561200e57600080fd5b505af1158015612022573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261204b9190810190612cfb565b90506000816000815181106120625761206261321c565b602090810291909101810151606a54604080518381526001600160a01b039092169382019390935291820187905291507fa979c0b10cb04562c5689b2bb7868c45ff45a80db806e338eae84994215ba80590606001611c34565b606060006120ca848661233f565b60655460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f90611c8590869085906004016130c1565b6033546001600160a01b038416600090815260356020526040812054909183916121279086613185565b6121319190613163565b61213b91906131a4565b949350505050565b804710156121935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161053b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146121e0576040519150601f19603f3d011682016040523d82523d6000602084013e6121e5565b606091505b505090508061225c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161053b565b505050565b61225c8363a9059cbb60e01b8484604051602401612280929190612ee9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526126d4565b60665460405163095ea7b360e01b815282916001600160a01b038084169263095ea7b3926122ed92169060001990600401612ee9565b602060405180830381600087803b15801561230757600080fd5b505af115801561231b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190612dc0565b606554604080516339d94ae160e11b815290516060926001600160a01b0316916373b295c2916004808301926020929190829003018186803b15801561238457600080fd5b505afa158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc9190612c58565b6001600160a01b0316836001600160a01b031614156124e45760408051600280825260608201835260009260208301908036833701905050905082156124665783816000815181106124105761241061321c565b6001600160a01b039283166020918202929092010152606a548251911690829060019081106124415761244161321c565b60200260200101906001600160a01b031690816001600160a01b0316815250506124dd565b606a5481516001600160a01b039091169082906000906124885761248861321c565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106124bc576124bc61321c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b9050610b9e565b60408051600380825260808201909252600091602082016060803683375050606554604080516339d94ae160e11b815290519394506001600160a01b03909116926373b295c292506004808301926020929190829003018186803b15801561254b57600080fd5b505afa15801561255f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125839190612c58565b816001815181106125965761259661321c565b60200260200101906001600160a01b031690816001600160a01b03168152505082156126265783816000815181106125d0576125d061321c565b6001600160a01b039283166020918202929092010152606a548251911690829060029081106126015761260161321c565b60200260200101906001600160a01b031690816001600160a01b031681525050611cdd565b606a5481516001600160a01b039091169082906000906126485761264861321c565b60200260200101906001600160a01b031690816001600160a01b031681525050838160028151811061267c5761267c61321c565b60200260200101906001600160a01b031690816001600160a01b0316815250509392505050565b600054610100900460ff166126ca5760405162461bcd60e51b815260040161053b90613076565b611eb482826127a6565b6000612729826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128e49092919063ffffffff16565b80519091501561225c57808060200190518101906127479190612dc0565b61225c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161053b565b600054610100900460ff166127cd5760405162461bcd60e51b815260040161053b90613076565b80518251146128395760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161053b565b600082511161288a5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161053b565b60005b825181101561225c576128d28382815181106128ab576128ab61321c565b60200260200101518383815181106128c5576128c561321c565b60200260200101516128f3565b806128dc816131eb565b91505061288d565b606061213b8484600085612ad1565b6001600160a01b03821661295e5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161053b565b600081116129ae5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161053b565b6001600160a01b03821660009081526035602052604090205415612a285760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161053b565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152603560205260409020819055603354612a9090829061314b565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90612ac59084908490612ee9565b60405180910390a15050565b606082471015612b325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161053b565b6001600160a01b0385163b612b895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161053b565b600080866001600160a01b03168587604051612ba59190612ecd565b60006040518083038185875af1925050503d8060008114612be2576040519150601f19603f3d011682016040523d82523d6000602084013e612be7565b606091505b5091509150612bf7828286612c02565b979650505050505050565b60608315612c11575081611cdd565b825115612c215782518084602001fd5b8160405162461bcd60e51b815260040161053b9190612f8a565b600060208284031215612c4d57600080fd5b8135611cdd81613248565b600060208284031215612c6a57600080fd5b8151611cdd81613248565b600080600080600060a08688031215612c8d57600080fd5b8535612c9881613248565b94506020860135612ca881613248565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215612cdb57600080fd5b8335612ce681613248565b95602085013595506040909401359392505050565b60006020808385031215612d0e57600080fd5b825167ffffffffffffffff80821115612d2657600080fd5b818501915085601f830112612d3a57600080fd5b815181811115612d4c57612d4c613232565b8060051b604051601f19603f83011681018181108582111715612d7157612d71613232565b604052828152858101935084860182860187018a1015612d9057600080fd5b600095505b83861015612db3578051855260019590950194938601938601612d95565b5098975050505050505050565b600060208284031215612dd257600080fd5b8151611cdd81613260565b600080600060608486031215612df257600080fd5b8335612dfd81613260565b92506020840135612e0d81613248565b929592945050506040919091013590565b60008060408385031215612e3157600080fd5b8235612e3c81613248565b91506020830135612e4c81613248565b809150509250929050565b600060208284031215612e6957600080fd5b5035919050565b600060208284031215612e8257600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612ec25781516001600160a01b031687529582019590820190600101612e9d565b509495945050505050565b60008251612edf8184602087016131bb565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6020808252825182820181905260009190848201906040850190845b81811015612f7e57835183529284019291840191600101612f62565b50909695505050505050565b6020815260008251806020840152612fa98160408501602087016131bb565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b82815260406020820152600061213b6040830184612e89565b8481526080602082015260006130f36080830186612e89565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061312e60a0830186612e89565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561315e5761315e613206565b500190565b60008261318057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561319f5761319f613206565b500290565b6000828210156131b6576131b6613206565b500390565b60005b838110156131d65781810151838201526020016131be565b838111156131e5576000848401525b50505050565b60006000198214156131ff576131ff613206565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461325d57600080fd5b50565b801515811461325d57600080fdfedb587d878116df0bdd4fe154699aa2c5f439da001cc811dfd05d9f589fc5a8eea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalShares",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_shares",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_released",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_payees",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 6733,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IJoeRouter02)8154"
      },
      {
        "astId": 6735,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "routerAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 6737,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6739,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "admin0xB",
        "offset": 0,
        "slot": "104",
        "type": "t_address_payable"
      },
      {
        "astId": 6742,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "token",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 6744,
        "contract": "contracts/dependencies/LiquidityRouter.sol:LiquidityRouter",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)8154": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}