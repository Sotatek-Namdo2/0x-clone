{
  "address": "0xC9B7BC44CF108c8Ae1508CfA97983d328a614180",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ContsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RewardCashoutAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "RewardCashoutOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_crm",
      "outputs": [
        {
          "internalType": "contract CONTRewardManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_lastBuyOnLaunch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liqRouter",
      "outputs": [
        {
          "internalType": "contract LiquidityRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "antiBotEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "automatedMarketMakerPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "cashoutReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapDevFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFundPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapDevFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapTreasury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableCashout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintConts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsLastCashoutTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsRewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "usdcAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchBuyLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchBuyTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "mintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownedContsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "rescueMissentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setBlacklistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crm",
          "type": "address"
        }
      ],
      "name": "setContManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableCashout",
          "type": "bool"
        }
      ],
      "name": "setEnableCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setEnableMintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "liqRouter",
          "type": "address"
        }
      ],
      "name": "setLiquidityRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setUSDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_ct",
          "type": "uint8"
        }
      ],
      "name": "tokenReceivedPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_ct",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensPaidForMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IJoeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateCashoutFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateCashoutTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateDevelopmentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateDevelopmentFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateLiquidityWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateRewardsWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb75d1cf21d16558d659df7ae0460ceb14923c5140bd5c2e41e92afcb13aebf92",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xC9B7BC44CF108c8Ae1508CfA97983d328a614180",
    "transactionIndex": 51,
    "gasUsed": "4671515",
    "logsBloom": "0x
    "blockHash": "0xfee3de4a3c8d134cbdae2df3d0a8dab21093ec7ba2c6a4b68f6f6b2f12db8abc",
    "transactionHash": "0xb75d1cf21d16558d659df7ae0460ceb14923c5140bd5c2e41e92afcb13aebf92",
    "logs": [],
    "blockNumber": 10525133,
    "cumulativeGasUsed": "14044410",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "42e0f5bff9fde0d5aefc131d3b446b8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ContsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RewardCashoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RewardCashoutOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_crm\",\"outputs\":[{\"internalType\":\"contract CONTRewardManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuyOnLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqRouter\",\"outputs\":[{\"internalType\":\"contract LiquidityRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapDevFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFundPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapDevFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCashout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintConts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsLastCashoutTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"usdcAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuyTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"mintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownedContsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueMissentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crm\",\"type\":\"address\"}],\"name\":\"setContManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableCashout\",\"type\":\"bool\"}],\"name\":\"setEnableCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableMintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"liqRouter\",\"type\":\"address\"}],\"name\":\"setLiquidityRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUSDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_ct\",\"type\":\"uint8\"}],\"name\":\"tokenReceivedPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_ct\",\"type\":\"uint8\"}],\"name\":\"totalContsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensPaidForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IJoeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCashoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateCashoutTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateDevelopmentFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZeroXBlock.sol\":\"ZeroXBlock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/ZeroXBlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IJoeRouter02.sol\\\";\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\nimport \\\"./dependencies/CONTRewardManagement.sol\\\";\\nimport \\\"./dependencies/LiquidityRouter.sol\\\";\\n\\ncontract ZeroXBlock is Initializable, ERC20Upgradeable, OwnableUpgradeable, PaymentSplitterUpgradeable {\\n    CONTRewardManagement public _crm;\\n\\n    IJoeRouter02 public uniswapV2Router;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    uint256 public ownedContsLimit;\\n    uint256 private mintContLimit;\\n\\n    address public uniswapV2Pair;\\n    uint256 public totalTokensPaidForMinting;\\n\\n    // ***** Pools Address *****\\n    address public developmentFundPool;\\n    address public treasuryPool;\\n    address public rewardsPool;\\n    address public liquidityPool;\\n\\n    // ***** Storage for fees *****\\n    uint256 public rewardsFee;\\n    uint256 public treasuryFee;\\n    uint256 public liquidityPoolFee;\\n    uint256 public developmentFee;\\n    uint256 public totalFees;\\n\\n    uint256 public cashoutFee;\\n\\n    // ***** Storage for swapping *****\\n    bool public enableAutoSwapTreasury;\\n    bool public enableAutoSwapDevFund;\\n    address public usdcToken;\\n\\n    // ***** Anti-bot *****\\n    bool public antiBotEnabled;\\n    uint256 public launchBuyLimit;\\n    uint256 public launchBuyTimeout;\\n    mapping(address => uint256) public _lastBuyOnLaunch;\\n\\n    // ***** Blacklist storage *****\\n    mapping(address => bool) public _isBlacklisted;\\n\\n    // ***** Market makers pairs *****\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    // ***** Enable Cashout *****\\n    bool public enableCashout;\\n    bool public enableMintConts;\\n\\n    // ***** V2 new storages *****\\n    address public cashoutTaxPool;\\n    LiquidityRouter public _liqRouter;\\n\\n    // ***** Events *****\\n    event ContsMinted(address sender);\\n    event RewardCashoutOne(address sender, uint256 index);\\n    event RewardCashoutAll(address sender);\\n\\n    // ***** Constructor *****\\n    function initialize(\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        address[] memory addresses,\\n        uint256[] memory balances,\\n        uint256[] memory fees,\\n        address usdcAddr\\n    ) public initializer {\\n        require(addresses.length > 0 && balances.length > 0, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(\\\"0xBlock\\\", \\\"0xB\\\");\\n        __PaymentSplitter_init(payees, shares);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], balances[i] * (10**18));\\n        }\\n        require(totalSupply() == 1e24, \\\"TTL SUPPLY DIFF 1 MIL\\\");\\n\\n        require(\\n            addresses[1] != address(0) &&\\n                addresses[2] != address(0) &&\\n                addresses[3] != address(0) &&\\n                addresses[4] != address(0),\\n            \\\"POOL ZERO FOUND\\\"\\n        );\\n        require(addresses.length == balances.length, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        require(fees[0] > 0 && fees[1] > 0 && fees[2] > 0 && fees[3] > 0 && fees[4] > 0, \\\"0% FEES FOUND\\\");\\n        developmentFundPool = addresses[1];\\n        liquidityPool = addresses[2];\\n        treasuryPool = addresses[3];\\n        rewardsPool = addresses[4];\\n\\n        cashoutTaxPool = rewardsPool;\\n        developmentFee = fees[0];\\n        treasuryFee = fees[1];\\n        rewardsFee = fees[2];\\n        liquidityPoolFee = fees[3];\\n        cashoutFee = fees[4];\\n\\n        totalFees = rewardsFee + liquidityPoolFee + developmentFee + treasuryFee;\\n\\n        usdcToken = usdcAddr;\\n        ownedContsLimit = 100;\\n        mintContLimit = 10;\\n        enableAutoSwapTreasury = false;\\n        enableAutoSwapDevFund = true;\\n        enableMintConts = true;\\n        enableCashout = true;\\n    }\\n\\n    // ***** WRITE functions for admin *****\\n    function setUSDCAddress(address newAddress) external onlyOwner {\\n        require(newAddress != address(0), \\\"NEW_USDC: zero addr\\\");\\n        usdcToken = newAddress;\\n    }\\n\\n    function setEnableCashout(bool _enableCashout) external onlyOwner {\\n        enableCashout = _enableCashout;\\n    }\\n\\n    function setEnableMintConts(bool value) external onlyOwner {\\n        enableMintConts = value;\\n    }\\n\\n    function setContManagement(address crm) external onlyOwner {\\n        require(crm != address(0), \\\"NEW_CRM: zero addr\\\");\\n        _crm = CONTRewardManagement(crm);\\n    }\\n\\n    function setLiquidityRouter(address payable liqRouter) external onlyOwner {\\n        require(liqRouter != address(0), \\\"NEW_LROUTER: zero addr\\\");\\n        _liqRouter = LiquidityRouter(liqRouter);\\n    }\\n\\n    function updateCashoutTaxPool(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        cashoutTaxPool = wall;\\n    }\\n\\n    function updateDevelopmentFundWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        developmentFundPool = wall;\\n    }\\n\\n    function updateLiquidityWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        liquidityPool = wall;\\n    }\\n\\n    function updateRewardsWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        rewardsPool = wall;\\n    }\\n\\n    function updateTreasuryWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        treasuryPool = wall;\\n    }\\n\\n    function updateRewardsFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = liquidityPoolFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        rewardsFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateLiquidityFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        liquidityPoolFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateDevelopmentFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        developmentFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateTreasuryFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + developmentFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        treasuryFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateCashoutFee(uint256 value) external onlyOwner {\\n        require(value <= 100, \\\"FEES: cashout exceeding 100%\\\");\\n        cashoutFee = value;\\n    }\\n\\n    function setBlacklistStatus(address account, bool value) external onlyOwner {\\n        _isBlacklisted[account] = value;\\n    }\\n\\n    function changeEnableAutoSwapTreasury(bool newVal) external onlyOwner {\\n        enableAutoSwapTreasury = newVal;\\n    }\\n\\n    function changeEnableAutoSwapDevFund(bool newVal) external onlyOwner {\\n        enableAutoSwapDevFund = newVal;\\n    }\\n\\n    function rescueMissentToken(address userAddr, uint256 tokens) external onlyOwner {\\n        require(tokens <= balanceOf(address(this)), \\\"SAVE_MISSENT: tokens exceed addr balance\\\");\\n        require(userAddr != address(0), \\\"SAVE_MISSENT: zero_address\\\");\\n        _transfer(address(this), userAddr, tokens);\\n    }\\n\\n    // ***** Private helpers functions *****\\n    function getContNumberOf(address account) private view returns (uint256) {\\n        return _crm._getContNumberOf(account);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \\\"ERC20: Blacklisted address\\\");\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function provideLiquidity(address sender, uint256 tokens) private {\\n        super._transfer(sender, liquidityPool, tokens);\\n    }\\n\\n    // ***** WRITE functions for public *****\\n    function swapExact0xBForToken(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        require(balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountIn);\\n        _liqRouter.swapExact0xBForToken(sender, tokenAddr, amountIn, amountOutMin, block.timestamp + wait);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        require(balanceOf(sender) >= amountInMax, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountInMax);\\n        _liqRouter.swap0xBForExactToken(sender, tokenAddr, amountOut, amountInMax, block.timestamp + wait);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        require(targetToken.balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        targetToken.transferFrom(sender, address(_liqRouter), amountIn);\\n        _liqRouter.swapExactTokenFor0xB(sender, tokenAddr, amountIn, amountOutMin, block.timestamp + wait);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        require(targetToken.balanceOf(sender) >= amountInMax, \\\"SWAP: insufficient balance\\\");\\n        targetToken.transferFrom(sender, address(_liqRouter), amountInMax);\\n        _liqRouter.swapTokenForExact0xB(sender, tokenAddr, amountOut, amountInMax, block.timestamp + wait);\\n    }\\n\\n    function swapExactAVAXFor0xB(uint256 amountOutMin, uint256 wait) external payable {\\n        address sender = msg.sender;\\n        uint256 amountIn = msg.value;\\n        _liqRouter.swapExactAVAXFor0xB{ value: amountIn }(sender, amountOutMin, block.timestamp + wait);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) external payable {\\n        address sender = msg.sender;\\n        require(msg.value >= amountInMax, \\\"SWAP: msg.value less than slippage\\\");\\n        _liqRouter.swapAVAXForExact0xB{ value: msg.value }(sender, amountOut, block.timestamp + wait);\\n    }\\n\\n    function mintConts(string[] memory names, ContType _cType) external {\\n        require(enableMintConts, \\\"CONTMINT: mint conts disabled\\\");\\n        require(names.length <= mintContLimit, \\\"CONTMINT: too many conts\\\");\\n        for (uint256 i = 0; i < names.length; i++) {\\n            require(bytes(names[i]).length > 3 && bytes(names[i]).length < 33, \\\"CONTMINT: improper character count\\\");\\n        }\\n\\n        address sender = _msgSender();\\n        require(sender != address(0), \\\"CONTMINT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CONTMINT: blacklisted address\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"CONTMINT: pools cannot create cont\\\"\\n        );\\n        uint256 contCount = getContNumberOf(sender);\\n        require(contCount + names.length <= ownedContsLimit, \\\"CONTMINT: reached mint limit\\\");\\n        uint256 contsPrice = _crm.contPrice(_cType) * names.length;\\n        totalTokensPaidForMinting += contsPrice;\\n        require(balanceOf(sender) >= contsPrice, \\\"CONTMINT: Balance too low for creation.\\\");\\n\\n        // DEV FUND\\n        uint256 developmentFundTokens = (contsPrice * developmentFee) / 100;\\n        if (enableAutoSwapDevFund) {\\n            super._transfer(sender, address(_liqRouter), developmentFundTokens);\\n            _liqRouter.swapExact0xBForToken(developmentFundPool, usdcToken, developmentFundTokens, 0, block.timestamp);\\n        } else {\\n            super._transfer(sender, developmentFundPool, developmentFundTokens);\\n        }\\n\\n        // REWARDS POOL\\n        uint256 rewardsPoolTokens = (contsPrice * rewardsFee) / 100;\\n        super._transfer(sender, rewardsPool, rewardsPoolTokens);\\n\\n        // TREASURY\\n        uint256 treasuryPoolTokens = (contsPrice * treasuryFee) / 100;\\n        if (enableAutoSwapTreasury) {\\n            super._transfer(sender, address(_liqRouter), treasuryPoolTokens);\\n            _liqRouter.swapExact0xBForToken(treasuryPool, usdcToken, treasuryPoolTokens, 0, block.timestamp);\\n        } else {\\n            super._transfer(sender, treasuryPool, treasuryPoolTokens);\\n        }\\n\\n        // LIQUIDITY\\n        uint256 liquidityTokens = (contsPrice * liquidityPoolFee) / 100;\\n        provideLiquidity(sender, liquidityTokens);\\n\\n        // EXTRA\\n        uint256 extraT = contsPrice - developmentFundTokens - rewardsPoolTokens - treasuryPoolTokens - liquidityTokens;\\n        if (extraT > 0) {\\n            super._transfer(sender, address(this), extraT);\\n        }\\n\\n        _crm.createConts(sender, names, _cType);\\n        emit ContsMinted(sender);\\n    }\\n\\n    function cashoutReward(uint256 _contIndex) external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHT: Cashout Disabled\\\");\\n        require(sender != address(0), \\\"CSHT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHT: blacklisted\\\");\\n        uint256 rewardAmount = _crm._getRewardAmountOf(sender, _contIndex);\\n        require(rewardAmount > 0, \\\"CSHT: reward not ready\\\");\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            if (rewardsPool != cashoutTaxPool) {\\n                _transfer(rewardsPool, cashoutTaxPool, rewardAmount);\\n            }\\n        }\\n        rewardAmount -= feeAmount;\\n        _transfer(rewardsPool, sender, rewardAmount);\\n        _crm._cashoutContReward(sender, _contIndex);\\n        emit RewardCashoutOne(sender, _contIndex);\\n    }\\n\\n    function cashoutAll() external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHTALL: cashout disabled\\\");\\n        require(sender != address(0), \\\"CSHTALL: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHTALL: blacklisted address\\\");\\n        uint256 rewardAmount = _crm._getRewardAmountOf(sender);\\n        require(rewardAmount > 0, \\\"CSHTALL: reward not ready\\\");\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            if (rewardsPool != cashoutTaxPool) {\\n                _transfer(rewardsPool, cashoutTaxPool, rewardAmount);\\n            }\\n        }\\n        rewardAmount -= feeAmount;\\n        _transfer(rewardsPool, sender, rewardAmount);\\n        _crm._cashoutAllContsReward(sender);\\n        emit RewardCashoutAll(sender);\\n    }\\n\\n    // ***** READ function for public *****\\n    function getRewardAmount() external view returns (uint256) {\\n        return _crm._getRewardAmountOf(_msgSender());\\n    }\\n\\n    function getContsNames() external view returns (string memory) {\\n        return _crm._getContsNames(_msgSender());\\n    }\\n\\n    function getContsCurrentAPR() external view returns (string memory) {\\n        return _crm._getContsCurrentAPR(_msgSender());\\n    }\\n\\n    function getContsInitialAPR() external view returns (string memory) {\\n        return _crm._getContsInitialAPR(_msgSender());\\n    }\\n\\n    function getContsCreationTime() external view returns (string memory) {\\n        return _crm._getContsCreationTime(_msgSender());\\n    }\\n\\n    function getContsTypes() external view returns (string memory) {\\n        return _crm._getContsTypes(_msgSender());\\n    }\\n\\n    function getContsRewards() external view returns (string memory) {\\n        return _crm._getContsRewardAvailable(_msgSender());\\n    }\\n\\n    function getContsLastCashoutTime() external view returns (string memory) {\\n        return _crm._getContsLastUpdateTime(_msgSender());\\n    }\\n\\n    function totalContsPerType(ContType _ct) external view returns (uint256) {\\n        return _crm.totalContsPerContType(_ct);\\n    }\\n\\n    function tokenReceivedPerType(ContType _ct) external view returns (uint256) {\\n        return _crm.totalContsPerContType(_ct) + uint256(_ct);\\n    }\\n}\\n\",\"keccak256\":\"0x8ce12723cae80aa0295c38610e08097f941e71307781b4133353aad17c55e2b1\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n    mapping(ContType => uint256) private _totalContsPerContType;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerContType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyAuthorities {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerContType[_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contCurrentReward(cont, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n        return rewardCont;\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            uint256 lastUpd = conts[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all conts.\\\");\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            rewardsTotal += contCurrentReward(_cont, currentTstamp);\\n            _cont.lastUpdateTime = currentTstamp;\\n        }\\n        return rewardsTotal;\\n    }\\n\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerContType[_cType];\\n    }\\n\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardCount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardCount += contCurrentReward(_cont, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOf(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contCurrentReward(cont, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(contCurrentReward(conts[0], currentTstamp));\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(_rewardsAvailable, separator, uint2str(contCurrentReward(conts[i], currentTstamp)))\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate current reward of some contract\\n    /// @dev iterate through APR changes in order to add up reward in every interval\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param curTstamp timestamp to query\\n    /// @return resultAPR\\n    function contCurrentReward(ContEntity memory cont, uint256 curTstamp) private view returns (uint256) {\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, cont.lastUpdateTime);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, cont.lastUpdateTime);\\n        uint256 itrTstamp = cont.lastUpdateTime;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != curTstamp) {\\n            nextTstamp = curTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4e90c82506104ea98ddb13dc9c525dd34bf7b9fed75d6c86d6ebedb9ca9be24c\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable, PaymentSplitterUpgradeable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address payable public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n    uint256 public swapTaxFee;\\n    address public swapTaxPool;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        address _router,\\n        uint256 _fee,\\n        address _pool\\n    ) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = payable(msg.sender);\\n\\n        swapTaxFee = _fee;\\n        swapTaxPool = _pool;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(inputAmount, path);\\n        uint256 result = amountsOut[amountsOut.length - 1];\\n        result = (result * (HUNDRED_PERCENT - swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsIn = uniswapV2Router.getAmountsIn(outputAmount, path);\\n        uint256 result = amountsIn[0];\\n        result = (result * (HUNDRED_PERCENT + swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function wrappedNative() public view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function updateSwapTaxPool(address payable newPool) external onlyAuthorities {\\n        require(newPool != address(0), \\\"UPD_WALL: zero addr\\\");\\n        swapTaxPool = newPool;\\n    }\\n\\n    function updateSwapFee(uint256 value) external onlyAuthorities {\\n        require(value <= HUNDRED_PERCENT, \\\"FEES: swap exceeding 100%\\\");\\n        swapTaxFee = value;\\n    }\\n\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(amountIn));\\n        }\\n\\n        require(getOutputAmount(false, outTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        token.transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(amountInMax));\\n        }\\n\\n        require(getInputAmount(false, outTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        token.transfer(swapTaxPool, fee);\\n        token.transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr, amountIn);\\n        }\\n        require(getOutputAmount(true, inTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn - fee,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr, amountInMax);\\n        }\\n        require(getInputAmount(true, inTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        uint256 amountIn = msg.value;\\n        require(getOutputAmount(true, wrappedNative(), amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        payable(swapTaxPool).transfer(fee);\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{ value: amountIn - fee }(\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities {\\n        // uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        payable(swapTaxPool).transfer(fee);\\n        payable(receiver).transfer(msg.value - amountInActual - fee);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr, uint256 amount) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, amount);\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xf21dd055687e6945180da3ce650cdb75c5fea5870623d422de9f8e2de1cebeee\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061538b806100206000396000f3fe6080604052600436106104e55760003560e01c806382a8ebad11610281578063b3328aae1161015a578063d8c6404b116100cc578063eb71c5d911610085578063eb71c5d914610f37578063f2e0302314610f56578063f2fde38b14610f76578063f34f152214610f96578063f764bfb514610fac578063f78d5c5514610fd257600080fd5b8063d8c6404b14610e92578063dd62ed3e14610eb3578063e0583ec014610ed3578063e22ee81314610eed578063e33b7de314610f02578063e37ba8f914610f1757600080fd5b8063cd6e18f11161011e578063cd6e18f114610da6578063ce7c2ac214610dc6578063cfc0d02414610dfc578063d631f70514610e1c578063d75e277314610e3c578063d79779b214610e5c57600080fd5b8063b3328aae14610d10578063b62496f514610d30578063b9bd393314610d60578063bcb8ebfc14610d7a578063cc32d17614610d9057600080fd5b806397232830116101f35780639dc73a49116101b75780639dc73a4914610c4d5780639ff41fe314610c6d578063a457c2d714610c9a578063a5f3d00314610cba578063a9059cbb14610cd0578063aaf5bfc314610cf057600080fd5b80639723283014610ba25780639852595c14610bc25780639a6e80db14610bf85780639b03f44914610c185780639c64291c14610c2d57600080fd5b80638d289144116102455780638d28914414610afa5780638da5cb5b14610b1a5780638e67566314610b385780638ea928f114610b585780639149acbc14610b6d57806395d89b4114610b8d57600080fd5b806382a8ebad14610a6f578063839df91914610a8f57806384884e4414610aaf5780638683811614610ac45780638b83209b14610ada57600080fd5b806339306140116103be57806357dae063116103305780636d9ae0be116102e95780636d9ae0be146109cf57806370a08231146109e5578063715018a614610a05578063809d458d14610a1a578063810be66d14610a3a5780638161ab7614610a5a57600080fd5b806357dae0631461091a5780635dd731fc1461093a57806365bfe4301461095a578063665a11ca1461097a5780636815a91c1461099a5780636b38c586146109ba57600080fd5b806348b750441161038257806348b750441461086f57806348df58291461088f57806349bd5a5e146108af57806354557973146108cf57806354f12f1f146108e4578063559bf302146108fa57600080fd5b806339306140146107e457806339509351146107fa5780633a98ef391461081a5780633bf20e601461082f578063406072a91461084f57600080fd5b806311eac855116104575780631cdd3be31161041b5780631cdd3be31461072f57806323b872dd1461075f578063241a38c61461077f5780632bb14e1d146107925780633086319d146107a8578063313ce567146107c857600080fd5b806311eac8551461069e57806313114a9d146106c45780631694505e146106da57806318160ddd146106fa578063191655871461070f57600080fd5b80630841e977116104a95780630841e977146105d7578063084a6bff146105f7578063095ea7b31461061757806309a69f57146106475780630f1978fb1461066a57806310153e7b1461068957600080fd5b80630129981c1461052a5780630359fea91461054c57806303d29d281461058257806306fdde03146105a257806307a55860146105c457600080fd5b36610525577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770333460405161051b929190614f03565b60405180910390a1005b600080fd5b34801561053657600080fd5b5061054a610545366004614b18565b610ff2565b005b34801561055857600080fd5b5060d15461056c906001600160a01b031681565b6040516105799190614eef565b60405180910390f35b34801561058e57600080fd5b5061054a61059d366004614abe565b6110b4565b3480156105ae57600080fd5b506105b7611109565b6040516105799190614fd5565b61054a6105d2366004614e59565b61119b565b3480156105e357600080fd5b5061054a6105f2366004614b18565b611262565b34801561060357600080fd5b5061054a610612366004614e05565b61140a565b34801561062357600080fd5b50610637610632366004614aec565b61148c565b6040519015158152602001610579565b34801561065357600080fd5b5061065c6114a6565b604051908152602001610579565b34801561067657600080fd5b5060d95461063790610100900460ff1681565b34801561069557600080fd5b506105b761152c565b3480156106aa57600080fd5b5060d95461056c906201000090046001600160a01b031681565b3480156106d057600080fd5b5061065c60d75481565b3480156106e657600080fd5b5060ca5461056c906001600160a01b031681565b34801561070657600080fd5b5060355461065c565b34801561071b57600080fd5b5061054a61072a366004614a27565b6115b2565b34801561073b57600080fd5b5061063761074a366004614a27565b60dd6020526000908152604090205460ff1681565b34801561076b57600080fd5b5061063761077a366004614a7d565b6116d7565b61054a61078d366004614e37565b6116fd565b34801561079e57600080fd5b5061065c60d35481565b3480156107b457600080fd5b5061054a6107c3366004614c34565b61171f565b3480156107d457600080fd5b5060405160128152602001610579565b3480156107f057600080fd5b5061065c60ce5481565b34801561080657600080fd5b50610637610815366004614aec565b611e48565b34801561082657600080fd5b5060975461065c565b34801561083b57600080fd5b5061065c61084a366004614d73565b611e87565b34801561085b57600080fd5b5061065c61086a366004614a44565b611f08565b34801561087b57600080fd5b5061054a61088a366004614a44565b611f33565b34801561089b57600080fd5b5060d05461056c906001600160a01b031681565b3480156108bb57600080fd5b5060cd5461056c906001600160a01b031681565b3480156108db57600080fd5b5061054a6120f7565b3480156108f057600080fd5b5061065c60d55481565b34801561090657600080fd5b5061054a610915366004614a27565b612419565b34801561092657600080fd5b5061054a610935366004614b53565b61248b565b34801561094657600080fd5b5061054a610955366004614a27565b612b41565b34801561096657600080fd5b5061054a610975366004614e05565b612bbb565b34801561098657600080fd5b5060d25461056c906001600160a01b031681565b3480156109a657600080fd5b5061054a6109b5366004614e05565b612ed4565b3480156109c657600080fd5b506105b7612f54565b3480156109db57600080fd5b5061065c60d85481565b3480156109f157600080fd5b5061065c610a00366004614a27565b612f6e565b348015610a1157600080fd5b5061054a612f89565b348015610a2657600080fd5b5061054a610a35366004614a27565b612fbf565b348015610a4657600080fd5b5060cf5461056c906001600160a01b031681565b348015610a6657600080fd5b506105b7613031565b348015610a7b57600080fd5b5060e05461056c906001600160a01b031681565b348015610a9b57600080fd5b5061054a610aaa366004614d39565b61304b565b348015610abb57600080fd5b506105b761308f565b348015610ad057600080fd5b5061065c60da5481565b348015610ae657600080fd5b5061056c610af5366004614e05565b6130a9565b348015610b0657600080fd5b5061054a610b15366004614a27565b6130d9565b348015610b2657600080fd5b506065546001600160a01b031661056c565b348015610b4457600080fd5b5061054a610b53366004614e05565b613170565b348015610b6457600080fd5b506105b76131f2565b348015610b7957600080fd5b5061054a610b88366004614d39565b61320c565b348015610b9957600080fd5b506105b7613250565b348015610bae57600080fd5b5061054a610bbd366004614e05565b61325f565b348015610bce57600080fd5b5061065c610bdd366004614a27565b6001600160a01b03166000908152609a602052604090205490565b348015610c0457600080fd5b5060c95461056c906001600160a01b031681565b348015610c2457600080fd5b506105b76132e1565b348015610c3957600080fd5b5061054a610c48366004614b18565b6132fb565b348015610c5957600080fd5b5061054a610c68366004614d39565b613449565b348015610c7957600080fd5b5061065c610c88366004614a27565b60dc6020526000908152604090205481565b348015610ca657600080fd5b50610637610cb5366004614aec565b613486565b348015610cc657600080fd5b5061065c60d65481565b348015610cdc57600080fd5b50610637610ceb366004614aec565b613523565b348015610cfc57600080fd5b5061054a610d0b366004614a27565b613531565b348015610d1c57600080fd5b5061054a610d2b366004614d39565b6135d1565b348015610d3c57600080fd5b50610637610d4b366004614a27565b60de6020526000908152604090205460ff1681565b348015610d6c57600080fd5b5060df546106379060ff1681565b348015610d8657600080fd5b5061065c60cb5481565b348015610d9c57600080fd5b5061065c60d45481565b348015610db257600080fd5b5061054a610dc1366004614a27565b61360e565b348015610dd257600080fd5b5061065c610de1366004614a27565b6001600160a01b031660009081526099602052604090205490565b348015610e0857600080fd5b5061054a610e17366004614a27565b6136a9565b348015610e2857600080fd5b5061054a610e37366004614aec565b61371b565b348015610e4857600080fd5b5061065c610e57366004614d73565b613813565b348015610e6857600080fd5b5061065c610e77366004614a27565b6001600160a01b03166000908152609c602052604090205490565b348015610e9e57600080fd5b5060d95461063790600160b01b900460ff1681565b348015610ebf57600080fd5b5061065c610ece366004614a44565b6138b1565b348015610edf57600080fd5b5060d9546106379060ff1681565b348015610ef957600080fd5b506105b76138dc565b348015610f0e57600080fd5b5060985461065c565b348015610f2357600080fd5b5061054a610f32366004614a27565b6138f6565b348015610f4357600080fd5b5060df5461063790610100900460ff1681565b348015610f6257600080fd5b5061054a610f71366004614b18565b613968565b348015610f8257600080fd5b5061054a610f91366004614a27565b6139c8565b348015610fa257600080fd5b5061065c60db5481565b348015610fb857600080fd5b5060df5461056c906201000090046001600160a01b031681565b348015610fde57600080fd5b5061054a610fed366004614e05565b613a63565b3382610ffd82612f6e565b10156110245760405162461bcd60e51b815260040161101b906150a6565b60405180910390fd5b60e05461103c9082906001600160a01b031685613ae5565b60e0546001600160a01b03166380be66cf8287878761105b8842615211565b6040518663ffffffff1660e01b815260040161107b959493929190614f1c565b600060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050505050505050565b6065546001600160a01b031633146110de5760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0391909116600090815260dd60205260409020805460ff1916911515919091179055565b606060368054611118906152ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611144906152ad565b80156111915780601f1061116657610100808354040283529160200191611191565b820191906000526020600020905b81548152906001019060200180831161117457829003601f168201915b5050505050905090565b33348311156111f75760405162461bcd60e51b815260206004820152602260248201527f535741503a206d73672e76616c7565206c657373207468616e20736c69707061604482015261676560f01b606482015260840161101b565b60e0546001600160a01b031663ed9705da3483876112158742615211565b6040516001600160e01b031960e087901b1681526001600160a01b039093166004840152602483019190915260448201526064016000604051808303818588803b15801561109557600080fd5b6040516370a0823160e01b81523390859085906001600160a01b038316906370a0823190611294908690600401614eef565b60206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190614e1e565b10156113025760405162461bcd60e51b815260040161101b906150a6565b60e0546040516323b872dd60e01b81526001600160a01b038481166004830152918216602482015260448101879052908216906323b872dd90606401602060405180830381600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190614d56565b5060e0546001600160a01b0316636e54a8a0838888886113b08942615211565b6040518663ffffffff1660e01b81526004016113d0959493929190614f1c565b600060405180830381600087803b1580156113ea57600080fd5b505af11580156113fe573d6000803e3d6000fd5b50505050505050505050565b6065546001600160a01b031633146114345760405162461bcd60e51b815260040161101b906150dd565b60008160d45460d65460d55461144a9190615211565b6114549190615211565b61145e9190615211565b905060648111156114815760405162461bcd60e51b815260040161101b90615112565b60d39190915560d755565b60003361149a818585613b83565b60019150505b92915050565b60c9546040516330cd31af60e11b81526000916001600160a01b03169063619a635e906114d7903390600401614eef565b60206040518083038186803b1580156114ef57600080fd5b505afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115279190614e1e565b905090565b60c9546060906001600160a01b0316635dbab6ed335b6040518263ffffffff1660e01b815260040161155e9190614eef565b60006040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115279190810190614d8e565b6001600160a01b0381166000908152609960205260409020546115e75760405162461bcd60e51b815260040161101b90615015565b60006115f260985490565b6115fc9047615211565b905060006116298383611624866001600160a01b03166000908152609a602052604090205490565b613ca7565b9050806116485760405162461bcd60e51b815260040161101b9061505b565b6001600160a01b0383166000908152609a602052604081208054839290611670908490615211565b9250508190555080609860008282546116899190615211565b9091555061169990508382613ced565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05683826040516116ca929190614f03565b60405180910390a1505050565b6000336116e5858285613e06565b6116f0858585613ae5565b60019150505b9392505050565b60e054339034906001600160a01b0316638f6e53b78284876112158842615211565b60df54610100900460ff166117765760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a206d696e7420636f6e74732064697361626c6564000000604482015260640161101b565b60cc54825111156117c45760405162461bcd60e51b8152602060048201526018602482015277434f4e544d494e543a20746f6f206d616e7920636f6e747360401b604482015260640161101b565b60005b825181101561187d5760038382815181106117e4576117e461532f565b602002602001015151118015611814575060218382815181106118095761180961532f565b602002602001015151105b61186b5760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20696d70726f7065722063686172616374657220636f756044820152611b9d60f21b606482015260840161101b565b80611875816152e8565b9150506117c7565b5033806118c55760405162461bcd60e51b8152602060048201526016602482015275434f4e544d494e543a207a65726f206164647265737360501b604482015260640161101b565b6001600160a01b038116600090815260dd602052604090205460ff161561192e5760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a20626c61636b6c69737465642061646472657373000000604482015260640161101b565b60cf546001600160a01b0382811691161480159061195a575060d1546001600160a01b03828116911614155b8015611974575060d0546001600160a01b03828116911614155b6119cb5760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20706f6f6c732063616e6e6f742063726561746520636f6044820152611b9d60f21b606482015260840161101b565b60006119d682613e80565b905060cb548451826119e89190615211565b1115611a365760405162461bcd60e51b815260206004820152601c60248201527f434f4e544d494e543a2072656163686564206d696e74206c696d697400000000604482015260640161101b565b835160c954604051630c75361360e31b8152600092916001600160a01b0316906363a9b09890611a6a908890600401614fc7565b60206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba9190614e1e565b611ac4919061524b565b90508060ce6000828254611ad89190615211565b90915550819050611ae884612f6e565b1015611b465760405162461bcd60e51b815260206004820152602760248201527f434f4e544d494e543a2042616c616e636520746f6f206c6f7720666f7220637260448201526632b0ba34b7b71760c91b606482015260840161101b565b6000606460d65483611b58919061524b565b611b629190615229565b60d954909150610100900460ff1615611c0e5760e054611b8d9085906001600160a01b031683613eb1565b60e05460cf5460d9546040516388e5249f60e01b81526001600160a01b03938416936388e5249f93611bd79390821692620100009091049091169086906000904290600401614f1c565b600060405180830381600087803b158015611bf157600080fd5b505af1158015611c05573d6000803e3d6000fd5b50505050611c26565b60cf54611c269085906001600160a01b031683613eb1565b6000606460d35484611c38919061524b565b611c429190615229565b60d154909150611c5d9086906001600160a01b031683613eb1565b6000606460d45485611c6f919061524b565b611c799190615229565b60d95490915060ff1615611d205760e054611c9f9087906001600160a01b031683613eb1565b60e05460d05460d9546040516388e5249f60e01b81526001600160a01b03938416936388e5249f93611ce99390821692620100009091049091169086906000904290600401614f1c565b600060405180830381600087803b158015611d0357600080fd5b505af1158015611d17573d6000803e3d6000fd5b50505050611d38565b60d054611d389087906001600160a01b031683613eb1565b6000606460d55486611d4a919061524b565b611d549190615229565b9050611d60878261407f565b6000818385611d6f888a61526a565b611d79919061526a565b611d83919061526a565b611d8d919061526a565b90508015611da057611da0883083613eb1565b60c95460405162a6998d60e31b81526001600160a01b0390911690630534cc6890611dd3908b908e908e90600401614f4d565b600060405180830381600087803b158015611ded57600080fd5b505af1158015611e01573d6000803e3d6000fd5b505050507f120c2f36321d80f09f9d26f68f1f49b72c1964e118aa788bb9611f47e10c7eac88604051611e349190614eef565b60405180910390a150505050505050505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061149a9082908690611e82908790615211565b613b83565b60c95460405163ce6912a360e01b81526000916001600160a01b03169063ce6912a390611eb8908590600401614fc7565b60206040518083038186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190614e1e565b6001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b6001600160a01b038116600090815260996020526040902054611f685760405162461bcd60e51b815260040161101b90615015565b6001600160a01b0382166000908152609c60205260408120546040516370a0823160e01b81526001600160a01b038516906370a0823190611fad903090600401614eef565b60206040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190614e1e565b6120079190615211565b9050600061201a83836116248787611f08565b9050806120395760405162461bcd60e51b815260040161101b9061505b565b6001600160a01b038085166000908152609d6020908152604080832093871683529290529081208054839290612070908490615211565b90915550506001600160a01b0384166000908152609c60205260408120805483929061209d908490615211565b909155506120ae9050848483614097565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a84836040516120e9929190614f03565b60405180910390a250505050565b60df54339060ff1615156001146121505760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20636173686f75742064697361626c656400000000000000604482015260640161101b565b6001600160a01b03811661219e5760405162461bcd60e51b815260206004820152601560248201527443534854414c4c3a207a65726f206164647265737360581b604482015260640161101b565b6001600160a01b038116600090815260dd602052604090205460ff16156122075760405162461bcd60e51b815260206004820152601c60248201527f43534854414c4c3a20626c61636b6c6973746564206164647265737300000000604482015260640161101b565b60c9546040516330cd31af60e11b81526000916001600160a01b03169063619a635e90612238908590600401614eef565b60206040518083038186803b15801561225057600080fd5b505afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190614e1e565b9050600081116122da5760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20726577617264206e6f7420726561647900000000000000604482015260640161101b565b60d8546000901561234357606460d854836122f5919061524b565b6122ff9190615229565b60df5460d1549192506201000090046001600160a01b039081169116146123435760d15460df54612343916001600160a01b03908116916201000090041684613ae5565b61234d818361526a565b60d154909250612367906001600160a01b03168484613ae5565b60c95460405163d094fa8d60e01b81526001600160a01b039091169063d094fa8d90612397908690600401614eef565b602060405180830381600087803b1580156123b157600080fd5b505af11580156123c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e99190614e1e565b507f564112c0ad2fbcae1bed83c58ed5d830128565d634cdc875bb02b065ad242343836040516116ca9190614eef565b6065546001600160a01b031633146124435760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0381166124695760405162461bcd60e51b815260040161101b90614fe8565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166124a65760005460ff16156124aa565b303b155b61250d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161101b565b600054610100900460ff1615801561252f576000805461ffff19166101011790555b60008551118015612541575060008451115b6125845760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161101b565b61258c6140ed565b6125d0604051806040016040528060078152602001663078426c6f636b60c81b81525060405180604001604052806003815260200162183c2160e91b81525061411c565b6125da878761414d565b60005b8551811015612647576126358682815181106125fb576125fb61532f565b60200260200101518683815181106126155761261561532f565b6020026020010151670de0b6b3a7640000612630919061524b565b61417e565b8061263f816152e8565b9150506125dd565b5060355469d3c21bcecceda10000001461269b5760405162461bcd60e51b81526020600482015260156024820152741515130814d5541413164811125191880c48135253605a1b604482015260640161101b565b60006001600160a01b0316856001815181106126b9576126b961532f565b60200260200101516001600160a01b031614158015612705575060006001600160a01b0316856002815181106126f1576126f161532f565b60200260200101516001600160a01b031614155b801561273e575060006001600160a01b03168560038151811061272a5761272a61532f565b60200260200101516001600160a01b031614155b8015612777575060006001600160a01b0316856004815181106127635761276361532f565b60200260200101516001600160a01b031614155b6127b55760405162461bcd60e51b815260206004820152600f60248201526e1413d3d30816915493c81193d55391608a1b604482015260640161101b565b83518551146127fd5760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161101b565b6000836000815181106128125761281261532f565b602002602001015111801561284157506000836001815181106128375761283761532f565b6020026020010151115b8015612867575060008360028151811061285d5761285d61532f565b6020026020010151115b801561288d57506000836003815181106128835761288361532f565b6020026020010151115b80156128b357506000836004815181106128a9576128a961532f565b6020026020010151115b6128ef5760405162461bcd60e51b815260206004820152600d60248201526c0c094811915154c81193d55391609a1b604482015260640161101b565b846001815181106129025761290261532f565b602002602001015160cf60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846002815181106129435761294361532f565b602002602001015160d260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846003815181106129845761298461532f565b602002602001015160d060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846004815181106129c5576129c561532f565b602090810291909101015160d180546001600160a01b0319166001600160a01b03909216918217905560df805462010000600160b01b0319166201000090920291909117905582518390600090612a1e57612a1e61532f565b602002602001015160d68190555082600181518110612a3f57612a3f61532f565b602002602001015160d48190555082600281518110612a6057612a6061532f565b602002602001015160d38190555082600381518110612a8157612a8161532f565b602002602001015160d58190555082600481518110612aa257612aa261532f565b602002602001015160d88190555060d45460d65460d55460d354612ac69190615211565b612ad09190615211565b612ada9190615211565b60d75560d98054606460cb55600a60cc5561ffff196001600160a01b038516620100000281166001600160b01b0319909216919091176101001790915560df805461010192169190911790558015612b38576000805461ff00191690555b50505050505050565b6065546001600160a01b03163314612b6b5760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b038116612b915760405162461bcd60e51b815260040161101b90614fe8565b60df80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60df54339060ff161515600114612c0d5760405162461bcd60e51b815260206004820152601660248201527510d4d2150e8810d85cda1bdd5d08111a5cd8589b195960521b604482015260640161101b565b6001600160a01b038116612c585760405162461bcd60e51b8152602060048201526012602482015271435348543a207a65726f206164647265737360701b604482015260640161101b565b6001600160a01b038116600090815260dd602052604090205460ff1615612cb55760405162461bcd60e51b815260206004820152601160248201527010d4d2150e88189b1858dadb1a5cdd1959607a1b604482015260640161101b565b60c9546040516329b8573160e21b81526000916001600160a01b03169063a6e15cc490612ce89085908790600401614f03565b60206040518083038186803b158015612d0057600080fd5b505afa158015612d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d389190614e1e565b905060008111612d835760405162461bcd60e51b8152602060048201526016602482015275435348543a20726577617264206e6f7420726561647960501b604482015260640161101b565b60d85460009015612dec57606460d85483612d9e919061524b565b612da89190615229565b60df5460d1549192506201000090046001600160a01b03908116911614612dec5760d15460df54612dec916001600160a01b03908116916201000090041684613ae5565b612df6818361526a565b60d154909250612e10906001600160a01b03168484613ae5565b60c95460405163611015b360e11b81526001600160a01b039091169063c2202b6690612e429086908890600401614f03565b602060405180830381600087803b158015612e5c57600080fd5b505af1158015612e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e949190614e1e565b507f39f6d68d140e552a327d43ef814649947d78e76743e169e4f00d61b14f2f846d8385604051612ec6929190614f03565b60405180910390a150505050565b6065546001600160a01b03163314612efe5760405162461bcd60e51b815260040161101b906150dd565b6064811115612f4f5760405162461bcd60e51b815260206004820152601c60248201527f464545533a20636173686f757420657863656564696e67203130302500000000604482015260640161101b565b60d855565b60c9546060906001600160a01b03166377ec782633611542565b6001600160a01b031660009081526033602052604090205490565b6065546001600160a01b03163314612fb35760405162461bcd60e51b815260040161101b906150dd565b612fbd600061425d565b565b6065546001600160a01b03163314612fe95760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b03811661300f5760405162461bcd60e51b815260040161101b90614fe8565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b60c9546060906001600160a01b0316638bf1451433611542565b6065546001600160a01b031633146130755760405162461bcd60e51b815260040161101b906150dd565b60d980549115156101000261ff0019909216919091179055565b60c9546060906001600160a01b031663f743f31933611542565b6000609b82815481106130be576130be61532f565b6000918252602090912001546001600160a01b031692915050565b6065546001600160a01b031633146131035760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b03811661314e5760405162461bcd60e51b81526020600482015260126024820152712722abafa1a9269d103d32b9379030b2323960711b604482015260640161101b565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b0316331461319a5760405162461bcd60e51b815260040161101b906150dd565b60008160d45460d65460d3546131b09190615211565b6131ba9190615211565b6131c49190615211565b905060648111156131e75760405162461bcd60e51b815260040161101b90615112565b60d59190915560d755565b60c9546060906001600160a01b03166351bf120c33611542565b6065546001600160a01b031633146132365760405162461bcd60e51b815260040161101b906150dd565b60df80549115156101000261ff0019909216919091179055565b606060378054611118906152ad565b6065546001600160a01b031633146132895760405162461bcd60e51b815260040161101b906150dd565b60008160d65460d55460d35461329f9190615211565b6132a99190615211565b6132b39190615211565b905060648111156132d65760405162461bcd60e51b815260040161101b90615112565b60d49190915560d755565b60c9546060906001600160a01b031663367fd07433611542565b6040516370a0823160e01b81523390859084906001600160a01b038316906370a082319061332d908690600401614eef565b60206040518083038186803b15801561334557600080fd5b505afa158015613359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337d9190614e1e565b101561339b5760405162461bcd60e51b815260040161101b906150a6565b60e0546040516323b872dd60e01b81526001600160a01b038481166004830152918216602482015260448101869052908216906323b872dd90606401602060405180830381600087803b1580156133f157600080fd5b505af1158015613405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134299190614d56565b5060e0546001600160a01b03166374cefd8a838888886113b08942615211565b6065546001600160a01b031633146134735760405162461bcd60e51b815260040161101b906150dd565b60d9805460ff1916911515919091179055565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561350b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161101b565b6135188286868403613b83565b506001949350505050565b60003361149a818585613ae5565b6065546001600160a01b0316331461355b5760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0381166135a75760405162461bcd60e51b81526020600482015260136024820152722722abafaaa9a2219d103d32b9379030b2323960691b604482015260640161101b565b60d980546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6065546001600160a01b031633146135fb5760405162461bcd60e51b815260040161101b906150dd565b60df805460ff1916911515919091179055565b6065546001600160a01b031633146136385760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0381166136875760405162461bcd60e51b81526020600482015260166024820152752722abafa62927aaaa22a91d103d32b9379030b2323960511b604482015260640161101b565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146136d35760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0381166136f95760405162461bcd60e51b815260040161101b90614fe8565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146137455760405162461bcd60e51b815260040161101b906150dd565b61374e30612f6e565b8111156137ae5760405162461bcd60e51b815260206004820152602860248201527f534156455f4d495353454e543a20746f6b656e732065786365656420616464726044820152672062616c616e636560c01b606482015260840161101b565b6001600160a01b0382166138045760405162461bcd60e51b815260206004820152601a60248201527f534156455f4d495353454e543a207a65726f5f61646472657373000000000000604482015260640161101b565b61380f308383613ae5565b5050565b600081600281111561382757613827615319565b60c95460405163ce6912a360e01b81526001600160a01b039091169063ce6912a390613857908690600401614fc7565b60206040518083038186803b15801561386f57600080fd5b505afa158015613883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a79190614e1e565b6114a09190615211565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60c9546060906001600160a01b03166328cceb2433611542565b6065546001600160a01b031633146139205760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b0381166139465760405162461bcd60e51b815260040161101b90614fe8565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b338361397382612f6e565b10156139915760405162461bcd60e51b815260040161101b906150a6565b60e0546139a99082906001600160a01b031686613ae5565b60e0546001600160a01b03166388e5249f8287878761105b8842615211565b6065546001600160a01b031633146139f25760405162461bcd60e51b815260040161101b906150dd565b6001600160a01b038116613a575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161101b565b613a608161425d565b50565b6065546001600160a01b03163314613a8d5760405162461bcd60e51b815260040161101b906150dd565b60008160d45460d55460d354613aa39190615211565b613aad9190615211565b613ab79190615211565b90506064811115613ada5760405162461bcd60e51b815260040161101b90615112565b60d69190915560d755565b6001600160a01b038316600090815260dd602052604090205460ff16158015613b2757506001600160a01b038216600090815260dd602052604090205460ff16155b613b735760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20426c61636b6c69737465642061646472657373000000000000604482015260640161101b565b613b7e838383613eb1565b505050565b6001600160a01b038316613be55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161101b565b6001600160a01b038216613c465760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161101b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6097546001600160a01b03841660009081526099602052604081205490918391613cd1908661524b565b613cdb9190615229565b613ce5919061526a565b949350505050565b80471015613d3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161101b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613d8a576040519150601f19603f3d011682016040523d82523d6000602084013e613d8f565b606091505b5050905080613b7e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161101b565b6000613e1284846138b1565b90506000198114613e7a5781811015613e6d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161101b565b613e7a8484848403613b83565b50505050565b60c9546040516344fea1b960e01b81526000916001600160a01b0316906344fea1b990611eb8908590600401614eef565b6001600160a01b038316613f155760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161101b565b6001600160a01b038216613f775760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161101b565b6001600160a01b03831660009081526033602052604090205481811015613fef5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161101b565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290614026908490615211565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161407291815260200190565b60405180910390a3613e7a565b60d25461380f9083906001600160a01b031683613eb1565b613b7e8363a9059cbb60e01b84846040516024016140b6929190614f03565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142af565b600054610100900460ff166141145760405162461bcd60e51b815260040161101b90615149565b612fbd614381565b600054610100900460ff166141435760405162461bcd60e51b815260040161101b90615149565b61380f82826143b1565b600054610100900460ff166141745760405162461bcd60e51b815260040161101b90615149565b61380f82826143ff565b6001600160a01b0382166141d45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161101b565b80603560008282546141e69190615211565b90915550506001600160a01b03821660009081526033602052604081208054839290614213908490615211565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000614304826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661453d9092919063ffffffff16565b805190915015613b7e57808060200190518101906143229190614d56565b613b7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161101b565b600054610100900460ff166143a85760405162461bcd60e51b815260040161101b90615149565b612fbd3361425d565b600054610100900460ff166143d85760405162461bcd60e51b815260040161101b90615149565b81516143eb906036906020850190614894565b508051613b7e906037906020840190614894565b600054610100900460ff166144265760405162461bcd60e51b815260040161101b90615149565b80518251146144925760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161101b565b60008251116144e35760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161101b565b60005b8251811015613b7e5761452b8382815181106145045761450461532f565b602002602001015183838151811061451e5761451e61532f565b602002602001015161454c565b80614535816152e8565b9150506144e6565b6060613ce5848460008561472a565b6001600160a01b0382166145b75760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161101b565b600081116146075760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161101b565b6001600160a01b038216600090815260996020526040902054156146815760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161101b565b609b8054600181019091557fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3490180546001600160a01b0319166001600160a01b03841690811790915560009081526099602052604090208190556097546146e9908290615211565b6097556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac9061471e9084908490614f03565b60405180910390a15050565b60608247101561478b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161101b565b6001600160a01b0385163b6147e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161101b565b600080866001600160a01b031685876040516147fe9190614ed3565b60006040518083038185875af1925050503d806000811461483b576040519150601f19603f3d011682016040523d82523d6000602084013e614840565b606091505b509150915061485082828661485b565b979650505050505050565b6060831561486a5750816116f6565b82511561487a5782518084602001fd5b8160405162461bcd60e51b815260040161101b9190614fd5565b8280546148a0906152ad565b90600052602060002090601f0160209004810192826148c25760008555614908565b82601f106148db57805160ff1916838001178555614908565b82800160010185558215614908579182015b828111156149085782518255916020019190600101906148ed565b50614914929150614918565b5090565b5b808211156149145760008155600101614919565b80356149388161535b565b919050565b600082601f83011261494e57600080fd5b8135602061496361495e836151c5565b615194565b80838252828201915082860187848660051b890101111561498357600080fd5b60005b858110156149ab5781356149998161535b565b84529284019290840190600101614986565b5090979650505050505050565b600082601f8301126149c957600080fd5b813560206149d961495e836151c5565b80838252828201915082860187848660051b89010111156149f957600080fd5b60005b858110156149ab578135845292840192908401906001016149fc565b80356003811061493857600080fd5b600060208284031215614a3957600080fd5b81356116f68161535b565b60008060408385031215614a5757600080fd5b8235614a628161535b565b91506020830135614a728161535b565b809150509250929050565b600080600060608486031215614a9257600080fd5b8335614a9d8161535b565b92506020840135614aad8161535b565b929592945050506040919091013590565b60008060408385031215614ad157600080fd5b8235614adc8161535b565b91506020830135614a7281615370565b60008060408385031215614aff57600080fd5b8235614b0a8161535b565b946020939093013593505050565b60008060008060808587031215614b2e57600080fd5b8435614b398161535b565b966020860135965060408601359560600135945092505050565b60008060008060008060c08789031215614b6c57600080fd5b863567ffffffffffffffff80821115614b8457600080fd5b614b908a838b0161493d565b97506020890135915080821115614ba657600080fd5b614bb28a838b016149b8565b96506040890135915080821115614bc857600080fd5b614bd48a838b0161493d565b95506060890135915080821115614bea57600080fd5b614bf68a838b016149b8565b94506080890135915080821115614c0c57600080fd5b50614c1989828a016149b8565b925050614c2860a0880161492d565b90509295509295509295565b6000806040808486031215614c4857600080fd5b833567ffffffffffffffff80821115614c6057600080fd5b818601915086601f830112614c7457600080fd5b81356020614c8461495e836151c5565b8083825282820191508286018b848660051b8901011115614ca457600080fd5b60005b85811015614d1957813587811115614cbe57600080fd5b8801603f81018e13614ccf57600080fd5b85810135614cdf61495e826151e9565b8181528f8c838501011115614cf357600080fd5b818c84018983013760009181018801919091528552509284019290840190600101614ca7565b50508098505050614d2b818901614a18565b955050505050509250929050565b600060208284031215614d4b57600080fd5b81356116f681615370565b600060208284031215614d6857600080fd5b81516116f681615370565b600060208284031215614d8557600080fd5b6116f682614a18565b600060208284031215614da057600080fd5b815167ffffffffffffffff811115614db757600080fd5b8201601f81018413614dc857600080fd5b8051614dd661495e826151e9565b818152856020838501011115614deb57600080fd5b614dfc826020830160208601615281565b95945050505050565b600060208284031215614e1757600080fd5b5035919050565b600060208284031215614e3057600080fd5b5051919050565b60008060408385031215614e4a57600080fd5b50508035926020909101359150565b600080600060608486031215614e6e57600080fd5b505081359360208301359350604090920135919050565b60038110614ea357634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614ebf816020860160208601615281565b601f01601f19169290920160200192915050565b60008251614ee5818460208701615281565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006060820160018060a01b0386168352602060608185015281865180845260808601915060808160051b870101935082880160005b82811015614fb157607f19888703018452614f9f868351614ea7565b95509284019290840190600101614f83565b505050505080915050613ce56040830184614e85565b602081016114a08284614e85565b6020815260006116f66020830184614ea7565b6020808252601390820152722aa8222faba0a6261d103d32b9379030b2323960691b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f535741503a20696e73756666696369656e742062616c616e6365000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f464545533a20746f74616c20657863656564696e672031303025000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156151bd576151bd615345565b604052919050565b600067ffffffffffffffff8211156151df576151df615345565b5060051b60200190565b600067ffffffffffffffff82111561520357615203615345565b50601f01601f191660200190565b6000821982111561522457615224615303565b500190565b60008261524657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561526557615265615303565b500290565b60008282101561527c5761527c615303565b500390565b60005b8381101561529c578181015183820152602001615284565b83811115613e7a5750506000910152565b600181811c908216806152c157607f821691505b602082108114156152e257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156152fc576152fc615303565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613a6057600080fd5b8015158114613a6057600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 684,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 690,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 692,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 694,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 696,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1277,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalShares",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_shares",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_released",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_payees",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 2586,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_crm",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(CONTRewardManagement)6376"
      },
      {
        "astId": 2589,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IJoeRouter02)8090"
      },
      {
        "astId": 2594,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "ownedContsLimit",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 2596,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "mintContLimit",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2598,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 2600,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalTokensPaidForMinting",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2602,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFundPool",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 2604,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 2606,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsPool",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 2608,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 2610,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsFee",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 2612,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 2614,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPoolFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 2616,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 2618,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalFees",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 2620,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "cashoutFee",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 2622,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapTreasury",
        "offset": 0,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 2624,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapDevFund",
        "offset": 1,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 2626,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "usdcToken",
        "offset": 2,
        "slot": "217",
        "type": "t_address"
      },
      {
        "astId": 2628,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "antiBotEnabled",
        "offset": 22,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 2630,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "launchBuyLimit",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 2632,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "launchBuyTimeout",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 2636,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_lastBuyOnLaunch",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2640,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2644,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "automatedMarketMakerPairs",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2646,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableCashout",
        "offset": 0,
        "slot": "223",
        "type": "t_bool"
      },
      {
        "astId": 2648,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableMintConts",
        "offset": 1,
        "slot": "223",
        "type": "t_bool"
      },
      {
        "astId": 2650,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "cashoutTaxPool",
        "offset": 2,
        "slot": "223",
        "type": "t_address"
      },
      {
        "astId": 2653,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_liqRouter",
        "offset": 0,
        "slot": "224",
        "type": "t_contract(LiquidityRouter)7621"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CONTRewardManagement)6376": {
        "encoding": "inplace",
        "label": "contract CONTRewardManagement",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)8090": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityRouter)7621": {
        "encoding": "inplace",
        "label": "contract LiquidityRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}