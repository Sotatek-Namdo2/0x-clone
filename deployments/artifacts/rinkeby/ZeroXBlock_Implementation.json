{
  "address": "0x7C50A6e9c1A70F16FC615356414886dd1B8BdEE6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ContsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RewardCashoutAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "RewardCashoutOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_crm",
      "outputs": [
        {
          "internalType": "contract CONTRewardManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liqRouter",
      "outputs": [
        {
          "internalType": "contract LiquidityRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "cashoutReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapDevFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "deductPcent",
          "type": "int256"
        }
      ],
      "name": "changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFundPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapDevFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapTreasury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableCashout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintConts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getContPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsLastCashoutTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsRewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "is0xBOut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalConts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "__cType",
          "type": "uint8"
        }
      ],
      "name": "getTotalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "usdcAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "mintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownedContsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "rescueMissentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setBlacklistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crm",
          "type": "address"
        }
      ],
      "name": "setContManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableCashout",
          "type": "bool"
        }
      ],
      "name": "setEnableCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setEnableMintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liqRouter",
          "type": "address"
        }
      ],
      "name": "setLiquidityRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setUSDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensPaidForMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateCashoutFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateDevelopmentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateDevelopmentFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateLiquidityWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateRewardsWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc6f0631627280c94cfc828dc2557dd6003367c6418ac1f9b6133b1c0615f0285",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x7C50A6e9c1A70F16FC615356414886dd1B8BdEE6",
    "transactionIndex": 25,
    "gasUsed": "5115490",
    "logsBloom": "0x
    "blockHash": "0xd7742118fe7772186f84755a3d306f5057bee918b30ba00157d92d5cc938110e",
    "transactionHash": "0xc6f0631627280c94cfc828dc2557dd6003367c6418ac1f9b6133b1c0615f0285",
    "logs": [],
    "blockNumber": 10416169,
    "cumulativeGasUsed": "15503856",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "0c591da1b8214b58749d06d6f15daeca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ContsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RewardCashoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RewardCashoutOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_crm\",\"outputs\":[{\"internalType\":\"contract CONTRewardManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqRouter\",\"outputs\":[{\"internalType\":\"contract LiquidityRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapDevFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"deductPcent\",\"type\":\"int256\"}],\"name\":\"changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFundPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapDevFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCashout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintConts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getContPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsLastCashoutTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is0xBOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalConts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"__cType\",\"type\":\"uint8\"}],\"name\":\"getTotalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"usdcAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"mintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownedContsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueMissentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crm\",\"type\":\"address\"}],\"name\":\"setContManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableCashout\",\"type\":\"bool\"}],\"name\":\"setEnableCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableMintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqRouter\",\"type\":\"address\"}],\"name\":\"setLiquidityRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUSDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensPaidForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCashoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateDevelopmentFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZeroXBlock.sol\":\"ZeroXBlock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/ZeroXBlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./dependencies/CONTRewardManagement.sol\\\";\\nimport \\\"./dependencies/LiquidityRouter.sol\\\";\\n\\ncontract ZeroXBlock is Initializable, ERC20Upgradeable, OwnableUpgradeable, PaymentSplitterUpgradeable {\\n    CONTRewardManagement public _crm;\\n    LiquidityRouter public _liqRouter;\\n\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    uint256 public ownedContsLimit;\\n    uint256 private mintContLimit;\\n\\n    uint256 public totalTokensPaidForMinting;\\n\\n    // ***** Pools Address *****\\n    address public developmentFundPool;\\n    address public treasuryPool;\\n    address public rewardsPool;\\n    address public liquidityPool;\\n\\n    // ***** Storage for fees *****\\n    uint256 public rewardsFee;\\n    uint256 public treasuryFee;\\n    uint256 public liquidityPoolFee;\\n    uint256 public developmentFee;\\n    uint256 public totalFees;\\n    uint256 public cashoutFee;\\n\\n    // ***** Storage for swapping *****\\n    bool public enableAutoSwapTreasury;\\n    bool public enableAutoSwapDevFund;\\n    address public usdcToken;\\n\\n    // ***** Blacklist storage *****\\n    mapping(address => bool) public _isBlacklisted;\\n\\n    // ***** Enable Cashout *****\\n    bool public enableCashout;\\n    bool public enableMintConts;\\n\\n    // ***** Events *****\\n    event ContsMinted(address sender);\\n    event RewardCashoutOne(address sender, uint256 index);\\n    event RewardCashoutAll(address sender);\\n    event AddLiquidity(address sender, uint256 tokens);\\n\\n    // ***** Constructor *****\\n    function initialize(\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        address[] memory addresses,\\n        uint256[] memory balances,\\n        uint256[] memory fees,\\n        address usdcAddr\\n    ) public initializer {\\n        require(addresses.length > 0 && balances.length > 0, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(\\\"0xBlock\\\", \\\"0xB\\\");\\n        __PaymentSplitter_init(payees, shares);\\n\\n        require(\\n            addresses[1] != address(0) &&\\n                addresses[2] != address(0) &&\\n                addresses[3] != address(0) &&\\n                addresses[4] != address(0),\\n            \\\"POOL ZERO FOUND\\\"\\n        );\\n        developmentFundPool = addresses[1];\\n        liquidityPool = addresses[2];\\n        treasuryPool = addresses[3];\\n        rewardsPool = addresses[4];\\n\\n        require(fees[0] > 0 && fees[1] > 0 && fees[2] > 0 && fees[3] > 0 && fees[4] > 0, \\\"0% FEES FOUND\\\");\\n        developmentFee = fees[0];\\n        treasuryFee = fees[1];\\n        rewardsFee = fees[2];\\n        liquidityPoolFee = fees[3];\\n        cashoutFee = fees[4];\\n\\n        totalFees = rewardsFee + liquidityPoolFee + developmentFee + treasuryFee;\\n\\n        require(addresses.length == balances.length, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], balances[i] * (10**18));\\n        }\\n        require(totalSupply() == 1e24, \\\"TTL SUPPLY DIFF 1 MIL\\\");\\n\\n        usdcToken = usdcAddr;\\n        ownedContsLimit = 100;\\n        mintContLimit = 10;\\n        enableAutoSwapTreasury = false;\\n        enableAutoSwapDevFund = true;\\n        enableMintConts = true;\\n        enableCashout = true;\\n    }\\n\\n    // ***** WRITE functions for admin *****\\n    function setUSDCAddress(address newAddress) external onlyOwner {\\n        usdcToken = newAddress;\\n    }\\n\\n    function setEnableCashout(bool _enableCashout) external onlyOwner {\\n        enableCashout = _enableCashout;\\n    }\\n\\n    function setEnableMintConts(bool value) external onlyOwner {\\n        enableMintConts = value;\\n    }\\n\\n    function setContManagement(address crm) external onlyOwner {\\n        require(crm != address(0), \\\"NEW_CRM: zero addr\\\");\\n        _crm = CONTRewardManagement(crm);\\n    }\\n\\n    function setLiquidityRouter(address liqRouter) external onlyOwner {\\n        require(liqRouter != address(0), \\\"NEW_LROUTER: zero addr\\\");\\n        _liqRouter = LiquidityRouter(liqRouter);\\n    }\\n\\n    function changeContPrice(ContType _cType, uint256 newPrice) external onlyOwner {\\n        _crm._changeContPrice(_cType, newPrice);\\n    }\\n\\n    function changeRewardAPRPerCont(ContType _cType, int256 deductPcent) external onlyOwner {\\n        require(deductPcent < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        _crm._changeRewardAPRPerCont(_cType, deductPcent);\\n    }\\n\\n    function changeCashoutTimeout(uint256 newTime) external onlyOwner {\\n        _crm._changeCashoutTimeout(newTime);\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyOwner {\\n        _liqRouter.updateUniswapV2Router(_newAddr);\\n    }\\n\\n    function updateDevelopmentFundWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        developmentFundPool = wall;\\n    }\\n\\n    function updateLiquidityWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        liquidityPool = wall;\\n    }\\n\\n    function updateRewardsWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        rewardsPool = wall;\\n    }\\n\\n    function updateTreasuryWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        treasuryPool = wall;\\n    }\\n\\n    function updateRewardsFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = liquidityPoolFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        rewardsFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateLiquidityFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        liquidityPoolFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateDevelopmentFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        developmentFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateTreasuryFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + developmentFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        treasuryFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateCashoutFee(uint256 value) external onlyOwner {\\n        require(value <= 100, \\\"FEES: cashout exceeding 100%\\\");\\n        cashoutFee = value;\\n    }\\n\\n    function setBlacklistStatus(address account, bool value) external onlyOwner {\\n        _isBlacklisted[account] = value;\\n    }\\n\\n    function changeEnableAutoSwapTreasury(bool newVal) external onlyOwner {\\n        enableAutoSwapTreasury = newVal;\\n    }\\n\\n    function changeEnableAutoSwapDevFund(bool newVal) external onlyOwner {\\n        enableAutoSwapDevFund = newVal;\\n    }\\n\\n    function rescueMissentToken(address userAddr, uint256 tokens) external onlyOwner {\\n        require(tokens <= balanceOf(address(this)), \\\"SAVE_MISSENT: tokens exceed addr balance\\\");\\n        require(userAddr != address(0), \\\"SAVE_MISSENT: zero_address\\\");\\n        _transfer(address(this), userAddr, tokens);\\n    }\\n\\n    // ***** Private helpers functions *****\\n    function getContNumberOf(address account) private view returns (uint256) {\\n        return _crm._getContNumberOf(account);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \\\"ERC20: Blacklisted address\\\");\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function swapEx0xbToken(\\n        address receiver,\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) private {\\n        if (this.allowance(address(_liqRouter), _liqRouter.routerAddress()) < amountIn) {\\n            _approve(address(_liqRouter), _liqRouter.routerAddress(), uint256(2**256 - 1));\\n        }\\n        _liqRouter.swapExact0xBForToken(receiver, tokenAddr, amountIn, amountOutMin, deadline);\\n    }\\n\\n    function swap0xbExToken(\\n        address receiver,\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) private {\\n        if (this.allowance(address(_liqRouter), _liqRouter.routerAddress()) < amountInMax) {\\n            _approve(address(_liqRouter), _liqRouter.routerAddress(), uint256(2**256 - 1));\\n        }\\n        _liqRouter.swap0xBForExactToken(receiver, tokenAddr, amountOut, amountInMax, deadline);\\n    }\\n\\n    function swapExToken0xb(\\n        address receiver,\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) private {\\n        _liqRouter.swapExactTokenFor0xB(receiver, tokenAddr, amountIn, amountOutMin, deadline);\\n    }\\n\\n    function provideLiquidity(address sender, uint256 tokens) private {\\n        super._transfer(sender, liquidityPool, tokens);\\n    }\\n\\n    // ***** WRITE functions for public *****\\n    function swapExact0xBForToken(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 slippageTolerance,\\n        uint256 deadline\\n    ) public {\\n        address sender = msg.sender;\\n        uint256[] memory amountOutCurrent = _liqRouter.getOutputAmount(false, tokenAddr, amountIn);\\n        uint256 amountOutMin = amountOutCurrent[amountOutCurrent.length - 1];\\n        amountOutMin = (amountOutMin * (HUNDRED_PERCENT - slippageTolerance)) / HUNDRED_PERCENT;\\n        require(balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountIn);\\n        swapEx0xbToken(sender, tokenAddr, amountIn, amountOutMin, deadline);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 slippageTolerance,\\n        uint256 deadline\\n    ) public {\\n        address sender = msg.sender;\\n        uint256[] memory amountInCurrent = _liqRouter.getInputAmount(false, tokenAddr, amountOut);\\n        uint256 amountInMax = (amountInCurrent[0] * (HUNDRED_PERCENT + slippageTolerance)) / HUNDRED_PERCENT;\\n        require(balanceOf(sender) >= amountInMax, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountInMax);\\n        swap0xbExToken(sender, tokenAddr, amountOut, amountInMax, deadline);\\n    }\\n    function swapExactTokenFor0xB(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 slippageTolerance,\\n        uint256 deadline\\n    ) public {\\n        address sender = msg.sender;\\n        uint256[] memory amountOutCurrent = _liqRouter.getOutputAmount(true, tokenAddr, amountIn);\\n        uint256 amountOutMin = amountOutCurrent[amountOutCurrent.length - 1];\\n        amountOutMin = (amountOutMin * (HUNDRED_PERCENT - slippageTolerance)) / HUNDRED_PERCENT;\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        require(targetToken.balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        require(targetToken.allowance(sender, address(this)) >= amountIn, \\\"SWAP: need to approve first\\\");\\n        targetToken.transferFrom(sender, address(_liqRouter), amountIn);\\n        swapExToken0xb(sender, tokenAddr, amountIn, amountOutMin, deadline);\\n    }\\n\\n    function mintConts(string[] memory names, ContType _cType) external {\\n        require(enableMintConts, \\\"CONTMINT: mint conts disabled\\\");\\n        require(names.length <= mintContLimit, \\\"CONTMINT: too many conts\\\");\\n        for (uint256 i = 0; i < names.length; i++) {\\n            require(bytes(names[i]).length > 3 && bytes(names[i]).length < 33, \\\"CONTMINT: improper character count\\\");\\n        }\\n\\n        address sender = _msgSender();\\n        require(sender != address(0), \\\"CONTMINT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CONTMINT: blacklisted address\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"CONTMINT: pools cannot create cont\\\"\\n        );\\n        uint256 contCount = getContNumberOf(sender);\\n        require(contCount + names.length <= ownedContsLimit, \\\"CONTMINT: reached mint limit\\\");\\n        uint256 contsPrice = _crm.contPrice(_cType) * names.length;\\n        totalTokensPaidForMinting += contsPrice;\\n        require(balanceOf(sender) >= contsPrice, \\\"CONTMINT: Balance too low for creation.\\\");\\n\\n        // DEV FUND\\n        uint256 developmentFundTokens = (contsPrice * developmentFee) / 100;\\n        if (enableAutoSwapDevFund) {\\n            super._transfer(sender, address(_liqRouter), developmentFundTokens);\\n            swapEx0xbToken(developmentFundPool, usdcToken, developmentFundTokens, 0, block.timestamp);\\n        } else {\\n            super._transfer(sender, developmentFundPool, developmentFundTokens);\\n        }\\n\\n        // REWARDS POOL\\n        uint256 rewardsPoolTokens = (contsPrice * rewardsFee) / 100;\\n        super._transfer(sender, rewardsPool, rewardsPoolTokens);\\n\\n        // TREASURY\\n        uint256 treasuryPoolTokens = (contsPrice * treasuryFee) / 100;\\n        if (enableAutoSwapTreasury) {\\n            super._transfer(sender, address(_liqRouter), treasuryPoolTokens);\\n            swapEx0xbToken(treasuryPool, usdcToken, treasuryPoolTokens, 0, block.timestamp);\\n        } else {\\n            super._transfer(sender, treasuryPool, treasuryPoolTokens);\\n        }\\n\\n        // LIQUIDITY\\n        uint256 liquidityTokens = (contsPrice * liquidityPoolFee) / 100;\\n        provideLiquidity(sender, liquidityTokens);\\n\\n        // EXTRA\\n        uint256 extraT = contsPrice - developmentFundTokens - rewardsPoolTokens - treasuryPoolTokens - liquidityTokens;\\n        if (extraT > 0) {\\n            super._transfer(sender, address(this), extraT);\\n        }\\n\\n        _crm.createConts(sender, names, _cType);\\n        emit ContsMinted(sender);\\n    }\\n\\n    function cashoutReward(uint256 _contIndex) external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHT: Cashout Disabled\\\");\\n        require(sender != address(0), \\\"CSHT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHT: blacklisted\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"CSHT: pools cannot cashout rewards\\\"\\n        );\\n        uint256 rewardAmount = _crm._getRewardAmountOf(sender, _contIndex);\\n        require(rewardAmount > 0, \\\"CSHT: reward not ready\\\");\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            // Professor: keep it in reward for now.\\n            // provideLiquidity(rewardsPool, liquidityPool, feeAmount);\\n        }\\n        rewardAmount -= feeAmount;\\n\\n        super._transfer(rewardsPool, sender, rewardAmount);\\n        _crm._cashoutContReward(sender, _contIndex);\\n        emit RewardCashoutOne(sender, _contIndex);\\n    }\\n\\n    function cashoutAll() external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHTALL: cashout disabled\\\");\\n        require(sender != address(0), \\\"CSHTALL: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHTALL: blacklisted address\\\");\\n        require(sender != developmentFundPool && sender != rewardsPool, \\\"CSHTALL: pools cannot cashout\\\");\\n        uint256 rewardAmount = _crm._getRewardAmountOf(sender);\\n        require(rewardAmount > 0, \\\"CSHTALL: reward not ready\\\");\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            // Professor: keep it in reward for now.\\n            // provideLiquidity(rewardsPool, liquidityPool, feeAmount);\\n        }\\n        rewardAmount -= feeAmount;\\n\\n        super._transfer(rewardsPool, sender, rewardAmount);\\n        _crm._cashoutAllContsReward(sender);\\n        emit RewardCashoutAll(sender);\\n    }\\n\\n    // ***** READ function for public *****\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) external view returns (uint256[] memory) {\\n        return _liqRouter.getOutputAmount(is0xBOut, targetToken, inputAmount);\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) external view returns (uint256[] memory) {\\n        return _liqRouter.getInputAmount(is0xBOut, targetToken, outputAmount);\\n    }\\n\\n    function getRewardAmount() external view returns (uint256) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getRewardAmountOf(_msgSender());\\n    }\\n\\n    function getContPrice(ContType _cType) external view returns (uint256) {\\n        return _crm.contPrice(_cType);\\n    }\\n\\n    function getRewardAPRPerCont(ContType _cType) external view returns (uint256) {\\n        return _crm.currentRewardAPRPerNewCont(_cType);\\n    }\\n\\n    function getCashoutTimeout() external view returns (uint256) {\\n        return _crm.cashoutTimeout();\\n    }\\n\\n    function getContsNames() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsNames(_msgSender());\\n    }\\n\\n    function getContsCurrentAPR() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsCurrentAPR(_msgSender());\\n    }\\n\\n    function getContsInitialAPR() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsInitialAPR(_msgSender());\\n    }\\n\\n    function getContsCreationTime() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsCreationTime(_msgSender());\\n    }\\n\\n    function getContsTypes() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsTypes(_msgSender());\\n    }\\n\\n    function getContsRewards() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsRewardAvailable(_msgSender());\\n    }\\n\\n    function getContsLastCashoutTime() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        return _crm._getContsLastUpdateTime(_msgSender());\\n    }\\n\\n    function getTotalConts() external view returns (uint256) {\\n        return _crm.totalContsCreated();\\n    }\\n\\n    function getTotalContsPerContType(ContType __cType) external view returns (uint256) {\\n        return _crm.totalContsPerContType(__cType);\\n    }\\n}\\n\",\"keccak256\":\"0xbc7a747717c42b0291765a4f650b63c71df4ad7c30664220275fd5ff43b0f54c\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n    mapping(ContType => uint256) private _totalContsPerContType;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerContType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyAuthorities {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerContType[_cType] += contNames.length;\\n    }\\n\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contCurrentReward(cont, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n        return rewardCont;\\n    }\\n\\n    function _cashoutAllContsReward(address account) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            uint256 lastUpd = conts[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all conts.\\\");\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            rewardsTotal += contCurrentReward(_cont, currentTstamp);\\n            _cont.lastUpdateTime = currentTstamp;\\n        }\\n        return rewardsTotal;\\n    }\\n\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerContType[_cType];\\n    }\\n\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardCount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardCount += contCurrentReward(_cont, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOf(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contCurrentReward(cont, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(contCurrentReward(conts[0], currentTstamp));\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(_rewardsAvailable, separator, uint2str(contCurrentReward(conts[i], currentTstamp)))\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function contCurrentReward(ContEntity memory cont, uint256 curTstamp) private view returns (uint256) {\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, cont.lastUpdateTime);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, cont.lastUpdateTime);\\n        uint256 itrTstamp = cont.lastUpdateTime;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != curTstamp) {\\n            nextTstamp = curTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x81738a13d7054e4903c66fb4903393fdfde7d48356bdd9b281730ffa1b5f18c2\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable {\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address public admin0xB;\\n    address public token;\\n\\n    // ----- Constructor -----\\n    function initialize(address _router) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = msg.sender;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsOut(inputAmount, path);\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) external view returns (uint256[] memory) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        return uniswapV2Router.getAmountsIn(outputAmount, path);\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        token = _token;\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(token, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(token, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(token, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(token, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(token, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(token, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr);\\n        }\\n        address[] memory path = getPath(inTokenAddr, true);\\n\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n\\n        emit Swapped(inTokenAddr, amountIn, token, result[result.length - 1]);\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        address[] memory path = getPath(outTokenAddr, false);\\n\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n\\n        emit Swapped(token, amountIn, outTokenAddr, result[result.length - 1]);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities {\\n        address[] memory path = getPath(outTokenAddr, false);\\n\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n\\n        uint256 amountInActual = result[0];\\n        // return residual tokens to sender\\n        IERC20(token).transfer(receiver, amountInMax - amountInActual);\\n\\n        emit Swapped(token, amountInActual, outTokenAddr, amountOut);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, uint256(2 ** 256 - 1));\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = token;\\n            } else {\\n                result[0] = token;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = token;\\n        } else {\\n            res[0] = token;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x902c55e75f8bd734b5dcd92a0fc91b8d754463a35761b9424204eb656ed304a0\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 684,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 690,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 692,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 694,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 696,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1277,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalShares",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_shares",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_released",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_payees",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 2584,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_crm",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(CONTRewardManagement)6649"
      },
      {
        "astId": 2587,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_liqRouter",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(LiquidityRouter)7259"
      },
      {
        "astId": 2592,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "ownedContsLimit",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 2594,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "mintContLimit",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2596,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalTokensPaidForMinting",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 2598,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFundPool",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 2600,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 2602,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsPool",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 2604,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 2606,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsFee",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 2608,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 2610,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPoolFee",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 2612,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 2614,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalFees",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 2616,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "cashoutFee",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 2618,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapTreasury",
        "offset": 0,
        "slot": "216",
        "type": "t_bool"
      },
      {
        "astId": 2620,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapDevFund",
        "offset": 1,
        "slot": "216",
        "type": "t_bool"
      },
      {
        "astId": 2622,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "usdcToken",
        "offset": 2,
        "slot": "216",
        "type": "t_address"
      },
      {
        "astId": 2626,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2628,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableCashout",
        "offset": 0,
        "slot": "218",
        "type": "t_bool"
      },
      {
        "astId": 2630,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableMintConts",
        "offset": 1,
        "slot": "218",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CONTRewardManagement)6649": {
        "encoding": "inplace",
        "label": "contract CONTRewardManagement",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityRouter)7259": {
        "encoding": "inplace",
        "label": "contract LiquidityRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}