{
  "address": "0x7b876A775dAc25150ea2f6C471567F38976748C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellTax",
          "type": "uint256"
        }
      ],
      "name": "InvalidSellTax",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contsCount",
          "type": "uint256"
        }
      ],
      "name": "ContsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "walletName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "squareAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cubeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tessAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardCashoutAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "cType",
          "type": "uint8"
        }
      ],
      "name": "RewardCashoutOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_crm",
      "outputs": [
        {
          "internalType": "contract CONTRewardManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isSellTaxWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_lastBuyOnLaunch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liqRouter",
      "outputs": [
        {
          "internalType": "contract LiquidityRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "_walletName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "antiBotEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "automatedMarketMakerPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "cashoutReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapDevFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwapTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "changeSellTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVal",
          "type": "address"
        }
      ],
      "name": "changeSellTaxTargetAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVal",
          "type": "address"
        }
      ],
      "name": "changeUniswapV2PairAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFundPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapCashout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapDevFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwapTreasury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableCashout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintConts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "usdcAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchBuyLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchBuyTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "mintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownedContsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellTaxTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setBlacklistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crm",
          "type": "address"
        }
      ],
      "name": "setContManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableCashout",
          "type": "bool"
        }
      ],
      "name": "setEnableCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setEnableMintConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "liqRouter",
          "type": "address"
        }
      ],
      "name": "setLiquidityRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setUSDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swap0xBForExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapAVAXForExact0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExact0xBForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExactAVAXFor0xB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokenFor0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wait",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForExact0xB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensPaidForMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IJoeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateCashoutFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateCashoutTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateDevelopmentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateDevelopmentFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateLiquidityWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateRewardsWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe40082caae7053ffbab4d58995b0478dbf43e2cbc5c825ea8f1654a413af9c7d",
  "receipt": {
    "to": null,
    "from": "0x0AB01869EEC7240e63990F16Be309D8364814AA8",
    "contractAddress": "0x7b876A775dAc25150ea2f6C471567F38976748C2",
    "transactionIndex": 1,
    "gasUsed": "5135533",
    "logsBloom": "0x
    "blockHash": "0x09503b158f31e160d7c61c8beae89a37976bf3094fc8ab1ecd6686e3d37bbf4f",
    "transactionHash": "0xe40082caae7053ffbab4d58995b0478dbf43e2cbc5c825ea8f1654a413af9c7d",
    "logs": [],
    "blockNumber": 10742997,
    "cumulativeGasUsed": "5220141",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aa2fafca3ff81473fe0849379c09aad7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"InvalidSellTax\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contsCount\",\"type\":\"uint256\"}],\"name\":\"ContsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"walletName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cubeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tessAmount\",\"type\":\"uint256\"}],\"name\":\"RewardCashoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"}],\"name\":\"RewardCashoutOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_crm\",\"outputs\":[{\"internalType\":\"contract CONTRewardManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isSellTaxWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuyOnLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqRouter\",\"outputs\":[{\"internalType\":\"contract LiquidityRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"_walletName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapDevFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwapTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"changeSellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVal\",\"type\":\"address\"}],\"name\":\"changeSellTaxTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVal\",\"type\":\"address\"}],\"name\":\"changeUniswapV2PairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFundPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapCashout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapDevFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwapTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCashout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintConts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"usdcAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuyTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"mintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownedContsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crm\",\"type\":\"address\"}],\"name\":\"setContManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableCashout\",\"type\":\"bool\"}],\"name\":\"setEnableCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableMintConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"liqRouter\",\"type\":\"address\"}],\"name\":\"setLiquidityRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUSDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swap0xBForExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapAVAXForExact0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExact0xBForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExactAVAXFor0xB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapExactTokenFor0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wait\",\"type\":\"uint256\"}],\"name\":\"swapTokenForExact0xB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensPaidForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IJoeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCashoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateCashoutTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateDevelopmentFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cashoutAll()\":{\"details\":\"send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet.\"},\"cashoutReward(uint256)\":{\"details\":\"send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet.\",\"params\":{\"_contIndex\":\"index of contract in list of contract of user\"}},\"changeEnableAutoSwapCashout(bool)\":{\"params\":{\"newVal\":\"set to true if enable cashout autoswap\"}},\"changeEnableAutoSwapDevFund(bool)\":{\"params\":{\"newVal\":\"set to true if enable dev/fund autoswap\"}},\"changeEnableAutoSwapTreasury(bool)\":{\"params\":{\"newVal\":\"set to true if enable treasury autoswap\"}},\"changeSellTaxRate(uint256)\":{\"params\":{\"newVal\":\"new tax rate\"}},\"changeSellTaxTargetAddress(address)\":{\"params\":{\"newVal\":\"new admin address\"}},\"changeUniswapV2PairAddress(address)\":{\"params\":{\"newVal\":\"new uniswapV2Pair address\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintConts(string[],uint8)\":{\"details\":\"create new contract instances, take funds from user and distribute to admin wallets according to SC configs.\",\"params\":{\"_cType\":\"type of new contracts.\",\"names\":\"list of names. The number of string in this list will be the count of new contracts.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBlacklistStatus(address,bool)\":{\"params\":{\"account\":\"account to change status\",\"value\":\"set to true if blacklisting\"}},\"setContManagement(address)\":{\"params\":{\"crm\":\"address of the new CRM\"}},\"setEnableCashout(bool)\":{\"params\":{\"_enableCashout\":\"true if user can cashout after this tx. false if otherwise\"}},\"setEnableMintConts(bool)\":{\"params\":{\"value\":\"true if user can mint new contracts\"}},\"setLiquidityRouter(address)\":{\"params\":{\"liqRouter\":\"new address of LiquidityRouter\"}},\"setUSDCAddress(address)\":{\"params\":{\"newAddress\":\"new usdc address\"}},\"setWhitelistStatus(address,bool)\":{\"params\":{\"account\":\"account to change status\",\"value\":\"set to true if whitelisting\"}},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"swap0xBForExactToken(address,uint256,uint256,uint256)\":{\"params\":{\"amountInMax\":\"a maximum expected input. Will raise error if can't satisfy.\",\"amountOut\":\"an exact amount of output token\",\"tokenAddr\":\"output token\",\"wait\":\"maximum wait time\"}},\"swapAVAXForExact0xB(uint256,uint256,uint256)\":{\"details\":\"set msg.value as the maximum expected input amount of AVAX\",\"params\":{\"amountInMax\":\"set same as msg.value\",\"amountOut\":\"an exact amount of output 0xB.\",\"wait\":\"maximum wait time\"}},\"swapExact0xBForToken(address,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"an exact amount of input 0xB\",\"amountOutMin\":\"a minimum expected output. Will raise error if can't satisfy.\",\"tokenAddr\":\"output token\",\"wait\":\"maximum wait time\"}},\"swapExactAVAXFor0xB(uint256,uint256)\":{\"details\":\"set msg.value as the exact input amount of AVAX\",\"params\":{\"amountOutMin\":\"a minimum expected output. Will raise error if can't satisfy.\",\"wait\":\"maximum wait time\"}},\"swapExactTokenFor0xB(address,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"an exact amount of input token\",\"amountOutMin\":\"a minimum expected output 0xB. Will raise error if can't satisfy.\",\"tokenAddr\":\"input token\",\"wait\":\"maximum wait time\"}},\"swapTokenForExact0xB(address,uint256,uint256,uint256)\":{\"params\":{\"amountInMax\":\"a maximum expected amount of input token. Will raise error if can't satisfy.\",\"amountOut\":\"an exact amount of output 0xB\",\"tokenAddr\":\"input token\",\"wait\":\"maximum wait time\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCashoutFee(uint256)\":{\"params\":{\"value\":\"new percentage (100 = 100%)\"}},\"updateCashoutTaxPool(address)\":{\"params\":{\"wall\":\"new target address for cashout tax\"}},\"updateDevelopmentFee(uint256)\":{\"params\":{\"value\":\"new percentage (100 = 100%)\"}},\"updateDevelopmentFundWallet(address)\":{\"params\":{\"wall\":\"new wallet address\"}},\"updateLiquidityFee(uint256)\":{\"params\":{\"value\":\"new percentage (100 = 100%)\"}},\"updateLiquidityWallet(address)\":{\"params\":{\"wall\":\"new wallet address\"}},\"updateRewardsFee(uint256)\":{\"params\":{\"value\":\"new percentage (100 = 100%)\"}},\"updateRewardsWallet(address)\":{\"params\":{\"wall\":\"new wallet address\"}},\"updateTreasuryFee(uint256)\":{\"params\":{\"value\":\"new percentage (100 = 100%)\"}},\"updateTreasuryWallet(address)\":{\"params\":{\"wall\":\"new wallet address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_walletName(address)\":{\"notice\":\"return a string according to wallet name\"},\"cashoutAll()\":{\"notice\":\"cashout reward from all contracts\"},\"cashoutReward(uint256)\":{\"notice\":\"cashout reward from a single contract\"},\"changeEnableAutoSwapCashout(bool)\":{\"notice\":\"change autoswap mode for cashout\"},\"changeEnableAutoSwapDevFund(bool)\":{\"notice\":\"change autoswap mode for dev/fund wallet\"},\"changeEnableAutoSwapTreasury(bool)\":{\"notice\":\"change autoswap mode for treasury\"},\"changeSellTaxRate(uint256)\":{\"notice\":\"change sell tax rate\"},\"changeSellTaxTargetAddress(address)\":{\"notice\":\"change admin address\"},\"changeUniswapV2PairAddress(address)\":{\"notice\":\"change uniswapV2Pair\"},\"mintConts(string[],uint8)\":{\"notice\":\"mint new contracts\"},\"setBlacklistStatus(address,bool)\":{\"notice\":\"blacklist/un-blacklist an account\"},\"setContManagement(address)\":{\"notice\":\"set new address of ContRewardManager\"},\"setEnableCashout(bool)\":{\"notice\":\"set if user can cashout\"},\"setEnableMintConts(bool)\":{\"notice\":\"set if user can mint new contract\"},\"setLiquidityRouter(address)\":{\"notice\":\"set new address of LiquidityRouter\"},\"setUSDCAddress(address)\":{\"notice\":\"set address of usdc\"},\"setWhitelistStatus(address,bool)\":{\"notice\":\"whitelist/un-whitelist an account\"},\"swap0xBForExactToken(address,uint256,uint256,uint256)\":{\"notice\":\"swap from an exact 0xB amount to an ERC20 tokens\"},\"swapAVAXForExact0xB(uint256,uint256,uint256)\":{\"notice\":\"swap from an exact 0xB amount to an ERC20 tokens\"},\"swapExact0xBForToken(address,uint256,uint256,uint256)\":{\"notice\":\"swap from an exact 0xB amount to an ERC20 tokens\"},\"swapExactAVAXFor0xB(uint256,uint256)\":{\"notice\":\"swap from an exact 0xB amount to an ERC20 tokens\"},\"swapExactTokenFor0xB(address,uint256,uint256,uint256)\":{\"notice\":\"swap from an exact amount of erc20 token to 0xB\"},\"swapTokenForExact0xB(address,uint256,uint256,uint256)\":{\"notice\":\"swap from an erc20 token to exact amount of 0xB\"},\"updateCashoutFee(uint256)\":{\"notice\":\"set percentage of contract mint to be sent to cashout wallet\"},\"updateCashoutTaxPool(address)\":{\"notice\":\"set new pool to send cashout tax to\"},\"updateDevelopmentFee(uint256)\":{\"notice\":\"set percentage of contract mint to be sent to dev/marketing pool\"},\"updateDevelopmentFundWallet(address)\":{\"notice\":\"set new wallet for development/marketing team\"},\"updateLiquidityFee(uint256)\":{\"notice\":\"set percentage of contract mint to be sent to liquidity\"},\"updateLiquidityWallet(address)\":{\"notice\":\"set new wallet for liquidity temporary pool\"},\"updateRewardsFee(uint256)\":{\"notice\":\"set percentage of contract mint to be sent to rewards pool\"},\"updateRewardsWallet(address)\":{\"notice\":\"set new wallet for rewards\"},\"updateTreasuryFee(uint256)\":{\"notice\":\"set percentage of contract mint to be sent to treasury pool\"},\"updateTreasuryWallet(address)\":{\"notice\":\"set new wallet for treasury\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZeroXBlock.sol\":\"ZeroXBlock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/ZeroXBlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IJoeRouter02.sol\\\";\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\nimport \\\"./dependencies/CONTRewardManagement.sol\\\";\\nimport \\\"./dependencies/LiquidityRouter.sol\\\";\\n\\ncontract ZeroXBlock is Initializable, ERC20Upgradeable, OwnableUpgradeable, PaymentSplitterUpgradeable {\\n    CONTRewardManagement public _crm;\\n\\n    IJoeRouter02 public uniswapV2Router;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    uint256 public ownedContsLimit;\\n    uint256 private mintContLimit;\\n\\n    address public uniswapV2Pair;\\n    uint256 public totalTokensPaidForMinting;\\n\\n    // ***** Pools Address *****\\n    address public developmentFundPool;\\n    address public treasuryPool;\\n    address public rewardsPool;\\n    address public liquidityPool;\\n\\n    // ***** Storage for fees *****\\n    uint256 public rewardsFee;\\n    uint256 public treasuryFee;\\n    uint256 public liquidityPoolFee;\\n    uint256 public developmentFee;\\n    uint256 public totalFees;\\n\\n    uint256 public cashoutFee;\\n\\n    // ***** Storage for mint auto-swapping *****\\n    bool public enableAutoSwapTreasury;\\n    bool public enableAutoSwapDevFund;\\n    address public usdcToken;\\n\\n    // ***** (Deprecated/Removed) Anti-bot *****\\n    bool public antiBotEnabled;\\n    uint256 public launchBuyLimit;\\n    uint256 public launchBuyTimeout;\\n    mapping(address => uint256) public _lastBuyOnLaunch;\\n\\n    // ***** Blacklist storage *****\\n    mapping(address => bool) public _isBlacklisted;\\n\\n    // ***** (Deprecated/Removed) Market makers pairs *****\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    // ***** Enable Cashout *****\\n    bool public enableCashout;\\n    bool public enableMintConts;\\n\\n    // ***** V2 new storages *****\\n    address public cashoutTaxPool;\\n    LiquidityRouter public _liqRouter;\\n    bool public enableAutoSwapCashout;\\n\\n    // ***** Sell tax storage *****\\n    address public sellTaxTargetAddress;\\n    uint256 public sellTax;\\n    mapping(address => bool) public _isSellTaxWhitelisted;\\n\\n    // ***** Customs errors *****\\n    error InvalidSellTax(uint256 _sellTax);\\n    error InvalidAddress(address _address);\\n\\n    // ***** Events *****\\n    event ContsMinted(address sender, ContType cType, uint256 contsCount);\\n    event RewardCashoutOne(address sender, uint256 index, uint256 amount, ContType cType);\\n    event RewardCashoutAll(\\n        address sender,\\n        uint256 amount,\\n        uint256 squareAmount,\\n        uint256 cubeAmount,\\n        uint256 tessAmount\\n    );\\n    event Funded(string walletName, ContType cType, address token, uint256 amount);\\n\\n    // ***** Constructor *****\\n    function initialize(\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        address[] memory addresses,\\n        uint256[] memory balances,\\n        uint256[] memory fees,\\n        address usdcAddr\\n    ) public initializer {\\n        require(addresses.length > 0 && balances.length > 0, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(\\\"0xBlock\\\", \\\"0xB\\\");\\n        __PaymentSplitter_init(payees, shares);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], balances[i] * (10**18));\\n        }\\n        require(totalSupply() == 1e24, \\\"TTL SUPPLY DIFF 1 MIL\\\");\\n\\n        require(\\n            addresses[1] != address(0) &&\\n                addresses[2] != address(0) &&\\n                addresses[3] != address(0) &&\\n                addresses[4] != address(0),\\n            \\\"POOL ZERO FOUND\\\"\\n        );\\n        require(addresses.length == balances.length, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        require(fees[0] > 0 && fees[1] > 0 && fees[2] > 0 && fees[3] > 0 && fees[4] > 0, \\\"0% FEES FOUND\\\");\\n        developmentFundPool = addresses[1];\\n        liquidityPool = addresses[2];\\n        treasuryPool = addresses[3];\\n        rewardsPool = addresses[4];\\n\\n        cashoutTaxPool = rewardsPool;\\n        developmentFee = fees[0];\\n        treasuryFee = fees[1];\\n        rewardsFee = fees[2];\\n        liquidityPoolFee = fees[3];\\n        cashoutFee = fees[4];\\n\\n        totalFees = rewardsFee + liquidityPoolFee + developmentFee + treasuryFee;\\n\\n        usdcToken = usdcAddr;\\n        ownedContsLimit = 100;\\n        mintContLimit = 10;\\n        enableAutoSwapTreasury = false;\\n        enableAutoSwapDevFund = true;\\n        enableMintConts = true;\\n        enableCashout = true;\\n\\n        sellTaxTargetAddress = msg.sender;\\n    }\\n\\n    // ***** WRITE functions for admin *****\\n    /**\\n        @notice set address of usdc\\n        @param newAddress new usdc address\\n    */\\n    function setUSDCAddress(address newAddress) external onlyOwner {\\n        require(newAddress != address(0), \\\"NEW_USDC: zero addr\\\");\\n        usdcToken = newAddress;\\n    }\\n\\n    /**\\n        @notice set if user can cashout\\n        @param _enableCashout true if user can cashout after this tx. false if otherwise\\n    */\\n    function setEnableCashout(bool _enableCashout) external onlyOwner {\\n        enableCashout = _enableCashout;\\n    }\\n\\n    /**\\n        @notice set if user can mint new contract\\n        @param value true if user can mint new contracts\\n    */\\n    function setEnableMintConts(bool value) external onlyOwner {\\n        enableMintConts = value;\\n    }\\n\\n    /**\\n        @notice set new address of ContRewardManager\\n        @param crm address of the new CRM\\n    */\\n    function setContManagement(address crm) external onlyOwner {\\n        require(crm != address(0), \\\"NEW_CRM: zero addr\\\");\\n        _crm = CONTRewardManagement(crm);\\n    }\\n\\n    /**\\n        @notice set new address of LiquidityRouter\\n        @param liqRouter new address of LiquidityRouter\\n    */\\n    function setLiquidityRouter(address payable liqRouter) external onlyOwner {\\n        require(liqRouter != address(0), \\\"NEW_LROUTER: zero addr\\\");\\n        _liqRouter = LiquidityRouter(liqRouter);\\n    }\\n\\n    /**\\n        @notice set new pool to send cashout tax to\\n        @param wall new target address for cashout tax\\n    */\\n    function updateCashoutTaxPool(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        cashoutTaxPool = wall;\\n    }\\n\\n    /**\\n        @notice set new wallet for development/marketing team\\n        @param wall new wallet address\\n    */\\n    function updateDevelopmentFundWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        developmentFundPool = wall;\\n    }\\n\\n    /**\\n        @notice set new wallet for liquidity temporary pool\\n        @param wall new wallet address\\n    */\\n    function updateLiquidityWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        liquidityPool = wall;\\n    }\\n\\n    /**\\n        @notice set new wallet for rewards\\n        @param wall new wallet address\\n    */\\n    function updateRewardsWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        rewardsPool = wall;\\n    }\\n\\n    /**\\n        @notice set new wallet for treasury\\n        @param wall new wallet address\\n    */\\n    function updateTreasuryWallet(address payable wall) external onlyOwner {\\n        require(wall != address(0), \\\"UPD_WALL: zero addr\\\");\\n        treasuryPool = wall;\\n    }\\n\\n    /**\\n        @notice set percentage of contract mint to be sent to rewards pool\\n        @param value new percentage (100 = 100%)\\n    */\\n    function updateRewardsFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = liquidityPoolFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        rewardsFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    /**\\n        @notice set percentage of contract mint to be sent to liquidity\\n        @param value new percentage (100 = 100%)\\n    */\\n    function updateLiquidityFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        liquidityPoolFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    /**\\n        @notice set percentage of contract mint to be sent to dev/marketing pool\\n        @param value new percentage (100 = 100%)\\n    */\\n    function updateDevelopmentFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        developmentFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    /**\\n        @notice set percentage of contract mint to be sent to treasury pool\\n        @param value new percentage (100 = 100%)\\n    */\\n    function updateTreasuryFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + developmentFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        treasuryFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    /**\\n        @notice set percentage of contract mint to be sent to cashout wallet\\n        @param value new percentage (100 = 100%)\\n    */\\n    function updateCashoutFee(uint256 value) external onlyOwner {\\n        require(value <= 100, \\\"FEES: cashout exceeding 100%\\\");\\n        cashoutFee = value;\\n    }\\n\\n    /**\\n        @notice blacklist/un-blacklist an account\\n        @param account account to change status\\n        @param value set to true if blacklisting\\n    */\\n    function setBlacklistStatus(address account, bool value) external onlyOwner {\\n        _isBlacklisted[account] = value;\\n    }\\n\\n    /**\\n        @notice change autoswap mode for treasury\\n        @param newVal set to true if enable treasury autoswap\\n    */\\n    function changeEnableAutoSwapTreasury(bool newVal) external onlyOwner {\\n        enableAutoSwapTreasury = newVal;\\n    }\\n\\n    /**\\n        @notice change autoswap mode for dev/fund wallet\\n        @param newVal set to true if enable dev/fund autoswap\\n    */\\n    function changeEnableAutoSwapDevFund(bool newVal) external onlyOwner {\\n        enableAutoSwapDevFund = newVal;\\n    }\\n\\n    /**\\n        @notice change autoswap mode for cashout\\n        @param newVal set to true if enable cashout autoswap\\n    */\\n    function changeEnableAutoSwapCashout(bool newVal) external onlyOwner {\\n        enableAutoSwapCashout = newVal;\\n    }\\n\\n    /**\\n        @notice change sell tax rate\\n        @param newVal new tax rate\\n    */\\n    function changeSellTaxRate(uint256 newVal) external onlyOwner {\\n        // sell tax rate cannot be higher than 100%\\n        if (newVal >= 100) {\\n            revert InvalidSellTax(newVal);\\n        }\\n        sellTax = newVal;\\n    }\\n\\n    /**\\n        @notice whitelist/un-whitelist an account\\n        @param account account to change status\\n        @param value set to true if whitelisting\\n    */\\n    function setWhitelistStatus(address account, bool value) external onlyOwner {\\n        if (account == address(0)) {\\n            revert InvalidAddress(account);\\n        }\\n        _isSellTaxWhitelisted[account] = value;\\n    }\\n\\n    /**\\n        @notice change admin address\\n        @param newVal new admin address\\n    */\\n    function changeSellTaxTargetAddress(address newVal) external onlyOwner {\\n        if (newVal == address(0)) {\\n            revert InvalidAddress(newVal);\\n        }\\n        sellTaxTargetAddress = newVal;\\n    }\\n\\n    /**\\n        @notice change uniswapV2Pair\\n        @param newVal new uniswapV2Pair address\\n    */\\n    function changeUniswapV2PairAddress(address newVal) external onlyOwner {\\n        if (newVal == address(0)) {\\n            revert InvalidAddress(newVal);\\n        }\\n        uniswapV2Pair = newVal;\\n    }\\n\\n    // ***** Private helpers functions *****\\n    /// @notice override ERC-20 transfer function to check blacklisted address and prevent malicious actions\\n    /// also check the sell tax whitelisted address and apply sell tax when user add liquidity to traderjoe pool\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \\\"ERC20: Blacklisted address\\\");\\n        uint256 sellTaxAmount = (amount * sellTax) / 100;\\n        if (sellTaxAmount > 0 && !_isSellTaxWhitelisted[from] && to == uniswapV2Pair) {\\n            super._transfer(from, sellTaxTargetAddress, sellTaxAmount);\\n        }\\n        uint256 amountWithTax = to != uniswapV2Pair ? amount : amount - sellTaxAmount;\\n        super._transfer(from, to, amountWithTax);\\n    }\\n\\n    // Send fund from sender to pool.\\n    // amount send will be in 0xB. Will be converted if target token is in other tokens\\n    // Emit Funded.\\n    // ** not yet supported to fund from cashout or swaps\\n    /// @notice fund 0xB functionality wallets\\n    /// @dev helper function to emit \\\"Funded\\\" event from contract whenever user actions fund admin's wallets\\n    function _fund(\\n        address sender,\\n        address targetWalletAddress,\\n        ContType cType,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        string memory targetWalletName = _walletName(targetWalletAddress);\\n        if (token == address(this)) {\\n            _transfer(sender, targetWalletAddress, amount);\\n            emit Funded(targetWalletName, cType, token, amount);\\n        } else {\\n            _transfer(sender, address(_liqRouter), amount);\\n            _liqRouter.swapExact0xBForTokenNoFee(targetWalletAddress, token, amount);\\n            uint256 amountOut = (_liqRouter.getOutputAmount(true, token, amount) * sellTax) / 100;\\n            emit Funded(targetWalletName, cType, token, amountOut);\\n        }\\n    }\\n\\n    /// @notice return a string according to wallet name\\n    function _walletName(address addr) public view returns (string memory) {\\n        if (addr == rewardsPool) return \\\"rewards\\\";\\n        if (addr == developmentFundPool) return \\\"devfund\\\";\\n        if (addr == treasuryPool) return \\\"treasury\\\";\\n        if (addr == liquidityPool) return \\\"liquidity\\\";\\n        return \\\"_\\\";\\n    }\\n\\n    // ***** WRITE functions for public *****\\n    /**\\n        @notice swap from an exact 0xB amount to an ERC20 tokens\\n        @param tokenAddr output token\\n        @param amountIn an exact amount of input 0xB\\n        @param amountOutMin a minimum expected output. Will raise error if can't satisfy.\\n        @param wait maximum wait time\\n    */\\n    function swapExact0xBForToken(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        require(balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountIn);\\n        uint256 fee;\\n        (, fee) = _liqRouter.swapExact0xBForToken(sender, tokenAddr, amountIn, amountOutMin, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, address(this), fee);\\n    }\\n\\n    /**\\n        @notice swap from an exact 0xB amount to an ERC20 tokens\\n        @param tokenAddr output token\\n        @param amountOut an exact amount of output token\\n        @param amountInMax a maximum expected input. Will raise error if can't satisfy.\\n        @param wait maximum wait time\\n    */\\n    function swap0xBForExactToken(\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        require(balanceOf(sender) >= amountInMax, \\\"SWAP: insufficient balance\\\");\\n        _transfer(sender, address(_liqRouter), amountInMax);\\n        uint256 fee;\\n        (, fee) = _liqRouter.swap0xBForExactToken(sender, tokenAddr, amountOut, amountInMax, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, address(this), fee);\\n    }\\n\\n    /**\\n        @notice swap from an exact amount of erc20 token to 0xB\\n        @param tokenAddr input token\\n        @param amountIn an exact amount of input token\\n        @param amountOutMin a minimum expected output 0xB. Will raise error if can't satisfy.\\n        @param wait maximum wait time\\n    */\\n    function swapExactTokenFor0xB(\\n        address tokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        require(targetToken.balanceOf(sender) >= amountIn, \\\"SWAP: insufficient balance\\\");\\n        targetToken.transferFrom(sender, address(_liqRouter), amountIn);\\n        uint256 fee;\\n        (, fee) = _liqRouter.swapExactTokenFor0xB(sender, tokenAddr, amountIn, amountOutMin, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, tokenAddr, fee);\\n    }\\n\\n    /**\\n        @notice swap from an erc20 token to exact amount of 0xB\\n        @param tokenAddr input token\\n        @param amountOut an exact amount of output 0xB\\n        @param amountInMax a maximum expected amount of input token. Will raise error if can't satisfy.\\n        @param wait maximum wait time\\n    */\\n    function swapTokenForExact0xB(\\n        address tokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) public {\\n        address sender = msg.sender;\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        require(targetToken.balanceOf(sender) >= amountInMax, \\\"SWAP: insufficient balance\\\");\\n        targetToken.transferFrom(sender, address(_liqRouter), amountInMax);\\n        uint256 fee;\\n        (, fee) = _liqRouter.swapTokenForExact0xB(sender, tokenAddr, amountOut, amountInMax, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, tokenAddr, fee);\\n    }\\n\\n    /**\\n        @notice swap from an exact 0xB amount to an ERC20 tokens\\n        @dev set msg.value as the exact input amount of AVAX\\n        @param amountOutMin a minimum expected output. Will raise error if can't satisfy.\\n        @param wait maximum wait time\\n    */\\n    function swapExactAVAXFor0xB(uint256 amountOutMin, uint256 wait) external payable {\\n        address sender = msg.sender;\\n        uint256 amountIn = msg.value;\\n        uint256 fee;\\n        (, fee) = _liqRouter.swapExactAVAXFor0xB{ value: amountIn }(sender, amountOutMin, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, _liqRouter.wrappedNative(), fee);\\n    }\\n\\n    /**\\n        @notice swap from an exact 0xB amount to an ERC20 tokens\\n        @dev set msg.value as the maximum expected input amount of AVAX\\n        @param amountOut an exact amount of output 0xB.\\n        @param amountInMax set same as msg.value\\n        @param wait maximum wait time\\n    */\\n    function swapAVAXForExact0xB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 wait\\n    ) external payable {\\n        address sender = msg.sender;\\n        require(msg.value >= amountInMax, \\\"SWAP: msg.value less than slippage\\\");\\n        uint256 fee;\\n        (, fee) = _liqRouter.swapAVAXForExact0xB{ value: msg.value }(sender, amountOut, block.timestamp + wait);\\n        emit Funded(_walletName(_liqRouter.swapTaxPool()), ContType.Other, _liqRouter.wrappedNative(), fee);\\n    }\\n\\n    /**\\n        @notice mint new contracts\\n        @dev create new contract instances, take funds from user and distribute to admin wallets according to\\n        SC configs.\\n        @param names list of names. The number of string in this list will be the count of new contracts.\\n        @param _cType type of new contracts.\\n    */\\n    function mintConts(string[] memory names, ContType _cType) external {\\n        require(enableMintConts, \\\"CONTMINT: mint conts disabled\\\");\\n        require(names.length <= mintContLimit, \\\"CONTMINT: too many conts\\\");\\n        for (uint256 i = 0; i < names.length; i++) {\\n            require(bytes(names[i]).length > 3 && bytes(names[i]).length < 33, \\\"CONTMINT: improper character count\\\");\\n        }\\n\\n        address sender = _msgSender();\\n        require(sender != address(0), \\\"CONTMINT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CONTMINT: blacklisted address\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"CONTMINT: pools cannot create cont\\\"\\n        );\\n        uint256 contCount = _crm._getContNumberOf(sender);\\n        require(contCount + names.length <= ownedContsLimit, \\\"CONTMINT: reached mint limit\\\");\\n        uint256 contsPrice = _crm.contPrice(_cType) * names.length;\\n        totalTokensPaidForMinting += contsPrice;\\n        require(balanceOf(sender) >= contsPrice, \\\"CONTMINT: Balance too low for creation.\\\");\\n\\n        // DEV FUND\\n        uint256 developmentFundTokens = (contsPrice * developmentFee) / 100;\\n        if (enableAutoSwapDevFund) {\\n            _fund(sender, developmentFundPool, _cType, usdcToken, developmentFundTokens);\\n        } else {\\n            _fund(sender, developmentFundPool, _cType, address(this), developmentFundTokens);\\n        }\\n\\n        // REWARDS POOL\\n        uint256 rewardsPoolTokens = (contsPrice * rewardsFee) / 100;\\n        _fund(sender, rewardsPool, _cType, address(this), rewardsPoolTokens);\\n\\n        // TREASURY\\n        uint256 treasuryPoolTokens = (contsPrice * treasuryFee) / 100;\\n        if (enableAutoSwapTreasury) {\\n            _fund(sender, treasuryPool, _cType, usdcToken, treasuryPoolTokens);\\n        } else {\\n            _fund(sender, treasuryPool, _cType, address(this), treasuryPoolTokens);\\n        }\\n\\n        // LIQUIDITY\\n        uint256 liquidityTokens = (contsPrice * liquidityPoolFee) / 100;\\n        _fund(sender, liquidityPool, _cType, address(this), liquidityTokens);\\n\\n        // EXTRA\\n        uint256 extraT = contsPrice - developmentFundTokens - rewardsPoolTokens - treasuryPoolTokens - liquidityTokens;\\n        if (extraT > 0) {\\n            super._transfer(sender, address(this), extraT);\\n        }\\n\\n        _crm.createConts(sender, names, _cType);\\n        emit ContsMinted(sender, _cType, names.length);\\n    }\\n\\n    /**\\n        @notice cashout reward from a single contract\\n        @dev send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet.\\n        @param _contIndex index of contract in list of contract of user\\n    */\\n    function cashoutReward(uint256 _contIndex) external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHT: Cashout Disabled\\\");\\n        require(sender != address(0), \\\"CSHT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHT: blacklisted\\\");\\n        uint256 rewardAmount = _crm._getRewardAmountOfIndex(sender, _contIndex);\\n        require(rewardAmount > 0, \\\"CSHT: reward not ready\\\");\\n\\n        uint256 feeAmount = 0;\\n        rewardAmount -= feeAmount;\\n        _transfer(rewardsPool, sender, rewardAmount);\\n        uint256 rw;\\n        ContType _cType;\\n        (rw, _cType) = _crm._cashoutContReward(sender, _contIndex);\\n\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            if (enableAutoSwapCashout) {\\n                _fund(rewardsPool, cashoutTaxPool, _cType, usdcToken, feeAmount);\\n            } else if (cashoutTaxPool != rewardsPool) {\\n                _fund(rewardsPool, cashoutTaxPool, _cType, address(this), feeAmount);\\n            } else {\\n                emit Funded(\\\"rewards\\\", _cType, address(this), feeAmount);\\n            }\\n        }\\n\\n        emit RewardCashoutOne(sender, _contIndex, rewardAmount, _cType);\\n    }\\n\\n    /**\\n        @notice cashout reward from all contracts\\n        @dev send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet.\\n    */\\n    function cashoutAll() external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHTALL: cashout disabled\\\");\\n        require(sender != address(0), \\\"CSHTALL: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHTALL: blacklisted address\\\");\\n        uint256 rewardAmount = _crm._getRewardAmountOf(sender);\\n        require(rewardAmount > 0, \\\"CSHTALL: reward not ready\\\");\\n        uint256 squareTotal;\\n        uint256 cubeTotal;\\n        uint256 tessTotal;\\n        (rewardAmount, squareTotal, cubeTotal, tessTotal) = _crm._cashoutAllContsReward(sender);\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            if (enableAutoSwapCashout) {\\n                // crazy gas fee, might have to check and optimize\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Square, usdcToken, (squareTotal * cashoutFee) / 100);\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Cube, usdcToken, (cubeTotal * cashoutFee) / 100);\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Tesseract, usdcToken, (tessTotal * cashoutFee) / 100);\\n            } else if (cashoutTaxPool != rewardsPool) {\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Square, address(this), (squareTotal * cashoutFee) / 100);\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Cube, address(this), (cubeTotal * cashoutFee) / 100);\\n                _fund(rewardsPool, cashoutTaxPool, ContType.Tesseract, address(this), (tessTotal * cashoutFee) / 100);\\n            } else {\\n                emit Funded(\\\"rewards\\\", ContType.Square, address(this), (squareTotal * cashoutFee) / 100);\\n                emit Funded(\\\"rewards\\\", ContType.Cube, address(this), (cubeTotal * cashoutFee) / 100);\\n                emit Funded(\\\"rewards\\\", ContType.Tesseract, address(this), (tessTotal * cashoutFee) / 100);\\n            }\\n            squareTotal = (squareTotal * (100 - cashoutFee)) / 100;\\n            cubeTotal = (cubeTotal * (100 - cashoutFee)) / 100;\\n            tessTotal = (tessTotal * (100 - cashoutFee)) / 100;\\n        }\\n        rewardAmount -= feeAmount;\\n        _transfer(rewardsPool, sender, rewardAmount);\\n        emit RewardCashoutAll(sender, rewardAmount, squareTotal, cubeTotal, tessTotal);\\n    }\\n\\n    // ***** READ function for public *****\\n}\\n\",\"keccak256\":\"0xc79fff158b0429769fd7c3aa115ffbf8fd5db63ae7088009589783415b95c49d\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant SEVEN_DAY = 7 hours;\\n    uint256 public constant ONE_MONTH = 1 days;\\n    uint256 public constant THREE_MONTH = 3 days;\\n    // uint256\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    struct AdditionalDataEntity {\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct FullDataEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct MonthFeeLog {\\n        uint256 currentTime;\\n        bool state;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // upgrade for month fee\\n\\n    // Adding feature - fee by month\\n    // using ContEntity[] => cannot update field into ContEntity struct (because using proxy\\n\\n    IERC20 public feeToken;\\n    uint256 public decreaseFeePercent;\\n    bool public isMonthFeeActive = true;\\n    uint256 public defaultExpireIn;\\n    mapping(ContType => uint256) public feeInMonth;\\n    mapping(address => mapping(uint256 => AdditionalDataEntity)) public additionalDataContract;\\n    mapping(address => mapping(ContType => uint256)) public userAsset;\\n    // using mapping instead of array to easy scale with proxy\\n    mapping(uint256 => MonthFeeLog) public monthFeeLogs;\\n    uint256 public maxIndexMonthFeeLogs;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFee(\\n        address _feeToken,\\n        uint256 _decreaseFeePercent,\\n        uint256 _tesseractFee,\\n        uint256 _cubeFee,\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n        decreaseFeePercent = _decreaseFeePercent;\\n        feeInMonth[ContType.Tesseract] = _tesseractFee;\\n        feeInMonth[ContType.Cube] = _cubeFee;\\n        defaultExpireIn = _defaultExpireIn;\\n        monthFeeLogs[0] = MonthFeeLog(block.timestamp, true);\\n        maxIndexMonthFeeLogs = 0;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n            uint256 index = _contsOfUser[account].length - 1;\\n            additionalDataContract[account][index] = AdditionalDataEntity({\\n                expireIn: block.timestamp + ONE_MONTH,\\n                lastUpdated: block.timestamp\\n            });\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n        userAsset[account][_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        if (isMonthFeeActive) {\\n            _cleanExpiredOrUpdateCont(account, _contIndex);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInIntervalV2(_contIndex, cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInIntervalV2(i, _cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function extendContract(uint256 time, uint256[] memory indexes) external {\\n        require(time == ONE_MONTH || time == THREE_MONTH, \\\"MONTH_FEE: Not valid time\\\");\\n        uint256 fee = getExtendContractFee(time, indexes);\\n        require(feeToken.transferFrom(msg.sender, address(this), fee), \\\"MONTH_FEE: Not valid\\\");\\n\\n        // extend expire in\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            AdditionalDataEntity memory additionData = getExpireIn(msg.sender, indexes[i]);\\n            //            AdditionalDataEntity storage additionData = additionalDataContract[msg.sender][indexes[i]];\\n            require(additionData.expireIn >= block.timestamp, \\\"MONTH_FEE: Contract has been expired\\\");\\n            additionData.expireIn += time;\\n            additionData.lastUpdated = block.timestamp;\\n            additionalDataContract[msg.sender][indexes[i]] = additionData;\\n        }\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function changeDecreaseFeePercent(uint256 _decreaseFeePercent) external onlyAuthorities {\\n        decreaseFeePercent = _decreaseFeePercent;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function changeFeeToken(address _feeToken) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n    }\\n\\n    function changeMonthFeeState(bool _status) external onlyAuthorities {\\n        require(_status != isMonthFeeActive, \\\"MONTH_FEE: INVALID STATUS\\\");\\n        isMonthFeeActive = _status;\\n        maxIndexMonthFeeLogs++;\\n        monthFeeLogs[maxIndexMonthFeeLogs] = MonthFeeLog(block.timestamp, _status);\\n    }\\n\\n    function withdrawFeeToken(address _user) external onlyAuthorities {\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        require(feeToken.transfer(_user, amount), \\\"MONTH_FEE_WITHDRAW: INVALID\\\");\\n    }\\n\\n    function _cleanExpiredOrUpdateCont(address account, uint256 _contIndex) private {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, _contIndex);\\n        if (additionalData.expireIn >= block.timestamp) {\\n            additionalDataContract[account][_contIndex] = additionalData;\\n            return;\\n        }\\n        ContEntity memory currentCont = _contsOfUser[account][_contIndex];\\n        uint256 maxIndex = _contsOfUser[account].length - 1;\\n        _contsOfUser[account][_contIndex] = _contsOfUser[account][maxIndex];\\n        additionalDataContract[account][_contIndex] = additionalDataContract[account][maxIndex];\\n        _contsOfUser[account].pop();\\n        delete additionalDataContract[account][maxIndex];\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated -= 1;\\n        _totalContsPerType[currentCont.cType] -= 1;\\n        userAsset[account][currentCont.cType] -= 1;\\n    }\\n\\n    function _cleanAllExpiredOrUpdateCont(address account) private {\\n        ContEntity[] memory listCont = _contsOfUser[account];\\n        if (listCont.length == 0) {\\n            return;\\n        }\\n        uint256 maxIndex = listCont.length - 1;\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            if (i > maxIndex) {\\n                break;\\n            }\\n            _cleanExpiredOrUpdateCont(account, i);\\n            maxIndex = _contsOfUser[account].length - 1;\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n\\n    function isExpiredCont(address account, uint256 index) public view returns (bool) {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, index);\\n        if (additionalData.expireIn < block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return total total amount of reward available for account, tax included\\n        @return list a packed list of every entries\\n    */\\n    function _getClaimedAmountOf(address account) external view returns (uint256 total, string memory list) {\\n        if (!isContOwner(account)) return (0, \\\"\\\");\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 rw = contRewardInIntervalV2(0, conts[0], conts[0].creationTime, conts[0].lastUpdateTime);\\n        total = rw;\\n        list = uint2str(rw);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            uint256 _claimed = contRewardInIntervalV2(i, _cont, _cont.creationTime, _cont.lastUpdateTime);\\n            total += _claimed;\\n            list = string(abi.encodePacked(list, separator, uint2str(_claimed)));\\n        }\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInIntervalV2(0, conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInIntervalV2(i, conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    function getExtendContractFee(uint256 time, uint256[] memory indexes) public view returns (uint256) {\\n        uint256 totalFee;\\n        uint256[] memory numberOfContType;\\n        numberOfContType[(uint256)(ContType.Tesseract)] = getNumberOfConts(msg.sender, ContType.Tesseract);\\n        numberOfContType[(uint256)(ContType.Cube)] = getNumberOfConts(msg.sender, ContType.Cube);\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            uint256 index = indexes[i];\\n            ContEntity memory cont = _contsOfUser[msg.sender][index];\\n            uint256 totalDecreasePercent = decreaseFeePercent * numberOfContType[(uint256)(cont.cType)];\\n            uint256 feeForContOneMonth = (feeInMonth[cont.cType] * (HUNDRED_PERCENT - totalDecreasePercent)) /\\n                HUNDRED_PERCENT;\\n            totalFee += (feeForContOneMonth * time) / ONE_MONTH;\\n        }\\n        return totalFee;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate reward in an interval\\n    /// @dev iterate through APR change log and for each APR segment/interval, add up its reward to the result\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param leftTstamp left border of the interval\\n    /// @param rightTstamp right border of the interval\\n    /// @return result\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256 result) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 firstUpdateInd = historyBinarySearch(_cType, leftTstamp);\\n        uint256 lastUpdateInd = historyBinarySearch(_cType, rightTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp;\\n        result = 0;\\n        uint256 deltaTstamp;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = firstUpdateInd; index < lastUpdateInd; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function contRewardInIntervalV2(\\n        uint256 indexCont,\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        if (isMonthFeeActive && isExpiredCont(msg.sender, indexCont)) {\\n            return 0;\\n        }\\n        return contRewardInInterval(cont, leftTstamp, rightTstamp);\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    /// @notice convert uint256 to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice reduce input to a percentage with decimals\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    /// @notice check if an account is a contract owner\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n\\n    function getExpireIn(address user, uint256 index) public view returns (AdditionalDataEntity memory) {\\n        AdditionalDataEntity memory additionalData = additionalDataContract[user][index];\\n        if (additionalData.expireIn == 0) {\\n            additionalData.expireIn = defaultExpireIn;\\n        }\\n        uint256 totalDelay = 0;\\n        for (uint256 i = 0; i <= maxIndexMonthFeeLogs; ++i) {\\n            MonthFeeLog memory log = monthFeeLogs[i];\\n            if (additionalData.lastUpdated >= log.currentTime) {\\n                continue;\\n            }\\n            if (log.state == true) {\\n                totalDelay = totalDelay + log.currentTime - additionalData.lastUpdated;\\n            }\\n            additionalData.lastUpdated = log.currentTime;\\n        }\\n\\n        if (block.timestamp > monthFeeLogs[maxIndexMonthFeeLogs].currentTime) {\\n            if (isMonthFeeActive == false) {\\n                totalDelay = totalDelay + block.timestamp - monthFeeLogs[maxIndexMonthFeeLogs].currentTime;\\n            }\\n            additionalData.lastUpdated = block.timestamp;\\n        }\\n\\n        additionalData.expireIn += totalDelay;\\n\\n        return additionalData;\\n    }\\n\\n    function getNumberOfConts(address account, ContType _cType) public view returns (uint256) {\\n        ContEntity[] memory listConts = _contsOfUser[account];\\n        uint256 count;\\n        for (uint256 i = 0; i < listConts.length; ++i) {\\n            if (listConts[i].cType != _cType) {\\n                continue;\\n            }\\n            AdditionalDataEntity memory data = getExpireIn(account, i);\\n            if (data.expireIn >= block.timestamp) {\\n                ++count;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function getFullDataCont(address user) public view returns (FullDataEntity[] memory) {\\n        FullDataEntity[] memory fullData;\\n        ContEntity[] memory listCont = _contsOfUser[user];\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            ContEntity memory cont = listCont[i];\\n            AdditionalDataEntity memory additional = getExpireIn(user, i);\\n            FullDataEntity memory item = FullDataEntity(\\n                cont.name,\\n                cont.creationTime,\\n                cont.lastUpdateTime,\\n                cont.initialAPR,\\n                cont.buyPrice,\\n                cont.cType,\\n                additional.expireIn,\\n                additional.lastUpdated\\n            );\\n            fullData[i] = item;\\n        }\\n        return fullData;\\n    }\\n}\\n\",\"keccak256\":\"0x9a0c60fdb05d68840d7e9f0fad001bb43674d6e12fc0907c6bfdf9506b174b3e\",\"license\":\"MIT\"},\"contracts/dependencies/LiquidityRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LiquidityRouter is Initializable, PaymentSplitterUpgradeable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Router Addresses -----\\n    IJoeRouter02 private uniswapV2Router;\\n    address public routerAddress;\\n    address public uniswapV2Pair;\\n\\n    // ----- Contract Storage -----\\n    address payable public admin0xB;\\n    IERC20 private token;\\n    address public tokenAddress;\\n\\n    uint256 public swapTaxFee;\\n    address public swapTaxPool;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        address _router,\\n        uint256 _fee,\\n        address _pool\\n    ) public initializer {\\n        require(_router != address(0), \\\"ROUTER ZERO\\\");\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        routerAddress = _router;\\n        uniswapV2Router = IJoeRouter02(_router);\\n        admin0xB = payable(msg.sender);\\n\\n        swapTaxFee = _fee;\\n        swapTaxPool = _pool;\\n    }\\n\\n    // ----- Event -----\\n    event Swapped(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut);\\n    event SwappedNative(uint256 amountIn, address tokenOut, uint256 amountOut);\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == tokenAddress || msg.sender == admin0xB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getOutputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(inputAmount, path);\\n        uint256 result = amountsOut[amountsOut.length - 1];\\n        result = (result * (HUNDRED_PERCENT - swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function getInputAmount(\\n        bool is0xBOut,\\n        address targetToken,\\n        uint256 outputAmount\\n    ) public view returns (uint256) {\\n        address[] memory path = getPath(targetToken, is0xBOut);\\n        uint256[] memory amountsIn = uniswapV2Router.getAmountsIn(outputAmount, path);\\n        uint256 result = amountsIn[0];\\n        result = (result * (HUNDRED_PERCENT + swapTaxFee)) / HUNDRED_PERCENT;\\n        return result;\\n    }\\n\\n    function wrappedNative() public view returns (address) {\\n        return uniswapV2Router.WAVAX();\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function updateAdmin0xB(address payable newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"UPD_ADMIN: zero addr\\\");\\n        admin0xB = newAdmin;\\n    }\\n\\n    function updateSwapTaxPool(address payable newPool) external onlyAuthorities {\\n        require(newPool != address(0), \\\"UPD_WALL: zero addr\\\");\\n        swapTaxPool = newPool;\\n    }\\n\\n    function updateSwapFee(uint256 value) external onlyAuthorities {\\n        require(value <= HUNDRED_PERCENT, \\\"FEES: swap exceeding 100%\\\");\\n        swapTaxFee = value;\\n    }\\n\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        tokenAddress = _token;\\n        token = IERC20(_token);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateUniswapV2Router(address _newAddr) external onlyAuthorities {\\n        require(_newAddr != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        routerAddress = _newAddr;\\n        uniswapV2Router = IJoeRouter02(_newAddr);\\n        address _uniswapV2Pair;\\n        try IJoeFactory(uniswapV2Router.factory()).createPair(tokenAddress, uniswapV2Router.WAVAX()) {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        } catch {\\n            _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).getPair(tokenAddress, uniswapV2Router.WAVAX());\\n        }\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    // Only use to fund wallets\\n    function swapExact0xBForTokenNoFee(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn\\n    ) external onlyAuthorities {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(2**256 - 1));\\n        }\\n        address[] memory path = getPath(outTokenAddr, false);\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n                amountIn,\\n                0,\\n                path,\\n                receiver,\\n                block.timestamp\\n            );\\n        } else {\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn,\\n                0,\\n                path,\\n                receiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function swapExact0xBForToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountIn) {\\n            token.approve(routerAddress, uint256(amountIn));\\n        }\\n\\n        require(getOutputAmount(false, outTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        token.transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapExactTokensForAVAX(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapExactTokensForTokens(amountIn - fee, amountOutMin, path, receiver, deadline);\\n        }\\n        emit Swapped(tokenAddress, amountIn, outTokenAddr, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swap0xBForExactToken(\\n        address receiver,\\n        address outTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (token.allowance(address(this), routerAddress) < amountInMax) {\\n            token.approve(routerAddress, uint256(amountInMax));\\n        }\\n\\n        require(getInputAmount(false, outTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(outTokenAddr, false);\\n        uint256[] memory result;\\n        if (outTokenAddr == uniswapV2Router.WAVAX()) {\\n            result = uniswapV2Router.swapTokensForExactAVAX(amountOut, amountInMax, path, receiver, deadline);\\n        } else {\\n            result = uniswapV2Router.swapTokensForExactTokens(amountOut, amountInMax, path, receiver, deadline);\\n        }\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        token.transfer(swapTaxPool, fee);\\n        token.transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(tokenAddress, amountInActual, outTokenAddr, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactTokenFor0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountIn) {\\n            approveTokenAccess(inTokenAddr, amountIn);\\n        }\\n        require(getOutputAmount(true, inTokenAddr, amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapExactTokensForTokens(\\n            amountIn - fee,\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit Swapped(inTokenAddr, amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapTokenForExact0xB(\\n        address receiver,\\n        address inTokenAddr,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 deadline\\n    ) external onlyAuthorities returns (uint256, uint256) {\\n        if (IERC20(inTokenAddr).allowance(address(this), routerAddress) < amountInMax) {\\n            approveTokenAccess(inTokenAddr, amountInMax);\\n        }\\n        require(getInputAmount(true, inTokenAddr, amountOut) <= amountInMax, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        address[] memory path = getPath(inTokenAddr, true);\\n        uint256[] memory result = uniswapV2Router.swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        IERC20(inTokenAddr).transfer(swapTaxPool, fee);\\n        IERC20(inTokenAddr).transfer(receiver, amountInMax - amountInActual - fee);\\n        emit Swapped(inTokenAddr, amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    function swapExactAVAXFor0xB(\\n        address receiver,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        uint256 amountIn = msg.value;\\n        require(getOutputAmount(true, wrappedNative(), amountIn) >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint256 fee = (amountIn * swapTaxFee) / HUNDRED_PERCENT;\\n        payable(swapTaxPool).transfer(fee);\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapExactAVAXForTokens{ value: amountIn - fee }(\\n            amountOutMin,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        emit SwappedNative(amountIn, tokenAddress, result[result.length - 1]);\\n        return (result[result.length - 1], fee);\\n    }\\n\\n    function swapAVAXForExact0xB(\\n        address receiver,\\n        uint256 amountOut,\\n        uint256 deadline\\n    ) external payable onlyAuthorities returns (uint256, uint256) {\\n        // uint256 amountInMax = msg.value;\\n        address[] memory path = getPath(wrappedNative(), true);\\n        uint256[] memory result = uniswapV2Router.swapAVAXForExactTokens{ value: msg.value }(\\n            amountOut,\\n            path,\\n            receiver,\\n            deadline\\n        );\\n        uint256 amountInActual = result[0];\\n        uint256 fee = (amountInActual * swapTaxFee) / HUNDRED_PERCENT;\\n\\n        // return residual tokens to sender\\n        payable(swapTaxPool).transfer(fee);\\n        payable(receiver).transfer(msg.value - amountInActual - fee);\\n        emit SwappedNative(amountInActual, tokenAddress, amountOut);\\n        return (amountInActual + fee, fee);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function approveTokenAccess(address tokenAddr, uint256 amount) internal {\\n        IERC20 targetToken = IERC20(tokenAddr);\\n        targetToken.approve(routerAddress, amount);\\n    }\\n\\n    function getPath(address target, bool is0xBOut) internal view returns (address[] memory) {\\n        if (target == uniswapV2Router.WAVAX()) {\\n            address[] memory result = new address[](2);\\n\\n            if (is0xBOut) {\\n                result[0] = target;\\n                result[1] = tokenAddress;\\n            } else {\\n                result[0] = tokenAddress;\\n                result[1] = target;\\n            }\\n            return result;\\n        }\\n\\n        address[] memory res = new address[](3);\\n        res[1] = uniswapV2Router.WAVAX();\\n        if (is0xBOut) {\\n            res[0] = target;\\n            res[2] = tokenAddress;\\n        } else {\\n            res[0] = tokenAddress;\\n            res[2] = target;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x3ec6157c4e270a2e2dbfd2c28acc8d4da2a619a5147ec53b6331d3941bf849b9\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615bee80620000216000396000f3fe6080604052600436106104da5760003560e01c806382a8ebad11610281578063b62496f51161015a578063dd62ed3e116100cc578063f2e0302311610085578063f2e0302314610f6a578063f2fde38b14610f8a578063f34f152214610faa578063f764bfb514610fc0578063f78d5c5514610fe6578063ff1c93b31461100657600080fd5b8063dd62ed3e14610ebc578063e0583ec014610edc578063e33b7de314610ef6578063e37ba8f914610f0b578063eb71c5d914610f2b578063f215a9d114610f4a57600080fd5b8063cc32d1761161011e578063cc32d17614610dd9578063cd6e18f114610def578063ce7c2ac214610e0f578063cfc0d02414610e45578063d79779b214610e65578063d8c6404b14610e9b57600080fd5b8063b62496f514610d43578063b9bd393314610d73578063ba2734d214610d8d578063bcb8ebfc14610dad578063cc1776d314610dc357600080fd5b80639852595c116101f3578063a11a1410116101b7578063a11a141014610c7d578063a457c2d714610cad578063a5f3d00314610ccd578063a9059cbb14610ce3578063aaf5bfc314610d03578063b3328aae14610d2357600080fd5b80639852595c14610bba5780639a6e80db14610bf05780639c64291c14610c105780639dc73a4914610c305780639ff41fe314610c5057600080fd5b80638d289144116102455780638d28914414610b075780638da5cb5b14610b275780638e67566314610b455780639149acbc14610b6557806395d89b4114610b855780639723283014610b9a57600080fd5b806382a8ebad14610a71578063839df91914610a9157806383dcd37614610ab15780638683811614610ad15780638b83209b14610ae757600080fd5b8063313ce567116103b3578063559bf302116103255780636815a91c116102e95780636815a91c146109c65780636d9ae0be146109e657806370a08231146109fc578063715018a614610a1c578063809d458d14610a31578063810be66d14610a5157600080fd5b8063559bf3021461092657806357dae063146109465780635dd731fc1461096657806365bfe43014610986578063665a11ca146109a657600080fd5b8063406072a911610377578063406072a91461087b57806348b750441461089b57806348df5829146108bb57806349bd5a5e146108db57806354557973146108fb57806354f12f1f1461091057600080fd5b8063313ce567146107f4578063393061401461081057806339509351146108265780633962a2a1146108465780633a98ef391461086657600080fd5b806311eac8551161044c5780631cdd3be3116104105780631cdd3be31461073b57806323b872dd1461076b578063241a38c61461078b57806325eecf9e1461079e5780632bb14e1d146107be5780633086319d146107d457600080fd5b806311eac8551461069c57806313114a9d146106c25780631694505e146106e657806318160ddd14610706578063191655871461071b57600080fd5b80630841e9771161049e5780630841e977146105cc578063084a6bff146105ec578063095ea7b31461060c5780630c4242841461063c5780630db924491461065c5780630f1978fb1461067d57600080fd5b80630129981c1461051f5780630359fea91461054157806303d29d281461057757806306fdde031461059757806307a55860146105b957600080fd5b3661051a577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610510929190615671565b60405180910390a1005b600080fd5b34801561052b57600080fd5b5061053f61053a366004615283565b611026565b005b34801561054d57600080fd5b5060d154610561906001600160a01b031681565b60405161056e919061565d565b60405180910390f35b34801561058357600080fd5b5061053f610592366004615229565b6111c5565b3480156105a357600080fd5b506105ac61121a565b60405161056e91906157c6565b61053f6105c7366004615591565b6112ac565b3480156105d857600080fd5b5061053f6105e7366004615283565b6114b1565b3480156105f857600080fd5b5061053f6106073660046154f4565b6116f6565b34801561061857600080fd5b5061062c610627366004615257565b611778565b604051901515815260200161056e565b34801561064857600080fd5b5061053f610657366004615229565b611792565b34801561066857600080fd5b5060e05461062c90600160a01b900460ff1681565b34801561068957600080fd5b5060d95461062c90610100900460ff1681565b3480156106a857600080fd5b5060d954610561906201000090046001600160a01b031681565b3480156106ce57600080fd5b506106d860d75481565b60405190815260200161056e565b3480156106f257600080fd5b5060ca54610561906001600160a01b031681565b34801561071257600080fd5b506035546106d8565b34801561072757600080fd5b5061053f610736366004615175565b611810565b34801561074757600080fd5b5061062c610756366004615175565b60dd6020526000908152604090205460ff1681565b34801561077757600080fd5b5061062c6107863660046151e8565b611935565b61053f61079936600461554b565b61195b565b3480156107aa57600080fd5b5061053f6107b9366004615175565b611980565b3480156107ca57600080fd5b506106d860d35481565b3480156107e057600080fd5b5061053f6107ef36600461539f565b6119f5565b34801561080057600080fd5b506040516012815260200161056e565b34801561081c57600080fd5b506106d860ce5481565b34801561083257600080fd5b5061062c610841366004615257565b6120d6565b34801561085257600080fd5b5061053f610861366004615175565b612115565b34801561087257600080fd5b506097546106d8565b34801561088757600080fd5b506106d86108963660046151af565b61218a565b3480156108a757600080fd5b5061053f6108b63660046151af565b6121b5565b3480156108c757600080fd5b5060d054610561906001600160a01b031681565b3480156108e757600080fd5b5060cd54610561906001600160a01b031681565b34801561090757600080fd5b5061053f612379565b34801561091c57600080fd5b506106d860d55481565b34801561093257600080fd5b5061053f610941366004615175565b612965565b34801561095257600080fd5b5061053f6109613660046152be565b6129d7565b34801561097257600080fd5b5061053f610981366004615175565b61309f565b34801561099257600080fd5b5061053f6109a13660046154f4565b613119565b3480156109b257600080fd5b5060d254610561906001600160a01b031681565b3480156109d257600080fd5b5061053f6109e13660046154f4565b6134a2565b3480156109f257600080fd5b506106d860d85481565b348015610a0857600080fd5b506106d8610a17366004615175565b613522565b348015610a2857600080fd5b5061053f61353d565b348015610a3d57600080fd5b5061053f610a4c366004615175565b613573565b348015610a5d57600080fd5b5060cf54610561906001600160a01b031681565b348015610a7d57600080fd5b5060e054610561906001600160a01b031681565b348015610a9d57600080fd5b5061053f610aac3660046154ba565b6135e5565b348015610abd57600080fd5b506105ac610acc366004615175565b613629565b348015610add57600080fd5b506106d860da5481565b348015610af357600080fd5b50610561610b023660046154f4565b613730565b348015610b1357600080fd5b5061053f610b22366004615175565b613760565b348015610b3357600080fd5b506065546001600160a01b0316610561565b348015610b5157600080fd5b5061053f610b603660046154f4565b6137f7565b348015610b7157600080fd5b5061053f610b803660046154ba565b613879565b348015610b9157600080fd5b506105ac6138bd565b348015610ba657600080fd5b5061053f610bb53660046154f4565b6138cc565b348015610bc657600080fd5b506106d8610bd5366004615175565b6001600160a01b03166000908152609a602052604090205490565b348015610bfc57600080fd5b5060c954610561906001600160a01b031681565b348015610c1c57600080fd5b5061053f610c2b366004615283565b61394e565b348015610c3c57600080fd5b5061053f610c4b3660046154ba565b613a97565b348015610c5c57600080fd5b506106d8610c6b366004615175565b60dc6020526000908152604090205481565b348015610c8957600080fd5b5061062c610c98366004615175565b60e36020526000908152604090205460ff1681565b348015610cb957600080fd5b5061062c610cc8366004615257565b613ad4565b348015610cd957600080fd5b506106d860d65481565b348015610cef57600080fd5b5061062c610cfe366004615257565b613b71565b348015610d0f57600080fd5b5061053f610d1e366004615175565b613b7f565b348015610d2f57600080fd5b5061053f610d3e3660046154ba565b613c1f565b348015610d4f57600080fd5b5061062c610d5e366004615175565b60de6020526000908152604090205460ff1681565b348015610d7f57600080fd5b5060df5461062c9060ff1681565b348015610d9957600080fd5b5061053f610da83660046154ba565b613c5c565b348015610db957600080fd5b506106d860cb5481565b348015610dcf57600080fd5b506106d860e25481565b348015610de557600080fd5b506106d860d45481565b348015610dfb57600080fd5b5061053f610e0a366004615175565b613ca4565b348015610e1b57600080fd5b506106d8610e2a366004615175565b6001600160a01b031660009081526099602052604090205490565b348015610e5157600080fd5b5061053f610e60366004615175565b613d3f565b348015610e7157600080fd5b506106d8610e80366004615175565b6001600160a01b03166000908152609c602052604090205490565b348015610ea757600080fd5b5060d95461062c90600160b01b900460ff1681565b348015610ec857600080fd5b506106d8610ed73660046151af565b613db1565b348015610ee857600080fd5b5060d95461062c9060ff1681565b348015610f0257600080fd5b506098546106d8565b348015610f1757600080fd5b5061053f610f26366004615175565b613ddc565b348015610f3757600080fd5b5060df5461062c90610100900460ff1681565b348015610f5657600080fd5b5060e154610561906001600160a01b031681565b348015610f7657600080fd5b5061053f610f85366004615283565b613e4e565b348015610f9657600080fd5b5061053f610fa5366004615175565b613eb1565b348015610fb657600080fd5b506106d860db5481565b348015610fcc57600080fd5b5060df54610561906201000090046001600160a01b031681565b348015610ff257600080fd5b5061053f6110013660046154f4565b613f4c565b34801561101257600080fd5b5061053f6110213660046154f4565b613fce565b338261103182613522565b10156110585760405162461bcd60e51b815260040161104f9061591a565b60405180910390fd5b60e0546110709082906001600160a01b031685614021565b60e0546000906001600160a01b03166380be66cf838888886110928942615a5d565b6040518663ffffffff1660e01b81526004016110b29594939291906156ae565b6040805180830381600087803b1580156110cb57600080fd5b505af11580156110df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611103919061556d565b905080915050600080516020615bc28339815191526111a160e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b505afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190615192565b600330846040516111b594939291906157d9565b60405180910390a1505050505050565b6065546001600160a01b031633146111ef5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0391909116600090815260dd60205260409020805460ff1916911515919091179055565b60606036805461122990615af9565b80601f016020809104026020016040519081016040528092919081815260200182805461125590615af9565b80156112a25780601f10611277576101008083540402835291602001916112a2565b820191906000526020600020905b81548152906001019060200180831161128557829003601f168201915b5050505050905090565b33348311156113085760405162461bcd60e51b815260206004820152602260248201527f535741503a206d73672e76616c7565206c657373207468616e20736c69707061604482015261676560f01b606482015260840161104f565b60e0546000906001600160a01b031663ed9705da3484886113298842615a5d565b6040516001600160e01b031960e087901b1681526001600160a01b0390931660048401526024830191909152604482015260640160408051808303818588803b15801561137557600080fd5b505af1158015611389573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ae919061556d565b905080915050600080516020615bc283398151915261141460e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b60e0546040805163eb6d3a1160e01b815290516003926001600160a01b03169163eb6d3a11916004808301926020929190829003018186803b15801561145957600080fd5b505afa15801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114919190615192565b846040516114a294939291906157d9565b60405180910390a15050505050565b6040516370a0823160e01b81523390859085906001600160a01b038316906370a08231906114e390869060040161565d565b60206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061550d565b10156115515760405162461bcd60e51b815260040161104f9061591a565b60e0546040516323b872dd60e01b81526001600160a01b03808416926323b872dd9261158592879216908a9060040161568a565b602060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d791906154d7565b5060e0546000906001600160a01b0316636e54a8a0848989896115fa8a42615a5d565b6040518663ffffffff1660e01b815260040161161a9594939291906156ae565b6040805180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b919061556d565b905080915050600080516020615bc28339815191526116d160e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b600389846040516116e594939291906157d9565b60405180910390a150505050505050565b6065546001600160a01b031633146117205760405162461bcd60e51b815260040161104f90615951565b60008160d45460d65460d5546117369190615a5d565b6117409190615a5d565b61174a9190615a5d565b9050606481111561176d5760405162461bcd60e51b815260040161104f90615986565b60d39190915560d755565b60003361178681858561416a565b60019150505b92915050565b6065546001600160a01b031633146117bc5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0382166117e55781604051634726455360e11b815260040161104f919061565d565b6001600160a01b0391909116600090815260e360205260409020805460ff1916911515919091179055565b6001600160a01b0381166000908152609960205260409020546118455760405162461bcd60e51b815260040161104f90615889565b600061185060985490565b61185a9047615a5d565b905060006118878383611882866001600160a01b03166000908152609a602052604090205490565b61428e565b9050806118a65760405162461bcd60e51b815260040161104f906158cf565b6001600160a01b0383166000908152609a6020526040812080548392906118ce908490615a5d565b9250508190555080609860008282546118e79190615a5d565b909155506118f7905083826142d4565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051611928929190615671565b60405180910390a1505050565b6000336119438582856143f2565b61194e858585614021565b60019150505b9392505050565b60e054339034906000906001600160a01b0316638f6e53b78385886113298942615a5d565b6065546001600160a01b031633146119aa5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166119d35780604051634726455360e11b815260040161104f919061565d565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60df54610100900460ff16611a4c5760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a206d696e7420636f6e74732064697361626c6564000000604482015260640161104f565b60cc5482511115611a9a5760405162461bcd60e51b8152602060048201526018602482015277434f4e544d494e543a20746f6f206d616e7920636f6e747360401b604482015260640161104f565b60005b8251811015611b53576003838281518110611aba57611aba615b65565b602002602001015151118015611aea57506021838281518110611adf57611adf615b65565b602002602001015151105b611b415760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20696d70726f7065722063686172616374657220636f756044820152611b9d60f21b606482015260840161104f565b80611b4b81615b34565b915050611a9d565b503380611b9b5760405162461bcd60e51b8152602060048201526016602482015275434f4e544d494e543a207a65726f206164647265737360501b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff1615611c045760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a20626c61636b6c69737465642061646472657373000000604482015260640161104f565b60cf546001600160a01b03828116911614801590611c30575060d1546001600160a01b03828116911614155b8015611c4a575060d0546001600160a01b03828116911614155b611ca15760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20706f6f6c732063616e6e6f742063726561746520636f6044820152611b9d60f21b606482015260840161104f565b60c9546040516344fea1b960e01b81526000916001600160a01b0316906344fea1b990611cd290859060040161565d565b60206040518083038186803b158015611cea57600080fd5b505afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d22919061550d565b905060cb54845182611d349190615a5d565b1115611d825760405162461bcd60e51b815260206004820152601c60248201527f434f4e544d494e543a2072656163686564206d696e74206c696d697400000000604482015260640161104f565b835160c954604051630c75361360e31b8152600092916001600160a01b0316906363a9b09890611db69088906004016157b8565b60206040518083038186803b158015611dce57600080fd5b505afa158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e06919061550d565b611e109190615a97565b90508060ce6000828254611e249190615a5d565b90915550819050611e3484613522565b1015611e925760405162461bcd60e51b815260206004820152602760248201527f434f4e544d494e543a2042616c616e636520746f6f206c6f7720666f7220637260448201526632b0ba34b7b71760c91b606482015260840161104f565b6000606460d65483611ea49190615a97565b611eae9190615a75565b60d954909150610100900460ff1615611eed5760cf5460d954611ee89186916001600160a01b03918216918991620100009004168561446c565b611f07565b60cf54611f079085906001600160a01b031687308561446c565b6000606460d35484611f199190615a97565b611f239190615a75565b60d154909150611f409086906001600160a01b031688308561446c565b6000606460d45485611f529190615a97565b611f5c9190615a75565b60d95490915060ff1615611f965760d05460d954611f919188916001600160a01b03918216918b91620100009004168561446c565b611fb0565b60d054611fb09087906001600160a01b031689308561446c565b6000606460d55486611fc29190615a97565b611fcc9190615a75565b60d254909150611fe99088906001600160a01b03168a308561446c565b6000818385611ff8888a615ab6565b6120029190615ab6565b61200c9190615ab6565b6120169190615ab6565b9050801561202957612029883083614617565b60c95460405162a6998d60e31b81526001600160a01b0390911690630534cc689061205c908b908e908e906004016156df565b600060405180830381600087803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b505050507f9972942513a6d471ac125572d271f49ecc9652139451120363f1333713c42c43888a8c516040516120c293929190615759565b60405180910390a150505050505050505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906117869082908690612110908790615a5d565b61416a565b6065546001600160a01b0316331461213f5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166121685780604051634726455360e11b815260040161104f919061565d565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b6001600160a01b0381166000908152609960205260409020546121ea5760405162461bcd60e51b815260040161104f90615889565b6001600160a01b0382166000908152609c60205260408120546040516370a0823160e01b81526001600160a01b038516906370a082319061222f90309060040161565d565b60206040518083038186803b15801561224757600080fd5b505afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f919061550d565b6122899190615a5d565b9050600061229c8383611882878761218a565b9050806122bb5760405162461bcd60e51b815260040161104f906158cf565b6001600160a01b038085166000908152609d60209081526040808320938716835292905290812080548392906122f2908490615a5d565b90915550506001600160a01b0384166000908152609c60205260408120805483929061231f908490615a5d565b9091555061233090508484836147e5565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a848360405161236b929190615671565b60405180910390a250505050565b60df54339060ff1615156001146123d25760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20636173686f75742064697361626c656400000000000000604482015260640161104f565b6001600160a01b0381166124205760405162461bcd60e51b815260206004820152601560248201527443534854414c4c3a207a65726f206164647265737360581b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff16156124895760405162461bcd60e51b815260206004820152601c60248201527f43534854414c4c3a20626c61636b6c6973746564206164647265737300000000604482015260640161104f565b60c9546040516330cd31af60e11b81526000916001600160a01b03169063619a635e906124ba90859060040161565d565b60206040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250a919061550d565b90506000811161255c5760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20726577617264206e6f7420726561647900000000000000604482015260640161104f565b60c95460405163d094fa8d60e01b8152600091829182916001600160a01b03169063d094fa8d9061259190889060040161565d565b608060405180830381600087803b1580156125ab57600080fd5b505af11580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e391906155bd565b60d85493975091955093509150600090156128ec57606460d854866126089190615a97565b6126129190615a75565b60e054909150600160a01b900460ff16156126f55760d15460df5460d95460d854612674936001600160a01b0390811693620100009081900482169360009391900490911690606490612665908b615a97565b61266f9190615a75565b61446c565b60d15460df5460d95460d8546126b2936001600160a01b0390811693620100009081900482169360019391900490911690606490612665908a615a97565b60d15460df5460d95460d8546126f0936001600160a01b03908116936201000090819004821693600293919004909116906064906126659089615a97565b612876565b60d15460df546201000090046001600160a01b039081169116146127ac5760d15460df5460d854612746926001600160a01b039081169262010000900416906000903090606490612665908b615a97565b60d15460df5460d854612779926001600160a01b039081169262010000900416906001903090606490612665908a615a97565b60d15460df5460d8546126f0926001600160a01b0390811692620100009004169060029030906064906126659089615a97565b600080516020615bc2833981519152600030606460d854886127ce9190615a97565b6127d89190615a75565b6040516127e793929190615843565b60405180910390a1600080516020615bc2833981519152600130606460d854876128119190615a97565b61281b9190615a75565b60405161282a93929190615843565b60405180910390a1600080516020615bc2833981519152600230606460d854866128549190615a97565b61285e9190615a75565b60405161286d93929190615843565b60405180910390a15b606460d85460646128879190615ab6565b6128919086615a97565b61289b9190615a75565b9350606460d85460646128ae9190615ab6565b6128b89085615a97565b6128c29190615a75565b9250606460d85460646128d59190615ab6565b6128df9084615a97565b6128e99190615a75565b91505b6128f68186615ab6565b60d154909550612910906001600160a01b03168787614021565b604080516001600160a01b03881681526020810187905290810185905260608101849052608081018390527f6717635faad3367ddfa0564bf3540e74269b0c5dfef7720d5512f309dc1b6c869060a0016111b5565b6065546001600160a01b0316331461298f5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166129b55760405162461bcd60e51b815260040161104f90615816565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166129f25760005460ff16156129f6565b303b155b612a595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161104f565b600054610100900460ff16158015612a7b576000805461ffff19166101011790555b60008551118015612a8d575060008451115b612ad05760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161104f565b612ad861483b565b612b1c604051806040016040528060078152602001663078426c6f636b60c81b81525060405180604001604052806003815260200162183c2160e91b81525061486a565b612b26878761489f565b60005b8551811015612b9357612b81868281518110612b4757612b47615b65565b6020026020010151868381518110612b6157612b61615b65565b6020026020010151670de0b6b3a7640000612b7c9190615a97565b6148d0565b80612b8b81615b34565b915050612b29565b5060355469d3c21bcecceda100000014612be75760405162461bcd60e51b81526020600482015260156024820152741515130814d5541413164811125191880c48135253605a1b604482015260640161104f565b60006001600160a01b031685600181518110612c0557612c05615b65565b60200260200101516001600160a01b031614158015612c51575060006001600160a01b031685600281518110612c3d57612c3d615b65565b60200260200101516001600160a01b031614155b8015612c8a575060006001600160a01b031685600381518110612c7657612c76615b65565b60200260200101516001600160a01b031614155b8015612cc3575060006001600160a01b031685600481518110612caf57612caf615b65565b60200260200101516001600160a01b031614155b612d015760405162461bcd60e51b815260206004820152600f60248201526e1413d3d30816915493c81193d55391608a1b604482015260640161104f565b8351855114612d495760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161104f565b600083600081518110612d5e57612d5e615b65565b6020026020010151118015612d8d5750600083600181518110612d8357612d83615b65565b6020026020010151115b8015612db35750600083600281518110612da957612da9615b65565b6020026020010151115b8015612dd95750600083600381518110612dcf57612dcf615b65565b6020026020010151115b8015612dff5750600083600481518110612df557612df5615b65565b6020026020010151115b612e3b5760405162461bcd60e51b815260206004820152600d60248201526c0c094811915154c81193d55391609a1b604482015260640161104f565b84600181518110612e4e57612e4e615b65565b602002602001015160cf60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600281518110612e8f57612e8f615b65565b602002602001015160d260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600381518110612ed057612ed0615b65565b602002602001015160d060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600481518110612f1157612f11615b65565b602090810291909101015160d180546001600160a01b0319166001600160a01b03909216918217905560df805462010000600160b01b0319166201000090920291909117905582518390600090612f6a57612f6a615b65565b602002602001015160d68190555082600181518110612f8b57612f8b615b65565b602002602001015160d48190555082600281518110612fac57612fac615b65565b602002602001015160d38190555082600381518110612fcd57612fcd615b65565b602002602001015160d58190555082600481518110612fee57612fee615b65565b602002602001015160d88190555060d45460d65460d55460d3546130129190615a5d565b61301c9190615a5d565b6130269190615a5d565b60d75560d98054606460cb55600a60cc5561ffff196001600160a01b038516620100000281166001600160b01b0319909216919091176101001790915560df8054610101921691909117905560e180546001600160a01b031916331790558015613096576000805461ff00191690555b50505050505050565b6065546001600160a01b031633146130c95760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166130ef5760405162461bcd60e51b815260040161104f90615816565b60df80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60df54339060ff16151560011461316b5760405162461bcd60e51b815260206004820152601660248201527510d4d2150e8810d85cda1bdd5d08111a5cd8589b195960521b604482015260640161104f565b6001600160a01b0381166131b65760405162461bcd60e51b8152602060048201526012602482015271435348543a207a65726f206164647265737360701b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff16156132135760405162461bcd60e51b815260206004820152601160248201527010d4d2150e88189b1858dadb1a5cdd1959607a1b604482015260640161104f565b60c9546040516305cfb67f60e11b81526000916001600160a01b031690630b9f6cfe906132469085908790600401615671565b60206040518083038186803b15801561325e57600080fd5b505afa158015613272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613296919061550d565b9050600081116132e15760405162461bcd60e51b8152602060048201526016602482015275435348543a20726577617264206e6f7420726561647960501b604482015260640161104f565b60006132ed8183615ab6565b60d154909250613307906001600160a01b03168484614021565b60c95460405163611015b360e11b815260009182916001600160a01b039091169063c2202b669061333e9088908a90600401615671565b6040805180830381600087803b15801561335757600080fd5b505af115801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f9190615526565b60d85491935091501561346d57606460d854856133ac9190615a97565b6133b69190615a75565b60e054909350600160a01b900460ff16156134005760d15460df5460d9546133fb926001600160a01b039081169262010000908190048216928692919004168761446c565b61346d565b60d15460df546201000090046001600160a01b039081169116146134435760d15460df546133fb916001600160a01b03908116916201000090041683308761446c565b600080516020615bc283398151915281308560405161346493929190615843565b60405180910390a15b7f6df62f67bac1b205a7fb106e3dd59043cdec9d6f2825adf0e0670f3cbcf86ac8858786846040516111b59493929190615784565b6065546001600160a01b031633146134cc5760405162461bcd60e51b815260040161104f90615951565b606481111561351d5760405162461bcd60e51b815260206004820152601c60248201527f464545533a20636173686f757420657863656564696e67203130302500000000604482015260640161104f565b60d855565b6001600160a01b031660009081526033602052604090205490565b6065546001600160a01b031633146135675760405162461bcd60e51b815260040161104f90615951565b61357160006149af565b565b6065546001600160a01b0316331461359d5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166135c35760405162461bcd60e51b815260040161104f90615816565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b0316331461360f5760405162461bcd60e51b815260040161104f90615951565b60d980549115156101000261ff0019909216919091179055565b60d1546060906001600160a01b03838116911614156136655750506040805180820190915260078152667265776172647360c81b602082015290565b60cf546001600160a01b038381169116141561369e57505060408051808201909152600781526619195d999d5b9960ca1b602082015290565b60d0546001600160a01b03838116911614156136d8575050604080518082019091526008815267747265617375727960c01b602082015290565b60d2546001600160a01b03838116911614156137135750506040805180820190915260098152686c697175696469747960b81b602082015290565b50506040805180820190915260018152605f60f81b602082015290565b6000609b828154811061374557613745615b65565b6000918252602090912001546001600160a01b031692915050565b6065546001600160a01b0316331461378a5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166137d55760405162461bcd60e51b81526020600482015260126024820152712722abafa1a9269d103d32b9379030b2323960711b604482015260640161104f565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146138215760405162461bcd60e51b815260040161104f90615951565b60008160d45460d65460d3546138379190615a5d565b6138419190615a5d565b61384b9190615a5d565b9050606481111561386e5760405162461bcd60e51b815260040161104f90615986565b60d59190915560d755565b6065546001600160a01b031633146138a35760405162461bcd60e51b815260040161104f90615951565b60df80549115156101000261ff0019909216919091179055565b60606037805461122990615af9565b6065546001600160a01b031633146138f65760405162461bcd60e51b815260040161104f90615951565b60008160d65460d55460d35461390c9190615a5d565b6139169190615a5d565b6139209190615a5d565b905060648111156139435760405162461bcd60e51b815260040161104f90615986565b60d49190915560d755565b6040516370a0823160e01b81523390859084906001600160a01b038316906370a082319061398090869060040161565d565b60206040518083038186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d0919061550d565b10156139ee5760405162461bcd60e51b815260040161104f9061591a565b60e0546040516323b872dd60e01b81526001600160a01b03808416926323b872dd92613a229287921690899060040161568a565b602060405180830381600087803b158015613a3c57600080fd5b505af1158015613a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7491906154d7565b5060e0546000906001600160a01b03166374cefd8a848989896115fa8a42615a5d565b6065546001600160a01b03163314613ac15760405162461bcd60e51b815260040161104f90615951565b60d9805460ff1916911515919091179055565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015613b595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161104f565b613b66828686840361416a565b506001949350505050565b600033611786818585614021565b6065546001600160a01b03163314613ba95760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613bf55760405162461bcd60e51b81526020600482015260136024820152722722abafaaa9a2219d103d32b9379030b2323960691b604482015260640161104f565b60d980546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6065546001600160a01b03163314613c495760405162461bcd60e51b815260040161104f90615951565b60df805460ff1916911515919091179055565b6065546001600160a01b03163314613c865760405162461bcd60e51b815260040161104f90615951565b60e08054911515600160a01b0260ff60a01b19909216919091179055565b6065546001600160a01b03163314613cce5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613d1d5760405162461bcd60e51b81526020600482015260166024820152752722abafa62927aaaa22a91d103d32b9379030b2323960511b604482015260640161104f565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613d695760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613d8f5760405162461bcd60e51b815260040161104f90615816565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6065546001600160a01b03163314613e065760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613e2c5760405162461bcd60e51b815260040161104f90615816565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b3383613e5982613522565b1015613e775760405162461bcd60e51b815260040161104f9061591a565b60e054613e8f9082906001600160a01b031686614021565b60e0546000906001600160a01b03166388e5249f838888886110928942615a5d565b6065546001600160a01b03163314613edb5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613f405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161104f565b613f49816149af565b50565b6065546001600160a01b03163314613f765760405162461bcd60e51b815260040161104f90615951565b60008160d45460d55460d354613f8c9190615a5d565b613f969190615a5d565b613fa09190615a5d565b90506064811115613fc35760405162461bcd60e51b815260040161104f90615986565b60d69190915560d755565b6065546001600160a01b03163314613ff85760405162461bcd60e51b815260040161104f90615951565b6064811061401c5760405163356008cf60e01b81526004810182905260240161104f565b60e255565b6001600160a01b038316600090815260dd602052604090205460ff1615801561406357506001600160a01b038216600090815260dd602052604090205460ff16155b6140af5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20426c61636b6c69737465642061646472657373000000000000604482015260640161104f565b6000606460e254836140c19190615a97565b6140cb9190615a75565b90506000811180156140f657506001600160a01b038416600090815260e3602052604090205460ff16155b801561410f575060cd546001600160a01b038481169116145b1561412c5760e15461412c9085906001600160a01b031683614617565b60cd546000906001600160a01b03858116911614156141545761414f8284615ab6565b614156565b825b9050614163858583614617565b5050505050565b6001600160a01b0383166141cc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161104f565b6001600160a01b03821661422d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161104f565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6097546001600160a01b038416600090815260996020526040812054909183916142b89086615a97565b6142c29190615a75565b6142cc9190615ab6565b949350505050565b804710156143245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161104f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614371576040519150601f19603f3d011682016040523d82523d6000602084013e614376565b606091505b50509050806143ed5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161104f565b505050565b60006143fe8484613db1565b9050600019811461446657818110156144595760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161104f565b614466848484840361416a565b50505050565b600061447785613629565b90506001600160a01b0383163014156144c557614495868684614021565b600080516020615bc2833981519152818585856040516144b894939291906157d9565b60405180910390a161460f565b60e0546144dd9087906001600160a01b031684614021565b60e054604051632da63c1160e21b81526001600160a01b039091169063b698f044906145119088908790879060040161568a565b600060405180830381600087803b15801561452b57600080fd5b505af115801561453f573d6000803e3d6000fd5b505060e25460e05460405163f5c1365360e01b8152600160048201526001600160a01b0388811660248301526044820188905260009550606494509091169063f5c1365390840160206040518083038186803b15801561459e57600080fd5b505afa1580156145b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d6919061550d565b6145e09190615a97565b6145ea9190615a75565b9050600080516020615bc2833981519152828686846040516116e594939291906157d9565b505050505050565b6001600160a01b03831661467b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161104f565b6001600160a01b0382166146dd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161104f565b6001600160a01b038316600090815260336020526040902054818110156147555760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161104f565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061478c908490615a5d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516147d891815260200190565b60405180910390a3614466565b6143ed8363a9059cbb60e01b8484604051602401614804929190615671565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a01565b600054610100900460ff166148625760405162461bcd60e51b815260040161104f906159bd565b613571614ad3565b600054610100900460ff166148915760405162461bcd60e51b815260040161104f906159bd565b61489b8282614b03565b5050565b600054610100900460ff166148c65760405162461bcd60e51b815260040161104f906159bd565b61489b8282614b51565b6001600160a01b0382166149265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161104f565b80603560008282546149389190615a5d565b90915550506001600160a01b03821660009081526033602052604081208054839290614965908490615a5d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000614a56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c8f9092919063ffffffff16565b8051909150156143ed5780806020019051810190614a7491906154d7565b6143ed5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161104f565b600054610100900460ff16614afa5760405162461bcd60e51b815260040161104f906159bd565b613571336149af565b600054610100900460ff16614b2a5760405162461bcd60e51b815260040161104f906159bd565b8151614b3d906036906020850190614fe6565b5080516143ed906037906020840190614fe6565b600054610100900460ff16614b785760405162461bcd60e51b815260040161104f906159bd565b8051825114614be45760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161104f565b6000825111614c355760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161104f565b60005b82518110156143ed57614c7d838281518110614c5657614c56615b65565b6020026020010151838381518110614c7057614c70615b65565b6020026020010151614c9e565b80614c8781615b34565b915050614c38565b60606142cc8484600085614e7c565b6001600160a01b038216614d095760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161104f565b60008111614d595760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161104f565b6001600160a01b03821660009081526099602052604090205415614dd35760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161104f565b609b8054600181019091557fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3490180546001600160a01b0319166001600160a01b0384169081179091556000908152609960205260409020819055609754614e3b908290615a5d565b6097556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90614e709084908490615671565b60405180910390a15050565b606082471015614edd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161104f565b6001600160a01b0385163b614f345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104f565b600080866001600160a01b03168587604051614f509190615641565b60006040518083038185875af1925050503d8060008114614f8d576040519150601f19603f3d011682016040523d82523d6000602084013e614f92565b606091505b5091509150614fa2828286614fad565b979650505050505050565b60608315614fbc575081611954565b825115614fcc5782518084602001fd5b8160405162461bcd60e51b815260040161104f91906157c6565b828054614ff290615af9565b90600052602060002090601f016020900481019282615014576000855561505a565b82601f1061502d57805160ff191683800117855561505a565b8280016001018555821561505a579182015b8281111561505a57825182559160200191906001019061503f565b5061506692915061506a565b5090565b5b80821115615066576000815560010161506b565b803561508a81615b91565b919050565b600082601f8301126150a057600080fd5b813560206150b56150b083615a39565b615a08565b80838252828201915082860187848660051b89010111156150d557600080fd5b60005b858110156150fd5781356150eb81615b91565b845292840192908401906001016150d8565b5090979650505050505050565b600082601f83011261511b57600080fd5b8135602061512b6150b083615a39565b80838252828201915082860187848660051b890101111561514b57600080fd5b60005b858110156150fd5781358452928401929084019060010161514e565b803561508a81615bb4565b60006020828403121561518757600080fd5b813561195481615b91565b6000602082840312156151a457600080fd5b815161195481615b91565b600080604083850312156151c257600080fd5b82356151cd81615b91565b915060208301356151dd81615b91565b809150509250929050565b6000806000606084860312156151fd57600080fd5b833561520881615b91565b9250602084013561521881615b91565b929592945050506040919091013590565b6000806040838503121561523c57600080fd5b823561524781615b91565b915060208301356151dd81615ba6565b6000806040838503121561526a57600080fd5b823561527581615b91565b946020939093013593505050565b6000806000806080858703121561529957600080fd5b84356152a481615b91565b966020860135965060408601359560600135945092505050565b60008060008060008060c087890312156152d757600080fd5b863567ffffffffffffffff808211156152ef57600080fd5b6152fb8a838b0161508f565b9750602089013591508082111561531157600080fd5b61531d8a838b0161510a565b9650604089013591508082111561533357600080fd5b61533f8a838b0161508f565b9550606089013591508082111561535557600080fd5b6153618a838b0161510a565b9450608089013591508082111561537757600080fd5b5061538489828a0161510a565b92505061539360a0880161507f565b90509295509295509295565b60008060408084860312156153b357600080fd5b833567ffffffffffffffff808211156153cb57600080fd5b818601915086601f8301126153df57600080fd5b813560206153ef6150b083615a39565b8083825282820191508286018b848660051b890101111561540f57600080fd5b60005b8581101561549a5781358781111561542957600080fd5b8801603f81018e1361543a57600080fd5b858101358881111561544e5761544e615b7b565b615460601f8201601f19168801615a08565b8181528f8c83850101111561547457600080fd5b818c84018983013760009181018801919091528552509284019290840190600101615412565b505080985050506154ac81890161516a565b955050505050509250929050565b6000602082840312156154cc57600080fd5b813561195481615ba6565b6000602082840312156154e957600080fd5b815161195481615ba6565b60006020828403121561550657600080fd5b5035919050565b60006020828403121561551f57600080fd5b5051919050565b6000806040838503121561553957600080fd5b8251915060208301516151dd81615bb4565b6000806040838503121561555e57600080fd5b50508035926020909101359150565b6000806040838503121561558057600080fd5b505080516020909101519092909150565b6000806000606084860312156155a657600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156155d357600080fd5b505082516020840151604085015160609095015191969095509092509050565b6004811061561157634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845261562d816020860160208601615acd565b601f01601f19169290920160200192915050565b60008251615653818460208701615acd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006060820160018060a01b0386168352602060608185015281865180845260808601915060808160051b870101935082880160005b8281101561574357607f19888703018452615731868351615615565b95509284019290840190600101615715565b5050505050809150506142cc60408301846155f3565b6001600160a01b03841681526060810161577660208301856155f3565b826040830152949350505050565b6001600160a01b03851681526020810184905260408101839052608081016157af60608301846155f3565b95945050505050565b6020810161178c82846155f3565b6020815260006119546020830184615615565b6080815260006157ec6080830187615615565b90506157fb60208301866155f3565b6001600160a01b039390931660408201526060015292915050565b6020808252601390820152722aa8222faba0a6261d103d32b9379030b2323960691b604082015260600190565b6080808252600790820152667265776172647360c81b60a082015260c0810161586f60208301866155f3565b6001600160a01b0393909316604082015260600152919050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f535741503a20696e73756666696369656e742062616c616e6365000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f464545533a20746f74616c20657863656564696e672031303025000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715615a3157615a31615b7b565b604052919050565b600067ffffffffffffffff821115615a5357615a53615b7b565b5060051b60200190565b60008219821115615a7057615a70615b4f565b500190565b600082615a9257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615ab157615ab1615b4f565b500290565b600082821015615ac857615ac8615b4f565b500390565b60005b83811015615ae8578181015183820152602001615ad0565b838111156144665750506000910152565b600181811c90821680615b0d57607f821691505b60208210811415615b2e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615b4857615b48615b4f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613f4957600080fd5b8015158114613f4957600080fd5b60048110613f4957600080fdfeae65b8cdcf70197aae9eec6cad9075662a0b1f140940b20a5d60413e1d05e8b8a164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106104da5760003560e01c806382a8ebad11610281578063b62496f51161015a578063dd62ed3e116100cc578063f2e0302311610085578063f2e0302314610f6a578063f2fde38b14610f8a578063f34f152214610faa578063f764bfb514610fc0578063f78d5c5514610fe6578063ff1c93b31461100657600080fd5b8063dd62ed3e14610ebc578063e0583ec014610edc578063e33b7de314610ef6578063e37ba8f914610f0b578063eb71c5d914610f2b578063f215a9d114610f4a57600080fd5b8063cc32d1761161011e578063cc32d17614610dd9578063cd6e18f114610def578063ce7c2ac214610e0f578063cfc0d02414610e45578063d79779b214610e65578063d8c6404b14610e9b57600080fd5b8063b62496f514610d43578063b9bd393314610d73578063ba2734d214610d8d578063bcb8ebfc14610dad578063cc1776d314610dc357600080fd5b80639852595c116101f3578063a11a1410116101b7578063a11a141014610c7d578063a457c2d714610cad578063a5f3d00314610ccd578063a9059cbb14610ce3578063aaf5bfc314610d03578063b3328aae14610d2357600080fd5b80639852595c14610bba5780639a6e80db14610bf05780639c64291c14610c105780639dc73a4914610c305780639ff41fe314610c5057600080fd5b80638d289144116102455780638d28914414610b075780638da5cb5b14610b275780638e67566314610b455780639149acbc14610b6557806395d89b4114610b855780639723283014610b9a57600080fd5b806382a8ebad14610a71578063839df91914610a9157806383dcd37614610ab15780638683811614610ad15780638b83209b14610ae757600080fd5b8063313ce567116103b3578063559bf302116103255780636815a91c116102e95780636815a91c146109c65780636d9ae0be146109e657806370a08231146109fc578063715018a614610a1c578063809d458d14610a31578063810be66d14610a5157600080fd5b8063559bf3021461092657806357dae063146109465780635dd731fc1461096657806365bfe43014610986578063665a11ca146109a657600080fd5b8063406072a911610377578063406072a91461087b57806348b750441461089b57806348df5829146108bb57806349bd5a5e146108db57806354557973146108fb57806354f12f1f1461091057600080fd5b8063313ce567146107f4578063393061401461081057806339509351146108265780633962a2a1146108465780633a98ef391461086657600080fd5b806311eac8551161044c5780631cdd3be3116104105780631cdd3be31461073b57806323b872dd1461076b578063241a38c61461078b57806325eecf9e1461079e5780632bb14e1d146107be5780633086319d146107d457600080fd5b806311eac8551461069c57806313114a9d146106c25780631694505e146106e657806318160ddd14610706578063191655871461071b57600080fd5b80630841e9771161049e5780630841e977146105cc578063084a6bff146105ec578063095ea7b31461060c5780630c4242841461063c5780630db924491461065c5780630f1978fb1461067d57600080fd5b80630129981c1461051f5780630359fea91461054157806303d29d281461057757806306fdde031461059757806307a55860146105b957600080fd5b3661051a577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610510929190615671565b60405180910390a1005b600080fd5b34801561052b57600080fd5b5061053f61053a366004615283565b611026565b005b34801561054d57600080fd5b5060d154610561906001600160a01b031681565b60405161056e919061565d565b60405180910390f35b34801561058357600080fd5b5061053f610592366004615229565b6111c5565b3480156105a357600080fd5b506105ac61121a565b60405161056e91906157c6565b61053f6105c7366004615591565b6112ac565b3480156105d857600080fd5b5061053f6105e7366004615283565b6114b1565b3480156105f857600080fd5b5061053f6106073660046154f4565b6116f6565b34801561061857600080fd5b5061062c610627366004615257565b611778565b604051901515815260200161056e565b34801561064857600080fd5b5061053f610657366004615229565b611792565b34801561066857600080fd5b5060e05461062c90600160a01b900460ff1681565b34801561068957600080fd5b5060d95461062c90610100900460ff1681565b3480156106a857600080fd5b5060d954610561906201000090046001600160a01b031681565b3480156106ce57600080fd5b506106d860d75481565b60405190815260200161056e565b3480156106f257600080fd5b5060ca54610561906001600160a01b031681565b34801561071257600080fd5b506035546106d8565b34801561072757600080fd5b5061053f610736366004615175565b611810565b34801561074757600080fd5b5061062c610756366004615175565b60dd6020526000908152604090205460ff1681565b34801561077757600080fd5b5061062c6107863660046151e8565b611935565b61053f61079936600461554b565b61195b565b3480156107aa57600080fd5b5061053f6107b9366004615175565b611980565b3480156107ca57600080fd5b506106d860d35481565b3480156107e057600080fd5b5061053f6107ef36600461539f565b6119f5565b34801561080057600080fd5b506040516012815260200161056e565b34801561081c57600080fd5b506106d860ce5481565b34801561083257600080fd5b5061062c610841366004615257565b6120d6565b34801561085257600080fd5b5061053f610861366004615175565b612115565b34801561087257600080fd5b506097546106d8565b34801561088757600080fd5b506106d86108963660046151af565b61218a565b3480156108a757600080fd5b5061053f6108b63660046151af565b6121b5565b3480156108c757600080fd5b5060d054610561906001600160a01b031681565b3480156108e757600080fd5b5060cd54610561906001600160a01b031681565b34801561090757600080fd5b5061053f612379565b34801561091c57600080fd5b506106d860d55481565b34801561093257600080fd5b5061053f610941366004615175565b612965565b34801561095257600080fd5b5061053f6109613660046152be565b6129d7565b34801561097257600080fd5b5061053f610981366004615175565b61309f565b34801561099257600080fd5b5061053f6109a13660046154f4565b613119565b3480156109b257600080fd5b5060d254610561906001600160a01b031681565b3480156109d257600080fd5b5061053f6109e13660046154f4565b6134a2565b3480156109f257600080fd5b506106d860d85481565b348015610a0857600080fd5b506106d8610a17366004615175565b613522565b348015610a2857600080fd5b5061053f61353d565b348015610a3d57600080fd5b5061053f610a4c366004615175565b613573565b348015610a5d57600080fd5b5060cf54610561906001600160a01b031681565b348015610a7d57600080fd5b5060e054610561906001600160a01b031681565b348015610a9d57600080fd5b5061053f610aac3660046154ba565b6135e5565b348015610abd57600080fd5b506105ac610acc366004615175565b613629565b348015610add57600080fd5b506106d860da5481565b348015610af357600080fd5b50610561610b023660046154f4565b613730565b348015610b1357600080fd5b5061053f610b22366004615175565b613760565b348015610b3357600080fd5b506065546001600160a01b0316610561565b348015610b5157600080fd5b5061053f610b603660046154f4565b6137f7565b348015610b7157600080fd5b5061053f610b803660046154ba565b613879565b348015610b9157600080fd5b506105ac6138bd565b348015610ba657600080fd5b5061053f610bb53660046154f4565b6138cc565b348015610bc657600080fd5b506106d8610bd5366004615175565b6001600160a01b03166000908152609a602052604090205490565b348015610bfc57600080fd5b5060c954610561906001600160a01b031681565b348015610c1c57600080fd5b5061053f610c2b366004615283565b61394e565b348015610c3c57600080fd5b5061053f610c4b3660046154ba565b613a97565b348015610c5c57600080fd5b506106d8610c6b366004615175565b60dc6020526000908152604090205481565b348015610c8957600080fd5b5061062c610c98366004615175565b60e36020526000908152604090205460ff1681565b348015610cb957600080fd5b5061062c610cc8366004615257565b613ad4565b348015610cd957600080fd5b506106d860d65481565b348015610cef57600080fd5b5061062c610cfe366004615257565b613b71565b348015610d0f57600080fd5b5061053f610d1e366004615175565b613b7f565b348015610d2f57600080fd5b5061053f610d3e3660046154ba565b613c1f565b348015610d4f57600080fd5b5061062c610d5e366004615175565b60de6020526000908152604090205460ff1681565b348015610d7f57600080fd5b5060df5461062c9060ff1681565b348015610d9957600080fd5b5061053f610da83660046154ba565b613c5c565b348015610db957600080fd5b506106d860cb5481565b348015610dcf57600080fd5b506106d860e25481565b348015610de557600080fd5b506106d860d45481565b348015610dfb57600080fd5b5061053f610e0a366004615175565b613ca4565b348015610e1b57600080fd5b506106d8610e2a366004615175565b6001600160a01b031660009081526099602052604090205490565b348015610e5157600080fd5b5061053f610e60366004615175565b613d3f565b348015610e7157600080fd5b506106d8610e80366004615175565b6001600160a01b03166000908152609c602052604090205490565b348015610ea757600080fd5b5060d95461062c90600160b01b900460ff1681565b348015610ec857600080fd5b506106d8610ed73660046151af565b613db1565b348015610ee857600080fd5b5060d95461062c9060ff1681565b348015610f0257600080fd5b506098546106d8565b348015610f1757600080fd5b5061053f610f26366004615175565b613ddc565b348015610f3757600080fd5b5060df5461062c90610100900460ff1681565b348015610f5657600080fd5b5060e154610561906001600160a01b031681565b348015610f7657600080fd5b5061053f610f85366004615283565b613e4e565b348015610f9657600080fd5b5061053f610fa5366004615175565b613eb1565b348015610fb657600080fd5b506106d860db5481565b348015610fcc57600080fd5b5060df54610561906201000090046001600160a01b031681565b348015610ff257600080fd5b5061053f6110013660046154f4565b613f4c565b34801561101257600080fd5b5061053f6110213660046154f4565b613fce565b338261103182613522565b10156110585760405162461bcd60e51b815260040161104f9061591a565b60405180910390fd5b60e0546110709082906001600160a01b031685614021565b60e0546000906001600160a01b03166380be66cf838888886110928942615a5d565b6040518663ffffffff1660e01b81526004016110b29594939291906156ae565b6040805180830381600087803b1580156110cb57600080fd5b505af11580156110df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611103919061556d565b905080915050600080516020615bc28339815191526111a160e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b505afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190615192565b600330846040516111b594939291906157d9565b60405180910390a1505050505050565b6065546001600160a01b031633146111ef5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0391909116600090815260dd60205260409020805460ff1916911515919091179055565b60606036805461122990615af9565b80601f016020809104026020016040519081016040528092919081815260200182805461125590615af9565b80156112a25780601f10611277576101008083540402835291602001916112a2565b820191906000526020600020905b81548152906001019060200180831161128557829003601f168201915b5050505050905090565b33348311156113085760405162461bcd60e51b815260206004820152602260248201527f535741503a206d73672e76616c7565206c657373207468616e20736c69707061604482015261676560f01b606482015260840161104f565b60e0546000906001600160a01b031663ed9705da3484886113298842615a5d565b6040516001600160e01b031960e087901b1681526001600160a01b0390931660048401526024830191909152604482015260640160408051808303818588803b15801561137557600080fd5b505af1158015611389573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ae919061556d565b905080915050600080516020615bc283398151915261141460e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b60e0546040805163eb6d3a1160e01b815290516003926001600160a01b03169163eb6d3a11916004808301926020929190829003018186803b15801561145957600080fd5b505afa15801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114919190615192565b846040516114a294939291906157d9565b60405180910390a15050505050565b6040516370a0823160e01b81523390859085906001600160a01b038316906370a08231906114e390869060040161565d565b60206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061550d565b10156115515760405162461bcd60e51b815260040161104f9061591a565b60e0546040516323b872dd60e01b81526001600160a01b03808416926323b872dd9261158592879216908a9060040161568a565b602060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d791906154d7565b5060e0546000906001600160a01b0316636e54a8a0848989896115fa8a42615a5d565b6040518663ffffffff1660e01b815260040161161a9594939291906156ae565b6040805180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b919061556d565b905080915050600080516020615bc28339815191526116d160e060009054906101000a90046001600160a01b03166001600160a01b03166311eb47dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b600389846040516116e594939291906157d9565b60405180910390a150505050505050565b6065546001600160a01b031633146117205760405162461bcd60e51b815260040161104f90615951565b60008160d45460d65460d5546117369190615a5d565b6117409190615a5d565b61174a9190615a5d565b9050606481111561176d5760405162461bcd60e51b815260040161104f90615986565b60d39190915560d755565b60003361178681858561416a565b60019150505b92915050565b6065546001600160a01b031633146117bc5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0382166117e55781604051634726455360e11b815260040161104f919061565d565b6001600160a01b0391909116600090815260e360205260409020805460ff1916911515919091179055565b6001600160a01b0381166000908152609960205260409020546118455760405162461bcd60e51b815260040161104f90615889565b600061185060985490565b61185a9047615a5d565b905060006118878383611882866001600160a01b03166000908152609a602052604090205490565b61428e565b9050806118a65760405162461bcd60e51b815260040161104f906158cf565b6001600160a01b0383166000908152609a6020526040812080548392906118ce908490615a5d565b9250508190555080609860008282546118e79190615a5d565b909155506118f7905083826142d4565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051611928929190615671565b60405180910390a1505050565b6000336119438582856143f2565b61194e858585614021565b60019150505b9392505050565b60e054339034906000906001600160a01b0316638f6e53b78385886113298942615a5d565b6065546001600160a01b031633146119aa5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166119d35780604051634726455360e11b815260040161104f919061565d565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60df54610100900460ff16611a4c5760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a206d696e7420636f6e74732064697361626c6564000000604482015260640161104f565b60cc5482511115611a9a5760405162461bcd60e51b8152602060048201526018602482015277434f4e544d494e543a20746f6f206d616e7920636f6e747360401b604482015260640161104f565b60005b8251811015611b53576003838281518110611aba57611aba615b65565b602002602001015151118015611aea57506021838281518110611adf57611adf615b65565b602002602001015151105b611b415760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20696d70726f7065722063686172616374657220636f756044820152611b9d60f21b606482015260840161104f565b80611b4b81615b34565b915050611a9d565b503380611b9b5760405162461bcd60e51b8152602060048201526016602482015275434f4e544d494e543a207a65726f206164647265737360501b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff1615611c045760405162461bcd60e51b815260206004820152601d60248201527f434f4e544d494e543a20626c61636b6c69737465642061646472657373000000604482015260640161104f565b60cf546001600160a01b03828116911614801590611c30575060d1546001600160a01b03828116911614155b8015611c4a575060d0546001600160a01b03828116911614155b611ca15760405162461bcd60e51b815260206004820152602260248201527f434f4e544d494e543a20706f6f6c732063616e6e6f742063726561746520636f6044820152611b9d60f21b606482015260840161104f565b60c9546040516344fea1b960e01b81526000916001600160a01b0316906344fea1b990611cd290859060040161565d565b60206040518083038186803b158015611cea57600080fd5b505afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d22919061550d565b905060cb54845182611d349190615a5d565b1115611d825760405162461bcd60e51b815260206004820152601c60248201527f434f4e544d494e543a2072656163686564206d696e74206c696d697400000000604482015260640161104f565b835160c954604051630c75361360e31b8152600092916001600160a01b0316906363a9b09890611db69088906004016157b8565b60206040518083038186803b158015611dce57600080fd5b505afa158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e06919061550d565b611e109190615a97565b90508060ce6000828254611e249190615a5d565b90915550819050611e3484613522565b1015611e925760405162461bcd60e51b815260206004820152602760248201527f434f4e544d494e543a2042616c616e636520746f6f206c6f7720666f7220637260448201526632b0ba34b7b71760c91b606482015260840161104f565b6000606460d65483611ea49190615a97565b611eae9190615a75565b60d954909150610100900460ff1615611eed5760cf5460d954611ee89186916001600160a01b03918216918991620100009004168561446c565b611f07565b60cf54611f079085906001600160a01b031687308561446c565b6000606460d35484611f199190615a97565b611f239190615a75565b60d154909150611f409086906001600160a01b031688308561446c565b6000606460d45485611f529190615a97565b611f5c9190615a75565b60d95490915060ff1615611f965760d05460d954611f919188916001600160a01b03918216918b91620100009004168561446c565b611fb0565b60d054611fb09087906001600160a01b031689308561446c565b6000606460d55486611fc29190615a97565b611fcc9190615a75565b60d254909150611fe99088906001600160a01b03168a308561446c565b6000818385611ff8888a615ab6565b6120029190615ab6565b61200c9190615ab6565b6120169190615ab6565b9050801561202957612029883083614617565b60c95460405162a6998d60e31b81526001600160a01b0390911690630534cc689061205c908b908e908e906004016156df565b600060405180830381600087803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b505050507f9972942513a6d471ac125572d271f49ecc9652139451120363f1333713c42c43888a8c516040516120c293929190615759565b60405180910390a150505050505050505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906117869082908690612110908790615a5d565b61416a565b6065546001600160a01b0316331461213f5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166121685780604051634726455360e11b815260040161104f919061565d565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b6001600160a01b0381166000908152609960205260409020546121ea5760405162461bcd60e51b815260040161104f90615889565b6001600160a01b0382166000908152609c60205260408120546040516370a0823160e01b81526001600160a01b038516906370a082319061222f90309060040161565d565b60206040518083038186803b15801561224757600080fd5b505afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f919061550d565b6122899190615a5d565b9050600061229c8383611882878761218a565b9050806122bb5760405162461bcd60e51b815260040161104f906158cf565b6001600160a01b038085166000908152609d60209081526040808320938716835292905290812080548392906122f2908490615a5d565b90915550506001600160a01b0384166000908152609c60205260408120805483929061231f908490615a5d565b9091555061233090508484836147e5565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a848360405161236b929190615671565b60405180910390a250505050565b60df54339060ff1615156001146123d25760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20636173686f75742064697361626c656400000000000000604482015260640161104f565b6001600160a01b0381166124205760405162461bcd60e51b815260206004820152601560248201527443534854414c4c3a207a65726f206164647265737360581b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff16156124895760405162461bcd60e51b815260206004820152601c60248201527f43534854414c4c3a20626c61636b6c6973746564206164647265737300000000604482015260640161104f565b60c9546040516330cd31af60e11b81526000916001600160a01b03169063619a635e906124ba90859060040161565d565b60206040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250a919061550d565b90506000811161255c5760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20726577617264206e6f7420726561647900000000000000604482015260640161104f565b60c95460405163d094fa8d60e01b8152600091829182916001600160a01b03169063d094fa8d9061259190889060040161565d565b608060405180830381600087803b1580156125ab57600080fd5b505af11580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e391906155bd565b60d85493975091955093509150600090156128ec57606460d854866126089190615a97565b6126129190615a75565b60e054909150600160a01b900460ff16156126f55760d15460df5460d95460d854612674936001600160a01b0390811693620100009081900482169360009391900490911690606490612665908b615a97565b61266f9190615a75565b61446c565b60d15460df5460d95460d8546126b2936001600160a01b0390811693620100009081900482169360019391900490911690606490612665908a615a97565b60d15460df5460d95460d8546126f0936001600160a01b03908116936201000090819004821693600293919004909116906064906126659089615a97565b612876565b60d15460df546201000090046001600160a01b039081169116146127ac5760d15460df5460d854612746926001600160a01b039081169262010000900416906000903090606490612665908b615a97565b60d15460df5460d854612779926001600160a01b039081169262010000900416906001903090606490612665908a615a97565b60d15460df5460d8546126f0926001600160a01b0390811692620100009004169060029030906064906126659089615a97565b600080516020615bc2833981519152600030606460d854886127ce9190615a97565b6127d89190615a75565b6040516127e793929190615843565b60405180910390a1600080516020615bc2833981519152600130606460d854876128119190615a97565b61281b9190615a75565b60405161282a93929190615843565b60405180910390a1600080516020615bc2833981519152600230606460d854866128549190615a97565b61285e9190615a75565b60405161286d93929190615843565b60405180910390a15b606460d85460646128879190615ab6565b6128919086615a97565b61289b9190615a75565b9350606460d85460646128ae9190615ab6565b6128b89085615a97565b6128c29190615a75565b9250606460d85460646128d59190615ab6565b6128df9084615a97565b6128e99190615a75565b91505b6128f68186615ab6565b60d154909550612910906001600160a01b03168787614021565b604080516001600160a01b03881681526020810187905290810185905260608101849052608081018390527f6717635faad3367ddfa0564bf3540e74269b0c5dfef7720d5512f309dc1b6c869060a0016111b5565b6065546001600160a01b0316331461298f5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166129b55760405162461bcd60e51b815260040161104f90615816565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166129f25760005460ff16156129f6565b303b155b612a595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161104f565b600054610100900460ff16158015612a7b576000805461ffff19166101011790555b60008551118015612a8d575060008451115b612ad05760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161104f565b612ad861483b565b612b1c604051806040016040528060078152602001663078426c6f636b60c81b81525060405180604001604052806003815260200162183c2160e91b81525061486a565b612b26878761489f565b60005b8551811015612b9357612b81868281518110612b4757612b47615b65565b6020026020010151868381518110612b6157612b61615b65565b6020026020010151670de0b6b3a7640000612b7c9190615a97565b6148d0565b80612b8b81615b34565b915050612b29565b5060355469d3c21bcecceda100000014612be75760405162461bcd60e51b81526020600482015260156024820152741515130814d5541413164811125191880c48135253605a1b604482015260640161104f565b60006001600160a01b031685600181518110612c0557612c05615b65565b60200260200101516001600160a01b031614158015612c51575060006001600160a01b031685600281518110612c3d57612c3d615b65565b60200260200101516001600160a01b031614155b8015612c8a575060006001600160a01b031685600381518110612c7657612c76615b65565b60200260200101516001600160a01b031614155b8015612cc3575060006001600160a01b031685600481518110612caf57612caf615b65565b60200260200101516001600160a01b031614155b612d015760405162461bcd60e51b815260206004820152600f60248201526e1413d3d30816915493c81193d55391608a1b604482015260640161104f565b8351855114612d495760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b604482015260640161104f565b600083600081518110612d5e57612d5e615b65565b6020026020010151118015612d8d5750600083600181518110612d8357612d83615b65565b6020026020010151115b8015612db35750600083600281518110612da957612da9615b65565b6020026020010151115b8015612dd95750600083600381518110612dcf57612dcf615b65565b6020026020010151115b8015612dff5750600083600481518110612df557612df5615b65565b6020026020010151115b612e3b5760405162461bcd60e51b815260206004820152600d60248201526c0c094811915154c81193d55391609a1b604482015260640161104f565b84600181518110612e4e57612e4e615b65565b602002602001015160cf60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600281518110612e8f57612e8f615b65565b602002602001015160d260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600381518110612ed057612ed0615b65565b602002602001015160d060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600481518110612f1157612f11615b65565b602090810291909101015160d180546001600160a01b0319166001600160a01b03909216918217905560df805462010000600160b01b0319166201000090920291909117905582518390600090612f6a57612f6a615b65565b602002602001015160d68190555082600181518110612f8b57612f8b615b65565b602002602001015160d48190555082600281518110612fac57612fac615b65565b602002602001015160d38190555082600381518110612fcd57612fcd615b65565b602002602001015160d58190555082600481518110612fee57612fee615b65565b602002602001015160d88190555060d45460d65460d55460d3546130129190615a5d565b61301c9190615a5d565b6130269190615a5d565b60d75560d98054606460cb55600a60cc5561ffff196001600160a01b038516620100000281166001600160b01b0319909216919091176101001790915560df8054610101921691909117905560e180546001600160a01b031916331790558015613096576000805461ff00191690555b50505050505050565b6065546001600160a01b031633146130c95760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166130ef5760405162461bcd60e51b815260040161104f90615816565b60df80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60df54339060ff16151560011461316b5760405162461bcd60e51b815260206004820152601660248201527510d4d2150e8810d85cda1bdd5d08111a5cd8589b195960521b604482015260640161104f565b6001600160a01b0381166131b65760405162461bcd60e51b8152602060048201526012602482015271435348543a207a65726f206164647265737360701b604482015260640161104f565b6001600160a01b038116600090815260dd602052604090205460ff16156132135760405162461bcd60e51b815260206004820152601160248201527010d4d2150e88189b1858dadb1a5cdd1959607a1b604482015260640161104f565b60c9546040516305cfb67f60e11b81526000916001600160a01b031690630b9f6cfe906132469085908790600401615671565b60206040518083038186803b15801561325e57600080fd5b505afa158015613272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613296919061550d565b9050600081116132e15760405162461bcd60e51b8152602060048201526016602482015275435348543a20726577617264206e6f7420726561647960501b604482015260640161104f565b60006132ed8183615ab6565b60d154909250613307906001600160a01b03168484614021565b60c95460405163611015b360e11b815260009182916001600160a01b039091169063c2202b669061333e9088908a90600401615671565b6040805180830381600087803b15801561335757600080fd5b505af115801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f9190615526565b60d85491935091501561346d57606460d854856133ac9190615a97565b6133b69190615a75565b60e054909350600160a01b900460ff16156134005760d15460df5460d9546133fb926001600160a01b039081169262010000908190048216928692919004168761446c565b61346d565b60d15460df546201000090046001600160a01b039081169116146134435760d15460df546133fb916001600160a01b03908116916201000090041683308761446c565b600080516020615bc283398151915281308560405161346493929190615843565b60405180910390a15b7f6df62f67bac1b205a7fb106e3dd59043cdec9d6f2825adf0e0670f3cbcf86ac8858786846040516111b59493929190615784565b6065546001600160a01b031633146134cc5760405162461bcd60e51b815260040161104f90615951565b606481111561351d5760405162461bcd60e51b815260206004820152601c60248201527f464545533a20636173686f757420657863656564696e67203130302500000000604482015260640161104f565b60d855565b6001600160a01b031660009081526033602052604090205490565b6065546001600160a01b031633146135675760405162461bcd60e51b815260040161104f90615951565b61357160006149af565b565b6065546001600160a01b0316331461359d5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166135c35760405162461bcd60e51b815260040161104f90615816565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b0316331461360f5760405162461bcd60e51b815260040161104f90615951565b60d980549115156101000261ff0019909216919091179055565b60d1546060906001600160a01b03838116911614156136655750506040805180820190915260078152667265776172647360c81b602082015290565b60cf546001600160a01b038381169116141561369e57505060408051808201909152600781526619195d999d5b9960ca1b602082015290565b60d0546001600160a01b03838116911614156136d8575050604080518082019091526008815267747265617375727960c01b602082015290565b60d2546001600160a01b03838116911614156137135750506040805180820190915260098152686c697175696469747960b81b602082015290565b50506040805180820190915260018152605f60f81b602082015290565b6000609b828154811061374557613745615b65565b6000918252602090912001546001600160a01b031692915050565b6065546001600160a01b0316331461378a5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b0381166137d55760405162461bcd60e51b81526020600482015260126024820152712722abafa1a9269d103d32b9379030b2323960711b604482015260640161104f565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146138215760405162461bcd60e51b815260040161104f90615951565b60008160d45460d65460d3546138379190615a5d565b6138419190615a5d565b61384b9190615a5d565b9050606481111561386e5760405162461bcd60e51b815260040161104f90615986565b60d59190915560d755565b6065546001600160a01b031633146138a35760405162461bcd60e51b815260040161104f90615951565b60df80549115156101000261ff0019909216919091179055565b60606037805461122990615af9565b6065546001600160a01b031633146138f65760405162461bcd60e51b815260040161104f90615951565b60008160d65460d55460d35461390c9190615a5d565b6139169190615a5d565b6139209190615a5d565b905060648111156139435760405162461bcd60e51b815260040161104f90615986565b60d49190915560d755565b6040516370a0823160e01b81523390859084906001600160a01b038316906370a082319061398090869060040161565d565b60206040518083038186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d0919061550d565b10156139ee5760405162461bcd60e51b815260040161104f9061591a565b60e0546040516323b872dd60e01b81526001600160a01b03808416926323b872dd92613a229287921690899060040161568a565b602060405180830381600087803b158015613a3c57600080fd5b505af1158015613a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7491906154d7565b5060e0546000906001600160a01b03166374cefd8a848989896115fa8a42615a5d565b6065546001600160a01b03163314613ac15760405162461bcd60e51b815260040161104f90615951565b60d9805460ff1916911515919091179055565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015613b595760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161104f565b613b66828686840361416a565b506001949350505050565b600033611786818585614021565b6065546001600160a01b03163314613ba95760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613bf55760405162461bcd60e51b81526020600482015260136024820152722722abafaaa9a2219d103d32b9379030b2323960691b604482015260640161104f565b60d980546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6065546001600160a01b03163314613c495760405162461bcd60e51b815260040161104f90615951565b60df805460ff1916911515919091179055565b6065546001600160a01b03163314613c865760405162461bcd60e51b815260040161104f90615951565b60e08054911515600160a01b0260ff60a01b19909216919091179055565b6065546001600160a01b03163314613cce5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613d1d5760405162461bcd60e51b81526020600482015260166024820152752722abafa62927aaaa22a91d103d32b9379030b2323960511b604482015260640161104f565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613d695760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613d8f5760405162461bcd60e51b815260040161104f90615816565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6065546001600160a01b03163314613e065760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613e2c5760405162461bcd60e51b815260040161104f90615816565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b3383613e5982613522565b1015613e775760405162461bcd60e51b815260040161104f9061591a565b60e054613e8f9082906001600160a01b031686614021565b60e0546000906001600160a01b03166388e5249f838888886110928942615a5d565b6065546001600160a01b03163314613edb5760405162461bcd60e51b815260040161104f90615951565b6001600160a01b038116613f405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161104f565b613f49816149af565b50565b6065546001600160a01b03163314613f765760405162461bcd60e51b815260040161104f90615951565b60008160d45460d55460d354613f8c9190615a5d565b613f969190615a5d565b613fa09190615a5d565b90506064811115613fc35760405162461bcd60e51b815260040161104f90615986565b60d69190915560d755565b6065546001600160a01b03163314613ff85760405162461bcd60e51b815260040161104f90615951565b6064811061401c5760405163356008cf60e01b81526004810182905260240161104f565b60e255565b6001600160a01b038316600090815260dd602052604090205460ff1615801561406357506001600160a01b038216600090815260dd602052604090205460ff16155b6140af5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20426c61636b6c69737465642061646472657373000000000000604482015260640161104f565b6000606460e254836140c19190615a97565b6140cb9190615a75565b90506000811180156140f657506001600160a01b038416600090815260e3602052604090205460ff16155b801561410f575060cd546001600160a01b038481169116145b1561412c5760e15461412c9085906001600160a01b031683614617565b60cd546000906001600160a01b03858116911614156141545761414f8284615ab6565b614156565b825b9050614163858583614617565b5050505050565b6001600160a01b0383166141cc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161104f565b6001600160a01b03821661422d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161104f565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6097546001600160a01b038416600090815260996020526040812054909183916142b89086615a97565b6142c29190615a75565b6142cc9190615ab6565b949350505050565b804710156143245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161104f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614371576040519150601f19603f3d011682016040523d82523d6000602084013e614376565b606091505b50509050806143ed5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161104f565b505050565b60006143fe8484613db1565b9050600019811461446657818110156144595760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161104f565b614466848484840361416a565b50505050565b600061447785613629565b90506001600160a01b0383163014156144c557614495868684614021565b600080516020615bc2833981519152818585856040516144b894939291906157d9565b60405180910390a161460f565b60e0546144dd9087906001600160a01b031684614021565b60e054604051632da63c1160e21b81526001600160a01b039091169063b698f044906145119088908790879060040161568a565b600060405180830381600087803b15801561452b57600080fd5b505af115801561453f573d6000803e3d6000fd5b505060e25460e05460405163f5c1365360e01b8152600160048201526001600160a01b0388811660248301526044820188905260009550606494509091169063f5c1365390840160206040518083038186803b15801561459e57600080fd5b505afa1580156145b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d6919061550d565b6145e09190615a97565b6145ea9190615a75565b9050600080516020615bc2833981519152828686846040516116e594939291906157d9565b505050505050565b6001600160a01b03831661467b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161104f565b6001600160a01b0382166146dd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161104f565b6001600160a01b038316600090815260336020526040902054818110156147555760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161104f565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061478c908490615a5d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516147d891815260200190565b60405180910390a3614466565b6143ed8363a9059cbb60e01b8484604051602401614804929190615671565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a01565b600054610100900460ff166148625760405162461bcd60e51b815260040161104f906159bd565b613571614ad3565b600054610100900460ff166148915760405162461bcd60e51b815260040161104f906159bd565b61489b8282614b03565b5050565b600054610100900460ff166148c65760405162461bcd60e51b815260040161104f906159bd565b61489b8282614b51565b6001600160a01b0382166149265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161104f565b80603560008282546149389190615a5d565b90915550506001600160a01b03821660009081526033602052604081208054839290614965908490615a5d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000614a56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c8f9092919063ffffffff16565b8051909150156143ed5780806020019051810190614a7491906154d7565b6143ed5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161104f565b600054610100900460ff16614afa5760405162461bcd60e51b815260040161104f906159bd565b613571336149af565b600054610100900460ff16614b2a5760405162461bcd60e51b815260040161104f906159bd565b8151614b3d906036906020850190614fe6565b5080516143ed906037906020840190614fe6565b600054610100900460ff16614b785760405162461bcd60e51b815260040161104f906159bd565b8051825114614be45760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161104f565b6000825111614c355760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161104f565b60005b82518110156143ed57614c7d838281518110614c5657614c56615b65565b6020026020010151838381518110614c7057614c70615b65565b6020026020010151614c9e565b80614c8781615b34565b915050614c38565b60606142cc8484600085614e7c565b6001600160a01b038216614d095760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161104f565b60008111614d595760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161104f565b6001600160a01b03821660009081526099602052604090205415614dd35760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161104f565b609b8054600181019091557fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3490180546001600160a01b0319166001600160a01b0384169081179091556000908152609960205260409020819055609754614e3b908290615a5d565b6097556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90614e709084908490615671565b60405180910390a15050565b606082471015614edd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161104f565b6001600160a01b0385163b614f345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104f565b600080866001600160a01b03168587604051614f509190615641565b60006040518083038185875af1925050503d8060008114614f8d576040519150601f19603f3d011682016040523d82523d6000602084013e614f92565b606091505b5091509150614fa2828286614fad565b979650505050505050565b60608315614fbc575081611954565b825115614fcc5782518084602001fd5b8160405162461bcd60e51b815260040161104f91906157c6565b828054614ff290615af9565b90600052602060002090601f016020900481019282615014576000855561505a565b82601f1061502d57805160ff191683800117855561505a565b8280016001018555821561505a579182015b8281111561505a57825182559160200191906001019061503f565b5061506692915061506a565b5090565b5b80821115615066576000815560010161506b565b803561508a81615b91565b919050565b600082601f8301126150a057600080fd5b813560206150b56150b083615a39565b615a08565b80838252828201915082860187848660051b89010111156150d557600080fd5b60005b858110156150fd5781356150eb81615b91565b845292840192908401906001016150d8565b5090979650505050505050565b600082601f83011261511b57600080fd5b8135602061512b6150b083615a39565b80838252828201915082860187848660051b890101111561514b57600080fd5b60005b858110156150fd5781358452928401929084019060010161514e565b803561508a81615bb4565b60006020828403121561518757600080fd5b813561195481615b91565b6000602082840312156151a457600080fd5b815161195481615b91565b600080604083850312156151c257600080fd5b82356151cd81615b91565b915060208301356151dd81615b91565b809150509250929050565b6000806000606084860312156151fd57600080fd5b833561520881615b91565b9250602084013561521881615b91565b929592945050506040919091013590565b6000806040838503121561523c57600080fd5b823561524781615b91565b915060208301356151dd81615ba6565b6000806040838503121561526a57600080fd5b823561527581615b91565b946020939093013593505050565b6000806000806080858703121561529957600080fd5b84356152a481615b91565b966020860135965060408601359560600135945092505050565b60008060008060008060c087890312156152d757600080fd5b863567ffffffffffffffff808211156152ef57600080fd5b6152fb8a838b0161508f565b9750602089013591508082111561531157600080fd5b61531d8a838b0161510a565b9650604089013591508082111561533357600080fd5b61533f8a838b0161508f565b9550606089013591508082111561535557600080fd5b6153618a838b0161510a565b9450608089013591508082111561537757600080fd5b5061538489828a0161510a565b92505061539360a0880161507f565b90509295509295509295565b60008060408084860312156153b357600080fd5b833567ffffffffffffffff808211156153cb57600080fd5b818601915086601f8301126153df57600080fd5b813560206153ef6150b083615a39565b8083825282820191508286018b848660051b890101111561540f57600080fd5b60005b8581101561549a5781358781111561542957600080fd5b8801603f81018e1361543a57600080fd5b858101358881111561544e5761544e615b7b565b615460601f8201601f19168801615a08565b8181528f8c83850101111561547457600080fd5b818c84018983013760009181018801919091528552509284019290840190600101615412565b505080985050506154ac81890161516a565b955050505050509250929050565b6000602082840312156154cc57600080fd5b813561195481615ba6565b6000602082840312156154e957600080fd5b815161195481615ba6565b60006020828403121561550657600080fd5b5035919050565b60006020828403121561551f57600080fd5b5051919050565b6000806040838503121561553957600080fd5b8251915060208301516151dd81615bb4565b6000806040838503121561555e57600080fd5b50508035926020909101359150565b6000806040838503121561558057600080fd5b505080516020909101519092909150565b6000806000606084860312156155a657600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156155d357600080fd5b505082516020840151604085015160609095015191969095509092509050565b6004811061561157634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845261562d816020860160208601615acd565b601f01601f19169290920160200192915050565b60008251615653818460208701615acd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006060820160018060a01b0386168352602060608185015281865180845260808601915060808160051b870101935082880160005b8281101561574357607f19888703018452615731868351615615565b95509284019290840190600101615715565b5050505050809150506142cc60408301846155f3565b6001600160a01b03841681526060810161577660208301856155f3565b826040830152949350505050565b6001600160a01b03851681526020810184905260408101839052608081016157af60608301846155f3565b95945050505050565b6020810161178c82846155f3565b6020815260006119546020830184615615565b6080815260006157ec6080830187615615565b90506157fb60208301866155f3565b6001600160a01b039390931660408201526060015292915050565b6020808252601390820152722aa8222faba0a6261d103d32b9379030b2323960691b604082015260600190565b6080808252600790820152667265776172647360c81b60a082015260c0810161586f60208301866155f3565b6001600160a01b0393909316604082015260600152919050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252601a908201527f535741503a20696e73756666696369656e742062616c616e6365000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f464545533a20746f74616c20657863656564696e672031303025000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715615a3157615a31615b7b565b604052919050565b600067ffffffffffffffff821115615a5357615a53615b7b565b5060051b60200190565b60008219821115615a7057615a70615b4f565b500190565b600082615a9257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615ab157615ab1615b4f565b500290565b600082821015615ac857615ac8615b4f565b500390565b60005b83811015615ae8578181015183820152602001615ad0565b838111156144665750506000910152565b600181811c90821680615b0d57607f821691505b60208210811415615b2e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615b4857615b48615b4f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613f4957600080fd5b8015158114613f4957600080fd5b60048110613f4957600080fdfeae65b8cdcf70197aae9eec6cad9075662a0b1f140940b20a5d60413e1d05e8b8a164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "cashoutAll()": {
        "details": "send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet."
      },
      "cashoutReward(uint256)": {
        "details": "send rewards from reward wallet to user and the tax portion to the configured cashoutTax wallet.",
        "params": {
          "_contIndex": "index of contract in list of contract of user"
        }
      },
      "changeEnableAutoSwapCashout(bool)": {
        "params": {
          "newVal": "set to true if enable cashout autoswap"
        }
      },
      "changeEnableAutoSwapDevFund(bool)": {
        "params": {
          "newVal": "set to true if enable dev/fund autoswap"
        }
      },
      "changeEnableAutoSwapTreasury(bool)": {
        "params": {
          "newVal": "set to true if enable treasury autoswap"
        }
      },
      "changeSellTaxRate(uint256)": {
        "params": {
          "newVal": "new tax rate"
        }
      },
      "changeSellTaxTargetAddress(address)": {
        "params": {
          "newVal": "new admin address"
        }
      },
      "changeUniswapV2PairAddress(address)": {
        "params": {
          "newVal": "new uniswapV2Pair address"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mintConts(string[],uint8)": {
        "details": "create new contract instances, take funds from user and distribute to admin wallets according to SC configs.",
        "params": {
          "_cType": "type of new contracts.",
          "names": "list of names. The number of string in this list will be the count of new contracts."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBlacklistStatus(address,bool)": {
        "params": {
          "account": "account to change status",
          "value": "set to true if blacklisting"
        }
      },
      "setContManagement(address)": {
        "params": {
          "crm": "address of the new CRM"
        }
      },
      "setEnableCashout(bool)": {
        "params": {
          "_enableCashout": "true if user can cashout after this tx. false if otherwise"
        }
      },
      "setEnableMintConts(bool)": {
        "params": {
          "value": "true if user can mint new contracts"
        }
      },
      "setLiquidityRouter(address)": {
        "params": {
          "liqRouter": "new address of LiquidityRouter"
        }
      },
      "setUSDCAddress(address)": {
        "params": {
          "newAddress": "new usdc address"
        }
      },
      "setWhitelistStatus(address,bool)": {
        "params": {
          "account": "account to change status",
          "value": "set to true if whitelisting"
        }
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "swap0xBForExactToken(address,uint256,uint256,uint256)": {
        "params": {
          "amountInMax": "a maximum expected input. Will raise error if can't satisfy.",
          "amountOut": "an exact amount of output token",
          "tokenAddr": "output token",
          "wait": "maximum wait time"
        }
      },
      "swapAVAXForExact0xB(uint256,uint256,uint256)": {
        "details": "set msg.value as the maximum expected input amount of AVAX",
        "params": {
          "amountInMax": "set same as msg.value",
          "amountOut": "an exact amount of output 0xB.",
          "wait": "maximum wait time"
        }
      },
      "swapExact0xBForToken(address,uint256,uint256,uint256)": {
        "params": {
          "amountIn": "an exact amount of input 0xB",
          "amountOutMin": "a minimum expected output. Will raise error if can't satisfy.",
          "tokenAddr": "output token",
          "wait": "maximum wait time"
        }
      },
      "swapExactAVAXFor0xB(uint256,uint256)": {
        "details": "set msg.value as the exact input amount of AVAX",
        "params": {
          "amountOutMin": "a minimum expected output. Will raise error if can't satisfy.",
          "wait": "maximum wait time"
        }
      },
      "swapExactTokenFor0xB(address,uint256,uint256,uint256)": {
        "params": {
          "amountIn": "an exact amount of input token",
          "amountOutMin": "a minimum expected output 0xB. Will raise error if can't satisfy.",
          "tokenAddr": "input token",
          "wait": "maximum wait time"
        }
      },
      "swapTokenForExact0xB(address,uint256,uint256,uint256)": {
        "params": {
          "amountInMax": "a maximum expected amount of input token. Will raise error if can't satisfy.",
          "amountOut": "an exact amount of output 0xB",
          "tokenAddr": "input token",
          "wait": "maximum wait time"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCashoutFee(uint256)": {
        "params": {
          "value": "new percentage (100 = 100%)"
        }
      },
      "updateCashoutTaxPool(address)": {
        "params": {
          "wall": "new target address for cashout tax"
        }
      },
      "updateDevelopmentFee(uint256)": {
        "params": {
          "value": "new percentage (100 = 100%)"
        }
      },
      "updateDevelopmentFundWallet(address)": {
        "params": {
          "wall": "new wallet address"
        }
      },
      "updateLiquidityFee(uint256)": {
        "params": {
          "value": "new percentage (100 = 100%)"
        }
      },
      "updateLiquidityWallet(address)": {
        "params": {
          "wall": "new wallet address"
        }
      },
      "updateRewardsFee(uint256)": {
        "params": {
          "value": "new percentage (100 = 100%)"
        }
      },
      "updateRewardsWallet(address)": {
        "params": {
          "wall": "new wallet address"
        }
      },
      "updateTreasuryFee(uint256)": {
        "params": {
          "value": "new percentage (100 = 100%)"
        }
      },
      "updateTreasuryWallet(address)": {
        "params": {
          "wall": "new wallet address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_walletName(address)": {
        "notice": "return a string according to wallet name"
      },
      "cashoutAll()": {
        "notice": "cashout reward from all contracts"
      },
      "cashoutReward(uint256)": {
        "notice": "cashout reward from a single contract"
      },
      "changeEnableAutoSwapCashout(bool)": {
        "notice": "change autoswap mode for cashout"
      },
      "changeEnableAutoSwapDevFund(bool)": {
        "notice": "change autoswap mode for dev/fund wallet"
      },
      "changeEnableAutoSwapTreasury(bool)": {
        "notice": "change autoswap mode for treasury"
      },
      "changeSellTaxRate(uint256)": {
        "notice": "change sell tax rate"
      },
      "changeSellTaxTargetAddress(address)": {
        "notice": "change admin address"
      },
      "changeUniswapV2PairAddress(address)": {
        "notice": "change uniswapV2Pair"
      },
      "mintConts(string[],uint8)": {
        "notice": "mint new contracts"
      },
      "setBlacklistStatus(address,bool)": {
        "notice": "blacklist/un-blacklist an account"
      },
      "setContManagement(address)": {
        "notice": "set new address of ContRewardManager"
      },
      "setEnableCashout(bool)": {
        "notice": "set if user can cashout"
      },
      "setEnableMintConts(bool)": {
        "notice": "set if user can mint new contract"
      },
      "setLiquidityRouter(address)": {
        "notice": "set new address of LiquidityRouter"
      },
      "setUSDCAddress(address)": {
        "notice": "set address of usdc"
      },
      "setWhitelistStatus(address,bool)": {
        "notice": "whitelist/un-whitelist an account"
      },
      "swap0xBForExactToken(address,uint256,uint256,uint256)": {
        "notice": "swap from an exact 0xB amount to an ERC20 tokens"
      },
      "swapAVAXForExact0xB(uint256,uint256,uint256)": {
        "notice": "swap from an exact 0xB amount to an ERC20 tokens"
      },
      "swapExact0xBForToken(address,uint256,uint256,uint256)": {
        "notice": "swap from an exact 0xB amount to an ERC20 tokens"
      },
      "swapExactAVAXFor0xB(uint256,uint256)": {
        "notice": "swap from an exact 0xB amount to an ERC20 tokens"
      },
      "swapExactTokenFor0xB(address,uint256,uint256,uint256)": {
        "notice": "swap from an exact amount of erc20 token to 0xB"
      },
      "swapTokenForExact0xB(address,uint256,uint256,uint256)": {
        "notice": "swap from an erc20 token to exact amount of 0xB"
      },
      "updateCashoutFee(uint256)": {
        "notice": "set percentage of contract mint to be sent to cashout wallet"
      },
      "updateCashoutTaxPool(address)": {
        "notice": "set new pool to send cashout tax to"
      },
      "updateDevelopmentFee(uint256)": {
        "notice": "set percentage of contract mint to be sent to dev/marketing pool"
      },
      "updateDevelopmentFundWallet(address)": {
        "notice": "set new wallet for development/marketing team"
      },
      "updateLiquidityFee(uint256)": {
        "notice": "set percentage of contract mint to be sent to liquidity"
      },
      "updateLiquidityWallet(address)": {
        "notice": "set new wallet for liquidity temporary pool"
      },
      "updateRewardsFee(uint256)": {
        "notice": "set percentage of contract mint to be sent to rewards pool"
      },
      "updateRewardsWallet(address)": {
        "notice": "set new wallet for rewards"
      },
      "updateTreasuryFee(uint256)": {
        "notice": "set percentage of contract mint to be sent to treasury pool"
      },
      "updateTreasuryWallet(address)": {
        "notice": "set new wallet for treasury"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 684,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 690,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 692,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 694,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 696,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1277,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalShares",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_shares",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_released",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_payees",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 3107,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_crm",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(CONTRewardManagement)8762"
      },
      {
        "astId": 3110,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IJoeRouter02)14610"
      },
      {
        "astId": 3115,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "ownedContsLimit",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 3117,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "mintContLimit",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 3119,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 3121,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalTokensPaidForMinting",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 3123,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFundPool",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 3125,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 3127,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsPool",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 3129,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 3131,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "rewardsFee",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 3133,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 3135,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "liquidityPoolFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 3137,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "developmentFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 3139,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "totalFees",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 3141,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "cashoutFee",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 3143,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapTreasury",
        "offset": 0,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 3145,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapDevFund",
        "offset": 1,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 3147,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "usdcToken",
        "offset": 2,
        "slot": "217",
        "type": "t_address"
      },
      {
        "astId": 3149,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "antiBotEnabled",
        "offset": 22,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 3151,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "launchBuyLimit",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 3153,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "launchBuyTimeout",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 3157,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_lastBuyOnLaunch",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3161,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3165,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "automatedMarketMakerPairs",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3167,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableCashout",
        "offset": 0,
        "slot": "223",
        "type": "t_bool"
      },
      {
        "astId": 3169,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableMintConts",
        "offset": 1,
        "slot": "223",
        "type": "t_bool"
      },
      {
        "astId": 3171,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "cashoutTaxPool",
        "offset": 2,
        "slot": "223",
        "type": "t_address"
      },
      {
        "astId": 3174,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_liqRouter",
        "offset": 0,
        "slot": "224",
        "type": "t_contract(LiquidityRouter)10170"
      },
      {
        "astId": 3176,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "enableAutoSwapCashout",
        "offset": 20,
        "slot": "224",
        "type": "t_bool"
      },
      {
        "astId": 3178,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "sellTaxTargetAddress",
        "offset": 0,
        "slot": "225",
        "type": "t_address"
      },
      {
        "astId": 3180,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "sellTax",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 3184,
        "contract": "contracts/ZeroXBlock.sol:ZeroXBlock",
        "label": "_isSellTaxWhitelisted",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CONTRewardManagement)8762": {
        "encoding": "inplace",
        "label": "contract CONTRewardManagement",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)14610": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityRouter)10170": {
        "encoding": "inplace",
        "label": "contract LiquidityRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
