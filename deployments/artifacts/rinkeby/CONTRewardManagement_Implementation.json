{
  "address": "0xb24B50C92fe599120247da8B28de155eE79ecD0B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FOUR_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXUINT256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "list",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getClaimedAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCont",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "additionalDataContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expireIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFeeContract",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeFeeInMonth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "changeFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "changeMonthFeeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createContsOldForTest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpireIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "time",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "extendContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "feeInMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getExpireIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            }
          ],
          "internalType": "struct CONTRewardManagement.AdditionalDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "time",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "getExtendContractFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFullDataAllCont",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ContType",
              "name": "cType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.FullDataEntity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFullDataCont",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ContType",
              "name": "cType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.FullDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isExpiredCont",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isFeeContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMonthFeeActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIndexMonthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tesseractFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cubeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_squareFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultExpireIn",
          "type": "uint256"
        }
      ],
      "name": "setupDataForMonthFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultExpireIn",
          "type": "uint256"
        }
      ],
      "name": "setupDataForMonthFeeTest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30dbb9abe36ed710547ca3346659bccc4a540c6854c3abc829a51ac1bff5812b",
  "receipt": {
    "to": null,
    "from": "0x0AB01869EEC7240e63990F16Be309D8364814AA8",
    "contractAddress": "0xb24B50C92fe599120247da8B28de155eE79ecD0B",
    "transactionIndex": 2,
    "gasUsed": "5259254",
    "logsBloom": "0x
    "blockHash": "0xccf1da5c92effd6886b21c2f70257ef2bfd7328fb8f4277c33982eefc8e97e6b",
    "transactionHash": "0x30dbb9abe36ed710547ca3346659bccc4a540c6854c3abc829a51ac1bff5812b",
    "logs": [],
    "blockNumber": 10764301,
    "cumulativeGasUsed": "5378455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 40,
  "solcInputHash": "da984ab8d607c97128de0b6102b4a59e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOUR_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXUINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"list\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getClaimedAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCont\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"additionalDataContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeFeeInMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"changeFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeMonthFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createContsOldForTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpireIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"extendContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"feeInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExpireIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"}],\"internalType\":\"struct CONTRewardManagement.AdditionalDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"getExtendContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullDataAllCont\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.FullDataEntity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFullDataCont\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.FullDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isExpiredCont\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isFeeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMonthFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexMonthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tesseractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cubeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_squareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultExpireIn\",\"type\":\"uint256\"}],\"name\":\"setupDataForMonthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultExpireIn\",\"type\":\"uint256\"}],\"name\":\"setupDataForMonthFeeTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getClaimedAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"list\":\"a packed list of every entries\",\"total\":\"total amount of reward available for account, tax included\"}},\"_getClaimedAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"rewardCont\":\"amount of reward available for selected contract\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getClaimedAmountOf(address)\":{\"notice\":\"query claimed amount of an address in every contract\"},\"_getClaimedAmountOfIndex(address,uint256)\":{\"notice\":\"query claimed amount of one contract\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant ADDITION_TIME_FOR_OLD = 1 hours;\\n    uint256 private constant ADDITION_TIME_FOR_NEW = 3 hours;\\n    uint256 public constant ONE_MONTH = 3 hours;\\n    uint256 public constant TWO_MONTH = 6 hours;\\n    uint256 public constant THREE_MONTH = 9 hours;\\n    uint256 public constant FOUR_MONTH = 12 hours;\\n    uint256 public constant MAXUINT256 = type(uint256).max;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    struct AdditionalDataEntity {\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n        bool isFeeContract;\\n    }\\n\\n    struct FullDataEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n        bool isFeeContract;\\n        uint256 reward;\\n        uint256 claimed;\\n    }\\n\\n    struct MonthFeeLog {\\n        uint256 currentTime;\\n        bool state;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // Adding feature - fee by month\\n    // using ContEntity[] => cannot update field into ContEntity struct (because using proxy\\n\\n    IERC20 public feeToken;\\n    uint256 public decreaseFeePercent;\\n    bool public isMonthFeeActive = true;\\n    uint256 public defaultExpireIn;\\n    mapping(ContType => uint256) public feeInMonth;\\n    // using mapping instead of array to easy scale with proxy\\n    mapping(address => mapping(uint256 => AdditionalDataEntity)) public additionalDataContract;\\n    mapping(uint256 => MonthFeeLog) public monthFeeLogs;\\n    uint256 public maxIndexMonthFeeLogs;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFee(\\n        address _feeToken,\\n        uint256 _tesseractFee,\\n        uint256 _cubeFee,\\n        uint256 _squareFee,\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n        feeInMonth[ContType.Tesseract] = _tesseractFee;\\n        feeInMonth[ContType.Cube] = _cubeFee;\\n        feeInMonth[ContType.Square] = _squareFee;\\n        defaultExpireIn = _defaultExpireIn;\\n        monthFeeLogs[0] = MonthFeeLog(block.timestamp, true);\\n        maxIndexMonthFeeLogs = 0;\\n        isMonthFeeActive = true;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFeeTest(\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        defaultExpireIn = _defaultExpireIn;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n            uint256 index = _contsOfUser[account].length - 1;\\n            bool _isFeeCont = isFeeContract(account, index);\\n            additionalDataContract[account][index] = AdditionalDataEntity({\\n                expireIn: block.timestamp + ADDITION_TIME_FOR_NEW,\\n                lastUpdated: block.timestamp,\\n                isFeeContract: _isFeeCont\\n            });\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n     function createContsOldForTest(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    // / @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    // / @param account account of owner\\n    // / @param _contIndex contract index\\n    // / @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        if (isMonthFeeActive) {\\n            _updateCont(account, _contIndex);\\n            AdditionalDataEntity memory data = additionalDataContract[account][_contIndex];\\n            if (data.isFeeContract && data.expireIn < block.timestamp) {\\n                revert(\\\"Need extend contract\\\");\\n            }\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInInterval(cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            if (isMonthFeeActive) {\\n                _updateCont(account, i);\\n                AdditionalDataEntity memory data = additionalDataContract[account][i];\\n                if (data.isFeeContract && data.expireIn < block.timestamp) {\\n                    continue;\\n                }\\n            }\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInInterval(_cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function extendContract(uint256[] memory time, uint256[] memory indexes) external {\\n        require(isMonthFeeActive, \\\"MONTH_FEE: Not enable\\\");\\n        uint256 fee = getExtendContractFee(msg.sender, time, indexes);\\n        require(feeToken.transferFrom(msg.sender, address(this), fee), \\\"MONTH_FEE: Not valid\\\");\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            AdditionalDataEntity memory additionData = getExpireIn(msg.sender, indexes[i]);\\n            require(additionData.isFeeContract, \\\"MONTH_FEE: Not valid type\\\");\\n            additionData.expireIn += time[i];\\n            additionData.lastUpdated = block.timestamp;\\n            additionalDataContract[msg.sender][indexes[i]] = additionData;\\n        }\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        require(newPrice > 0, \\\"MONTH_FEE: NOT VALID\\\");\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function changeFeeInMonth(ContType _cType, uint256 _newFee) external onlyAuthorities {\\n        feeInMonth[_cType] = _newFee;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function changeFeeToken(address _feeToken) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n    }\\n\\n    function changeMonthFeeState(bool _status) external onlyAuthorities {\\n        require(_status != isMonthFeeActive, \\\"MONTH_FEE: INVALID STATUS\\\");\\n        isMonthFeeActive = _status;\\n        maxIndexMonthFeeLogs++;\\n        monthFeeLogs[maxIndexMonthFeeLogs] = MonthFeeLog(block.timestamp, _status);\\n    }\\n\\n    function withdrawFeeToken(address _user) external onlyAuthorities {\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        require(feeToken.transfer(_user, amount), \\\"MONTH_FEE_WITHDRAW: INVALID\\\");\\n    }\\n\\n    function _updateCont(address account, uint256 _contIndex) private {\\n        if (!isFeeContract(account, _contIndex)) {\\n            return;\\n        }\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, _contIndex);\\n        additionalDataContract[account][_contIndex] = additionalData;\\n    }\\n\\n    function _updateAllCont(address account) private {\\n        ContEntity[] memory listCont = _contsOfUser[account];\\n        if (listCont.length == 0) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            _updateCont(account, i);\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n\\n    function isExpiredCont(address account, uint256 index) public view returns (bool) {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, index);\\n        if (additionalData.expireIn < block.timestamp && additionalData.isFeeContract) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            if (isExpiredCont(account, i)) {\\n                continue;\\n            }\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        if (isExpiredCont(account, _contIndex)) {\\n            return 0;\\n        }\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return total total amount of reward available for account, tax included\\n        @return list a packed list of every entries\\n    */\\n    function _getClaimedAmountOf(address account) public view returns (uint256 total, string memory list) {\\n        if (!isContOwner(account)) return (0, \\\"\\\");\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 total = contRewardInInterval(conts[0], conts[0].creationTime, conts[0].lastUpdateTime);\\n        list = uint2str(total);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            uint256 _claimed;\\n            ContEntity memory _cont = conts[i];\\n            _claimed = contRewardInInterval(_cont, _cont.creationTime, _cont.lastUpdateTime);\\n            total += _claimed;\\n            list = string(abi.encodePacked(list, separator, uint2str(_claimed)));\\n        }\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInInterval` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) public view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInInterval(cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardFirstIndex;\\n        if (!isExpiredCont(account, 0)) {\\n            rewardFirstIndex = contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp);\\n        }\\n        string memory _rewardsAvailable = uint2str(rewardFirstIndex);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            uint256 reward;\\n            if (!isExpiredCont(account, i)) {\\n                reward = contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp);\\n            }\\n            _rewardsAvailable = string(abi.encodePacked(_rewardsAvailable, separator, uint2str(reward)));\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    function getExtendContractFee(\\n        address account,\\n        uint256[] memory time,\\n        uint256[] memory indexes\\n    ) public view returns (uint256) {\\n        require(time.length == indexes.length, \\\"INPUT: INVALID\\\");\\n        uint256 totalFee;\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            uint256 index = indexes[i];\\n            uint256 _time = time[i];\\n            ContEntity memory cont = _contsOfUser[account][index];\\n            totalFee += (feeInMonth[cont.cType] * _time) / ONE_MONTH;\\n        }\\n        return totalFee;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate reward in an interval\\n    /// @dev iterate through APR change log and for each APR segment/interval, add up its reward to the result\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param leftTstamp left border of the interval\\n    /// @param rightTstamp right border of the interval\\n    /// @return result\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256 result) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 firstUpdateInd = historyBinarySearch(_cType, leftTstamp);\\n        uint256 lastUpdateInd = historyBinarySearch(_cType, rightTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp;\\n        result = 0;\\n        uint256 deltaTstamp;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = firstUpdateInd; index < lastUpdateInd; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    /// @notice convert uint256 to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice reduce input to a percentage with decimals\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    /// @notice check if an account is a contract owner\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n\\n    function getExpireIn(address user, uint256 index) public view returns (AdditionalDataEntity memory) {\\n        if (!isFeeContract(user, index)) {\\n            return AdditionalDataEntity(0, 0, false);\\n        }\\n        AdditionalDataEntity memory additionalData = additionalDataContract[user][index];\\n        if (additionalData.expireIn == 0) {\\n            additionalData.expireIn = defaultExpireIn;\\n            additionalData.lastUpdated = defaultExpireIn - ADDITION_TIME_FOR_OLD;\\n        }\\n        uint256 totalDelay = 0;\\n        for (uint256 i = 0; i <= maxIndexMonthFeeLogs; ++i) {\\n            MonthFeeLog memory log = monthFeeLogs[i];\\n            if (additionalData.lastUpdated >= log.currentTime) {\\n                continue;\\n            }\\n            if (log.state == true) {\\n                totalDelay = totalDelay + log.currentTime - additionalData.lastUpdated;\\n            }\\n            additionalData.lastUpdated = log.currentTime;\\n        }\\n\\n        if (block.timestamp > monthFeeLogs[maxIndexMonthFeeLogs].currentTime) {\\n            if (isMonthFeeActive == false) {\\n                totalDelay = totalDelay + block.timestamp - monthFeeLogs[maxIndexMonthFeeLogs].currentTime;\\n            }\\n            additionalData.lastUpdated = block.timestamp;\\n        }\\n\\n        additionalData.expireIn += totalDelay;\\n        additionalData.isFeeContract = true;\\n\\n        return additionalData;\\n    }\\n\\n    function getFullDataAllCont(address user) public view returns (FullDataEntity[] memory) {\\n        ContEntity[] memory listCont = _contsOfUser[user];\\n        FullDataEntity[] memory fullData = new FullDataEntity[](listCont.length);\\n\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            ContEntity memory cont = listCont[i];\\n            AdditionalDataEntity memory additional = getExpireIn(user, i);\\n            FullDataEntity memory item = FullDataEntity(\\n                cont.name,\\n                cont.creationTime,\\n                cont.lastUpdateTime,\\n                cont.initialAPR,\\n                cont.buyPrice,\\n                cont.cType,\\n                additional.expireIn,\\n                additional.lastUpdated,\\n                additional.isFeeContract,\\n                contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp),\\n                _getClaimedAmountOfIndex(user, i)\\n            );\\n            fullData[i] = item;\\n        }\\n        return fullData;\\n    }\\n\\n    function getFullDataCont(address user, uint256 index) public view returns (FullDataEntity memory) {\\n        ContEntity memory cont = _contsOfUser[user][index];\\n\\n        AdditionalDataEntity memory additional = getExpireIn(user, index);\\n        FullDataEntity memory item = FullDataEntity(\\n            cont.name,\\n            cont.creationTime,\\n            cont.lastUpdateTime,\\n            cont.initialAPR,\\n            cont.buyPrice,\\n            cont.cType,\\n            additional.expireIn,\\n            additional.lastUpdated,\\n            additional.isFeeContract,\\n            contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp),\\n            _getClaimedAmountOfIndex(user, index)\\n        );\\n        return item;\\n    }\\n\\n    function isFeeContract(address user, uint256 index) public view returns (bool) {\\n        ContEntity memory cont = _contsOfUser[user][index];\\n        return _isFeeContract(cont);\\n    }\\n\\n    function _isFeeContract(ContEntity memory cont) internal pure returns (bool) {\\n        if (cont.cType == ContType.Tesseract || cont.cType == ContType.Cube || cont.cType == ContType.Square) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xf23872b3892c9575e70fed75897e987e9fc7d4b579472b24944eb590c15d1e04\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526013805460ff1916600117905534801561001d57600080fd5b50615dc2806200002e6000396000f3fe608060405234801561001057600080fd5b50600436106103345760003560e01c806365aa5bbb116101bf5780639d2040f0116100fa578063d094fa8d1161009d578063d094fa8d14610806578063da707dff14610839578063dc73ff5e1461084c578063de2fb95c1461088b578063e18f03ad14610894578063e8c4e5821461089d578063f743f319146108b0578063fc0c546a146108c357600080fd5b80639d2040f01461074c578063a1a99b911461075f578063a8ad436814610780578063c19f40d2146107a0578063c2202b66146107a9578063c3bbc55a146107ca578063ce6912a3146107ea578063d08e7e1e146107fd57600080fd5b80638201bf26116101625780638201bf26146106bb578063872a60ad146106ce578063879613ae146106e15780638bf14514146106f4578063927831b41461070757806393520a801461071a5780639b28d1a7146107235780639d078b981461072c57600080fd5b806365aa5bbb1461061c578063665bb0781461062557806367d04cc4146106385780636bb4d9021461064b5780636eb5a7f414610654578063704b6c021461066757806377ec78261461067a5780637bed96001461068d57600080fd5b8063367fd0741161028f57806351bf120c1161023257806351bf120c146105745780635402c9c11461058757806355091dad1461059a57806355a757d0146105ad5780635dbab6ed146105b6578063619a635e146105c957806363a9b098146105dc578063647846a5146105fc57600080fd5b8063367fd07414610492578063390c991e146104a55780633c402407146104b857806342423c3d146104cb57806344fea1b9146104de5780634e1f2e76146104f15780634ec7b4291461054b5780634f88de011461055457600080fd5b8062c73e4d1461033957806303bac12a1461035f5780630534cc681461037c5780630b9f6cfe146103915780630c12252b146103a45780630d9f9f0c146103ad578063144fa6d7146103c05780631565f50e146103d35780631a440de6146103e65780631d5a1731146103f95780631f7f63c01461040c57806320988cef14610443578063234c45441461044c578063261c75d81461045f57806328cceb2414610472575b600080fd5b61034c61034736600461582b565b6108d6565b6040519081526020015b60405180910390f35b60135461036c9060ff1681565b6040519015158152602001610356565b61038f61038a366004615512565b6109d6565b005b61034c61039f3660046156af565b610d20565b61034c617e9081565b61038f6103bb366004615862565b610ef0565b61038f6103ce3660046154f7565b610f34565b61038f6103e1366004615862565b610fbb565b61038f6103f43660046154f7565b610fff565b61038f610407366004615846565b611060565b61041f61041a3660046156af565b611123565b60408051825181526020808401519082015291810151151590820152606001610356565b61034c612a3081565b61036c61045a3660046156af565b6112f0565b61038f61046d36600461571b565b611435565b6104856104803660046154f7565b611692565b6040516103569190615a7e565b6104856104a03660046154f7565b6118da565b61038f6104b3366004615862565b611b88565b61034c6104c636600461563c565b611bcc565b61038f6104d9366004615512565b611e16565b61034c6104ec3660046154f7565b611ff5565b61052e6104ff3660046156af565b601660209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610356565b61034c60145481565b61034c61056236600461582b565b60076020526000908152604090205481565b6104856105823660046154f7565b612002565b61038f6105953660046156d9565b61223e565b61038f6105a83660046154f7565b612392565b61034c60095481565b6104856105c43660046154f7565b612528565b61034c6105d73660046154f7565b612764565b61034c6105ea36600461582b565b60066020526000908152604090205481565b60115461060f906001600160a01b031681565b60405161035691906159c1565b61034c60001981565b61036c6106333660046154f7565b61294d565b61036c6106463660046156af565b612958565b61034c60125481565b61038f61066236600461577e565b612994565b61038f6106753660046154f7565b612c6d565b6104856106883660046154f7565b612cf4565b61036c61069b3660046156af565b601060209081526000928352604080842090915290825290205460ff1681565b61038f6106c936600461582b565b612f33565b600c5461060f906001600160a01b031681565b61038f6106ef3660046157f1565b613074565b6104856107023660046154f7565b61316e565b61034c6107153660046156af565b6133c2565b61034c600b5481565b61034c600a5481565b61034c61073a36600461582b565b60156020526000908152604090205481565b61038f61075a366004615846565b613577565b61077261076d3660046154f7565b61368c565b604051610356929190615b3d565b61079361078e3660046154f7565b613932565b60405161035691906159d5565b61034c60185481565b6107bc6107b73660046156af565b613beb565b604051610356929190615b29565b6107dd6107d83660046156af565b6140a8565b6040516103569190615b16565b61034c6107f836600461582b565b614294565b61034c61a8c081565b6108196108143660046154f7565b6142d3565b604080519485526020850193909352918301526060820152608001610356565b61038f610847366004615862565b61487b565b61087661085a366004615862565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610356565b61034c61546081565b61034c600e5481565b61038f6108ab366004615846565b6148bf565b6104856108be3660046154f7565b614915565b600d5461060f906001600160a01b031681565b600080600860008460038111156108ef576108ef615d4c565b600381111561090057610900615d4c565b815260200190815260200160002080549050905060006007600085600381111561092c5761092c615d4c565b600381111561093d5761093d615d4c565b815260200190815260200160002054905060005b828110156109ce576109ba826008600088600381111561097357610973615d4c565b600381111561098457610984615d4c565b815260200190815260200160002083815481106109a3576109a3615d78565b906000526020600020906002020160010154614b4a565b9150806109c681615cfb565b915050610951565b509392505050565b600d546001600160a01b03163314610a095760405162461bcd60e51b8152600401610a0090615a91565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90610a3e908590600401615a37565b60206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061587b565b905060005b8351811015610c8f5760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610ade57610ade615d78565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610b1357610b13615d4c565b6003811115610b2457610b24615d4c565b8152602001908152602001600020548152602001856003811115610b4a57610b4a615d4c565b905281546001810183556000928352602092839020825180519394600690930290910192610b7b928492019061531b565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610bce57610bce615d4c565b021790555050506001600160a01b038516600090815260056020526040812054610bfa90600190615c66565b90506000610c0887836112f0565b90506040518060600160405280612a3042610c239190615ba9565b8152426020808301919091529215156040918201526001600160a01b0389166000908152601684528181209481529383529283902081518155918101516001830155909101516002909101805460ff191691151591909117905580610c8781615cfb565b915050610a93565b506001600160a01b038416600090815260056020526040902054610cb7906001908690614b76565b8251600e6000828254610cca9190615ba9565b90915550508251600f6000846003811115610ce757610ce7615d4c565b6003811115610cf857610cf8615d4c565b81526020019081526020016000206000828254610d159190615ba9565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610e7257838290600052602060002090600602016040518060c0016040529081600082018054610d8690615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054610db290615cc0565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610e4e57610e4e615d4c565b6003811115610e5f57610e5f615d4c565b8152505081526020019060010190610d53565b505082519293505050808410610e9a5760405162461bcd60e51b8152600401610a0090615ab9565b610ea48585612958565b15610eb457600092505050610eea565b6000828581518110610ec857610ec8615d78565b602002602001015190506000610ee382836040015142614c1f565b9450505050505b92915050565b600d546001600160a01b0316331480610f135750600c546001600160a01b031633145b610f2f5760405162461bcd60e51b8152600401610a0090615a91565b600b55565b600d546001600160a01b0316331480610f575750600c546001600160a01b031633145b610f735760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b038116610f995760405162461bcd60e51b8152600401610a0090615af0565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610fde5750600c546001600160a01b031633145b610ffa5760405162461bcd60e51b8152600401610a0090615a91565b600a55565b600d546001600160a01b03163314806110225750600c546001600160a01b031633145b61103e5760405162461bcd60e51b8152600401610a0090615a91565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806110835750600c546001600160a01b031633145b61109f5760405162461bcd60e51b8152600401610a0090615a91565b600081116110e65760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e881393d508159053125160621b6044820152606401610a00565b80600660008460038111156110fd576110fd615d4c565b600381111561110e5761110e615d4c565b81526020810191909152604001600020555050565b611149604051806060016040528060008152602001600081526020016000151581525090565b61115383836112f0565b61117e5760405180606001604052806000815260200160008152602001600015158152509050610eea565b6001600160a01b03831660009081526016602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526111ea576014548082526111e490610e1090615c66565b60208201525b6000805b6018548111611278576000818152601760209081526040918290208251808401909352805480845260019091015460ff1615158383015290850151106112345750611268565b602081015115156001141561126157602084015181516112549085615ba9565b61125e9190615c66565b92505b5160208401525b61127181615cfb565b90506111ee565b506018546000908152601760205260409020544211156112cc5760135460ff166112c5576018546000908152601760205260409020546112b84283615ba9565b6112c29190615c66565b90505b4260208301525b80826000018181516112de9190615ba9565b90525050600160408201529392505050565b6001600160a01b038216600090815260056020526040812080548291908490811061131d5761131d615d78565b90600052602060002090600602016040518060c001604052908160008201805461134690615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461137290615cc0565b80156113bf5780601f10611394576101008083540402835291602001916113bf565b820191906000526020600020905b8154815290600101906020018083116113a257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561140e5761140e615d4c565b600381111561141f5761141f615d4c565b905250905061142d81614f1d565b949350505050565b60135460ff1661147f5760405162461bcd60e51b81526020600482015260156024820152744d4f4e54485f4645453a204e6f7420656e61626c6560581b6044820152606401610a00565b600061148c338484611bcc565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156114df57600080fd5b505af11580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611517919061580e565b61155a5760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b6044820152606401610a00565b60005b825181101561168c57600061158b3385848151811061157e5761157e615d78565b6020026020010151611123565b905080604001516115da5760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c6964207479706560381b6044820152606401610a00565b8482815181106115ec576115ec615d78565b6020026020010151816000018181516116059190615ba9565b90525042602080830191909152336000908152601690915260408120855183929087908690811061163857611638615d78565b60209081029190910181015182528181019290925260409081016000208351815591830151600183015591909101516002909101805460ff19169115159190911790555061168581615cfb565b905061155d565b50505050565b606061169d82614f8d565b6116b557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561180a57838290600052602060002090600602016040518060c001604052908160008201805461171e90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461174a90615cc0565b80156117975780601f1061176c57610100808354040283529160200191611797565b820191906000526020600020905b81548152906001019060200180831161177a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156117e6576117e6615d4c565b60038111156117f7576117f7615d4c565b81525050815260200190600101906116eb565b50505050905060008151905061181e61539f565b60006118478460008151811061183657611836615d78565b602002602001015160200151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061187f5761187f615d78565b6020026020010151935082826118988660200151614fa2565b6040516020016118aa9392919061597e565b604051602081830303815290604052925080806118c690615cfb565b915050611865565b50909695505050505050565b60606118e582614f8d565b6118fd57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611a5257838290600052602060002090600602016040518060c001604052908160008201805461196690615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461199290615cc0565b80156119df5780601f106119b4576101008083540402835291602001916119df565b820191906000526020600020905b8154815290600101906020018083116119c257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611a2e57611a2e615d4c565b6003811115611a3f57611a3f615d4c565b8152505081526020019060010190611933565b5050825192935042915060009050611a6a8682612958565b611ab457611ab184600081518110611a8457611a84615d78565b602002602001015185600081518110611a9f57611a9f615d78565b60200260200101516040015184614c1f565b90505b6000611abf82614fa2565b604080518082019091526001808252602360f81b6020830152919250905b85811015611b7b576000611af18a83612958565b611b3957611b36888381518110611b0a57611b0a615d78565b6020026020010151898481518110611b2457611b24615d78565b60200260200101516040015188614c1f565b90505b8383611b4483614fa2565b604051602001611b569392919061597e565b6040516020818303038152906040529350508080611b7390615cfb565b915050611add565b5090979650505050505050565b600d546001600160a01b0316331480611bab5750600c546001600160a01b031633145b611bc75760405162461bcd60e51b8152600401610a0090615a91565b600955565b60008151835114611c105760405162461bcd60e51b815260206004820152600e60248201526d12539415550e881253959053125160921b6044820152606401610a00565b6000805b8351811015611e0b576000848281518110611c3157611c31615d78565b602002602001015190506000868381518110611c4f57611c4f615d78565b602002602001015190506000600560008a6001600160a01b03166001600160a01b031681526020019081526020016000208381548110611c9157611c91615d78565b90600052602060002090600602016040518060c0016040529081600082018054611cba90615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce690615cc0565b8015611d335780601f10611d0857610100808354040283529160200191611d33565b820191906000526020600020905b815481529060010190602001808311611d1657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611d8257611d82615d4c565b6003811115611d9357611d93615d4c565b815250509050612a3082601560008460a001516003811115611db757611db7615d4c565b6003811115611dc857611dc8615d4c565b815260200190815260200160002054611de19190615c08565b611deb9190615be6565b611df59086615ba9565b945050505080611e0490615cfb565b9050611c14565b5090505b9392505050565b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90611e4b908590600401615a37565b60206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b919061587b565b905060005b8351811015610c8f5760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110611eeb57611eeb615d78565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115611f2057611f20615d4c565b6003811115611f3157611f31615d4c565b8152602001908152602001600020548152602001856003811115611f5757611f57615d4c565b905281546001810183556000928352602092839020825180519394600690930290910192611f88928492019061531b565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115611fdb57611fdb615d4c565b021790555050508080611fed90615cfb565b915050611ea0565b6000610eea6001836150ca565b606061200d82614f8d565b61202557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561217a57838290600052602060002090600602016040518060c001604052908160008201805461208e90615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546120ba90615cc0565b80156121075780601f106120dc57610100808354040283529160200191612107565b820191906000526020600020905b8154815290600101906020018083116120ea57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561215657612156615d4c565b600381111561216757612167615d4c565b815250508152602001906001019061205b565b50505050905060008151905061218e61539f565b60006121b7846000815181106121a6576121a6615d78565b602002602001015160400151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce578581815181106121ef576121ef615d78565b6020026020010151935082826122088660400151614fa2565b60405160200161221a9392919061597e565b6040516020818303038152906040529250808061223690615cfb565b9150506121d5565b600d546001600160a01b03163314806122615750600c546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610a0090615a91565b601180546001600160a01b0319166001600160a01b0396909616959095179094557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b929092557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d557fa31547ce6245cdb9ecea19cf8c7eb9f5974025bb4075011409251ae855b30aed5560145560408051808201909152428152600160208083018281526000808052601790925292517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89b5591517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89c805491151560ff1992831617905560189290925560138054909216179055565b600d546001600160a01b03163314806123b55750600c546001600160a01b031633145b6123d15760405162461bcd60e51b8152600401610a0090615a91565b6011546040516370a0823160e01b81526000916001600160a01b0316906370a08231906124029030906004016159c1565b60206040518083038186803b15801561241a57600080fd5b505afa15801561242e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612452919061587b565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156124a257600080fd5b505af11580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da919061580e565b6125245760405162461bcd60e51b815260206004820152601b60248201527a1353d3951217d1915157d5d2551211149055ce8812539590531251602a1b6044820152606401610a00565b5050565b606061253382614f8d565b61254b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156126a057838290600052602060002090600602016040518060c00160405290816000820180546125b490615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546125e090615cc0565b801561262d5780601f106126025761010080835404028352916020019161262d565b820191906000526020600020905b81548152906001019060200180831161261057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561267c5761267c615d4c565b600381111561268d5761268d615d4c565b8152505081526020019060010190612581565b5050505090506000815190506126b461539f565b60006126dd846000815181106126cc576126cc615d78565b602002602001015160600151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061271557612715615d78565b60200260200101519350828261272e8660600151614fa2565b6040516020016127409392919061597e565b6040516020818303038152906040529250808061275c90615cfb565b9150506126fb565b600061276f82614f8d565b61277b57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156128cd57838290600052602060002090600602016040518060c00160405290816000820180546127e190615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461280d90615cc0565b801561285a5780601f1061282f5761010080835404028352916020019161285a565b820191906000526020600020905b81548152906001019060200180831161283d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156128a9576128a9615d4c565b60038111156128ba576128ba615d4c565b81525050815260200190600101906127ae565b5050825192935060009150505b81811015612943576128ec8682612958565b156128f657612931565b600083828151811061290a5761290a615d78565b6020026020010151905061292381826040015142614c1f565b61292d9086615ba9565b9450505b8061293b81615cfb565b9150506128da565b5091949350505050565b6000610eea82614f8d565b6000806129658484611123565b905042816000015110801561297b575080604001515b1561298a576001915050610eea565b5060009392505050565b600054610100900460ff166129af5760005460ff16156129b3565b303b155b612a165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a00565b600054610100900460ff16158015612a38576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b6003811015612c3657868181518110612a6557612a65615d78565b602002602001015160066000836003811115612a8357612a83615d4c565b6003811115612a9457612a94615d4c565b6003811115612aa557612aa5615d4c565b815260200190815260200160002081905550858181518110612ac957612ac9615d78565b602002602001015160076000836003811115612ae757612ae7615d4c565b6003811115612af857612af8615d4c565b6003811115612b0957612b09615d4c565b8152602001908152602001600020819055506000600f6000836003811115612b3357612b33615d4c565b6003811115612b4457612b44615d4c565b6003811115612b5557612b55615d4c565b81526020019081526020016000208190555060086000826003811115612b7d57612b7d615d4c565b6003811115612b8e57612b8e615d4c565b6003811115612b9f57612b9f615d4c565b81526020015260086000826003811115612bbb57612bbb615d4c565b6003811115612bcc57612bcc615d4c565b6003811115612bdd57612bdd615d4c565b815260208082019290925260409081016000908120825180840190935285835282840182815281546001818101845592845294909220925160029094029092019283555191015580612c2e81615cfb565b915050612a4a565b50506009839055600c80546001600160a01b03191633179055600b8290558015612c66576000805461ff00191690555b5050505050565b600d546001600160a01b0316331480612c905750600c546001600160a01b031633145b612cac5760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b038116612cd25760405162461bcd60e51b8152600401610a0090615af0565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060612cff82614f8d565b612d1757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612e6c57838290600052602060002090600602016040518060c0016040529081600082018054612d8090615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054612dac90615cc0565b8015612df95780601f10612dce57610100808354040283529160200191612df9565b820191906000526020600020905b815481529060010190602001808311612ddc57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612e4857612e48615d4c565b6003811115612e5957612e59615d4c565b8152505081526020019060010190612d4d565b505050509050600081519050612e8061539f565b6000612ead612ea885600081518110612e9b57612e9b615d78565b60200260200101516150e9565b614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce57858181518110612ee557612ee5615d78565b602002602001015193508282612efd612ea8876150e9565b604051602001612f0f9392919061597e565b60405160208183030381529060405292508080612f2b90615cfb565b915050612ecb565b600d546001600160a01b0316331480612f565750600c546001600160a01b031633145b612f725760405162461bcd60e51b8152600401610a0090615a91565b600060086000836003811115612f8a57612f8a615d4c565b6003811115612f9b57612f9b615d4c565b815260208101919091526040016000205490506001811161300e5760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610a00565b6008600083600381111561302457613024615d4c565b600381111561303557613035615d4c565b815260200190815260200160002080548061305257613052615d62565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b03163314806130975750600c546001600160a01b031633145b6130b35760405162461bcd60e51b8152600401610a0090615a91565b60135460ff16151581151514156131085760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a20494e56414c49442053544154555360381b6044820152606401610a00565b6013805460ff19168215151790556018805490600061312683615cfb565b90915550506040805180820182524281529115156020808401918252601854600090815260179091529190912091518255516001909101805460ff1916911515919091179055565b606061317982614f8d565b61319157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156132e657838290600052602060002090600602016040518060c00160405290816000820180546131fa90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461322690615cc0565b80156132735780601f1061324857610100808354040283529160200191613273565b820191906000526020600020905b81548152906001019060200180831161325657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156132c2576132c2615d4c565b60038111156132d3576132d3615d4c565b81525050815260200190600101906131c7565b5050505090506000815190506132fa61539f565b600061332f8460008151811061331257613312615d78565b602002602001015160a001516003811115612ea857612ea8615d4c565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061336757613367615d78565b60200260200101519350828261338c8660a001516003811115612ea857612ea8615d4c565b60405160200161339e9392919061597e565b604051602081830303815290604052925080806133ba90615cfb565b91505061334d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561351457838290600052602060002090600602016040518060c001604052908160008201805461342890615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461345490615cc0565b80156134a15780601f10613476576101008083540402835291602001916134a1565b820191906000526020600020905b81548152906001019060200180831161348457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156134f0576134f0615d4c565b600381111561350157613501615d4c565b81525050815260200190600101906133f5565b50508251929350505080841061353c5760405162461bcd60e51b8152600401610a0090615ab9565b600082858151811061355057613550615d78565b6020026020010151905061356d8182602001518360400151614c1f565b9695505050505050565b600d546001600160a01b031633148061359a5750600c546001600160a01b031633145b6135b65760405162461bcd60e51b8152600401610a0090615a91565b6305f5e100811261361a5760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610a00565b6008600083600381111561363057613630615d4c565b600381111561364157613641615d4c565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b6000606061369983614f8d565b6136b55750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561380a57838290600052602060002090600602016040518060c001604052908160008201805461371e90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461374a90615cc0565b80156137975780601f1061376c57610100808354040283529160200191613797565b820191906000526020600020905b81548152906001019060200180831161377a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156137e6576137e6615d4c565b60038111156137f7576137f7615d4c565b81525050815260200190600101906136eb565b5050825192935060009150613874905083828461382957613829615d78565b60200260200101518460008151811061384457613844615d78565b6020026020010151602001518560008151811061386357613863615d78565b602002602001015160400151614c1f565b905061387f81614fa2565b604080518082019091526001808252602360f81b6020830152919550905b83811015613928576000808683815181106138ba576138ba615d78565b602002602001015190506138d78182602001518360400151614c1f565b91506138e38286615ba9565b945087846138f084614fa2565b6040516020016139029392919061597e565b60405160208183030381529060405297505050808061392090615cfb565b91505061389d565b5050505050915091565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609493849084015b82821015613a8657838290600052602060002090600602016040518060c001604052908160008201805461399a90615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546139c690615cc0565b8015613a135780601f106139e857610100808354040283529160200191613a13565b820191906000526020600020905b8154815290600101906020018083116139f657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613a6257613a62615d4c565b6003811115613a7357613a73615d4c565b8152505081526020019060010190613967565b505050509050600081516001600160401b03811115613aa757613aa7615d8e565b604051908082528060200260200182016040528015613ae057816020015b613acd6153e5565b815260200190600190039081613ac55790505b50905060005b82518110156109ce576000838281518110613b0357613b03615d78565b602002602001015190506000613b198784611123565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a001516003811115613b7157613b71615d4c565b81526020018360000151815260200183602001518152602001836040015115158152602001613ba585866040015142614c1f565b8152602001613bb48a876133c2565b815250905080858581518110613bcc57613bcc615d78565b602002602001018190525050505080613be490615cfb565b9050613ae6565b600d5460009081906001600160a01b03163314613c1a5760405162461bcd60e51b8152600401610a0090615a91565b60135460ff1615613cce57613c2f84846150f5565b6001600160a01b03841660009081526016602090815260408083208684528252918290208251606081018452815481526001820154928101929092526002015460ff16158015928201839052909190613c885750805142115b15613ccc5760405162461bcd60e51b81526020600482015260146024820152731399595908195e1d195b990818dbdb9d1c9858dd60621b6044820152606401610a00565b505b6001600160a01b038416600090815260056020526040902080548410613d2a5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610a00565b6000818581548110613d3e57613d3e615d78565b90600052602060002090600602019050613d5b8160020154615163565b613dca5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f2077616974206044820152793132b337b9329031b630b4b6b4b733903a3434b99031b7b73a1760311b6064820152608401610a00565b60004290506000613ed7836040518060c0016040529081600082018054613df090615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054613e1c90615cc0565b8015613e695780601f10613e3e57610100808354040283529160200191613e69565b820191906000526020600020905b815481529060010190602001808311613e4c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613eb857613eb8615d4c565b6003811115613ec957613ec9615d4c565b905250600285015484614c1f565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff1661409157614012836040518060c0016040529081600082018054613f2b90615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054613f5790615cc0565b8015613fa45780601f10613f7957610100808354040283529160200191613fa4565b820191906000526020600020905b815481529060010190602001808311613f8757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613ff357613ff3615d4c565b600381111561400457614004615d4c565b905250600185015442614c1f565b836004015411614091576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd926140889260ff9190911691615a45565b60405180910390a15b6005909201549194505060ff169150509250929050565b6140b06153e5565b6001600160a01b03831660009081526005602052604081208054849081106140da576140da615d78565b90600052602060002090600602016040518060c001604052908160008201805461410390615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461412f90615cc0565b801561417c5780601f106141515761010080835404028352916020019161417c565b820191906000526020600020905b81548152906001019060200180831161415f57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156141cb576141cb615d4c565b60038111156141dc576141dc615d4c565b905250905060006141ed8585611123565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561424557614245615d4c565b8152602001836000015181526020018360200151815260200183604001511515815260200161427985866040015142614c1f565b815260200161428888886133c2565b90529695505050505050565b6000600f60008360038111156142ac576142ac615d4c565b60038111156142bd576142bd615d4c565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b031633146143065760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b03851660009081526005602052604090208054806143855760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610a00565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b858110156147ab5760135460ff1615614440576143da8c826150f5565b6001600160a01b038c1660009081526016602090815260408083208484528252918290208251606081018452815481526001820154928101929092526002015460ff161580159282018390529091906144335750805142115b1561443e5750614799565b505b86818154811061445257614452615d78565b90600052602060002090600602019450600061456a866040518060c001604052908160008201805461448390615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546144af90615cc0565b80156144fc5780601f106144d1576101008083540402835291602001916144fc565b820191906000526020600020905b8154815290600101906020018083116144df57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561454b5761454b615d4c565b600381111561455c5761455c615d4c565b905250600288015442614c1f565b90506145768186615ba9565b60058701549095508190859060ff16600381111561459657614596615d4c565b60ff16600381106145a9576145a9615d78565b602002018181516145ba9190615ba9565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff1615801561470057506146f8866040518060c001604052908160008201805461461190615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461463d90615cc0565b801561468a5780601f1061465f5761010080835404028352916020019161468a565b820191906000526020600020905b81548152906001019060200180831161466d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156146d9576146d9615d4c565b60038111156146ea576146ea615d4c565b905250600188015442614c1f565b866004015411155b15614797576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561474c5761474c615d4c565b9050838160ff166003811061476357614763615d78565b6020020151614773906001615bc1565b848260ff166003811061478857614788615d78565b60ff9092166020929092020152505b505b806147a381615cfb565b9150506143bd565b5060005b60038160ff161015614859576000828260ff16600381106147d2576147d2615d78565b602002015160ff161115614847577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff16600381111561481657614816615d4c565b838360ff166003811061482b5761482b615d78565b602002015160405161483e929190615a60565b60405180910390a15b8061485181615d16565b9150506147af565b505080516020820151604090920151929b909a50909850909650945050505050565b600d546001600160a01b031633148061489e5750600c546001600160a01b031633145b6148ba5760405162461bcd60e51b8152600401610a0090615a91565b601455565b600d546001600160a01b03163314806148e25750600c546001600160a01b031633145b6148fe5760405162461bcd60e51b8152600401610a0090615a91565b80601560008460038111156110fd576110fd615d4c565b606061492082614f8d565b61493857505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015614a8d57838290600052602060002090600602016040518060c00160405290816000820180546149a190615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546149cd90615cc0565b8015614a1a5780601f106149ef57610100808354040283529160200191614a1a565b820191906000526020600020905b8154815290600101906020018083116149fd57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115614a6957614a69615d4c565b6003811115614a7a57614a7a615d4c565b815250508152602001906001019061496e565b505050509050600081519050614aa161539f565b600083600081518110614ab657614ab6615d78565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156118ce57858181518110614b0357614b03615d78565b6020026020010151935082828560000151604051602001614b269392919061597e565b60405160208183030381529060405292508080614b4290615cfb565b915050614ae9565b600080614b5b836305f5e100615c27565b90506305f5e100614b6c8286615c08565b61142d9190615be6565b6001600160a01b038216600090815260038401602052604090205460ff1615614bbb576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b600081831115614c685760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610a00565b8360200151831015614caf5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610a00565b60a08401516000614cc0828661517c565b90506000614cce838661517c565b60808801519091506000614ce28989615257565b60208a01516000975090915088908790819081885b88811015614e4a57600860008c6003811115614d1557614d15615d4c565b6003811115614d2657614d26615d4c565b81526020019081526020016000208181548110614d4557614d45615d78565b9060005260206000209060020201600001549450614d638684615301565b614d6d8685615301565b1480159250614da557614d808684615301565b614d8b906001615ba9565b600a54614d989190615c08565b614da29084615ba9565b94505b614daf8686615c66565b93508495506301e13380846305f5e100898b614dcb9190615c08565b614dd59190615be6565b614ddf9190615c08565b614de99190615be6565b614df3908d615ba9565b9b508115614e1b57614e0787600b54614b4a565b965080614e1381615ca9565b915050614e38565b614e3587600860008e600381111561097357610973615d4c565b96505b80614e4281615cfb565b915050614cf7565b505b8b8514614f0c578b9350614e608583615301565b614e6a8584615301565b1480159150614ea257614e7d8583615301565b614e88906001615ba9565b600a54614e959190615c08565b614e9f9083615ba9565b93505b614eac8585615c66565b92508394506301e13380836305f5e100888a614ec89190615c08565b614ed29190615be6565b614edc9190615c08565b614ee69190615be6565b614ef0908c615ba9565b9a508015614f0757614f0486600b54614b4a565b95505b614e4c565b505050505050505050509392505050565b600060028260a001516003811115614f3757614f37615d4c565b1480614f58575060018260a001516003811115614f5657614f56615d4c565b145b80614f78575060008260a001516003811115614f7657614f76615d4c565b145b15614f8557506001919050565b506000919050565b600080614f9b6001846150ca565b1192915050565b606081614fc65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614ff05780614fda81615cfb565b9150614fe99050600a83615be6565b9150614fca565b6000816001600160401b0381111561500a5761500a615d8e565b6040519080825280601f01601f191660200182016040528015615034576020820181803683370190505b509050815b85156150c15761504a600182615c66565b90506000615059600a88615be6565b61506490600a615c08565b61506e9088615c66565b615079906030615bc1565b905060008160f81b90508084848151811061509657615096615d78565b60200101906001600160f81b031916908160001a9053506150b8600a89615be6565b97505050615039565b50949350505050565b6001600160a01b03166000908152600191909101602052604090205490565b6000610eea8242615257565b6150ff82826112f0565b615107575050565b60006151138383611123565b6001600160a01b03939093166000908152601660209081526040808320948352938152908390208451815590840151600182015591909201516002909101805460ff191691151591909117905550565b600042600954836151749190615ba9565b111592915050565b6000808060088186600381111561519557615195615d4c565b60038111156151a6576151a6615d4c565b815260208101919091526040016000205490505b818111156109ce57600060026151d08385615ba9565b6151da9190615be6565b905084600860008860038111156151f3576151f3615d4c565b600381111561520457615204615d4c565b8152602001908152602001600020828154811061522357615223615d78565b906000526020600020906002020160000154101561524d57615246816001615ba9565b9250615251565b8091505b506151ba565b602082015160a08301516060840151600092919083615276838561517c565b90506000615284848861517c565b9050815b818110156152be576152aa846008600088600381111561097357610973615d4c565b9350806152b681615cfb565b915050615288565b5060006152cb8887615301565b90505b80156152f457806152de81615ca9565b9150506152ed84600b54614b4a565b93506152ce565b5091979650505050505050565b600a546000906153118385615c66565b611e0f9190615be6565b82805461532790615cc0565b90600052602060002090601f016020900481019282615349576000855561538f565b82601f1061536257805160ff191683800117855561538f565b8280016001018555821561538f579182015b8281111561538f578251825591602001919060010190615374565b5061539b929150615452565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156153e0576153e0615d4c565b905290565b60405180610160016040528060608152602001600081526020016000815260200160008152602001600081526020016000600381111561542757615427615d4c565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b5b8082111561539b5760008155600101615453565b80356001600160a01b038116811461547e57600080fd5b919050565b600082601f83011261549457600080fd5b813560206154a96154a483615b86565b615b56565b80838252828201915082860187848660051b89010111156154c957600080fd5b60005b85811015611b7b578135845292840192908401906001016154cc565b80356004811061547e57600080fd5b60006020828403121561550957600080fd5b611e0f82615467565b60008060006060848603121561552757600080fd5b61553084615467565b92506020808501356001600160401b038082111561554d57600080fd5b818701915087601f83011261556157600080fd5b813561556f6154a482615b86565b8082825285820191508585018b878560051b880101111561558f57600080fd5b60005b8481101561561c578135868111156155a957600080fd5b8701603f81018e136155ba57600080fd5b88810135878111156155ce576155ce615d8e565b6155e0601f8201601f19168b01615b56565b8181528f60408385010111156155f557600080fd5b81604084018c83013760009181018b01919091528552509287019290870190600101615592565b5050809750505050505050615633604085016154e8565b90509250925092565b60008060006060848603121561565157600080fd5b61565a84615467565b925060208401356001600160401b038082111561567657600080fd5b61568287838801615483565b9350604086013591508082111561569857600080fd5b506156a586828701615483565b9150509250925092565b600080604083850312156156c257600080fd5b6156cb83615467565b946020939093013593505050565b600080600080600060a086880312156156f157600080fd5b6156fa86615467565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561572e57600080fd5b82356001600160401b038082111561574557600080fd5b61575186838701615483565b9350602085013591508082111561576757600080fd5b5061577485828601615483565b9150509250929050565b6000806000806080858703121561579457600080fd5b84356001600160401b03808211156157ab57600080fd5b6157b788838901615483565b955060208701359150808211156157cd57600080fd5b506157da87828801615483565b949794965050505060408301359260600135919050565b60006020828403121561580357600080fd5b8135611e0f81615da4565b60006020828403121561582057600080fd5b8151611e0f81615da4565b60006020828403121561583d57600080fd5b611e0f826154e8565b6000806040838503121561585957600080fd5b6156cb836154e8565b60006020828403121561587457600080fd5b5035919050565b60006020828403121561588d57600080fd5b5051919050565b600481106158b257634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526158ce816020860160208601615c7d565b601f01601f19169290920160200192915050565b600061016082518185526158f8828601826158b6565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015161593560a0860182615894565b5060c083015160c085015260e083015160e08501526101008084015161595e8287018215159052565b505061012083810151908501526101409283015192909301919091525090565b60008451615990818460208901615c7d565b8451908301906159a4818360208901615c7d565b84519101906159b7818360208801615c7d565b0195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015615a2a57603f19888603018452615a188583516158e2565b945092850192908501906001016159fc565b5092979650505050505050565b60208101610eea8284615894565b60408101615a538285615894565b8260208301529392505050565b60408101615a6e8285615894565b60ff831660208301529392505050565b602081526000611e0f60208301846158b6565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252601c908201527f434f4e543a20436f6e7420696e64657820697320696d70726f70657200000000604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b602081526000611e0f60208301846158e2565b82815260408101611e0f6020830184615894565b82815260406020820152600061142d60408301846158b6565b604051601f8201601f191681016001600160401b0381118282101715615b7e57615b7e615d8e565b604052919050565b60006001600160401b03821115615b9f57615b9f615d8e565b5060051b60200190565b60008219821115615bbc57615bbc615d36565b500190565b600060ff821660ff84168060ff03821115615bde57615bde615d36565b019392505050565b600082615c0357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615c2257615c22615d36565b500290565b60008083128015600160ff1b850184121615615c4557615c45615d36565b6001600160ff1b0384018313811615615c6057615c60615d36565b50500390565b600082821015615c7857615c78615d36565b500390565b60005b83811015615c98578181015183820152602001615c80565b8381111561168c5750506000910152565b600081615cb857615cb8615d36565b506000190190565b600181811c90821680615cd457607f821691505b60208210811415615cf557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615d0f57615d0f615d36565b5060010190565b600060ff821660ff811415615d2d57615d2d615d36565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114615db257600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103345760003560e01c806365aa5bbb116101bf5780639d2040f0116100fa578063d094fa8d1161009d578063d094fa8d14610806578063da707dff14610839578063dc73ff5e1461084c578063de2fb95c1461088b578063e18f03ad14610894578063e8c4e5821461089d578063f743f319146108b0578063fc0c546a146108c357600080fd5b80639d2040f01461074c578063a1a99b911461075f578063a8ad436814610780578063c19f40d2146107a0578063c2202b66146107a9578063c3bbc55a146107ca578063ce6912a3146107ea578063d08e7e1e146107fd57600080fd5b80638201bf26116101625780638201bf26146106bb578063872a60ad146106ce578063879613ae146106e15780638bf14514146106f4578063927831b41461070757806393520a801461071a5780639b28d1a7146107235780639d078b981461072c57600080fd5b806365aa5bbb1461061c578063665bb0781461062557806367d04cc4146106385780636bb4d9021461064b5780636eb5a7f414610654578063704b6c021461066757806377ec78261461067a5780637bed96001461068d57600080fd5b8063367fd0741161028f57806351bf120c1161023257806351bf120c146105745780635402c9c11461058757806355091dad1461059a57806355a757d0146105ad5780635dbab6ed146105b6578063619a635e146105c957806363a9b098146105dc578063647846a5146105fc57600080fd5b8063367fd07414610492578063390c991e146104a55780633c402407146104b857806342423c3d146104cb57806344fea1b9146104de5780634e1f2e76146104f15780634ec7b4291461054b5780634f88de011461055457600080fd5b8062c73e4d1461033957806303bac12a1461035f5780630534cc681461037c5780630b9f6cfe146103915780630c12252b146103a45780630d9f9f0c146103ad578063144fa6d7146103c05780631565f50e146103d35780631a440de6146103e65780631d5a1731146103f95780631f7f63c01461040c57806320988cef14610443578063234c45441461044c578063261c75d81461045f57806328cceb2414610472575b600080fd5b61034c61034736600461582b565b6108d6565b6040519081526020015b60405180910390f35b60135461036c9060ff1681565b6040519015158152602001610356565b61038f61038a366004615512565b6109d6565b005b61034c61039f3660046156af565b610d20565b61034c617e9081565b61038f6103bb366004615862565b610ef0565b61038f6103ce3660046154f7565b610f34565b61038f6103e1366004615862565b610fbb565b61038f6103f43660046154f7565b610fff565b61038f610407366004615846565b611060565b61041f61041a3660046156af565b611123565b60408051825181526020808401519082015291810151151590820152606001610356565b61034c612a3081565b61036c61045a3660046156af565b6112f0565b61038f61046d36600461571b565b611435565b6104856104803660046154f7565b611692565b6040516103569190615a7e565b6104856104a03660046154f7565b6118da565b61038f6104b3366004615862565b611b88565b61034c6104c636600461563c565b611bcc565b61038f6104d9366004615512565b611e16565b61034c6104ec3660046154f7565b611ff5565b61052e6104ff3660046156af565b601660209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610356565b61034c60145481565b61034c61056236600461582b565b60076020526000908152604090205481565b6104856105823660046154f7565b612002565b61038f6105953660046156d9565b61223e565b61038f6105a83660046154f7565b612392565b61034c60095481565b6104856105c43660046154f7565b612528565b61034c6105d73660046154f7565b612764565b61034c6105ea36600461582b565b60066020526000908152604090205481565b60115461060f906001600160a01b031681565b60405161035691906159c1565b61034c60001981565b61036c6106333660046154f7565b61294d565b61036c6106463660046156af565b612958565b61034c60125481565b61038f61066236600461577e565b612994565b61038f6106753660046154f7565b612c6d565b6104856106883660046154f7565b612cf4565b61036c61069b3660046156af565b601060209081526000928352604080842090915290825290205460ff1681565b61038f6106c936600461582b565b612f33565b600c5461060f906001600160a01b031681565b61038f6106ef3660046157f1565b613074565b6104856107023660046154f7565b61316e565b61034c6107153660046156af565b6133c2565b61034c600b5481565b61034c600a5481565b61034c61073a36600461582b565b60156020526000908152604090205481565b61038f61075a366004615846565b613577565b61077261076d3660046154f7565b61368c565b604051610356929190615b3d565b61079361078e3660046154f7565b613932565b60405161035691906159d5565b61034c60185481565b6107bc6107b73660046156af565b613beb565b604051610356929190615b29565b6107dd6107d83660046156af565b6140a8565b6040516103569190615b16565b61034c6107f836600461582b565b614294565b61034c61a8c081565b6108196108143660046154f7565b6142d3565b604080519485526020850193909352918301526060820152608001610356565b61038f610847366004615862565b61487b565b61087661085a366004615862565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610356565b61034c61546081565b61034c600e5481565b61038f6108ab366004615846565b6148bf565b6104856108be3660046154f7565b614915565b600d5461060f906001600160a01b031681565b600080600860008460038111156108ef576108ef615d4c565b600381111561090057610900615d4c565b815260200190815260200160002080549050905060006007600085600381111561092c5761092c615d4c565b600381111561093d5761093d615d4c565b815260200190815260200160002054905060005b828110156109ce576109ba826008600088600381111561097357610973615d4c565b600381111561098457610984615d4c565b815260200190815260200160002083815481106109a3576109a3615d78565b906000526020600020906002020160010154614b4a565b9150806109c681615cfb565b915050610951565b509392505050565b600d546001600160a01b03163314610a095760405162461bcd60e51b8152600401610a0090615a91565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90610a3e908590600401615a37565b60206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061587b565b905060005b8351811015610c8f5760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610ade57610ade615d78565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610b1357610b13615d4c565b6003811115610b2457610b24615d4c565b8152602001908152602001600020548152602001856003811115610b4a57610b4a615d4c565b905281546001810183556000928352602092839020825180519394600690930290910192610b7b928492019061531b565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610bce57610bce615d4c565b021790555050506001600160a01b038516600090815260056020526040812054610bfa90600190615c66565b90506000610c0887836112f0565b90506040518060600160405280612a3042610c239190615ba9565b8152426020808301919091529215156040918201526001600160a01b0389166000908152601684528181209481529383529283902081518155918101516001830155909101516002909101805460ff191691151591909117905580610c8781615cfb565b915050610a93565b506001600160a01b038416600090815260056020526040902054610cb7906001908690614b76565b8251600e6000828254610cca9190615ba9565b90915550508251600f6000846003811115610ce757610ce7615d4c565b6003811115610cf857610cf8615d4c565b81526020019081526020016000206000828254610d159190615ba9565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610e7257838290600052602060002090600602016040518060c0016040529081600082018054610d8690615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054610db290615cc0565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610e4e57610e4e615d4c565b6003811115610e5f57610e5f615d4c565b8152505081526020019060010190610d53565b505082519293505050808410610e9a5760405162461bcd60e51b8152600401610a0090615ab9565b610ea48585612958565b15610eb457600092505050610eea565b6000828581518110610ec857610ec8615d78565b602002602001015190506000610ee382836040015142614c1f565b9450505050505b92915050565b600d546001600160a01b0316331480610f135750600c546001600160a01b031633145b610f2f5760405162461bcd60e51b8152600401610a0090615a91565b600b55565b600d546001600160a01b0316331480610f575750600c546001600160a01b031633145b610f735760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b038116610f995760405162461bcd60e51b8152600401610a0090615af0565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610fde5750600c546001600160a01b031633145b610ffa5760405162461bcd60e51b8152600401610a0090615a91565b600a55565b600d546001600160a01b03163314806110225750600c546001600160a01b031633145b61103e5760405162461bcd60e51b8152600401610a0090615a91565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806110835750600c546001600160a01b031633145b61109f5760405162461bcd60e51b8152600401610a0090615a91565b600081116110e65760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e881393d508159053125160621b6044820152606401610a00565b80600660008460038111156110fd576110fd615d4c565b600381111561110e5761110e615d4c565b81526020810191909152604001600020555050565b611149604051806060016040528060008152602001600081526020016000151581525090565b61115383836112f0565b61117e5760405180606001604052806000815260200160008152602001600015158152509050610eea565b6001600160a01b03831660009081526016602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526111ea576014548082526111e490610e1090615c66565b60208201525b6000805b6018548111611278576000818152601760209081526040918290208251808401909352805480845260019091015460ff1615158383015290850151106112345750611268565b602081015115156001141561126157602084015181516112549085615ba9565b61125e9190615c66565b92505b5160208401525b61127181615cfb565b90506111ee565b506018546000908152601760205260409020544211156112cc5760135460ff166112c5576018546000908152601760205260409020546112b84283615ba9565b6112c29190615c66565b90505b4260208301525b80826000018181516112de9190615ba9565b90525050600160408201529392505050565b6001600160a01b038216600090815260056020526040812080548291908490811061131d5761131d615d78565b90600052602060002090600602016040518060c001604052908160008201805461134690615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461137290615cc0565b80156113bf5780601f10611394576101008083540402835291602001916113bf565b820191906000526020600020905b8154815290600101906020018083116113a257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561140e5761140e615d4c565b600381111561141f5761141f615d4c565b905250905061142d81614f1d565b949350505050565b60135460ff1661147f5760405162461bcd60e51b81526020600482015260156024820152744d4f4e54485f4645453a204e6f7420656e61626c6560581b6044820152606401610a00565b600061148c338484611bcc565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156114df57600080fd5b505af11580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611517919061580e565b61155a5760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b6044820152606401610a00565b60005b825181101561168c57600061158b3385848151811061157e5761157e615d78565b6020026020010151611123565b905080604001516115da5760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c6964207479706560381b6044820152606401610a00565b8482815181106115ec576115ec615d78565b6020026020010151816000018181516116059190615ba9565b90525042602080830191909152336000908152601690915260408120855183929087908690811061163857611638615d78565b60209081029190910181015182528181019290925260409081016000208351815591830151600183015591909101516002909101805460ff19169115159190911790555061168581615cfb565b905061155d565b50505050565b606061169d82614f8d565b6116b557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561180a57838290600052602060002090600602016040518060c001604052908160008201805461171e90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461174a90615cc0565b80156117975780601f1061176c57610100808354040283529160200191611797565b820191906000526020600020905b81548152906001019060200180831161177a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156117e6576117e6615d4c565b60038111156117f7576117f7615d4c565b81525050815260200190600101906116eb565b50505050905060008151905061181e61539f565b60006118478460008151811061183657611836615d78565b602002602001015160200151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061187f5761187f615d78565b6020026020010151935082826118988660200151614fa2565b6040516020016118aa9392919061597e565b604051602081830303815290604052925080806118c690615cfb565b915050611865565b50909695505050505050565b60606118e582614f8d565b6118fd57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611a5257838290600052602060002090600602016040518060c001604052908160008201805461196690615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461199290615cc0565b80156119df5780601f106119b4576101008083540402835291602001916119df565b820191906000526020600020905b8154815290600101906020018083116119c257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611a2e57611a2e615d4c565b6003811115611a3f57611a3f615d4c565b8152505081526020019060010190611933565b5050825192935042915060009050611a6a8682612958565b611ab457611ab184600081518110611a8457611a84615d78565b602002602001015185600081518110611a9f57611a9f615d78565b60200260200101516040015184614c1f565b90505b6000611abf82614fa2565b604080518082019091526001808252602360f81b6020830152919250905b85811015611b7b576000611af18a83612958565b611b3957611b36888381518110611b0a57611b0a615d78565b6020026020010151898481518110611b2457611b24615d78565b60200260200101516040015188614c1f565b90505b8383611b4483614fa2565b604051602001611b569392919061597e565b6040516020818303038152906040529350508080611b7390615cfb565b915050611add565b5090979650505050505050565b600d546001600160a01b0316331480611bab5750600c546001600160a01b031633145b611bc75760405162461bcd60e51b8152600401610a0090615a91565b600955565b60008151835114611c105760405162461bcd60e51b815260206004820152600e60248201526d12539415550e881253959053125160921b6044820152606401610a00565b6000805b8351811015611e0b576000848281518110611c3157611c31615d78565b602002602001015190506000868381518110611c4f57611c4f615d78565b602002602001015190506000600560008a6001600160a01b03166001600160a01b031681526020019081526020016000208381548110611c9157611c91615d78565b90600052602060002090600602016040518060c0016040529081600082018054611cba90615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce690615cc0565b8015611d335780601f10611d0857610100808354040283529160200191611d33565b820191906000526020600020905b815481529060010190602001808311611d1657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611d8257611d82615d4c565b6003811115611d9357611d93615d4c565b815250509050612a3082601560008460a001516003811115611db757611db7615d4c565b6003811115611dc857611dc8615d4c565b815260200190815260200160002054611de19190615c08565b611deb9190615be6565b611df59086615ba9565b945050505080611e0490615cfb565b9050611c14565b5090505b9392505050565b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90611e4b908590600401615a37565b60206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b919061587b565b905060005b8351811015610c8f5760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110611eeb57611eeb615d78565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115611f2057611f20615d4c565b6003811115611f3157611f31615d4c565b8152602001908152602001600020548152602001856003811115611f5757611f57615d4c565b905281546001810183556000928352602092839020825180519394600690930290910192611f88928492019061531b565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115611fdb57611fdb615d4c565b021790555050508080611fed90615cfb565b915050611ea0565b6000610eea6001836150ca565b606061200d82614f8d565b61202557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561217a57838290600052602060002090600602016040518060c001604052908160008201805461208e90615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546120ba90615cc0565b80156121075780601f106120dc57610100808354040283529160200191612107565b820191906000526020600020905b8154815290600101906020018083116120ea57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561215657612156615d4c565b600381111561216757612167615d4c565b815250508152602001906001019061205b565b50505050905060008151905061218e61539f565b60006121b7846000815181106121a6576121a6615d78565b602002602001015160400151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce578581815181106121ef576121ef615d78565b6020026020010151935082826122088660400151614fa2565b60405160200161221a9392919061597e565b6040516020818303038152906040529250808061223690615cfb565b9150506121d5565b600d546001600160a01b03163314806122615750600c546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610a0090615a91565b601180546001600160a01b0319166001600160a01b0396909616959095179094557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b929092557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d557fa31547ce6245cdb9ecea19cf8c7eb9f5974025bb4075011409251ae855b30aed5560145560408051808201909152428152600160208083018281526000808052601790925292517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89b5591517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89c805491151560ff1992831617905560189290925560138054909216179055565b600d546001600160a01b03163314806123b55750600c546001600160a01b031633145b6123d15760405162461bcd60e51b8152600401610a0090615a91565b6011546040516370a0823160e01b81526000916001600160a01b0316906370a08231906124029030906004016159c1565b60206040518083038186803b15801561241a57600080fd5b505afa15801561242e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612452919061587b565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156124a257600080fd5b505af11580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da919061580e565b6125245760405162461bcd60e51b815260206004820152601b60248201527a1353d3951217d1915157d5d2551211149055ce8812539590531251602a1b6044820152606401610a00565b5050565b606061253382614f8d565b61254b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156126a057838290600052602060002090600602016040518060c00160405290816000820180546125b490615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546125e090615cc0565b801561262d5780601f106126025761010080835404028352916020019161262d565b820191906000526020600020905b81548152906001019060200180831161261057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561267c5761267c615d4c565b600381111561268d5761268d615d4c565b8152505081526020019060010190612581565b5050505090506000815190506126b461539f565b60006126dd846000815181106126cc576126cc615d78565b602002602001015160600151614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061271557612715615d78565b60200260200101519350828261272e8660600151614fa2565b6040516020016127409392919061597e565b6040516020818303038152906040529250808061275c90615cfb565b9150506126fb565b600061276f82614f8d565b61277b57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156128cd57838290600052602060002090600602016040518060c00160405290816000820180546127e190615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461280d90615cc0565b801561285a5780601f1061282f5761010080835404028352916020019161285a565b820191906000526020600020905b81548152906001019060200180831161283d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156128a9576128a9615d4c565b60038111156128ba576128ba615d4c565b81525050815260200190600101906127ae565b5050825192935060009150505b81811015612943576128ec8682612958565b156128f657612931565b600083828151811061290a5761290a615d78565b6020026020010151905061292381826040015142614c1f565b61292d9086615ba9565b9450505b8061293b81615cfb565b9150506128da565b5091949350505050565b6000610eea82614f8d565b6000806129658484611123565b905042816000015110801561297b575080604001515b1561298a576001915050610eea565b5060009392505050565b600054610100900460ff166129af5760005460ff16156129b3565b303b155b612a165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a00565b600054610100900460ff16158015612a38576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b6003811015612c3657868181518110612a6557612a65615d78565b602002602001015160066000836003811115612a8357612a83615d4c565b6003811115612a9457612a94615d4c565b6003811115612aa557612aa5615d4c565b815260200190815260200160002081905550858181518110612ac957612ac9615d78565b602002602001015160076000836003811115612ae757612ae7615d4c565b6003811115612af857612af8615d4c565b6003811115612b0957612b09615d4c565b8152602001908152602001600020819055506000600f6000836003811115612b3357612b33615d4c565b6003811115612b4457612b44615d4c565b6003811115612b5557612b55615d4c565b81526020019081526020016000208190555060086000826003811115612b7d57612b7d615d4c565b6003811115612b8e57612b8e615d4c565b6003811115612b9f57612b9f615d4c565b81526020015260086000826003811115612bbb57612bbb615d4c565b6003811115612bcc57612bcc615d4c565b6003811115612bdd57612bdd615d4c565b815260208082019290925260409081016000908120825180840190935285835282840182815281546001818101845592845294909220925160029094029092019283555191015580612c2e81615cfb565b915050612a4a565b50506009839055600c80546001600160a01b03191633179055600b8290558015612c66576000805461ff00191690555b5050505050565b600d546001600160a01b0316331480612c905750600c546001600160a01b031633145b612cac5760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b038116612cd25760405162461bcd60e51b8152600401610a0090615af0565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060612cff82614f8d565b612d1757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612e6c57838290600052602060002090600602016040518060c0016040529081600082018054612d8090615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054612dac90615cc0565b8015612df95780601f10612dce57610100808354040283529160200191612df9565b820191906000526020600020905b815481529060010190602001808311612ddc57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612e4857612e48615d4c565b6003811115612e5957612e59615d4c565b8152505081526020019060010190612d4d565b505050509050600081519050612e8061539f565b6000612ead612ea885600081518110612e9b57612e9b615d78565b60200260200101516150e9565b614fa2565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce57858181518110612ee557612ee5615d78565b602002602001015193508282612efd612ea8876150e9565b604051602001612f0f9392919061597e565b60405160208183030381529060405292508080612f2b90615cfb565b915050612ecb565b600d546001600160a01b0316331480612f565750600c546001600160a01b031633145b612f725760405162461bcd60e51b8152600401610a0090615a91565b600060086000836003811115612f8a57612f8a615d4c565b6003811115612f9b57612f9b615d4c565b815260208101919091526040016000205490506001811161300e5760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610a00565b6008600083600381111561302457613024615d4c565b600381111561303557613035615d4c565b815260200190815260200160002080548061305257613052615d62565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b03163314806130975750600c546001600160a01b031633145b6130b35760405162461bcd60e51b8152600401610a0090615a91565b60135460ff16151581151514156131085760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a20494e56414c49442053544154555360381b6044820152606401610a00565b6013805460ff19168215151790556018805490600061312683615cfb565b90915550506040805180820182524281529115156020808401918252601854600090815260179091529190912091518255516001909101805460ff1916911515919091179055565b606061317982614f8d565b61319157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156132e657838290600052602060002090600602016040518060c00160405290816000820180546131fa90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461322690615cc0565b80156132735780601f1061324857610100808354040283529160200191613273565b820191906000526020600020905b81548152906001019060200180831161325657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156132c2576132c2615d4c565b60038111156132d3576132d3615d4c565b81525050815260200190600101906131c7565b5050505090506000815190506132fa61539f565b600061332f8460008151811061331257613312615d78565b602002602001015160a001516003811115612ea857612ea8615d4c565b604080518082019091526001808252602360f81b6020830152919250905b848110156118ce5785818151811061336757613367615d78565b60200260200101519350828261338c8660a001516003811115612ea857612ea8615d4c565b60405160200161339e9392919061597e565b604051602081830303815290604052925080806133ba90615cfb565b91505061334d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561351457838290600052602060002090600602016040518060c001604052908160008201805461342890615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461345490615cc0565b80156134a15780601f10613476576101008083540402835291602001916134a1565b820191906000526020600020905b81548152906001019060200180831161348457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156134f0576134f0615d4c565b600381111561350157613501615d4c565b81525050815260200190600101906133f5565b50508251929350505080841061353c5760405162461bcd60e51b8152600401610a0090615ab9565b600082858151811061355057613550615d78565b6020026020010151905061356d8182602001518360400151614c1f565b9695505050505050565b600d546001600160a01b031633148061359a5750600c546001600160a01b031633145b6135b65760405162461bcd60e51b8152600401610a0090615a91565b6305f5e100811261361a5760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610a00565b6008600083600381111561363057613630615d4c565b600381111561364157613641615d4c565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b6000606061369983614f8d565b6136b55750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561380a57838290600052602060002090600602016040518060c001604052908160008201805461371e90615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461374a90615cc0565b80156137975780601f1061376c57610100808354040283529160200191613797565b820191906000526020600020905b81548152906001019060200180831161377a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156137e6576137e6615d4c565b60038111156137f7576137f7615d4c565b81525050815260200190600101906136eb565b5050825192935060009150613874905083828461382957613829615d78565b60200260200101518460008151811061384457613844615d78565b6020026020010151602001518560008151811061386357613863615d78565b602002602001015160400151614c1f565b905061387f81614fa2565b604080518082019091526001808252602360f81b6020830152919550905b83811015613928576000808683815181106138ba576138ba615d78565b602002602001015190506138d78182602001518360400151614c1f565b91506138e38286615ba9565b945087846138f084614fa2565b6040516020016139029392919061597e565b60405160208183030381529060405297505050808061392090615cfb565b91505061389d565b5050505050915091565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609493849084015b82821015613a8657838290600052602060002090600602016040518060c001604052908160008201805461399a90615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546139c690615cc0565b8015613a135780601f106139e857610100808354040283529160200191613a13565b820191906000526020600020905b8154815290600101906020018083116139f657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613a6257613a62615d4c565b6003811115613a7357613a73615d4c565b8152505081526020019060010190613967565b505050509050600081516001600160401b03811115613aa757613aa7615d8e565b604051908082528060200260200182016040528015613ae057816020015b613acd6153e5565b815260200190600190039081613ac55790505b50905060005b82518110156109ce576000838281518110613b0357613b03615d78565b602002602001015190506000613b198784611123565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a001516003811115613b7157613b71615d4c565b81526020018360000151815260200183602001518152602001836040015115158152602001613ba585866040015142614c1f565b8152602001613bb48a876133c2565b815250905080858581518110613bcc57613bcc615d78565b602002602001018190525050505080613be490615cfb565b9050613ae6565b600d5460009081906001600160a01b03163314613c1a5760405162461bcd60e51b8152600401610a0090615a91565b60135460ff1615613cce57613c2f84846150f5565b6001600160a01b03841660009081526016602090815260408083208684528252918290208251606081018452815481526001820154928101929092526002015460ff16158015928201839052909190613c885750805142115b15613ccc5760405162461bcd60e51b81526020600482015260146024820152731399595908195e1d195b990818dbdb9d1c9858dd60621b6044820152606401610a00565b505b6001600160a01b038416600090815260056020526040902080548410613d2a5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610a00565b6000818581548110613d3e57613d3e615d78565b90600052602060002090600602019050613d5b8160020154615163565b613dca5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f2077616974206044820152793132b337b9329031b630b4b6b4b733903a3434b99031b7b73a1760311b6064820152608401610a00565b60004290506000613ed7836040518060c0016040529081600082018054613df090615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054613e1c90615cc0565b8015613e695780601f10613e3e57610100808354040283529160200191613e69565b820191906000526020600020905b815481529060010190602001808311613e4c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613eb857613eb8615d4c565b6003811115613ec957613ec9615d4c565b905250600285015484614c1f565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff1661409157614012836040518060c0016040529081600082018054613f2b90615cc0565b80601f0160208091040260200160405190810160405280929190818152602001828054613f5790615cc0565b8015613fa45780601f10613f7957610100808354040283529160200191613fa4565b820191906000526020600020905b815481529060010190602001808311613f8757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613ff357613ff3615d4c565b600381111561400457614004615d4c565b905250600185015442614c1f565b836004015411614091576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd926140889260ff9190911691615a45565b60405180910390a15b6005909201549194505060ff169150509250929050565b6140b06153e5565b6001600160a01b03831660009081526005602052604081208054849081106140da576140da615d78565b90600052602060002090600602016040518060c001604052908160008201805461410390615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461412f90615cc0565b801561417c5780601f106141515761010080835404028352916020019161417c565b820191906000526020600020905b81548152906001019060200180831161415f57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156141cb576141cb615d4c565b60038111156141dc576141dc615d4c565b905250905060006141ed8585611123565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561424557614245615d4c565b8152602001836000015181526020018360200151815260200183604001511515815260200161427985866040015142614c1f565b815260200161428888886133c2565b90529695505050505050565b6000600f60008360038111156142ac576142ac615d4c565b60038111156142bd576142bd615d4c565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b031633146143065760405162461bcd60e51b8152600401610a0090615a91565b6001600160a01b03851660009081526005602052604090208054806143855760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610a00565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b858110156147ab5760135460ff1615614440576143da8c826150f5565b6001600160a01b038c1660009081526016602090815260408083208484528252918290208251606081018452815481526001820154928101929092526002015460ff161580159282018390529091906144335750805142115b1561443e5750614799565b505b86818154811061445257614452615d78565b90600052602060002090600602019450600061456a866040518060c001604052908160008201805461448390615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546144af90615cc0565b80156144fc5780601f106144d1576101008083540402835291602001916144fc565b820191906000526020600020905b8154815290600101906020018083116144df57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561454b5761454b615d4c565b600381111561455c5761455c615d4c565b905250600288015442614c1f565b90506145768186615ba9565b60058701549095508190859060ff16600381111561459657614596615d4c565b60ff16600381106145a9576145a9615d78565b602002018181516145ba9190615ba9565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff1615801561470057506146f8866040518060c001604052908160008201805461461190615cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461463d90615cc0565b801561468a5780601f1061465f5761010080835404028352916020019161468a565b820191906000526020600020905b81548152906001019060200180831161466d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156146d9576146d9615d4c565b60038111156146ea576146ea615d4c565b905250600188015442614c1f565b866004015411155b15614797576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561474c5761474c615d4c565b9050838160ff166003811061476357614763615d78565b6020020151614773906001615bc1565b848260ff166003811061478857614788615d78565b60ff9092166020929092020152505b505b806147a381615cfb565b9150506143bd565b5060005b60038160ff161015614859576000828260ff16600381106147d2576147d2615d78565b602002015160ff161115614847577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff16600381111561481657614816615d4c565b838360ff166003811061482b5761482b615d78565b602002015160405161483e929190615a60565b60405180910390a15b8061485181615d16565b9150506147af565b505080516020820151604090920151929b909a50909850909650945050505050565b600d546001600160a01b031633148061489e5750600c546001600160a01b031633145b6148ba5760405162461bcd60e51b8152600401610a0090615a91565b601455565b600d546001600160a01b03163314806148e25750600c546001600160a01b031633145b6148fe5760405162461bcd60e51b8152600401610a0090615a91565b80601560008460038111156110fd576110fd615d4c565b606061492082614f8d565b61493857505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015614a8d57838290600052602060002090600602016040518060c00160405290816000820180546149a190615cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546149cd90615cc0565b8015614a1a5780601f106149ef57610100808354040283529160200191614a1a565b820191906000526020600020905b8154815290600101906020018083116149fd57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115614a6957614a69615d4c565b6003811115614a7a57614a7a615d4c565b815250508152602001906001019061496e565b505050509050600081519050614aa161539f565b600083600081518110614ab657614ab6615d78565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156118ce57858181518110614b0357614b03615d78565b6020026020010151935082828560000151604051602001614b269392919061597e565b60405160208183030381529060405292508080614b4290615cfb565b915050614ae9565b600080614b5b836305f5e100615c27565b90506305f5e100614b6c8286615c08565b61142d9190615be6565b6001600160a01b038216600090815260038401602052604090205460ff1615614bbb576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b600081831115614c685760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610a00565b8360200151831015614caf5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610a00565b60a08401516000614cc0828661517c565b90506000614cce838661517c565b60808801519091506000614ce28989615257565b60208a01516000975090915088908790819081885b88811015614e4a57600860008c6003811115614d1557614d15615d4c565b6003811115614d2657614d26615d4c565b81526020019081526020016000208181548110614d4557614d45615d78565b9060005260206000209060020201600001549450614d638684615301565b614d6d8685615301565b1480159250614da557614d808684615301565b614d8b906001615ba9565b600a54614d989190615c08565b614da29084615ba9565b94505b614daf8686615c66565b93508495506301e13380846305f5e100898b614dcb9190615c08565b614dd59190615be6565b614ddf9190615c08565b614de99190615be6565b614df3908d615ba9565b9b508115614e1b57614e0787600b54614b4a565b965080614e1381615ca9565b915050614e38565b614e3587600860008e600381111561097357610973615d4c565b96505b80614e4281615cfb565b915050614cf7565b505b8b8514614f0c578b9350614e608583615301565b614e6a8584615301565b1480159150614ea257614e7d8583615301565b614e88906001615ba9565b600a54614e959190615c08565b614e9f9083615ba9565b93505b614eac8585615c66565b92508394506301e13380836305f5e100888a614ec89190615c08565b614ed29190615be6565b614edc9190615c08565b614ee69190615be6565b614ef0908c615ba9565b9a508015614f0757614f0486600b54614b4a565b95505b614e4c565b505050505050505050509392505050565b600060028260a001516003811115614f3757614f37615d4c565b1480614f58575060018260a001516003811115614f5657614f56615d4c565b145b80614f78575060008260a001516003811115614f7657614f76615d4c565b145b15614f8557506001919050565b506000919050565b600080614f9b6001846150ca565b1192915050565b606081614fc65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614ff05780614fda81615cfb565b9150614fe99050600a83615be6565b9150614fca565b6000816001600160401b0381111561500a5761500a615d8e565b6040519080825280601f01601f191660200182016040528015615034576020820181803683370190505b509050815b85156150c15761504a600182615c66565b90506000615059600a88615be6565b61506490600a615c08565b61506e9088615c66565b615079906030615bc1565b905060008160f81b90508084848151811061509657615096615d78565b60200101906001600160f81b031916908160001a9053506150b8600a89615be6565b97505050615039565b50949350505050565b6001600160a01b03166000908152600191909101602052604090205490565b6000610eea8242615257565b6150ff82826112f0565b615107575050565b60006151138383611123565b6001600160a01b03939093166000908152601660209081526040808320948352938152908390208451815590840151600182015591909201516002909101805460ff191691151591909117905550565b600042600954836151749190615ba9565b111592915050565b6000808060088186600381111561519557615195615d4c565b60038111156151a6576151a6615d4c565b815260208101919091526040016000205490505b818111156109ce57600060026151d08385615ba9565b6151da9190615be6565b905084600860008860038111156151f3576151f3615d4c565b600381111561520457615204615d4c565b8152602001908152602001600020828154811061522357615223615d78565b906000526020600020906002020160000154101561524d57615246816001615ba9565b9250615251565b8091505b506151ba565b602082015160a08301516060840151600092919083615276838561517c565b90506000615284848861517c565b9050815b818110156152be576152aa846008600088600381111561097357610973615d4c565b9350806152b681615cfb565b915050615288565b5060006152cb8887615301565b90505b80156152f457806152de81615ca9565b9150506152ed84600b54614b4a565b93506152ce565b5091979650505050505050565b600a546000906153118385615c66565b611e0f9190615be6565b82805461532790615cc0565b90600052602060002090601f016020900481019282615349576000855561538f565b82601f1061536257805160ff191683800117855561538f565b8280016001018555821561538f579182015b8281111561538f578251825591602001919060010190615374565b5061539b929150615452565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156153e0576153e0615d4c565b905290565b60405180610160016040528060608152602001600081526020016000815260200160008152602001600081526020016000600381111561542757615427615d4c565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b5b8082111561539b5760008155600101615453565b80356001600160a01b038116811461547e57600080fd5b919050565b600082601f83011261549457600080fd5b813560206154a96154a483615b86565b615b56565b80838252828201915082860187848660051b89010111156154c957600080fd5b60005b85811015611b7b578135845292840192908401906001016154cc565b80356004811061547e57600080fd5b60006020828403121561550957600080fd5b611e0f82615467565b60008060006060848603121561552757600080fd5b61553084615467565b92506020808501356001600160401b038082111561554d57600080fd5b818701915087601f83011261556157600080fd5b813561556f6154a482615b86565b8082825285820191508585018b878560051b880101111561558f57600080fd5b60005b8481101561561c578135868111156155a957600080fd5b8701603f81018e136155ba57600080fd5b88810135878111156155ce576155ce615d8e565b6155e0601f8201601f19168b01615b56565b8181528f60408385010111156155f557600080fd5b81604084018c83013760009181018b01919091528552509287019290870190600101615592565b5050809750505050505050615633604085016154e8565b90509250925092565b60008060006060848603121561565157600080fd5b61565a84615467565b925060208401356001600160401b038082111561567657600080fd5b61568287838801615483565b9350604086013591508082111561569857600080fd5b506156a586828701615483565b9150509250925092565b600080604083850312156156c257600080fd5b6156cb83615467565b946020939093013593505050565b600080600080600060a086880312156156f157600080fd5b6156fa86615467565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561572e57600080fd5b82356001600160401b038082111561574557600080fd5b61575186838701615483565b9350602085013591508082111561576757600080fd5b5061577485828601615483565b9150509250929050565b6000806000806080858703121561579457600080fd5b84356001600160401b03808211156157ab57600080fd5b6157b788838901615483565b955060208701359150808211156157cd57600080fd5b506157da87828801615483565b949794965050505060408301359260600135919050565b60006020828403121561580357600080fd5b8135611e0f81615da4565b60006020828403121561582057600080fd5b8151611e0f81615da4565b60006020828403121561583d57600080fd5b611e0f826154e8565b6000806040838503121561585957600080fd5b6156cb836154e8565b60006020828403121561587457600080fd5b5035919050565b60006020828403121561588d57600080fd5b5051919050565b600481106158b257634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526158ce816020860160208601615c7d565b601f01601f19169290920160200192915050565b600061016082518185526158f8828601826158b6565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015161593560a0860182615894565b5060c083015160c085015260e083015160e08501526101008084015161595e8287018215159052565b505061012083810151908501526101409283015192909301919091525090565b60008451615990818460208901615c7d565b8451908301906159a4818360208901615c7d565b84519101906159b7818360208801615c7d565b0195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015615a2a57603f19888603018452615a188583516158e2565b945092850192908501906001016159fc565b5092979650505050505050565b60208101610eea8284615894565b60408101615a538285615894565b8260208301529392505050565b60408101615a6e8285615894565b60ff831660208301529392505050565b602081526000611e0f60208301846158b6565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252601c908201527f434f4e543a20436f6e7420696e64657820697320696d70726f70657200000000604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b602081526000611e0f60208301846158e2565b82815260408101611e0f6020830184615894565b82815260406020820152600061142d60408301846158b6565b604051601f8201601f191681016001600160401b0381118282101715615b7e57615b7e615d8e565b604052919050565b60006001600160401b03821115615b9f57615b9f615d8e565b5060051b60200190565b60008219821115615bbc57615bbc615d36565b500190565b600060ff821660ff84168060ff03821115615bde57615bde615d36565b019392505050565b600082615c0357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615c2257615c22615d36565b500290565b60008083128015600160ff1b850184121615615c4557615c45615d36565b6001600160ff1b0384018313811615615c6057615c60615d36565b50500390565b600082821015615c7857615c78615d36565b500390565b60005b83811015615c98578181015183820152602001615c80565b8381111561168c5750506000910152565b600081615cb857615cb8615d36565b506000190190565b600181811c90821680615cd457607f821691505b60208210811415615cf557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615d0f57615d0f615d36565b5060010190565b600060ff821660ff811415615d2d57615d2d615d36565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114615db257600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getClaimedAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "list": "a packed list of every entries",
          "total": "total amount of reward available for account, tax included"
        }
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "rewardCont": "amount of reward available for selected contract"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getClaimedAmountOf(address)": {
        "notice": "query claimed amount of an address in every contract"
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "notice": "query claimed amount of one contract"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5404,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)14887_storage"
      },
      {
        "astId": 5410,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5360_storage)dyn_storage)"
      },
      {
        "astId": 5415,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5420,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5427,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5309,t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage)"
      },
      {
        "astId": 5429,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5431,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5433,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5435,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5437,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5439,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5444,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5450,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5453,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 5455,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "decreaseFeePercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5458,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "isMonthFeeActive",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 5460,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "defaultExpireIn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5465,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeInMonth",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5472,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "additionalDataContract",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage))"
      },
      {
        "astId": 5477,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "monthFeeLogs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(MonthFeeLog)5396_storage)"
      },
      {
        "astId": 5479,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "maxIndexMonthFeeLogs",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5401_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5360_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5360_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ContType)5309": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5360_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5360_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5309,t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5309",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5309,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5309",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(AdditionalDataEntity)5367_storage"
      },
      "t_mapping(t_uint256,t_struct(MonthFeeLog)5396_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.MonthFeeLog)",
        "numberOfBytes": "32",
        "value": "t_struct(MonthFeeLog)5396_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5401_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5398,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5400,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AdditionalDataEntity)5367_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.AdditionalDataEntity",
        "members": [
          {
            "astId": 5362,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "expireIn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5364,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5366,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "isFeeContract",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ContEntity)5360_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5348,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5350,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5352,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5354,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5356,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5359,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5309"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)14887_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 14874,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14878,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14882,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14886,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MonthFeeLog)5396_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.MonthFeeLog",
        "members": [
          {
            "astId": 5393,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "currentTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5395,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}