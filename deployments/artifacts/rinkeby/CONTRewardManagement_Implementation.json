{
  "address": "0x3A1CA25FBdedD9dA61bE594Afe8EbE765a1663A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_updateAdminDashboard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "breakevenContsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "claimedRewardsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "tokensReceivedPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d4ec6b48a011caa4c8332f9f0ba070381bc65e0f957a98bb939e2ac3f0a992a",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x3A1CA25FBdedD9dA61bE594Afe8EbE765a1663A7",
    "transactionIndex": 39,
    "gasUsed": "3534743",
    "logsBloom": "0x
    "blockHash": "0x26bada709c6ebc2db11d3a71ccf6b4f301fc979e83f87e07cb0a1ed6ffe3b9a7",
    "transactionHash": "0x7d4ec6b48a011caa4c8332f9f0ba070381bc65e0f957a98bb939e2ac3f0a992a",
    "logs": [],
    "blockNumber": 10461354,
    "cumulativeGasUsed": "18405315",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "6ec92481d39d7a1a778d38ec4944a306",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_updateAdminDashboard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"breakevenContsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"claimedRewardsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"tokensReceivedPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(ContType => uint256) private _breakevenContsPerType;\\n    mapping(ContType => uint256) private _claimedRewardPerType;\\n    mapping(ContType => uint256) private _tokensReceivedPerType;\\n    \\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyAuthorities {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n        return rewardCont;\\n    }\\n\\n    function _cashoutAllContsReward(address account) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            uint256 lastUpd = conts[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all conts.\\\");\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            rewardsTotal += contRewardInInterval(_cont, _cont.lastUpdateTime, currentTstamp);\\n            _cont.lastUpdateTime = currentTstamp;\\n        }\\n        return rewardsTotal;\\n    }\\n\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function _updateAdminDashboard() external onlyAuthorities {\\n        uint256 zero = 0;\\n        uint256[3] memory breakevenCount = [zero, zero, zero];\\n        uint256[3] memory claimedReward = [zero, zero, zero];\\n        uint256[3] memory tokenReceived = [zero, zero, zero];\\n        for (uint64 i = 0; i < contOwners.size(); i++) {\\n            address currentAddr = contOwners.getKeyAtIndex(i);\\n            for (uint32 j = 0; j < _contsOfUser[currentAddr].length; j++) {\\n                ContEntity memory _cont = _contsOfUser[currentAddr][j];\\n                uint256 creatime = _cont.creationTime;\\n                // breakeven\\n                if (_cont.buyPrice <= contRewardInInterval(_cont, creatime, block.timestamp)) {\\n                    breakevenCount[uint256(_cont.cType)]++;\\n                }\\n\\n                // claimed\\n                claimedReward[uint256(_cont.cType)] += contRewardInInterval(_cont, creatime, _cont.lastUpdateTime);\\n\\n                // token received\\n                tokenReceived[uint256(_cont.cType)] += _cont.buyPrice;\\n            }\\n        }\\n\\n        for (uint i = 0; i < 3; i++) {\\n            _breakevenContsPerType[ContType(i)] = breakevenCount[i];\\n            _claimedRewardPerType[ContType(i)] = claimedReward[i];\\n            _tokensReceivedPerType[ContType(i)] = tokenReceived[i];\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    function totalContsPerType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    function breakevenContsPerType(ContType _cType) external view returns (uint256) {\\n        return _breakevenContsPerType[_cType];\\n    }\\n\\n    function claimedRewardsPerType(ContType _cType) external view returns (uint256) {\\n        return _claimedRewardPerType[_cType];\\n    }\\n\\n    function tokensReceivedPerType(ContType _cType) external view returns (uint256) {\\n        return _tokensReceivedPerType[_cType];\\n    }\\n\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardCount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardCount += contRewardInInterval(_cont, _cont.lastUpdateTime, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(_rewardsAvailable, separator, uint2str(\\n                    contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp)\\n                ))\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, leftTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6621a4d478893f10664f47a93e233fc6536d02663cf835f514e280b37949bb4f\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4266,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)8353_storage"
      },
      {
        "astId": 4272,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)4258_storage)dyn_storage)"
      },
      {
        "astId": 4277,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      },
      {
        "astId": 4282,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      },
      {
        "astId": 4289,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)4232,t_array(t_struct(APRChangesEntry)4263_storage)dyn_storage)"
      },
      {
        "astId": 4291,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4293,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4295,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4297,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4299,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4301,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4306,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      },
      {
        "astId": 4311,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_breakevenContsPerType",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      },
      {
        "astId": 4316,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_claimedRewardPerType",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      },
      {
        "astId": 4321,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_tokensReceivedPerType",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_enum(ContType)4232,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)4263_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)4263_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)4258_storage)dyn_storage": {
        "base": "t_struct(ContEntity)4258_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ContType)4232": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)4258_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)4258_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)4232,t_array(t_struct(APRChangesEntry)4263_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)4232",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)4263_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)4232,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)4232",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)4263_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 4260,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4262,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)4258_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 4246,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4248,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4250,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4252,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4254,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4257,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)4232"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)8353_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 8340,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8344,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8348,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8352,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}