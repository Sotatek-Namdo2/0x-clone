{
  "address": "0xb1b805126Bf9F28DB85FbD633601A14104701C57",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "ClaimedRewardAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "TotalTokensReceivedChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_updateAdminDashboard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "breakevenContsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "claimedRewardsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "tokensReceivedPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcf46ec0bc43987e54dddb5e5a2979aaa1b170e8e96de27eabf2b3aecfcc243c",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xb1b805126Bf9F28DB85FbD633601A14104701C57",
    "transactionIndex": 13,
    "gasUsed": "3678851",
    "logsBloom": "0x
    "blockHash": "0x9ba7567444d699da489f31c63fa0367928fbfa368dfa45760e731753e3964d58",
    "transactionHash": "0xdcf46ec0bc43987e54dddb5e5a2979aaa1b170e8e96de27eabf2b3aecfcc243c",
    "logs": [],
    "blockNumber": 10489655,
    "cumulativeGasUsed": "5019789",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "e36dcc5a009088b9ddbda6f64a4fbc75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewardAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"TotalTokensReceivedChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_updateAdminDashboard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"breakevenContsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"claimedRewardsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"tokensReceivedPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(ContType => uint256) private _breakevenContsPerType;\\n    mapping(ContType => uint256) private _claimedRewardPerType;\\n    mapping(ContType => uint256) private _tokensReceivedPerType;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n    event ClaimedRewardAmountChanged(ContType _cType, uint256 delta);\\n    event TotalTokensReceivedChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyAuthorities {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyAuthorities returns (uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n        return rewardCont;\\n    }\\n\\n    function _cashoutAllContsReward(address account) external onlyAuthorities\\n        returns (uint256, uint256, uint256, uint256) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            uint256 lastUpd = conts[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all conts.\\\");\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInInterval(_cont, _cont.lastUpdateTime, currentTstamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = currentTstamp;\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function _updateAdminDashboard() external {\\n        uint256 zero = 0;\\n        uint256[3] memory breakevenCount = [zero, zero, zero];\\n        uint256[3] memory claimedReward = [zero, zero, zero];\\n        uint256[3] memory tokenReceived = [zero, zero, zero];\\n        for (uint64 i = 0; i < contOwners.size(); i++) {\\n            address currentAddr = contOwners.getKeyAtIndex(i);\\n            for (uint32 j = 0; j < _contsOfUser[currentAddr].length; j++) {\\n                ContEntity memory _cont = _contsOfUser[currentAddr][j];\\n                uint256 creatime = _cont.creationTime;\\n                // breakeven\\n                if (_cont.buyPrice <= contRewardInInterval(_cont, creatime, block.timestamp)) {\\n                    breakevenCount[uint256(_cont.cType)]++;\\n                }\\n\\n                // claimed\\n                claimedReward[uint256(_cont.cType)] += contRewardInInterval(_cont, creatime, _cont.lastUpdateTime);\\n\\n                // token received\\n                tokenReceived[uint256(_cont.cType)] += _cont.buyPrice;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            emit BreakevenChanged(ContType(i), breakevenCount[i] - _breakevenContsPerType[ContType(i)]);\\n            _breakevenContsPerType[ContType(i)] = breakevenCount[i];\\n            emit ClaimedRewardAmountChanged(ContType(i), claimedReward[i] - _claimedRewardPerType[ContType(i)]);\\n            _claimedRewardPerType[ContType(i)] = claimedReward[i];\\n            emit TotalTokensReceivedChanged(ContType(i), tokenReceived[i] - _tokensReceivedPerType[ContType(i)]);\\n            _tokensReceivedPerType[ContType(i)] = tokenReceived[i];\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    function totalContsPerType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    function breakevenContsPerType(ContType _cType) external view returns (uint256) {\\n        return _breakevenContsPerType[_cType];\\n    }\\n\\n    function claimedRewardsPerType(ContType _cType) external view returns (uint256) {\\n        return _claimedRewardPerType[_cType];\\n    }\\n\\n    function tokensReceivedPerType(ContType _cType) external view returns (uint256) {\\n        return _tokensReceivedPerType[_cType];\\n    }\\n\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardCount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardCount += contRewardInInterval(_cont, _cont.lastUpdateTime, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, leftTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x984e6f4942bec3eeb02ba99d3a925b33c8bc05d3d44166bedbff69c59ba406f0\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102315760003560e01c8063619a635e116101305780638bf14514116100b8578063c2202b661161007c578063c2202b66146104e4578063d094fa8d146104f7578063e18f03ad1461052a578063f743f31914610533578063fc0c546a1461054657600080fd5b80638bf145141461049957806393520a80146104ac5780639b28d1a7146104b55780639d2040f0146104be5780639f227c53146104d157600080fd5b8063704b6c02116100ff578063704b6c02146104225780637091d1081461043557806377ec7826146104485780638201bf261461045b578063872a60ad1461046e57600080fd5b8063619a635e146103b957806363a9b098146103cc578063665bb078146103ec5780636eb5a7f41461040f57600080fd5b80631d5a1731116101be57806344fea1b91161018257806344fea1b9146103575780634f88de011461036a57806351bf120c1461038a57806355a757d01461039d5780635dbab6ed146103a657600080fd5b80631d5a1731146102eb57806328cceb24146102fe578063367fd0741461031e578063390c991e146103315780633bf20e601461034457600080fd5b80630d9f9f0c116102055780630d9f9f0c14610297578063144fa6d7146102aa578063150bf591146102bd5780631565f50e146102c55780631c3b4adb146102d857600080fd5b8062c73e4d146102365780630534cc681461025c5780630835209f146102715780630b9f6cfe14610284575b600080fd5b610249610244366004613dc4565b610559565b6040519081526020015b60405180910390f35b61026f61026a366004613bfb565b610659565b005b61024961027f366004613dc4565b610911565b610249610292366004613d26565b610950565b61026f6102a5366004613dfb565b610b36565b61026f6102b8366004613be0565b610b7a565b61026f610c20565b61026f6102d3366004613dfb565b611260565b6102496102e6366004613dc4565b6112a4565b61026f6102f9366004613ddf565b6112bc565b61031161030c366004613be0565b611338565b6040516102539190613ebb565b61031161032c366004613be0565b611580565b61026f61033f366004613dfb565b6117ef565b610249610352366004613dc4565b611833565b610249610365366004613be0565b61184b565b610249610378366004613dc4565b60076020526000908152604090205481565b610311610398366004613be0565b611869565b61024960095481565b6103116103b4366004613be0565b611aa5565b6102496103c7366004613be0565b611ce1565b6102496103da366004613dc4565b60066020526000908152604090205481565b6103ff6103fa366004613be0565b611eb9565b6040519015158152602001610253565b61026f61041d366004613d50565b611ec4565b61026f610430366004613be0565b61219c565b610249610443366004613dc4565b612242565b610311610456366004613be0565b61225a565b61026f610469366004613dc4565b612494565b600c54610481906001600160a01b031681565b6040516001600160a01b039091168152602001610253565b6103116104a7366004613be0565b6125d5565b610249600b5481565b610249600a5481565b61026f6104cc366004613ddf565b612829565b61026f6104df366004613ddf565b61293e565b6102496104f2366004613d26565b612ac7565b61050a610505366004613be0565b612d28565b604080519485526020850193909352918301526060820152608001610253565b610249600e5481565b610311610541366004613be0565b6130a1565b600d54610481906001600160a01b031681565b6000806008600084600281111561057257610572614130565b600281111561058357610583614130565b81526020019081526020016000208054905090506000600760008560028111156105af576105af614130565b60028111156105c0576105c0614130565b815260200190815260200160002054905060005b828110156106515761063d82600860008860028111156105f6576105f6614130565b600281111561060757610607614130565b815260200190815260200160002083815481106106265761062661415c565b9060005260206000209060020201600101546132d6565b915080610649816140c1565b9150506105d4565b509392505050565b600d546001600160a01b031633148061067c5750600c546001600160a01b031633145b6106a15760405162461bcd60e51b815260040161069890613eee565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d906106d6908590600401613e92565b60206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190613e14565b905060005b83518110156108805760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808684815181106107765761077661415c565b60200260200101518152602001428152602001428152602001848152602001600660008760028111156107ab576107ab614130565b60028111156107bc576107bc614130565b81526020019081526020016000205481526020018560028111156107e2576107e2614130565b9052815460018101835560009283526020928390208251805193946006909302909101926108139284920190613a25565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600281111561086657610866614130565b021790555050508080610878906140c1565b91505061072b565b506001600160a01b0384166000908152600560205260409020546108a890600190869061330a565b8251600e60008282546108bb9190613f6b565b90915550508251600f60008460028111156108d8576108d8614130565b60028111156108e9576108e9614130565b815260200190815260200160002060008282546109069190613f6b565b909155505050505050565b60006010600083600281111561092957610929614130565b600281111561093a5761093a614130565b8152602001908152602001600020549050919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610aa257838290600052602060002090600602016040518060c00160405290816000820180546109b690614086565b80601f01602080910402602001604051908101604052809291908181526020018280546109e290614086565b8015610a2f5780601f10610a0457610100808354040283529160200191610a2f565b820191906000526020600020905b815481529060010190602001808311610a1257829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115610a7e57610a7e614130565b6002811115610a8f57610a8f614130565b8152505081526020019060010190610983565b505082519293505050808410610afa5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f706572000000006044820152606401610698565b6000828581518110610b0e57610b0e61415c565b602002602001015190506000610b29828360400151426133b3565b9450505050505b92915050565b600d546001600160a01b0316331480610b595750600c546001600160a01b031633145b610b755760405162461bcd60e51b815260040161069890613eee565b600b55565b600d546001600160a01b0316331480610b9d5750600c546001600160a01b031633145b610bb95760405162461bcd60e51b815260040161069890613eee565b6001600160a01b038116610bfe5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610698565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b60408051606080820183526000808352602080840182905283850182905284518084018652828152808201839052808601839052855193840186528284529083018290529382018190529290835b6001548167ffffffffffffffff161015610f07576000610c99600167ffffffffffffffff84166136e1565b905060005b6001600160a01b03821660009081526005602052604090205463ffffffff82161015610ef2576001600160a01b0382166000908152600560205260408120805463ffffffff8416908110610cf457610cf461415c565b90600052602060002090600602016040518060c0016040529081600082018054610d1d90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4990614086565b8015610d965780601f10610d6b57610100808354040283529160200191610d96565b820191906000526020600020905b815481529060010190602001808311610d7957829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115610de557610de5614130565b6002811115610df657610df6614130565b9052506020810151909150610e0c8282426133b3565b826080015111610e5157878260a001516002811115610e2d57610e2d614130565b60038110610e3d57610e3d61415c565b60200201805190610e4d826140c1565b9052505b610e60828284604001516133b3565b878360a001516002811115610e7757610e77614130565b60038110610e8757610e8761415c565b60200201818151610e989190613f6b565b905250608082015160a083015187906002811115610eb857610eb8614130565b60038110610ec857610ec861415c565b60200201818151610ed99190613f6b565b905250829150610eea9050816140dc565b915050610c9e565b50508080610eff90614100565b915050610c6e565b5060005b6003811015611259577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd816002811115610f4757610f47614130565b60106000846002811115610f5d57610f5d614130565b6002811115610f6e57610f6e614130565b6002811115610f7f57610f7f614130565b815260200190815260200160002054868460038110610fa057610fa061415c565b6020020151610faf9190614028565b604051610fbd929190613ea0565b60405180910390a1838160038110610fd757610fd761415c565b602002015160106000836002811115610ff257610ff2614130565b600281111561100357611003614130565b600281111561101457611014614130565b81526020810191909152604001600020557f273593302e70c196e9b622b7f46a08f2515e97ddb84269488c31af22bcb247e681600281111561105857611058614130565b6011600084600281111561106e5761106e614130565b600281111561107f5761107f614130565b600281111561109057611090614130565b8152602001908152602001600020548584600381106110b1576110b161415c565b60200201516110c09190614028565b6040516110ce929190613ea0565b60405180910390a18281600381106110e8576110e861415c565b60200201516011600083600281111561110357611103614130565b600281111561111457611114614130565b600281111561112557611125614130565b81526020810191909152604001600020557f6b4926355b06df322a026ad3c2a1bab995de255df07aee3ce05ceccfe8599c3581600281111561116957611169614130565b6012600084600281111561117f5761117f614130565b600281111561119057611190614130565b60028111156111a1576111a1614130565b8152602001908152602001600020548484600381106111c2576111c261415c565b60200201516111d19190614028565b6040516111df929190613ea0565b60405180910390a18181600381106111f9576111f961415c565b60200201516012600083600281111561121457611214614130565b600281111561122557611225614130565b600281111561123657611236614130565b815260208101919091526040016000205580611251816140c1565b915050610f0b565b5050505050565b600d546001600160a01b03163314806112835750600c546001600160a01b031633145b61129f5760405162461bcd60e51b815260040161069890613eee565b600a55565b60006012600083600281111561092957610929614130565b600d546001600160a01b03163314806112df5750600c546001600160a01b031633145b6112fb5760405162461bcd60e51b815260040161069890613eee565b806006600084600281111561131257611312614130565b600281111561132357611323614130565b81526020810191909152604001600020555050565b606061134382613714565b61135b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156114b057838290600052602060002090600602016040518060c00160405290816000820180546113c490614086565b80601f01602080910402602001604051908101604052809291908181526020018280546113f090614086565b801561143d5780601f106114125761010080835404028352916020019161143d565b820191906000526020600020905b81548152906001019060200180831161142057829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561148c5761148c614130565b600281111561149d5761149d614130565b8152505081526020019060010190611391565b5050505090506000815190506114c4613aa9565b60006114ed846000815181106114dc576114dc61415c565b602002602001015160200151613731565b604080518082019091526001808252602360f81b6020830152919250905b84811015611574578581815181106115255761152561415c565b60200260200101519350828261153e8660200151613731565b60405160200161155093929190613e4f565b6040516020818303038152906040529250808061156c906140c1565b91505061150b565b50909695505050505050565b606061158b82613714565b6115a357505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156116f857838290600052602060002090600602016040518060c001604052908160008201805461160c90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461163890614086565b80156116855780601f1061165a57610100808354040283529160200191611685565b820191906000526020600020905b81548152906001019060200180831161166857829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff16908111156116d4576116d4614130565b60028111156116e5576116e5614130565b81525050815260200190600101906115d9565b505082519293504291506000905061174d61174885838661171b5761171b61415c565b6020026020010151866000815181106117365761173661415c565b602002602001015160400151856133b3565b613731565b604080518082019091526001808252602360f81b6020830152919250905b848110156115745782826117b961174889858151811061178d5761178d61415c565b60200260200101518a86815181106117a7576117a761415c565b602002602001015160400151896133b3565b6040516020016117cb93929190613e4f565b604051602081830303815290604052925080806117e7906140c1565b91505061176b565b600d546001600160a01b03163314806118125750600c546001600160a01b031633145b61182e5760405162461bcd60e51b815260040161069890613eee565b600955565b6000600f600083600281111561092957610929614130565b6001600160a01b038116600090815260026020526040812054610b30565b606061187482613714565b61188c57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156119e157838290600052602060002090600602016040518060c00160405290816000820180546118f590614086565b80601f016020809104026020016040519081016040528092919081815260200182805461192190614086565b801561196e5780601f106119435761010080835404028352916020019161196e565b820191906000526020600020905b81548152906001019060200180831161195157829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff16908111156119bd576119bd614130565b60028111156119ce576119ce614130565b81525050815260200190600101906118c2565b5050505090506000815190506119f5613aa9565b6000611a1e84600081518110611a0d57611a0d61415c565b602002602001015160400151613731565b604080518082019091526001808252602360f81b6020830152919250905b8481101561157457858181518110611a5657611a5661415c565b602002602001015193508282611a6f8660400151613731565b604051602001611a8193929190613e4f565b60405160208183030381529060405292508080611a9d906140c1565b915050611a3c565b6060611ab082613714565b611ac857505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611c1d57838290600052602060002090600602016040518060c0016040529081600082018054611b3190614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5d90614086565b8015611baa5780601f10611b7f57610100808354040283529160200191611baa565b820191906000526020600020905b815481529060010190602001808311611b8d57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115611bf957611bf9614130565b6002811115611c0a57611c0a614130565b8152505081526020019060010190611afe565b505050509050600081519050611c31613aa9565b6000611c5a84600081518110611c4957611c4961415c565b602002602001015160600151613731565b604080518082019091526001808252602360f81b6020830152919250905b8481101561157457858181518110611c9257611c9261415c565b602002602001015193508282611cab8660600151613731565b604051602001611cbd93929190613e4f565b60405160208183030381529060405292508080611cd9906140c1565b915050611c78565b6000611cec82613714565b611cf857506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015611e4a57838290600052602060002090600602016040518060c0016040529081600082018054611d5e90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8a90614086565b8015611dd75780601f10611dac57610100808354040283529160200191611dd7565b820191906000526020600020905b815481529060010190602001808311611dba57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115611e2657611e26614130565b6002811115611e3757611e37614130565b8152505081526020019060010190611d2b565b50508251929350429150600090505b82811015611eae576000848281518110611e7557611e7561415c565b60200260200101519050611e8e818260400151856133b3565b611e989087613f6b565b9550508080611ea6906140c1565b915050611e59565b509295945050505050565b6000610b3082613714565b600054610100900460ff16611edf5760005460ff1615611ee3565b303b155b611f465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610698565b600054610100900460ff16158015611f68576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b600381101561216657868181518110611f9557611f9561415c565b602002602001015160066000836002811115611fb357611fb3614130565b6002811115611fc457611fc4614130565b6002811115611fd557611fd5614130565b815260200190815260200160002081905550858181518110611ff957611ff961415c565b60200260200101516007600083600281111561201757612017614130565b600281111561202857612028614130565b600281111561203957612039614130565b8152602001908152602001600020819055506000600f600083600281111561206357612063614130565b600281111561207457612074614130565b600281111561208557612085614130565b815260200190815260200160002081905550600860008260028111156120ad576120ad614130565b60028111156120be576120be614130565b60028111156120cf576120cf614130565b815260200152600860008260028111156120eb576120eb614130565b60028111156120fc576120fc614130565b600281111561210d5761210d614130565b81526020808201929092526040908101600090812082518084019093528583528284018281528154600181810184559284529490922092516002909402909201928355519101558061215e816140c1565b915050611f7a565b50506009839055600c80546001600160a01b03191633179055600b8290558015611259576000805461ff00191690555050505050565b600d546001600160a01b03163314806121bf5750600c546001600160a01b031633145b6121db5760405162461bcd60e51b815260040161069890613eee565b6001600160a01b0381166122205760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610698565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006011600083600281111561092957610929614130565b606061226582613714565b61227d57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156123d257838290600052602060002090600602016040518060c00160405290816000820180546122e690614086565b80601f016020809104026020016040519081016040528092919081815260200182805461231290614086565b801561235f5780601f106123345761010080835404028352916020019161235f565b820191906000526020600020905b81548152906001019060200180831161234257829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff16908111156123ae576123ae614130565b60028111156123bf576123bf614130565b81525050815260200190600101906122b3565b5050505090506000815190506123e6613aa9565b600061240e611748856000815181106124015761240161415c565b602002602001015161385a565b604080518082019091526001808252602360f81b6020830152919250905b84811015611574578581815181106124465761244661415c565b60200260200101519350828261245e6117488761385a565b60405160200161247093929190613e4f565b6040516020818303038152906040529250808061248c906140c1565b91505061242c565b600d546001600160a01b03163314806124b75750600c546001600160a01b031633145b6124d35760405162461bcd60e51b815260040161069890613eee565b6000600860008360028111156124eb576124eb614130565b60028111156124fc576124fc614130565b815260208101919091526040016000205490506001811161256f5760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610698565b6008600083600281111561258557612585614130565b600281111561259657612596614130565b81526020019081526020016000208054806125b3576125b3614146565b6000828152602081206002600019909301928302018181556001015590555050565b60606125e082613714565b6125f857505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561274d57838290600052602060002090600602016040518060c001604052908160008201805461266190614086565b80601f016020809104026020016040519081016040528092919081815260200182805461268d90614086565b80156126da5780601f106126af576101008083540402835291602001916126da565b820191906000526020600020905b8154815290600101906020018083116126bd57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561272957612729614130565b600281111561273a5761273a614130565b815250508152602001906001019061262e565b505050509050600081519050612761613aa9565b6000612796846000815181106127795761277961415c565b602002602001015160a00151600281111561174857611748614130565b604080518082019091526001808252602360f81b6020830152919250905b84811015611574578581815181106127ce576127ce61415c565b6020026020010151935082826127f38660a00151600281111561174857611748614130565b60405160200161280593929190613e4f565b60405160208183030381529060405292508080612821906140c1565b9150506127b4565b600d546001600160a01b031633148061284c5750600c546001600160a01b031633145b6128685760405162461bcd60e51b815260040161069890613eee565b6305f5e10081126128cc5760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610698565b600860008360028111156128e2576128e2614130565b60028111156128f3576128f3614130565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b03163314806129615750600c546001600160a01b031633145b61297d5760405162461bcd60e51b815260040161069890613eee565b806007600084600281111561299457612994614130565b60028111156129a5576129a5614130565b8152602001908152602001600020819055506000600860008460028111156129cf576129cf614130565b60028111156129e0576129e0614130565b8152602001908152602001600020600081548110612a0057612a0061415c565b906000526020600020906002020160000154905060086000846002811115612a2a57612a2a614130565b6002811115612a3b57612a3b614130565b81526020019081526020016000206000612a559190613aef565b60086000846002811115612a6b57612a6b614130565b6002811115612a7c57612a7c614130565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b600d546000906001600160a01b0316331480612aed5750600c546001600160a01b031633145b612b095760405162461bcd60e51b815260040161069890613eee565b6001600160a01b038316600090815260056020526040902080548310612b655760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610698565b6000818481548110612b7957612b7961415c565b90600052602060002090600602019050612b968160020154613866565b612c085760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e0000000000006064820152608401610698565b60004290506000612d15836040518060c0016040529081600082018054612c2e90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054612c5a90614086565b8015612ca75780601f10612c7c57610100808354040283529160200191612ca7565b820191906000526020600020905b815481529060010190602001808311612c8a57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115612cf657612cf6614130565b6002811115612d0757612d07614130565b9052506002850154846133b3565b6002909301919091555091505092915050565b600d546000908190819081906001600160a01b0316331480612d545750600c546001600160a01b031633145b612d705760405162461bcd60e51b815260040161069890613eee565b6001600160a01b0385166000908152600560205260409020805480612def5760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610698565b6040805160608101825260008082526020820181905291810182905281904282805b86811015612e60576000888281548110612e2d57612e2d61415c565b906000526020600020906006020160020154905082811115612e4d578092505b5080612e58816140c1565b915050612e11565b50612e6a81613866565b612edc5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e6720616c6c20636f6e74732e0000000000006064820152608401610698565b60005b8681101561307e57878181548110612ef957612ef961415c565b906000526020600020906006020195506000613011876040518060c0016040529081600082018054612f2a90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054612f5690614086565b8015612fa35780601f10612f7857610100808354040283529160200191612fa3565b820191906000526020600020905b815481529060010190602001808311612f8657829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115612ff257612ff2614130565b600281111561300357613003614130565b9052506002890154866133b3565b905061301d8187613f6b565b60058801549096508190869060ff16600281111561303d5761303d614130565b60ff16600381106130505761305061415c565b602002018181516130619190613f6b565b905250506002860183905580613076816140c1565b915050612edf565b505081516020830151604090930151939c909b5091995091975095505050505050565b60606130ac82613714565b6130c457505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561321957838290600052602060002090600602016040518060c001604052908160008201805461312d90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461315990614086565b80156131a65780601f1061317b576101008083540402835291602001916131a6565b820191906000526020600020905b81548152906001019060200180831161318957829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff16908111156131f5576131f5614130565b600281111561320657613206614130565b81525050815260200190600101906130fa565b50505050905060008151905061322d613aa9565b6000836000815181106132425761324261415c565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156115745785818151811061328f5761328f61415c565b60200260200101519350828285600001516040516020016132b293929190613e4f565b604051602081830303815290604052925080806132ce906140c1565b915050613275565b6000806132e7836305f5e100613fe9565b90506305f5e1006132f88286613fca565b6133029190613fa8565b949350505050565b6001600160a01b038216600090815260038401602052604090205460ff161561334f576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156133fc5760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610698565b83602001518310156134435760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610698565b60a08401516000613454828661387f565b60808701519091506000613468888861395a565b6020890151909150879060009081908190819081895b600860008d600281111561349457613494614130565b60028111156134a5576134a5614130565b815260208101919091526040016000205481101561360a57600860008d60028111156134d3576134d3614130565b60028111156134e4576134e4614130565b815260200190815260200160002081815481106135035761350361415c565b90600052602060002090600202016000015496506135218884613a04565b61352b8885613a04565b14801592506135635761353e8884613a04565b613549906001613f6b565b600a546135569190613fca565b6135609084613f6b565b96505b61356d8888614028565b94506301e13380856305f5e1006135848c8e613fca565b61358e9190613fa8565b6135989190613fca565b6135a29190613fa8565b935086975083866135b39190613f6b565b955081156135db576135c789600b546132d6565b9850806135d38161406f565b9150506135f8565b6135f589600860008f60028111156105f6576105f6614130565b98505b80613602816140c1565b91505061347e565b505b8c87146136ce578c95506136208783613a04565b61362a8784613a04565b14801591506136625761363d8783613a04565b613648906001613f6b565b600a546136559190613fca565b61365f9083613f6b565b95505b61366c8787614028565b93506301e13380846305f5e1006136838b8d613fca565b61368d9190613fa8565b6136979190613fca565b6136a19190613fa8565b925085965082856136b29190613f6b565b945080156136c9576136c688600b546132d6565b97505b61360c565b50929d9c50505050505050505050505050565b60008260000182815481106136f8576136f861415c565b6000918252602090912001546001600160a01b03169392505050565b6001600160a01b0316600090815260026020526040902054151590565b6060816137555750506040805180820190915260018152600360fc1b602082015290565b8160005b811561377f5780613769816140c1565b91506137789050600a83613fa8565b9150613759565b60008167ffffffffffffffff81111561379a5761379a614172565b6040519080825280601f01601f1916602001820160405280156137c4576020820181803683370190505b509050815b8515613851576137da600182614028565b905060006137e9600a88613fa8565b6137f490600a613fca565b6137fe9088614028565b613809906030613f83565b905060008160f81b9050808484815181106138265761382661415c565b60200101906001600160f81b031916908160001a905350613848600a89613fa8565b975050506137c9565b50949350505050565b6000610b30824261395a565b600042600954836138779190613f6b565b111592915050565b6000808060088186600281111561389857613898614130565b60028111156138a9576138a9614130565b815260208101919091526040016000205490505b8181111561065157600060026138d38385613f6b565b6138dd9190613fa8565b905084600860008860028111156138f6576138f6614130565b600281111561390757613907614130565b815260200190815260200160002082815481106139265761392661415c565b906000526020600020906002020160000154101561395057613949816001613f6b565b9250613954565b8091505b506138bd565b602082015160a08301516060840151600092919083613979838561387f565b90506000613987848861387f565b9050815b818110156139c1576139ad84600860008860028111156105f6576105f6614130565b9350806139b9816140c1565b91505061398b565b5060006139ce8887613a04565b90505b80156139f757806139e18161406f565b9150506139f084600b546132d6565b93506139d1565b5091979650505050505050565b600a54600090613a148385614028565b613a1e9190613fa8565b9392505050565b828054613a3190614086565b90600052602060002090601f016020900481019282613a535760008555613a99565b82601f10613a6c57805160ff1916838001178555613a99565b82800160010185558215613a99579182015b82811115613a99578251825591602001919060010190613a7e565b50613aa5929150613b13565b5090565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016000815260200160006002811115613aea57613aea614130565b905290565b5080546000825560020290600052602060002090810190613b109190613b28565b50565b5b80821115613aa55760008155600101613b14565b5b80821115613aa55760008082556001820155600201613b29565b80356001600160a01b0381168114613b5a57600080fd5b919050565b600082601f830112613b7057600080fd5b81356020613b85613b8083613f47565b613f16565b80838252828201915082860187848660051b8901011115613ba557600080fd5b60005b85811015613bc457813584529284019290840190600101613ba8565b5090979650505050505050565b803560038110613b5a57600080fd5b600060208284031215613bf257600080fd5b613a1e82613b43565b600080600060608486031215613c1057600080fd5b613c1984613b43565b925060208085013567ffffffffffffffff80821115613c3757600080fd5b818701915087601f830112613c4b57600080fd5b8135613c59613b8082613f47565b8082825285820191508585018b878560051b8801011115613c7957600080fd5b60005b84811015613d0657813586811115613c9357600080fd5b8701603f81018e13613ca457600080fd5b8881013587811115613cb857613cb8614172565b613cca601f8201601f19168b01613f16565b8181528f6040838501011115613cdf57600080fd5b81604084018c83013760009181018b01919091528552509287019290870190600101613c7c565b5050809750505050505050613d1d60408501613bd1565b90509250925092565b60008060408385031215613d3957600080fd5b613d4283613b43565b946020939093013593505050565b60008060008060808587031215613d6657600080fd5b843567ffffffffffffffff80821115613d7e57600080fd5b613d8a88838901613b5f565b95506020870135915080821115613da057600080fd5b50613dad87828801613b5f565b949794965050505060408301359260600135919050565b600060208284031215613dd657600080fd5b613a1e82613bd1565b60008060408385031215613df257600080fd5b613d4283613bd1565b600060208284031215613e0d57600080fd5b5035919050565b600060208284031215613e2657600080fd5b5051919050565b60038110613e4b57634e487b7160e01b600052602160045260246000fd5b9052565b60008451613e6181846020890161403f565b845190830190613e7581836020890161403f565b8451910190613e8881836020880161403f565b0195945050505050565b60208101610b308284613e2d565b60408101613eae8285613e2d565b8260208301529392505050565b6020815260008251806020840152613eda81604085016020870161403f565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f3f57613f3f614172565b604052919050565b600067ffffffffffffffff821115613f6157613f61614172565b5060051b60200190565b60008219821115613f7e57613f7e61411a565b500190565b600060ff821660ff84168060ff03821115613fa057613fa061411a565b019392505050565b600082613fc557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613fe457613fe461411a565b500290565b60008083128015600160ff1b8501841216156140075761400761411a565b6001600160ff1b03840183138116156140225761402261411a565b50500390565b60008282101561403a5761403a61411a565b500390565b60005b8381101561405a578181015183820152602001614042565b83811115614069576000848401525b50505050565b60008161407e5761407e61411a565b506000190190565b600181811c9082168061409a57607f821691505b602082108114156140bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156140d5576140d561411a565b5060010190565b600063ffffffff808316818114156140f6576140f661411a565b6001019392505050565b600067ffffffffffffffff808316818114156140f6576140f65b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4359,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)8560_storage"
      },
      {
        "astId": 4365,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)4351_storage)dyn_storage)"
      },
      {
        "astId": 4370,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      },
      {
        "astId": 4375,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      },
      {
        "astId": 4382,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)4325,t_array(t_struct(APRChangesEntry)4356_storage)dyn_storage)"
      },
      {
        "astId": 4384,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4386,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4388,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4390,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4392,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4394,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4399,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      },
      {
        "astId": 4404,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_breakevenContsPerType",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      },
      {
        "astId": 4409,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_claimedRewardPerType",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      },
      {
        "astId": 4414,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_tokensReceivedPerType",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_enum(ContType)4325,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)4356_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)4356_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)4351_storage)dyn_storage": {
        "base": "t_struct(ContEntity)4351_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ContType)4325": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)4351_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)4351_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)4325,t_array(t_struct(APRChangesEntry)4356_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)4325",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)4356_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)4325,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)4325",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)4356_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 4353,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4355,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)4351_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 4339,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4341,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4343,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4345,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4347,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4350,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)4325"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)8560_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 8547,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8551,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8555,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8559,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}