{
  "address": "0xe95e6Bfa6B48Ce4239EDD418d9d4d0f06fF5cd72",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x456d9ffe52c7cc11a46a4676f7f5f09ef6c824762ccb11857071c22f1386addf",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xe95e6Bfa6B48Ce4239EDD418d9d4d0f06fF5cd72",
    "transactionIndex": 48,
    "gasUsed": "3483627",
    "logsBloom": "0x
    "blockHash": "0x683569eb4aa3e366c7caee2efcc7afbe1732dd8ccb0b87d82aff2d5ff978f38e",
    "transactionHash": "0x456d9ffe52c7cc11a46a4676f7f5f09ef6c824762ccb11857071c22f1386addf",
    "logs": [],
    "blockNumber": 10586486,
    "cumulativeGasUsed": "13000807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "d7eeceee3136fec70dce362539db5897",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_cashoutContReward(address,uint256)\":{\"params\":{\"_contIndex\":\"contract index\",\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_resetAllAPRChange(uint8,uint256)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_cashoutContReward(address,uint256)\":{\"notice\":\"reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_resetAllAPRChange(uint8,uint256)\":{\"notice\":\"only used when admin makes mistake about APR change: reset every APR changes/\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInInterval(cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (!_brokeevenContract[account][i]\\n                && _cont.buyPrice <= contRewardInInterval(_cont, _cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct ++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInInterval(_cont, _cont.lastUpdateTime, currentTstamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, leftTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x2b143841ca00fad98d81a38876a55ee615d5f891d58b6130a355aea3ffe6cdee\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e0d806100206000396000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c8063665bb078116101255780639b28d1a7116100ad578063ce6912a31161007c578063ce6912a3146104be578063d094fa8d146104d1578063e18f03ad14610504578063f743f3191461050d578063fc0c546a1461052057600080fd5b80639b28d1a71461046e5780639d2040f0146104775780639f227c531461048a578063c2202b661461049d57600080fd5b80637bed9600116100f45780637bed9600146103e65780638201bf2614610414578063872a60ad146104275780638bf145141461045257806393520a801461046557600080fd5b8063665bb0781461038a5780636eb5a7f4146103ad578063704b6c02146103c057806377ec7826146103d357600080fd5b8063367fd074116101a857806351bf120c1161017757806351bf120c1461032857806355a757d01461033b5780635dbab6ed14610344578063619a635e1461035757806363a9b0981461036a57600080fd5b8063367fd074146102cf578063390c991e146102e257806344fea1b9146102f55780634f88de011461030857600080fd5b8063144fa6d7116101e4578063144fa6d7146102765780631565f50e146102895780631d5a17311461029c57806328cceb24146102af57600080fd5b8062c73e4d146102155780630534cc681461023b5780630b9f6cfe146102505780630d9f9f0c14610263575b600080fd5b610228610223366004613a28565b610533565b6040519081526020015b60405180910390f35b61024e61024936600461385f565b610633565b005b61022861025e36600461398a565b6108d6565b61024e610271366004613a5f565b610abc565b61024e610284366004613844565b610b00565b61024e610297366004613a5f565b610ba6565b61024e6102aa366004613a43565b610bea565b6102c26102bd366004613844565b610c66565b6040516102329190613b3d565b6102c26102dd366004613844565b610eae565b61024e6102f0366004613a5f565b61111d565b610228610303366004613844565b611161565b610228610316366004613a28565b60076020526000908152604090205481565b6102c2610336366004613844565b61117f565b61022860095481565b6102c2610352366004613844565b6113bb565b610228610365366004613844565b6115f7565b610228610378366004613a28565b60066020526000908152604090205481565b61039d610398366004613844565b6117cf565b6040519015158152602001610232565b61024e6103bb3660046139b4565b6117da565b61024e6103ce366004613844565b611ab3565b6102c26103e1366004613844565b611b59565b61039d6103f436600461398a565b601060209081526000928352604080842090915290825290205460ff1681565b61024e610422366004613a28565b611d93565b600c5461043a906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b6102c2610460366004613844565b611ed4565b610228600b5481565b610228600a5481565b61024e610485366004613a43565b612128565b61024e610498366004613a43565b61223d565b6104b06104ab36600461398a565b6123c6565b604051610232929190613b98565b6102286104cc366004613a28565b6127d2565b6104e46104df366004613844565b612811565b604080519485526020850193909352918301526060820152608001610232565b610228600e5481565b6102c261051b366004613844565b612d3d565b600d5461043a906001600160a01b031681565b6000806008600084600381111561054c5761054c613da8565b600381111561055d5761055d613da8565b815260200190815260200160002080549050905060006007600085600381111561058957610589613da8565b600381111561059a5761059a613da8565b815260200190815260200160002054905060005b8281101561062b5761061782600860008860038111156105d0576105d0613da8565b60038111156105e1576105e1613da8565b8152602001908152602001600020838154811061060057610600613dd4565b906000526020600020906002020160010154612f72565b91508061062381613d57565b9150506105ae565b509392505050565b600d546001600160a01b031633146106665760405162461bcd60e51b815260040161065d90613b70565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d9061069b908590600401613af6565b60206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190613a78565b905060005b83518110156108455760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c0016040528086848151811061073b5761073b613dd4565b602002602001015181526020014281526020014281526020018481526020016006600087600381111561077057610770613da8565b600381111561078157610781613da8565b81526020019081526020016000205481526020018560038111156107a7576107a7613da8565b9052815460018101835560009283526020928390208251805193946006909302909101926107d89284920190613689565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600381111561082b5761082b613da8565b02179055505050808061083d90613d57565b9150506106f0565b506001600160a01b03841660009081526005602052604090205461086d906001908690612fa6565b8251600e60008282546108809190613c01565b90915550508251600f600084600381111561089d5761089d613da8565b60038111156108ae576108ae613da8565b815260200190815260200160002060008282546108cb9190613c01565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610a2857838290600052602060002090600602016040518060c001604052908160008201805461093c90613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461096890613d1c565b80156109b55780601f1061098a576101008083540402835291602001916109b5565b820191906000526020600020905b81548152906001019060200180831161099857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610a0457610a04613da8565b6003811115610a1557610a15613da8565b8152505081526020019060010190610909565b505082519293505050808410610a805760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f70657200000000604482015260640161065d565b6000828581518110610a9457610a94613dd4565b602002602001015190506000610aaf8283604001514261304f565b9450505050505b92915050565b600d546001600160a01b0316331480610adf5750600c546001600160a01b031633145b610afb5760405162461bcd60e51b815260040161065d90613b70565b600b55565b600d546001600160a01b0316331480610b235750600c546001600160a01b031633145b610b3f5760405162461bcd60e51b815260040161065d90613b70565b6001600160a01b038116610b845760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161065d565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610bc95750600c546001600160a01b031633145b610be55760405162461bcd60e51b815260040161065d90613b70565b600a55565b600d546001600160a01b0316331480610c0d5750600c546001600160a01b031633145b610c295760405162461bcd60e51b815260040161065d90613b70565b8060066000846003811115610c4057610c40613da8565b6003811115610c5157610c51613da8565b81526020810191909152604001600020555050565b6060610c718261337f565b610c8957505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015610dde57838290600052602060002090600602016040518060c0016040529081600082018054610cf290613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1e90613d1c565b8015610d6b5780601f10610d4057610100808354040283529160200191610d6b565b820191906000526020600020905b815481529060010190602001808311610d4e57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610dba57610dba613da8565b6003811115610dcb57610dcb613da8565b8152505081526020019060010190610cbf565b505050509050600081519050610df261370d565b6000610e1b84600081518110610e0a57610e0a613dd4565b60200260200101516020015161339c565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea257858181518110610e5357610e53613dd4565b602002602001015193508282610e6c866020015161339c565b604051602001610e7e93929190613ab3565b60405160208183030381529060405292508080610e9a90613d57565b915050610e39565b50909695505050505050565b6060610eb98261337f565b610ed157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561102657838290600052602060002090600602016040518060c0016040529081600082018054610f3a90613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690613d1c565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561100257611002613da8565b600381111561101357611013613da8565b8152505081526020019060010190610f07565b505082519293504291506000905061107b61107685838661104957611049613dd4565b60200260200101518660008151811061106457611064613dd4565b6020026020010151604001518561304f565b61339c565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea25782826110e76110768985815181106110bb576110bb613dd4565b60200260200101518a86815181106110d5576110d5613dd4565b6020026020010151604001518961304f565b6040516020016110f993929190613ab3565b6040516020818303038152906040529250808061111590613d57565b915050611099565b600d546001600160a01b03163314806111405750600c546001600160a01b031633145b61115c5760405162461bcd60e51b815260040161065d90613b70565b600955565b6001600160a01b038116600090815260026020526040812054610ab6565b606061118a8261337f565b6111a257505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156112f757838290600052602060002090600602016040518060c001604052908160008201805461120b90613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461123790613d1c565b80156112845780601f1061125957610100808354040283529160200191611284565b820191906000526020600020905b81548152906001019060200180831161126757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156112d3576112d3613da8565b60038111156112e4576112e4613da8565b81525050815260200190600101906111d8565b50505050905060008151905061130b61370d565b60006113348460008151811061132357611323613dd4565b60200260200101516040015161339c565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea25785818151811061136c5761136c613dd4565b602002602001015193508282611385866040015161339c565b60405160200161139793929190613ab3565b604051602081830303815290604052925080806113b390613d57565b915050611352565b60606113c68261337f565b6113de57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561153357838290600052602060002090600602016040518060c001604052908160008201805461144790613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461147390613d1c565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561150f5761150f613da8565b600381111561152057611520613da8565b8152505081526020019060010190611414565b50505050905060008151905061154761370d565b60006115708460008151811061155f5761155f613dd4565b60200260200101516060015161339c565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea2578581815181106115a8576115a8613dd4565b6020026020010151935082826115c1866060015161339c565b6040516020016115d393929190613ab3565b604051602081830303815290604052925080806115ef90613d57565b91505061158e565b60006116028261337f565b61160e57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561176057838290600052602060002090600602016040518060c001604052908160008201805461167490613d1c565b80601f01602080910402602001604051908101604052809291908181526020018280546116a090613d1c565b80156116ed5780601f106116c2576101008083540402835291602001916116ed565b820191906000526020600020905b8154815290600101906020018083116116d057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561173c5761173c613da8565b600381111561174d5761174d613da8565b8152505081526020019060010190611641565b50508251929350429150600090505b828110156117c457600084828151811061178b5761178b613dd4565b602002602001015190506117a48182604001518561304f565b6117ae9087613c01565b95505080806117bc90613d57565b91505061176f565b509295945050505050565b6000610ab68261337f565b600054610100900460ff166117f55760005460ff16156117f9565b303b155b61185c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161065d565b600054610100900460ff1615801561187e576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b6003811015611a7c578681815181106118ab576118ab613dd4565b6020026020010151600660008360038111156118c9576118c9613da8565b60038111156118da576118da613da8565b60038111156118eb576118eb613da8565b81526020019081526020016000208190555085818151811061190f5761190f613dd4565b60200260200101516007600083600381111561192d5761192d613da8565b600381111561193e5761193e613da8565b600381111561194f5761194f613da8565b8152602001908152602001600020819055506000600f600083600381111561197957611979613da8565b600381111561198a5761198a613da8565b600381111561199b5761199b613da8565b815260200190815260200160002081905550600860008260038111156119c3576119c3613da8565b60038111156119d4576119d4613da8565b60038111156119e5576119e5613da8565b81526020015260086000826003811115611a0157611a01613da8565b6003811115611a1257611a12613da8565b6003811115611a2357611a23613da8565b815260208082019290925260409081016000908120825180840190935285835282840182815281546001818101845592845294909220925160029094029092019283555191015580611a7481613d57565b915050611890565b50506009839055600c80546001600160a01b03191633179055600b8290558015611aac576000805461ff00191690555b5050505050565b600d546001600160a01b0316331480611ad65750600c546001600160a01b031633145b611af25760405162461bcd60e51b815260040161065d90613b70565b6001600160a01b038116611b375760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161065d565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060611b648261337f565b611b7c57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611cd157838290600052602060002090600602016040518060c0016040529081600082018054611be590613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1190613d1c565b8015611c5e5780601f10611c3357610100808354040283529160200191611c5e565b820191906000526020600020905b815481529060010190602001808311611c4157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611cad57611cad613da8565b6003811115611cbe57611cbe613da8565b8152505081526020019060010190611bb2565b505050509050600081519050611ce561370d565b6000611d0d61107685600081518110611d0057611d00613dd4565b60200260200101516134c5565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea257858181518110611d4557611d45613dd4565b602002602001015193508282611d5d611076876134c5565b604051602001611d6f93929190613ab3565b60405160208183030381529060405292508080611d8b90613d57565b915050611d2b565b600d546001600160a01b0316331480611db65750600c546001600160a01b031633145b611dd25760405162461bcd60e51b815260040161065d90613b70565b600060086000836003811115611dea57611dea613da8565b6003811115611dfb57611dfb613da8565b8152602081019190915260400160002054905060018111611e6e5760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b606482015260840161065d565b60086000836003811115611e8457611e84613da8565b6003811115611e9557611e95613da8565b8152602001908152602001600020805480611eb257611eb2613dbe565b6000828152602081206002600019909301928302018181556001015590555050565b6060611edf8261337f565b611ef757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561204c57838290600052602060002090600602016040518060c0016040529081600082018054611f6090613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8c90613d1c565b8015611fd95780601f10611fae57610100808354040283529160200191611fd9565b820191906000526020600020905b815481529060010190602001808311611fbc57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561202857612028613da8565b600381111561203957612039613da8565b8152505081526020019060010190611f2d565b50505050905060008151905061206061370d565b60006120958460008151811061207857612078613dd4565b602002602001015160a00151600381111561107657611076613da8565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ea2578581815181106120cd576120cd613dd4565b6020026020010151935082826120f28660a00151600381111561107657611076613da8565b60405160200161210493929190613ab3565b6040516020818303038152906040529250808061212090613d57565b9150506120b3565b600d546001600160a01b031633148061214b5750600c546001600160a01b031633145b6121675760405162461bcd60e51b815260040161065d90613b70565b6305f5e10081126121cb5760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b606482015260840161065d565b600860008360038111156121e1576121e1613da8565b60038111156121f2576121f2613da8565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b03163314806122605750600c546001600160a01b031633145b61227c5760405162461bcd60e51b815260040161065d90613b70565b806007600084600381111561229357612293613da8565b60038111156122a4576122a4613da8565b8152602001908152602001600020819055506000600860008460038111156122ce576122ce613da8565b60038111156122df576122df613da8565b81526020019081526020016000206000815481106122ff576122ff613dd4565b90600052602060002090600202016000015490506008600084600381111561232957612329613da8565b600381111561233a5761233a613da8565b815260200190815260200160002060006123549190613753565b6008600084600381111561236a5761236a613da8565b600381111561237b5761237b613da8565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b600d5460009081906001600160a01b031633146123f55760405162461bcd60e51b815260040161065d90613b70565b6001600160a01b0384166000908152600560205260409020805484106124515760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b604482015260640161065d565b600081858154811061246557612465613dd4565b9060005260206000209060060201905061248281600201546134d1565b6124f45760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e000000000000606482015260840161065d565b60004290506000612601836040518060c001604052908160008201805461251a90613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461254690613d1c565b80156125935780601f1061256857610100808354040283529160200191612593565b820191906000526020600020905b81548152906001019060200180831161257657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156125e2576125e2613da8565b60038111156125f3576125f3613da8565b90525060028501548461304f565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff166127bb5761273c836040518060c001604052908160008201805461265590613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461268190613d1c565b80156126ce5780601f106126a3576101008083540402835291602001916126ce565b820191906000526020600020905b8154815290600101906020018083116126b157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561271d5761271d613da8565b600381111561272e5761272e613da8565b90525060018501544261304f565b8360040154116127bb576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd926127b29260ff9190911691613b04565b60405180910390a15b6005909201549194505060ff169150509250929050565b6000600f60008360038111156127ea576127ea613da8565b60038111156127fb576127fb613da8565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b031633146128445760405162461bcd60e51b815260040161065d90613b70565b6001600160a01b03851660009081526005602052604090208054806128c35760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b606482015260840161065d565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b85811015612c6d5786818154811061291557612915613dd4565b906000526020600020906006020194506000612a2d866040518060c001604052908160008201805461294690613d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461297290613d1c565b80156129bf5780601f10612994576101008083540402835291602001916129bf565b820191906000526020600020905b8154815290600101906020018083116129a257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612a0e57612a0e613da8565b6003811115612a1f57612a1f613da8565b90525060028801544261304f565b9050612a398186613c01565b60058701549095508190859060ff166003811115612a5957612a59613da8565b60ff1660038110612a6c57612a6c613dd4565b60200201818151612a7d9190613c01565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff16158015612bc35750612bbb866040518060c0016040529081600082018054612ad490613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054612b0090613d1c565b8015612b4d5780601f10612b2257610100808354040283529160200191612b4d565b820191906000526020600020905b815481529060010190602001808311612b3057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612b9c57612b9c613da8565b6003811115612bad57612bad613da8565b90525060018801544261304f565b866004015411155b15612c5a576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff166003811115612c0f57612c0f613da8565b9050838160ff1660038110612c2657612c26613dd4565b6020020151612c36906001613c19565b848260ff1660038110612c4b57612c4b613dd4565b60ff9092166020929092020152505b5080612c6581613d57565b9150506128fb565b5060005b60038160ff161015612d1b576000828260ff1660038110612c9457612c94613dd4565b602002015160ff161115612d09577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff166003811115612cd857612cd8613da8565b838360ff1660038110612ced57612ced613dd4565b6020020151604051612d00929190613b1f565b60405180910390a15b80612d1381613d72565b915050612c71565b505080516020820151604090920151929b909a50909850909650945050505050565b6060612d488261337f565b612d6057505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612eb557838290600052602060002090600602016040518060c0016040529081600082018054612dc990613d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054612df590613d1c565b8015612e425780601f10612e1757610100808354040283529160200191612e42565b820191906000526020600020905b815481529060010190602001808311612e2557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612e9157612e91613da8565b6003811115612ea257612ea2613da8565b8152505081526020019060010190612d96565b505050509050600081519050612ec961370d565b600083600081518110612ede57612ede613dd4565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b84811015610ea257858181518110612f2b57612f2b613dd4565b6020026020010151935082828560000151604051602001612f4e93929190613ab3565b60405160208183030381529060405292508080612f6a90613d57565b915050612f11565b600080612f83836305f5e100613c7f565b90506305f5e100612f948286613c60565b612f9e9190613c3e565b949350505050565b6001600160a01b038216600090815260038401602052604090205460ff1615612feb576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156130985760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b604482015260640161065d565b83602001518310156130df5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b604482015260640161065d565b60a084015160006130f082866134ea565b6080870151909150600061310488886135c5565b6020890151909150879060009081908190819081895b600860008d600381111561313057613130613da8565b600381111561314157613141613da8565b81526020810191909152604001600020548110156132a657600860008d600381111561316f5761316f613da8565b600381111561318057613180613da8565b8152602001908152602001600020818154811061319f5761319f613dd4565b90600052602060002090600202016000015496506131bd888461366f565b6131c7888561366f565b14801592506131ff576131da888461366f565b6131e5906001613c01565b600a546131f29190613c60565b6131fc9084613c01565b96505b6132098888613cbe565b94506301e13380856305f5e1006132208c8e613c60565b61322a9190613c3e565b6132349190613c60565b61323e9190613c3e565b9350869750838661324f9190613c01565b955081156132775761326389600b54612f72565b98508061326f81613d05565b915050613294565b61329189600860008f60038111156105d0576105d0613da8565b98505b8061329e81613d57565b91505061311a565b505b8c871461336a578c95506132bc878361366f565b6132c6878461366f565b14801591506132fe576132d9878361366f565b6132e4906001613c01565b600a546132f19190613c60565b6132fb9083613c01565b95505b6133088787613cbe565b93506301e13380846305f5e10061331f8b8d613c60565b6133299190613c3e565b6133339190613c60565b61333d9190613c3e565b9250859650828561334e9190613c01565b945080156133655761336288600b54612f72565b97505b6132a8565b509299505050505050505050505b9392505050565b6001600160a01b0316600090815260026020526040902054151590565b6060816133c05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156133ea57806133d481613d57565b91506133e39050600a83613c3e565b91506133c4565b60008167ffffffffffffffff81111561340557613405613dea565b6040519080825280601f01601f19166020018201604052801561342f576020820181803683370190505b509050815b85156134bc57613445600182613cbe565b90506000613454600a88613c3e565b61345f90600a613c60565b6134699088613cbe565b613474906030613c19565b905060008160f81b90508084848151811061349157613491613dd4565b60200101906001600160f81b031916908160001a9053506134b3600a89613c3e565b97505050613434565b50949350505050565b6000610ab682426135c5565b600042600954836134e29190613c01565b111592915050565b6000808060088186600381111561350357613503613da8565b600381111561351457613514613da8565b815260208101919091526040016000205490505b8181111561062b576000600261353e8385613c01565b6135489190613c3e565b9050846008600088600381111561356157613561613da8565b600381111561357257613572613da8565b8152602001908152602001600020828154811061359157613591613dd4565b90600052602060002090600202016000015410156135bb576135b4816001613c01565b92506135bf565b8091505b50613528565b602082015160a083015160608401516000929190836135e483856134ea565b905060006135f284886134ea565b9050815b8181101561362c5761361884600860008860038111156105d0576105d0613da8565b93508061362481613d57565b9150506135f6565b506000613639888761366f565b90505b8015613662578061364c81613d05565b91505061365b84600b54612f72565b935061363c565b5091979650505050505050565b600a5460009061367f8385613cbe565b6133789190613c3e565b82805461369590613d1c565b90600052602060002090601f0160209004810192826136b757600085556136fd565b82601f106136d057805160ff19168380011785556136fd565b828001600101855582156136fd579182015b828111156136fd5782518255916020019190600101906136e2565b50613709929150613777565b5090565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001600081526020016000600381111561374e5761374e613da8565b905290565b5080546000825560020290600052602060002090810190613774919061378c565b50565b5b808211156137095760008155600101613778565b5b80821115613709576000808255600182015560020161378d565b80356001600160a01b03811681146137be57600080fd5b919050565b600082601f8301126137d457600080fd5b813560206137e96137e483613bdd565b613bac565b80838252828201915082860187848660051b890101111561380957600080fd5b60005b858110156138285781358452928401929084019060010161380c565b5090979650505050505050565b8035600481106137be57600080fd5b60006020828403121561385657600080fd5b613378826137a7565b60008060006060848603121561387457600080fd5b61387d846137a7565b925060208085013567ffffffffffffffff8082111561389b57600080fd5b818701915087601f8301126138af57600080fd5b81356138bd6137e482613bdd565b8082825285820191508585018b878560051b88010111156138dd57600080fd5b60005b8481101561396a578135868111156138f757600080fd5b8701603f81018e1361390857600080fd5b888101358781111561391c5761391c613dea565b61392e601f8201601f19168b01613bac565b8181528f604083850101111561394357600080fd5b81604084018c83013760009181018b019190915285525092870192908701906001016138e0565b505080975050505050505061398160408501613835565b90509250925092565b6000806040838503121561399d57600080fd5b6139a6836137a7565b946020939093013593505050565b600080600080608085870312156139ca57600080fd5b843567ffffffffffffffff808211156139e257600080fd5b6139ee888389016137c3565b95506020870135915080821115613a0457600080fd5b50613a11878288016137c3565b949794965050505060408301359260600135919050565b600060208284031215613a3a57600080fd5b61337882613835565b60008060408385031215613a5657600080fd5b6139a683613835565b600060208284031215613a7157600080fd5b5035919050565b600060208284031215613a8a57600080fd5b5051919050565b60048110613aaf57634e487b7160e01b600052602160045260246000fd5b9052565b60008451613ac5818460208901613cd5565b845190830190613ad9818360208901613cd5565b8451910190613aec818360208801613cd5565b0195945050505050565b60208101610ab68284613a91565b60408101613b128285613a91565b8260208301529392505050565b60408101613b2d8285613a91565b60ff831660208301529392505050565b6020815260008251806020840152613b5c816040850160208701613cd5565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b828152604081016133786020830184613a91565b604051601f8201601f1916810167ffffffffffffffff81118282101715613bd557613bd5613dea565b604052919050565b600067ffffffffffffffff821115613bf757613bf7613dea565b5060051b60200190565b60008219821115613c1457613c14613d92565b500190565b600060ff821660ff84168060ff03821115613c3657613c36613d92565b019392505050565b600082613c5b57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613c7a57613c7a613d92565b500290565b60008083128015600160ff1b850184121615613c9d57613c9d613d92565b6001600160ff1b0384018313811615613cb857613cb8613d92565b50500390565b600082821015613cd057613cd0613d92565b500390565b60005b83811015613cf0578181015183820152602001613cd8565b83811115613cff576000848401525b50505050565b600081613d1457613d14613d92565b506000190190565b600181811c90821680613d3057607f821691505b60208210811415613d5157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6b57613d6b613d92565b5060010190565b600060ff821660ff811415613d8957613d89613d92565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_cashoutContReward(address,uint256)": {
        "params": {
          "_contIndex": "contract index",
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_cashoutContReward(address,uint256)": {
        "notice": "reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "notice": "only used when admin makes mistake about APR change: reset every APR changes/"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5207,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)12554_storage"
      },
      {
        "astId": 5213,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5199_storage)dyn_storage)"
      },
      {
        "astId": 5218,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5223,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5230,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5173,t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage)"
      },
      {
        "astId": 5232,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5234,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5236,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5238,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5240,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5242,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5247,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5253,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5204_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5199_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5199_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ContType)5173": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5199_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5199_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5173,t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5173",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5173,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5173",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5204_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5201,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5203,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)5199_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5187,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5189,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5191,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5193,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5195,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5198,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5173"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)12554_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 12541,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12545,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 12549,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 12553,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}