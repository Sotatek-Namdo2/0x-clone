{
  "address": "0x9C81d42A2d7003C5A433860302f9A35989fCA992",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "list",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getClaimedAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCont",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "additionalDataContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expireIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_decreaseFeePercent",
          "type": "uint256"
        }
      ],
      "name": "changeDecreaseFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "changeFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "changeMonthFeeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpireIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "extendContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "feeInMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getExpireIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.AdditionalDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "getExtendContractFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFullDataCont",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ContType",
              "name": "cType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.FullDataEntity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getNumberOfConts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isExpiredCont",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMonthFeeActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIndexMonthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tesseractFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cubeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultExpireIn",
          "type": "uint256"
        }
      ],
      "name": "setupDataForMonthFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "userAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff2fef709d5affe125ce7f23daba4567b7a2f557836c4c5b517bd4ad737603c6",
  "receipt": {
    "to": null,
    "from": "0x0AB01869EEC7240e63990F16Be309D8364814AA8",
    "contractAddress": "0x9C81d42A2d7003C5A433860302f9A35989fCA992",
    "transactionIndex": 2,
    "gasUsed": "5334464",
    "logsBloom": "0x
    "blockHash": "0x48aa3d62bc9fd6949713e9187a5262e59288467aa663d7901b8fdde0e7df2df2",
    "transactionHash": "0xff2fef709d5affe125ce7f23daba4567b7a2f557836c4c5b517bd4ad737603c6",
    "logs": [],
    "blockNumber": 10742984,
    "cumulativeGasUsed": "5673675",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aa2fafca3ff81473fe0849379c09aad7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"list\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getClaimedAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCont\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"additionalDataContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decreaseFeePercent\",\"type\":\"uint256\"}],\"name\":\"changeDecreaseFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"changeFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeMonthFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpireIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"extendContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"feeInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExpireIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.AdditionalDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"getExtendContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullDataCont\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.FullDataEntity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getNumberOfConts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isExpiredCont\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMonthFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexMonthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tesseractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cubeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultExpireIn\",\"type\":\"uint256\"}],\"name\":\"setupDataForMonthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_cashoutContReward(address,uint256)\":{\"params\":{\"_contIndex\":\"contract index\",\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getClaimedAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from contract creation time to latest claim.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"list\":\"a packed list of every entries\",\"total\":\"total amount of reward available for account, tax included\"}},\"_getClaimedAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInIntervalV2` to calculate claimed in an interval from contract creationTime to latest claim.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"rewardCont\":\"amount of reward available for selected contract\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_resetAllAPRChange(uint8,uint256)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_cashoutContReward(address,uint256)\":{\"notice\":\"reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getClaimedAmountOf(address)\":{\"notice\":\"query claimed amount of an address in every contract\"},\"_getClaimedAmountOfIndex(address,uint256)\":{\"notice\":\"query claimed amount of one contract\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_resetAllAPRChange(uint8,uint256)\":{\"notice\":\"only used when admin makes mistake about APR change: reset every APR changes/\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant SEVEN_DAY = 7 hours;\\n    uint256 public constant ONE_MONTH = 1 days;\\n    uint256 public constant THREE_MONTH = 3 days;\\n    // uint256\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    struct AdditionalDataEntity {\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct FullDataEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct MonthFeeLog {\\n        uint256 currentTime;\\n        bool state;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // upgrade for month fee\\n\\n    // Adding feature - fee by month\\n    // using ContEntity[] => cannot update field into ContEntity struct (because using proxy\\n\\n    IERC20 public feeToken;\\n    uint256 public decreaseFeePercent;\\n    bool public isMonthFeeActive = true;\\n    uint256 public defaultExpireIn;\\n    mapping(ContType => uint256) public feeInMonth;\\n    mapping(address => mapping(uint256 => AdditionalDataEntity)) public additionalDataContract;\\n    mapping(address => mapping(ContType => uint256)) public userAsset;\\n    // using mapping instead of array to easy scale with proxy\\n    mapping(uint256 => MonthFeeLog) public monthFeeLogs;\\n    uint256 public maxIndexMonthFeeLogs;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFee(\\n        address _feeToken,\\n        uint256 _decreaseFeePercent,\\n        uint256 _tesseractFee,\\n        uint256 _cubeFee,\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n        decreaseFeePercent = _decreaseFeePercent;\\n        feeInMonth[ContType.Tesseract] = _tesseractFee;\\n        feeInMonth[ContType.Cube] = _cubeFee;\\n        defaultExpireIn = _defaultExpireIn;\\n        monthFeeLogs[0] = MonthFeeLog(block.timestamp, true);\\n        maxIndexMonthFeeLogs = 0;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n            uint256 index = _contsOfUser[account].length - 1;\\n            additionalDataContract[account][index] = AdditionalDataEntity({\\n                expireIn: block.timestamp + ONE_MONTH,\\n                lastUpdated: block.timestamp\\n            });\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n        userAsset[account][_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        if (isMonthFeeActive) {\\n            _cleanExpiredOrUpdateCont(account, _contIndex);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInIntervalV2(_contIndex, cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInIntervalV2(i, _cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function extendContract(uint256 time, uint256[] memory indexes) external {\\n        require(time == ONE_MONTH || time == THREE_MONTH, \\\"MONTH_FEE: Not valid time\\\");\\n        uint256 fee = getExtendContractFee(time, indexes);\\n        require(feeToken.transferFrom(msg.sender, address(this), fee), \\\"MONTH_FEE: Not valid\\\");\\n\\n        // extend expire in\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            AdditionalDataEntity memory additionData = getExpireIn(msg.sender, indexes[i]);\\n            //            AdditionalDataEntity storage additionData = additionalDataContract[msg.sender][indexes[i]];\\n            require(additionData.expireIn >= block.timestamp, \\\"MONTH_FEE: Contract has been expired\\\");\\n            additionData.expireIn += time;\\n            additionData.lastUpdated = block.timestamp;\\n            additionalDataContract[msg.sender][indexes[i]] = additionData;\\n        }\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function changeDecreaseFeePercent(uint256 _decreaseFeePercent) external onlyAuthorities {\\n        decreaseFeePercent = _decreaseFeePercent;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function changeFeeToken(address _feeToken) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n    }\\n\\n    function changeMonthFeeState(bool _status) external onlyAuthorities {\\n        require(_status != isMonthFeeActive, \\\"MONTH_FEE: INVALID STATUS\\\");\\n        isMonthFeeActive = _status;\\n        maxIndexMonthFeeLogs++;\\n        monthFeeLogs[maxIndexMonthFeeLogs] = MonthFeeLog(block.timestamp, _status);\\n    }\\n\\n    function withdrawFeeToken(address _user) external onlyAuthorities {\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        require(feeToken.transfer(_user, amount), \\\"MONTH_FEE_WITHDRAW: INVALID\\\");\\n    }\\n\\n    function _cleanExpiredOrUpdateCont(address account, uint256 _contIndex) private {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, _contIndex);\\n        if (additionalData.expireIn >= block.timestamp) {\\n            additionalDataContract[account][_contIndex] = additionalData;\\n            return;\\n        }\\n        ContEntity memory currentCont = _contsOfUser[account][_contIndex];\\n        uint256 maxIndex = _contsOfUser[account].length - 1;\\n        _contsOfUser[account][_contIndex] = _contsOfUser[account][maxIndex];\\n        additionalDataContract[account][_contIndex] = additionalDataContract[account][maxIndex];\\n        _contsOfUser[account].pop();\\n        delete additionalDataContract[account][maxIndex];\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated -= 1;\\n        _totalContsPerType[currentCont.cType] -= 1;\\n        userAsset[account][currentCont.cType] -= 1;\\n    }\\n\\n    function _cleanAllExpiredOrUpdateCont(address account) private {\\n        ContEntity[] memory listCont = _contsOfUser[account];\\n        if (listCont.length == 0) {\\n            return;\\n        }\\n        uint256 maxIndex = listCont.length - 1;\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            if (i > maxIndex) {\\n                break;\\n            }\\n            _cleanExpiredOrUpdateCont(account, i);\\n            maxIndex = _contsOfUser[account].length - 1;\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n\\n    function isExpiredCont(address account, uint256 index) public view returns (bool) {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, index);\\n        if (additionalData.expireIn < block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return total total amount of reward available for account, tax included\\n        @return list a packed list of every entries\\n    */\\n    function _getClaimedAmountOf(address account) external view returns (uint256 total, string memory list) {\\n        if (!isContOwner(account)) return (0, \\\"\\\");\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 rw = contRewardInIntervalV2(0, conts[0], conts[0].creationTime, conts[0].lastUpdateTime);\\n        total = rw;\\n        list = uint2str(rw);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            uint256 _claimed = contRewardInIntervalV2(i, _cont, _cont.creationTime, _cont.lastUpdateTime);\\n            total += _claimed;\\n            list = string(abi.encodePacked(list, separator, uint2str(_claimed)));\\n        }\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInIntervalV2(0, conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInIntervalV2(i, conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    function getExtendContractFee(uint256 time, uint256[] memory indexes) public view returns (uint256) {\\n        uint256 totalFee;\\n        uint256[] memory numberOfContType;\\n        numberOfContType[(uint256)(ContType.Tesseract)] = getNumberOfConts(msg.sender, ContType.Tesseract);\\n        numberOfContType[(uint256)(ContType.Cube)] = getNumberOfConts(msg.sender, ContType.Cube);\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            uint256 index = indexes[i];\\n            ContEntity memory cont = _contsOfUser[msg.sender][index];\\n            uint256 totalDecreasePercent = decreaseFeePercent * numberOfContType[(uint256)(cont.cType)];\\n            uint256 feeForContOneMonth = (feeInMonth[cont.cType] * (HUNDRED_PERCENT - totalDecreasePercent)) /\\n                HUNDRED_PERCENT;\\n            totalFee += (feeForContOneMonth * time) / ONE_MONTH;\\n        }\\n        return totalFee;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate reward in an interval\\n    /// @dev iterate through APR change log and for each APR segment/interval, add up its reward to the result\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param leftTstamp left border of the interval\\n    /// @param rightTstamp right border of the interval\\n    /// @return result\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256 result) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 firstUpdateInd = historyBinarySearch(_cType, leftTstamp);\\n        uint256 lastUpdateInd = historyBinarySearch(_cType, rightTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp;\\n        result = 0;\\n        uint256 deltaTstamp;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = firstUpdateInd; index < lastUpdateInd; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function contRewardInIntervalV2(\\n        uint256 indexCont,\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        if (isMonthFeeActive && isExpiredCont(msg.sender, indexCont)) {\\n            return 0;\\n        }\\n        return contRewardInInterval(cont, leftTstamp, rightTstamp);\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    /// @notice convert uint256 to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice reduce input to a percentage with decimals\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    /// @notice check if an account is a contract owner\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n\\n    function getExpireIn(address user, uint256 index) public view returns (AdditionalDataEntity memory) {\\n        AdditionalDataEntity memory additionalData = additionalDataContract[user][index];\\n        if (additionalData.expireIn == 0) {\\n            additionalData.expireIn = defaultExpireIn;\\n        }\\n        uint256 totalDelay = 0;\\n        for (uint256 i = 0; i <= maxIndexMonthFeeLogs; ++i) {\\n            MonthFeeLog memory log = monthFeeLogs[i];\\n            if (additionalData.lastUpdated >= log.currentTime) {\\n                continue;\\n            }\\n            if (log.state == true) {\\n                totalDelay = totalDelay + log.currentTime - additionalData.lastUpdated;\\n            }\\n            additionalData.lastUpdated = log.currentTime;\\n        }\\n\\n        if (block.timestamp > monthFeeLogs[maxIndexMonthFeeLogs].currentTime) {\\n            if (isMonthFeeActive == false) {\\n                totalDelay = totalDelay + block.timestamp - monthFeeLogs[maxIndexMonthFeeLogs].currentTime;\\n            }\\n            additionalData.lastUpdated = block.timestamp;\\n        }\\n\\n        additionalData.expireIn += totalDelay;\\n\\n        return additionalData;\\n    }\\n\\n    function getNumberOfConts(address account, ContType _cType) public view returns (uint256) {\\n        ContEntity[] memory listConts = _contsOfUser[account];\\n        uint256 count;\\n        for (uint256 i = 0; i < listConts.length; ++i) {\\n            if (listConts[i].cType != _cType) {\\n                continue;\\n            }\\n            AdditionalDataEntity memory data = getExpireIn(account, i);\\n            if (data.expireIn >= block.timestamp) {\\n                ++count;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function getFullDataCont(address user) public view returns (FullDataEntity[] memory) {\\n        FullDataEntity[] memory fullData;\\n        ContEntity[] memory listCont = _contsOfUser[user];\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            ContEntity memory cont = listCont[i];\\n            AdditionalDataEntity memory additional = getExpireIn(user, i);\\n            FullDataEntity memory item = FullDataEntity(\\n                cont.name,\\n                cont.creationTime,\\n                cont.lastUpdateTime,\\n                cont.initialAPR,\\n                cont.buyPrice,\\n                cont.cType,\\n                additional.expireIn,\\n                additional.lastUpdated\\n            );\\n            fullData[i] = item;\\n        }\\n        return fullData;\\n    }\\n}\\n\",\"keccak256\":\"0x9a0c60fdb05d68840d7e9f0fad001bb43674d6e12fc0907c6bfdf9506b174b3e\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526013805460ff1916600117905534801561001d57600080fd5b50615f1f806200002e6000396000f3fe608060405234801561001057600080fd5b50600436106103485760003560e01c8063665bb078116101c9578063940f8a76116100ff578063c2202b66116100ad578063e18f03ad1161007c578063e18f03ad14610876578063f743f3191461087f578063fb24f76d14610892578063fc0c546a146108a557600080fd5b8063c2202b66146107d0578063ce6912a3146107f1578063d094fa8d14610804578063dc73ff5e1461083757600080fd5b8063940f8a76146107375780639b28d1a7146107575780639d078b98146107605780639d2040f0146107805780639f227c5314610793578063a1a99b91146107a6578063c19f40d2146107c757600080fd5b80637bed9600116101775780638bf14514116101465780638bf14514146106f5578063922ca77e14610708578063927831b41461071b57806393520a801461072e57600080fd5b80637bed96001461068e5780638201bf26146106bc578063872a60ad146106cf578063879613ae146106e257600080fd5b8063665bb0781461061357806367d04cc41461062657806369f8dfff146106395780636bb4d9021461064c5780636eb5a7f414610655578063704b6c021461066857806377ec78261461067b57600080fd5b806328cceb241161029e57806351bf120c1161024c5780635dbab6ed1161021b5780635dbab6ed146105a2578063619a635e146105b557806363a9b098146105c8578063647846a5146105e857600080fd5b806351bf120c146105605780635402c9c11461057357806355091dad1461058657806355a757d01461059957600080fd5b806328cceb2414610497578063367fd074146104b7578063390c991e146104ca57806344fea1b9146104dd5780634e1f2e76146104f05780634ec7b429146105375780634f88de011461054057600080fd5b8063144fa6d7116102fb578063144fa6d7146103e85780631565f50e146103fb5780631a440de61461040e5780631d5a1731146104215780631f7f63c01461043457806320988cef14610462578063252b1b871461046c57600080fd5b8062c73e4d1461034d57806303bac12a146103735780630534cc681461039057806305f2d8b0146103a55780630b9f6cfe146103b85780630c12252b146103cb5780630d9f9f0c146103d5575b600080fd5b61036061035b366004615a06565b6108b8565b6040519081526020015b60405180910390f35b6013546103809060ff1681565b604051901515815260200161036a565b6103a361039e36600461578e565b6109b8565b005b6103606103b3366004615a6f565b610d47565b6103606103c63660046158ec565b610ff0565b6103606203f48081565b6103a36103e3366004615a3d565b6111d5565b6103a36103f6366004615773565b611219565b6103a3610409366004615a3d565b6112bf565b6103a361041c366004615773565b611303565b6103a361042f366004615a21565b611364565b6104476104423660046158ec565b6113e0565b6040805182518152602092830151928101929092520161036a565b6103606201518081565b61036061047a3660046158b9565b601760209081526000928352604080842090915290825290205481565b6104aa6104a5366004615773565b61153c565b60405161036a9190615c4c565b6104aa6104c5366004615773565b611784565b6103a36104d8366004615a3d565b6119f5565b6103606104eb366004615773565b611a39565b6105226104fe3660046158ec565b60166020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161036a565b61036060145481565b61036061054e366004615a06565b60076020526000908152604090205481565b6104aa61056e366004615773565b611a57565b6103a3610581366004615916565b611c93565b6103a3610594366004615773565b611dbb565b61036060095481565b6104aa6105b0366004615773565b611f4e565b6103606105c3366004615773565b61218a565b6103606105d6366004615a06565b60066020526000908152604090205481565b6011546105fb906001600160a01b031681565b6040516001600160a01b03909116815260200161036a565b610380610621366004615773565b612360565b6103806106343660046158ec565b61236b565b6103606106473660046158b9565b61239a565b61036060125481565b6103a3610663366004615958565b61258e565b6103a3610676366004615773565b612867565b6104aa610689366004615773565b61290d565b61038061069c3660046158ec565b601060209081526000928352604080842090915290825290205460ff1681565b6103a36106ca366004615a06565b612b47565b600c546105fb906001600160a01b031681565b6103a36106f03660046159cc565b612c88565b6104aa610703366004615773565b612d86565b6103a3610716366004615a6f565b612fda565b6103606107293660046158ec565b61322a565b610360600b5481565b61074a610745366004615773565b613410565b60405161036a9190615b47565b610360600a5481565b61036061076e366004615a06565b60156020526000908152604090205481565b6103a361078e366004615a21565b613661565b6103a36107a1366004615a21565b613776565b6107b96107b4366004615773565b6138ff565b60405161036a929190615c9b565b61036060195481565b6107e36107de3660046158ec565b613bab565b60405161036a929190615c87565b6103606107ff366004615a06565b613fce565b610817610812366004615773565b61400d565b60408051948552602085019390935291830152606082015260800161036a565b610861610845366004615a3d565b6018602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161036a565b610360600e5481565b6104aa61088d366004615773565b61454f565b6103a36108a0366004615a3d565b614784565b600d546105fb906001600160a01b031681565b600080600860008460038111156108d1576108d1615eac565b60038111156108e2576108e2615eac565b815260200190815260200160002080549050905060006007600085600381111561090e5761090e615eac565b600381111561091f5761091f615eac565b815260200190815260200160002054905060005b828110156109b05761099c826008600088600381111561095557610955615eac565b600381111561096657610966615eac565b8152602001908152602001600020838154811061098557610985615ed8565b9060005260206000209060020201600101546147c8565b9150806109a881615e5b565b915050610933565b509392505050565b600d546001600160a01b031633146109eb5760405162461bcd60e51b81526004016109e290615c5f565b60405180910390fd5b60135460ff16156109ff576109ff836147fc565b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90610a34908590600401615c05565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190615a56565b905060005b8351811015610c565760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610ad457610ad4615ed8565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610b0957610b09615eac565b6003811115610b1a57610b1a615eac565b8152602001908152602001600020548152602001856003811115610b4057610b40615eac565b905281546001810183556000928352602092839020825180519394600690930290910192610b719284920190615507565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610bc457610bc4615eac565b021790555050506001600160a01b038516600090815260056020526040812054610bf090600190615dc6565b905060405180604001604052806201518042610c0c9190615d09565b8152426020918201526001600160a01b0388166000908152601682526040808220948252938252929092208151815591015160019091015580610c4e81615e5b565b915050610a89565b506001600160a01b038416600090815260056020526040902054610c7e9060019086906149d1565b8251600e6000828254610c919190615d09565b90915550508251600f6000846003811115610cae57610cae615eac565b6003811115610cbf57610cbf615eac565b81526020019081526020016000206000828254610cdc9190615d09565b909155505082516001600160a01b038516600090815260176020526040812090846003811115610d0e57610d0e615eac565b6003811115610d1f57610d1f615eac565b81526020019081526020016000206000828254610d3c9190615d09565b909155505050505050565b6000806060610d5733600261239a565b81600281518110610d6a57610d6a615ed8565b602002602001018181525050610d8133600161239a565b81600181518110610d9457610d94615ed8565b60200260200101818152505060005b8451811015610fe4576000858281518110610dc057610dc0615ed8565b60200260200101519050600060056000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610e0257610e02615ed8565b90600052602060002090600602016040518060c0016040529081600082018054610e2b90615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5790615e20565b8015610ea45780601f10610e7957610100808354040283529160200191610ea4565b820191906000526020600020905b815481529060010190602001808311610e8757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610ef357610ef3615eac565b6003811115610f0457610f04615eac565b8152505090506000848260a001516003811115610f2357610f23615eac565b81518110610f3357610f33615ed8565b6020026020010151601254610f489190615d68565b905060006305f5e100610f5b8382615dc6565b601560008660a001516003811115610f7557610f75615eac565b6003811115610f8657610f86615eac565b815260200190815260200160002054610f9f9190615d68565b610fa99190615d46565b905062015180610fb98b83615d68565b610fc39190615d46565b610fcd9088615d09565b96505050505080610fdd90615e5b565b9050610da3565b50909150505b92915050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561114257838290600052602060002090600602016040518060c001604052908160008201805461105690615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461108290615e20565b80156110cf5780601f106110a4576101008083540402835291602001916110cf565b820191906000526020600020905b8154815290600101906020018083116110b257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561111e5761111e615eac565b600381111561112f5761112f615eac565b8152505081526020019060010190611023565b50508251929350505080841061119a5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f7065720000000060448201526064016109e2565b60008285815181106111ae576111ae615ed8565b6020026020010151905060006111ca8683846040015142614a7a565b979650505050505050565b600d546001600160a01b03163314806111f85750600c546001600160a01b031633145b6112145760405162461bcd60e51b81526004016109e290615c5f565b600b55565b600d546001600160a01b031633148061123c5750600c546001600160a01b031633145b6112585760405162461bcd60e51b81526004016109e290615c5f565b6001600160a01b03811661129d5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016109e2565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806112e25750600c546001600160a01b031633145b6112fe5760405162461bcd60e51b81526004016109e290615c5f565b600a55565b600d546001600160a01b03163314806113265750600c546001600160a01b031633145b6113425760405162461bcd60e51b81526004016109e290615c5f565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806113875750600c546001600160a01b031633145b6113a35760405162461bcd60e51b81526004016109e290615c5f565b80600660008460038111156113ba576113ba615eac565b60038111156113cb576113cb615eac565b81526020810191909152604001600020555050565b60408051808201909152600080825260208201526001600160a01b0383166000908152601660209081526040808320858452825291829020825180840190935280548084526001909101549183019190915261143c5760145481525b6000805b60195481116114ca576000818152601860209081526040918290208251808401909352805480845260019091015460ff16151583830152908501511061148657506114ba565b60208101511515600114156114b357602084015181516114a69085615d09565b6114b09190615dc6565b92505b5160208401525b6114c381615e5b565b9050611440565b5060195460009081526018602052604090205442111561151e5760135460ff166115175760195460009081526018602052604090205461150a4283615d09565b6115149190615dc6565b90505b4260208301525b80826000018181516115309190615d09565b90525090949350505050565b606061154782614ab5565b61155f57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156116b457838290600052602060002090600602016040518060c00160405290816000820180546115c890615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546115f490615e20565b80156116415780601f1061161657610100808354040283529160200191611641565b820191906000526020600020905b81548152906001019060200180831161162457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561169057611690615eac565b60038111156116a1576116a1615eac565b8152505081526020019060010190611595565b5050505090506000815190506116c861558b565b60006116f1846000815181106116e0576116e0615ed8565b602002602001015160200151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785785818151811061172957611729615ed8565b6020026020010151935082826117428660200151614ad2565b60405160200161175493929190615b04565b6040516020818303038152906040529250808061177090615e5b565b91505061170f565b50909695505050505050565b606061178f82614ab5565b6117a757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156118fc57838290600052602060002090600602016040518060c001604052908160008201805461181090615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461183c90615e20565b80156118895780601f1061185e57610100808354040283529160200191611889565b820191906000526020600020905b81548152906001019060200180831161186c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156118d8576118d8615eac565b60038111156118e9576118e9615eac565b81525050815260200190600101906117dd565b505082519293504291506000905061195261194d8286818761192057611920615ed8565b60200260200101518760008151811061193b5761193b615ed8565b60200260200101516040015186614a7a565b614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785782826119bf61194d848a868151811061199357611993615ed8565b60200260200101518b87815181106119ad576119ad615ed8565b6020026020010151604001518a614a7a565b6040516020016119d193929190615b04565b604051602081830303815290604052925080806119ed90615e5b565b915050611970565b600d546001600160a01b0316331480611a185750600c546001600160a01b031633145b611a345760405162461bcd60e51b81526004016109e290615c5f565b600955565b6001600160a01b038116600090815260026020526040812054610fea565b6060611a6282614ab5565b611a7a57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611bcf57838290600052602060002090600602016040518060c0016040529081600082018054611ae390615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0f90615e20565b8015611b5c5780601f10611b3157610100808354040283529160200191611b5c565b820191906000526020600020905b815481529060010190602001808311611b3f57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611bab57611bab615eac565b6003811115611bbc57611bbc615eac565b8152505081526020019060010190611ab0565b505050509050600081519050611be361558b565b6000611c0c84600081518110611bfb57611bfb615ed8565b602002602001015160400151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110611c4457611c44615ed8565b602002602001015193508282611c5d8660400151614ad2565b604051602001611c6f93929190615b04565b60405160208183030381529060405292508080611c8b90615e5b565b915050611c2a565b600d546001600160a01b0316331480611cb65750600c546001600160a01b031633145b611cd25760405162461bcd60e51b81526004016109e290615c5f565b601180546001600160a01b0319166001600160a01b0396909616959095179094556012929092557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d5560145560408051808201909152428152600160208083019182526000808052601890915291517f999d26de3473317ead3eeaf34ca78057f1439db67b6953469c3c96ce9caf6bd755517f999d26de3473317ead3eeaf34ca78057f1439db67b6953469c3c96ce9caf6bd8805460ff1916911515919091179055601955565b600d546001600160a01b0316331480611dde5750600c546001600160a01b031633145b611dfa5760405162461bcd60e51b81526004016109e290615c5f565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e3e57600080fd5b505afa158015611e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e769190615a56565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe91906159e9565b611f4a5760405162461bcd60e51b815260206004820152601b60248201527f4d4f4e54485f4645455f57495448445241573a20494e56414c4944000000000060448201526064016109e2565b5050565b6060611f5982614ab5565b611f7157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156120c657838290600052602060002090600602016040518060c0016040529081600082018054611fda90615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461200690615e20565b80156120535780601f1061202857610100808354040283529160200191612053565b820191906000526020600020905b81548152906001019060200180831161203657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156120a2576120a2615eac565b60038111156120b3576120b3615eac565b8152505081526020019060010190611fa7565b5050505090506000815190506120da61558b565b6000612103846000815181106120f2576120f2615ed8565b602002602001015160600151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785785818151811061213b5761213b615ed8565b6020026020010151935082826121548660600151614ad2565b60405160200161216693929190615b04565b6040516020818303038152906040529250808061218290615e5b565b915050612121565b600061219582614ab5565b6121a157506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156122f357838290600052602060002090600602016040518060c001604052908160008201805461220790615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461223390615e20565b80156122805780601f1061225557610100808354040283529160200191612280565b820191906000526020600020905b81548152906001019060200180831161226357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156122cf576122cf615eac565b60038111156122e0576122e0615eac565b81525050815260200190600101906121d4565b5050825192935060009150505b8181101561235657600083828151811061231c5761231c615ed8565b602002602001015190506123368282836040015142614a7a565b6123409086615d09565b945050808061234e90615e5b565b915050612300565b5091949350505050565b6000610fea82614ab5565b60008061237884846113e0565b90504281600001511015612390576001915050610fea565b5060009392505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156124ec57838290600052602060002090600602016040518060c001604052908160008201805461240090615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461242c90615e20565b80156124795780601f1061244e57610100808354040283529160200191612479565b820191906000526020600020905b81548152906001019060200180831161245c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156124c8576124c8615eac565b60038111156124d9576124d9615eac565b81525050815260200190600101906123cd565b505050509050600080600090505b82518110156125855784600381111561251557612515615eac565b83828151811061252757612527615ed8565b602002602001015160a00151600381111561254457612544615eac565b1461254e57612575565b600061255a87836113e0565b9050428160000151106125735761257083615e5b565b92505b505b61257e81615e5b565b90506124fa565b50949350505050565b600054610100900460ff166125a95760005460ff16156125ad565b303b155b6126105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109e2565b600054610100900460ff16158015612632576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b60038110156128305786818151811061265f5761265f615ed8565b60200260200101516006600083600381111561267d5761267d615eac565b600381111561268e5761268e615eac565b600381111561269f5761269f615eac565b8152602001908152602001600020819055508581815181106126c3576126c3615ed8565b6020026020010151600760008360038111156126e1576126e1615eac565b60038111156126f2576126f2615eac565b600381111561270357612703615eac565b8152602001908152602001600020819055506000600f600083600381111561272d5761272d615eac565b600381111561273e5761273e615eac565b600381111561274f5761274f615eac565b8152602001908152602001600020819055506008600082600381111561277757612777615eac565b600381111561278857612788615eac565b600381111561279957612799615eac565b815260200152600860008260038111156127b5576127b5615eac565b60038111156127c6576127c6615eac565b60038111156127d7576127d7615eac565b81526020808201929092526040908101600090812082518084019093528583528284018281528154600181810184559284529490922092516002909402909201928355519101558061282881615e5b565b915050612644565b50506009839055600c80546001600160a01b03191633179055600b8290558015612860576000805461ff00191690555b5050505050565b600d546001600160a01b031633148061288a5750600c546001600160a01b031633145b6128a65760405162461bcd60e51b81526004016109e290615c5f565b6001600160a01b0381166128eb5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016109e2565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606061291882614ab5565b61293057505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612a8557838290600052602060002090600602016040518060c001604052908160008201805461299990615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546129c590615e20565b8015612a125780601f106129e757610100808354040283529160200191612a12565b820191906000526020600020905b8154815290600101906020018083116129f557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612a6157612a61615eac565b6003811115612a7257612a72615eac565b8152505081526020019060010190612966565b505050509050600081519050612a9961558b565b6000612ac161194d85600081518110612ab457612ab4615ed8565b6020026020010151614bf2565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110612af957612af9615ed8565b602002602001015193508282612b1161194d87614bf2565b604051602001612b2393929190615b04565b60405160208183030381529060405292508080612b3f90615e5b565b915050612adf565b600d546001600160a01b0316331480612b6a5750600c546001600160a01b031633145b612b865760405162461bcd60e51b81526004016109e290615c5f565b600060086000836003811115612b9e57612b9e615eac565b6003811115612baf57612baf615eac565b8152602081019190915260400160002054905060018111612c225760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b60648201526084016109e2565b60086000836003811115612c3857612c38615eac565b6003811115612c4957612c49615eac565b8152602001908152602001600020805480612c6657612c66615ec2565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b0316331480612cab5750600c546001600160a01b031633145b612cc75760405162461bcd60e51b81526004016109e290615c5f565b60135460ff1615158115151415612d205760405162461bcd60e51b815260206004820152601960248201527f4d4f4e54485f4645453a20494e56414c4944205354415455530000000000000060448201526064016109e2565b6013805460ff191682151517905560198054906000612d3e83615e5b565b90915550506040805180820182524281529115156020808401918252601954600090815260189091529190912091518255516001909101805460ff1916911515919091179055565b6060612d9182614ab5565b612da957505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612efe57838290600052602060002090600602016040518060c0016040529081600082018054612e1290615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054612e3e90615e20565b8015612e8b5780601f10612e6057610100808354040283529160200191612e8b565b820191906000526020600020905b815481529060010190602001808311612e6e57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612eda57612eda615eac565b6003811115612eeb57612eeb615eac565b8152505081526020019060010190612ddf565b505050509050600081519050612f1261558b565b6000612f4784600081518110612f2a57612f2a615ed8565b602002602001015160a00151600381111561194d5761194d615eac565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110612f7f57612f7f615ed8565b602002602001015193508282612fa48660a00151600381111561194d5761194d615eac565b604051602001612fb693929190615b04565b60405160208183030381529060405292508080612fd290615e5b565b915050612f65565b62015180821480612fed57506203f48082145b6130395760405162461bcd60e51b815260206004820152601960248201527f4d4f4e54485f4645453a204e6f742076616c69642074696d650000000000000060448201526064016109e2565b60006130458383610d47565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561309857600080fd5b505af11580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d091906159e9565b6131135760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b60448201526064016109e2565b60005b82518110156132245760006131443385848151811061313757613137615ed8565b60200260200101516113e0565b905042816000015110156131a65760405162461bcd60e51b8152602060048201526024808201527f4d4f4e54485f4645453a20436f6e747261637420686173206265656e206578706044820152631a5c995960e21b60648201526084016109e2565b84816000018181516131b89190615d09565b9052504260208083019190915233600090815260169091526040812085518392908790869081106131eb576131eb615ed8565b602090810291909101810151825281810192909252604001600020825181559101516001909101555061321d81615e5b565b9050613116565b50505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561337c57838290600052602060002090600602016040518060c001604052908160008201805461329090615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546132bc90615e20565b80156133095780601f106132de57610100808354040283529160200191613309565b820191906000526020600020905b8154815290600101906020018083116132ec57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561335857613358615eac565b600381111561336957613369615eac565b815250508152602001906001019061325d565b5050825192935050508084106133d45760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f7065720000000060448201526064016109e2565b60008285815181106133e8576133e8615ed8565b60200260200101519050613406858283602001518460400151614a7a565b9695505050505050565b606080600060056000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561357957838290600052602060002090600602016040518060c001604052908160008201805461348d90615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546134b990615e20565b80156135065780601f106134db57610100808354040283529160200191613506565b820191906000526020600020905b8154815290600101906020018083116134e957829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561355557613555615eac565b600381111561356657613566615eac565b815250508152602001906001019061345a565b50505050905060005b815181101561365857600082828151811061359f5761359f615ed8565b6020026020010151905060006135b587846113e0565b9050600060405180610100016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561360d5761360d615eac565b815260200183600001518152602001836020015181525090508086858151811061363957613639615ed8565b60200260200101819052505050508061365190615e5b565b9050613582565b50909392505050565b600d546001600160a01b03163314806136845750600c546001600160a01b031633145b6136a05760405162461bcd60e51b81526004016109e290615c5f565b6305f5e10081126137045760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b60648201526084016109e2565b6008600083600381111561371a5761371a615eac565b600381111561372b5761372b615eac565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b03163314806137995750600c546001600160a01b031633145b6137b55760405162461bcd60e51b81526004016109e290615c5f565b80600760008460038111156137cc576137cc615eac565b60038111156137dd576137dd615eac565b81526020019081526020016000208190555060006008600084600381111561380757613807615eac565b600381111561381857613818615eac565b815260200190815260200160002060008154811061383857613838615ed8565b90600052602060002090600202016000015490506008600084600381111561386257613862615eac565b600381111561387357613873615eac565b8152602001908152602001600020600061388d91906155d1565b600860008460038111156138a3576138a3615eac565b60038111156138b4576138b4615eac565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b6000606061390c83614ab5565b6139285750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015613a7d57838290600052602060002090600602016040518060c001604052908160008201805461399190615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546139bd90615e20565b8015613a0a5780601f106139df57610100808354040283529160200191613a0a565b820191906000526020600020905b8154815290600101906020018083116139ed57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613a5957613a59615eac565b6003811115613a6a57613a6a615eac565b815250508152602001906001019061395e565b5050825192935060009150613ae8905081848185613a9d57613a9d615ed8565b602002602001015185600081518110613ab857613ab8615ed8565b60200260200101516020015186600081518110613ad757613ad7615ed8565b602002602001015160400151614a7a565b9050809450613af681614ad2565b604080518082019091526001808252602360f81b6020830152919550905b83811015613ba1576000858281518110613b3057613b30615ed8565b602002602001015190506000613b50838384602001518560400151614a7a565b9050613b5c818a615d09565b98508784613b6983614ad2565b604051602001613b7b93929190615b04565b604051602081830303815290604052975050508080613b9990615e5b565b915050613b14565b5050505050915091565b600d5460009081906001600160a01b03163314613bda5760405162461bcd60e51b81526004016109e290615c5f565b60135460ff1615613bef57613bef8484614bfe565b6001600160a01b038416600090815260056020526040902080548410613c4b5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b60448201526064016109e2565b6000818581548110613c5f57613c5f615ed8565b90600052602060002090600602019050613c7c8160020154615050565b613cee5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e00000000000060648201526084016109e2565b60004290506000613dfc87846040518060c0016040529081600082018054613d1590615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054613d4190615e20565b8015613d8e5780601f10613d6357610100808354040283529160200191613d8e565b820191906000526020600020905b815481529060010190602001808311613d7157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613ddd57613ddd615eac565b6003811115613dee57613dee615eac565b905250600286015485614a7a565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16613fb757613f3887846040518060c0016040529081600082018054613e5190615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054613e7d90615e20565b8015613eca5780601f10613e9f57610100808354040283529160200191613eca565b820191906000526020600020905b815481529060010190602001808311613ead57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613f1957613f19615eac565b6003811115613f2a57613f2a615eac565b905250600186015442614a7a565b836004015411613fb7576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92613fae9260ff9190911691615c13565b60405180910390a15b6005909201549194505060ff169150509250929050565b6000600f6000836003811115613fe657613fe6615eac565b6003811115613ff757613ff7615eac565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b031633146140405760405162461bcd60e51b81526004016109e290615c5f565b60135460ff161561405457614054856147fc565b6001600160a01b03851660009081526005602052604090208054806140d35760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b60648201526084016109e2565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b8581101561447f5786818154811061412557614125615ed8565b90600052602060002090600602019450600061423e82876040518060c001604052908160008201805461415790615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461418390615e20565b80156141d05780601f106141a5576101008083540402835291602001916141d0565b820191906000526020600020905b8154815290600101906020018083116141b357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561421f5761421f615eac565b600381111561423057614230615eac565b905250600289015442614a7a565b905061424a8186615d09565b60058701549095508190859060ff16600381111561426a5761426a615eac565b60ff166003811061427d5761427d615ed8565b6020020181815161428e9190615d09565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff161580156143d557506143cd82876040518060c00160405290816000820180546142e690615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461431290615e20565b801561435f5780601f106143345761010080835404028352916020019161435f565b820191906000526020600020905b81548152906001019060200180831161434257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156143ae576143ae615eac565b60038111156143bf576143bf615eac565b905250600189015442614a7a565b866004015411155b1561446c576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561442157614421615eac565b9050838160ff166003811061443857614438615ed8565b6020020151614448906001615d21565b848260ff166003811061445d5761445d615ed8565b60ff9092166020929092020152505b508061447781615e5b565b91505061410b565b5060005b60038160ff16101561452d576000828260ff16600381106144a6576144a6615ed8565b602002015160ff16111561451b577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156144ea576144ea615eac565b838360ff16600381106144ff576144ff615ed8565b6020020151604051614512929190615c2e565b60405180910390a15b8061452581615e76565b915050614483565b505080516020820151604090920151929b909a50909850909650945050505050565b606061455a82614ab5565b61457257505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156146c757838290600052602060002090600602016040518060c00160405290816000820180546145db90615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461460790615e20565b80156146545780601f1061462957610100808354040283529160200191614654565b820191906000526020600020905b81548152906001019060200180831161463757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156146a3576146a3615eac565b60038111156146b4576146b4615eac565b81525050815260200190600101906145a8565b5050505090506000815190506146db61558b565b6000836000815181106146f0576146f0615ed8565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156117785785818151811061473d5761473d615ed8565b602002602001015193508282856000015160405160200161476093929190615b04565b6040516020818303038152906040529250808061477c90615e5b565b915050614723565b600d546001600160a01b03163314806147a75750600c546001600160a01b031633145b6147c35760405162461bcd60e51b81526004016109e290615c5f565b601255565b6000806147d9836305f5e100615d87565b90506305f5e1006147ea8286615d68565b6147f49190615d46565b949350505050565b6001600160a01b038116600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561495157838290600052602060002090600602016040518060c001604052908160008201805461486590615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461489190615e20565b80156148de5780601f106148b3576101008083540402835291602001916148de565b820191906000526020600020905b8154815290600101906020018083116148c157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561492d5761492d615eac565b600381111561493e5761493e615eac565b8152505081526020019060010190614832565b505050509050805160001415614965575050565b6000600182516149759190615dc6565b905060005b8251811015613224578181111561499057613224565b61499a8482614bfe565b6001600160a01b0384166000908152600560205260409020546149bf90600190615dc6565b91506149ca81615e5b565b905061497a565b6001600160a01b038216600090815260038401602052604090205460ff1615614a16576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b60135460009060ff168015614a945750614a94338661236b565b15614aa1575060006147f4565b614aac848484615069565b95945050505050565b6001600160a01b0316600090815260026020526040902054151590565b606081614af65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614b205780614b0a81615e5b565b9150614b199050600a83615d46565b9150614afa565b60008167ffffffffffffffff811115614b3b57614b3b615eee565b6040519080825280601f01601f191660200182016040528015614b65576020820181803683370190505b509050815b851561258557614b7b600182615dc6565b90506000614b8a600a88615d46565b614b9590600a615d68565b614b9f9088615dc6565b614baa906030615d21565b905060008160f81b905080848481518110614bc757614bc7615ed8565b60200101906001600160f81b031916908160001a905350614be9600a89615d46565b97505050614b6a565b6000610fea8242615368565b6000614c0a83836113e0565b905042816000015110614c4b576001600160a01b03909216600090815260166020908152604080832093835292815291902082518155910151600190910155565b6001600160a01b0383166000908152600560205260408120805484908110614c7557614c75615ed8565b90600052602060002090600602016040518060c0016040529081600082018054614c9e90615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054614cca90615e20565b8015614d175780601f10614cec57610100808354040283529160200191614d17565b820191906000526020600020905b815481529060010190602001808311614cfa57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115614d6657614d66615eac565b6003811115614d7757614d77615eac565b9052506001600160a01b03851660009081526005602052604081205491925090614da390600190615dc6565b6001600160a01b038616600090815260056020526040902080549192509082908110614dd157614dd1615ed8565b906000526020600020906006020160056000876001600160a01b03166001600160a01b031681526020019081526020016000208581548110614e1557614e15615ed8565b90600052602060002090600602016000820181600001908054614e3790615e20565b614e429291906155f5565b5060018281015482820155600280840154908301556003808401548184015560048085015490840155600580850154908401805460ff90921693909260ff19909216918490811115614e9657614e96615eac565b021790555050506001600160a01b03851660008181526016602090815260408083208584528252808320888452818420815481556001918201549101559282526005905220805480614eea57614eea615ec2565b60008281526020812060001990920191600683020190614f0a8282615670565b50600060018281018290556002830182905560038301829055600483018290556005928301805460ff19169055929093556001600160a01b038816808452601660209081526040808620878752825280862086815585018690559185529190915290912054614f7b919087906149d1565b6001600e6000828254614f8e9190615dc6565b925050819055506001600f60008460a001516003811115614fb157614fb1615eac565b6003811115614fc257614fc2615eac565b81526020019081526020016000206000828254614fdf9190615dc6565b90915550506001600160a01b038516600090815260176020526040812060a084015160019290600381111561501657615016615eac565b600381111561502757615027615eac565b815260200190815260200160002060008282546150449190615dc6565b90915550505050505050565b600042600954836150619190615d09565b111592915050565b6000818311156150b25760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b60448201526064016109e2565b83602001518310156150f95760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b60448201526064016109e2565b60a0840151600061510a8286615412565b905060006151188386615412565b6080880151909150600061512c8989615368565b60208a01516000975090915088908790819081885b8881101561529457600860008c600381111561515f5761515f615eac565b600381111561517057615170615eac565b8152602001908152602001600020818154811061518f5761518f615ed8565b90600052602060002090600202016000015494506151ad86846154ed565b6151b786856154ed565b14801592506151ef576151ca86846154ed565b6151d5906001615d09565b600a546151e29190615d68565b6151ec9084615d09565b94505b6151f98686615dc6565b93508495506301e13380846305f5e100898b6152159190615d68565b61521f9190615d46565b6152299190615d68565b6152339190615d46565b61523d908d615d09565b9b5081156152655761525187600b546147c8565b96508061525d81615e09565b915050615282565b61527f87600860008e600381111561095557610955615eac565b96505b8061528c81615e5b565b915050615141565b505b8b8514615356578b93506152aa85836154ed565b6152b485846154ed565b14801591506152ec576152c785836154ed565b6152d2906001615d09565b600a546152df9190615d68565b6152e99083615d09565b93505b6152f68585615dc6565b92508394506301e13380836305f5e100888a6153129190615d68565b61531c9190615d46565b6153269190615d68565b6153309190615d46565b61533a908c615d09565b9a5080156153515761534e86600b546147c8565b95505b615296565b505050505050505050505b9392505050565b602082015160a083015160608401516000929190836153878385615412565b905060006153958488615412565b9050815b818110156153cf576153bb846008600088600381111561095557610955615eac565b9350806153c781615e5b565b915050615399565b5060006153dc88876154ed565b90505b801561540557806153ef81615e09565b9150506153fe84600b546147c8565b93506153df565b5091979650505050505050565b6000808060088186600381111561542b5761542b615eac565b600381111561543c5761543c615eac565b815260208101919091526040016000205490505b818111156109b057600060026154668385615d09565b6154709190615d46565b9050846008600088600381111561548957615489615eac565b600381111561549a5761549a615eac565b815260200190815260200160002082815481106154b9576154b9615ed8565b90600052602060002090600202016000015410156154e3576154dc816001615d09565b92506154e7565b8091505b50615450565b600a546000906154fd8385615dc6565b6153619190615d46565b82805461551390615e20565b90600052602060002090601f016020900481019282615535576000855561557b565b82601f1061554e57805160ff191683800117855561557b565b8280016001018555821561557b579182015b8281111561557b578251825591602001919060010190615560565b506155879291506156a6565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156155cc576155cc615eac565b905290565b50805460008255600202906000526020600020908101906155f291906156bb565b50565b82805461560190615e20565b90600052602060002090601f016020900481019282615623576000855561557b565b82601f10615634578054855561557b565b8280016001018555821561557b57600052602060002091601f016020900482015b8281111561557b578254825591600101919060010190615655565b50805461567c90615e20565b6000825580601f1061568c575050565b601f0160209004906000526020600020908101906155f291905b5b8082111561558757600081556001016156a7565b5b8082111561558757600080825560018201556002016156bc565b80356001600160a01b03811681146156ed57600080fd5b919050565b600082601f83011261570357600080fd5b8135602061571861571383615ce5565b615cb4565b80838252828201915082860187848660051b890101111561573857600080fd5b60005b858110156157575781358452928401929084019060010161573b565b5090979650505050505050565b8035600481106156ed57600080fd5b60006020828403121561578557600080fd5b615361826156d6565b6000806000606084860312156157a357600080fd5b6157ac846156d6565b925060208085013567ffffffffffffffff808211156157ca57600080fd5b818701915087601f8301126157de57600080fd5b81356157ec61571382615ce5565b8082825285820191508585018b878560051b880101111561580c57600080fd5b60005b848110156158995781358681111561582657600080fd5b8701603f81018e1361583757600080fd5b888101358781111561584b5761584b615eee565b61585d601f8201601f19168b01615cb4565b8181528f604083850101111561587257600080fd5b81604084018c83013760009181018b0191909152855250928701929087019060010161580f565b50508097505050505050506158b060408501615764565b90509250925092565b600080604083850312156158cc57600080fd5b6158d5836156d6565b91506158e360208401615764565b90509250929050565b600080604083850312156158ff57600080fd5b615908836156d6565b946020939093013593505050565b600080600080600060a0868803121561592e57600080fd5b615937866156d6565b97602087013597506040870135966060810135965060800135945092505050565b6000806000806080858703121561596e57600080fd5b843567ffffffffffffffff8082111561598657600080fd5b615992888389016156f2565b955060208701359150808211156159a857600080fd5b506159b5878288016156f2565b949794965050505060408301359260600135919050565b6000602082840312156159de57600080fd5b813561536181615f04565b6000602082840312156159fb57600080fd5b815161536181615f04565b600060208284031215615a1857600080fd5b61536182615764565b60008060408385031215615a3457600080fd5b61590883615764565b600060208284031215615a4f57600080fd5b5035919050565b600060208284031215615a6857600080fd5b5051919050565b60008060408385031215615a8257600080fd5b82359150602083013567ffffffffffffffff811115615aa057600080fd5b615aac858286016156f2565b9150509250929050565b60048110615ad457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452615af0816020860160208601615ddd565b601f01601f19169290920160200192915050565b60008451615b16818460208901615ddd565b845190830190615b2a818360208901615ddd565b8451910190615b3d818360208801615ddd565b0195945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015615bf757603f1989840301855281516101008151818652615b9582870182615ad8565b915050888201518986015287820151888601526060808301518187015250608080830151818701525060a080830151615bd082880182615ab6565b505060c0828101519086015260e09182015191909401529386019390860190600101615b6e565b509098975050505050505050565b60208101610fea8284615ab6565b60408101615c218285615ab6565b8260208301529392505050565b60408101615c3c8285615ab6565b60ff831660208301529392505050565b6020815260006153616020830184615ad8565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b828152604081016153616020830184615ab6565b8281526040602082015260006147f46040830184615ad8565b604051601f8201601f1916810167ffffffffffffffff81118282101715615cdd57615cdd615eee565b604052919050565b600067ffffffffffffffff821115615cff57615cff615eee565b5060051b60200190565b60008219821115615d1c57615d1c615e96565b500190565b600060ff821660ff84168060ff03821115615d3e57615d3e615e96565b019392505050565b600082615d6357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615d8257615d82615e96565b500290565b60008083128015600160ff1b850184121615615da557615da5615e96565b6001600160ff1b0384018313811615615dc057615dc0615e96565b50500390565b600082821015615dd857615dd8615e96565b500390565b60005b83811015615df8578181015183820152602001615de0565b838111156132245750506000910152565b600081615e1857615e18615e96565b506000190190565b600181811c90821680615e3457607f821691505b60208210811415615e5557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615e6f57615e6f615e96565b5060010190565b600060ff821660ff811415615e8d57615e8d615e96565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146155f257600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103485760003560e01c8063665bb078116101c9578063940f8a76116100ff578063c2202b66116100ad578063e18f03ad1161007c578063e18f03ad14610876578063f743f3191461087f578063fb24f76d14610892578063fc0c546a146108a557600080fd5b8063c2202b66146107d0578063ce6912a3146107f1578063d094fa8d14610804578063dc73ff5e1461083757600080fd5b8063940f8a76146107375780639b28d1a7146107575780639d078b98146107605780639d2040f0146107805780639f227c5314610793578063a1a99b91146107a6578063c19f40d2146107c757600080fd5b80637bed9600116101775780638bf14514116101465780638bf14514146106f5578063922ca77e14610708578063927831b41461071b57806393520a801461072e57600080fd5b80637bed96001461068e5780638201bf26146106bc578063872a60ad146106cf578063879613ae146106e257600080fd5b8063665bb0781461061357806367d04cc41461062657806369f8dfff146106395780636bb4d9021461064c5780636eb5a7f414610655578063704b6c021461066857806377ec78261461067b57600080fd5b806328cceb241161029e57806351bf120c1161024c5780635dbab6ed1161021b5780635dbab6ed146105a2578063619a635e146105b557806363a9b098146105c8578063647846a5146105e857600080fd5b806351bf120c146105605780635402c9c11461057357806355091dad1461058657806355a757d01461059957600080fd5b806328cceb2414610497578063367fd074146104b7578063390c991e146104ca57806344fea1b9146104dd5780634e1f2e76146104f05780634ec7b429146105375780634f88de011461054057600080fd5b8063144fa6d7116102fb578063144fa6d7146103e85780631565f50e146103fb5780631a440de61461040e5780631d5a1731146104215780631f7f63c01461043457806320988cef14610462578063252b1b871461046c57600080fd5b8062c73e4d1461034d57806303bac12a146103735780630534cc681461039057806305f2d8b0146103a55780630b9f6cfe146103b85780630c12252b146103cb5780630d9f9f0c146103d5575b600080fd5b61036061035b366004615a06565b6108b8565b6040519081526020015b60405180910390f35b6013546103809060ff1681565b604051901515815260200161036a565b6103a361039e36600461578e565b6109b8565b005b6103606103b3366004615a6f565b610d47565b6103606103c63660046158ec565b610ff0565b6103606203f48081565b6103a36103e3366004615a3d565b6111d5565b6103a36103f6366004615773565b611219565b6103a3610409366004615a3d565b6112bf565b6103a361041c366004615773565b611303565b6103a361042f366004615a21565b611364565b6104476104423660046158ec565b6113e0565b6040805182518152602092830151928101929092520161036a565b6103606201518081565b61036061047a3660046158b9565b601760209081526000928352604080842090915290825290205481565b6104aa6104a5366004615773565b61153c565b60405161036a9190615c4c565b6104aa6104c5366004615773565b611784565b6103a36104d8366004615a3d565b6119f5565b6103606104eb366004615773565b611a39565b6105226104fe3660046158ec565b60166020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161036a565b61036060145481565b61036061054e366004615a06565b60076020526000908152604090205481565b6104aa61056e366004615773565b611a57565b6103a3610581366004615916565b611c93565b6103a3610594366004615773565b611dbb565b61036060095481565b6104aa6105b0366004615773565b611f4e565b6103606105c3366004615773565b61218a565b6103606105d6366004615a06565b60066020526000908152604090205481565b6011546105fb906001600160a01b031681565b6040516001600160a01b03909116815260200161036a565b610380610621366004615773565b612360565b6103806106343660046158ec565b61236b565b6103606106473660046158b9565b61239a565b61036060125481565b6103a3610663366004615958565b61258e565b6103a3610676366004615773565b612867565b6104aa610689366004615773565b61290d565b61038061069c3660046158ec565b601060209081526000928352604080842090915290825290205460ff1681565b6103a36106ca366004615a06565b612b47565b600c546105fb906001600160a01b031681565b6103a36106f03660046159cc565b612c88565b6104aa610703366004615773565b612d86565b6103a3610716366004615a6f565b612fda565b6103606107293660046158ec565b61322a565b610360600b5481565b61074a610745366004615773565b613410565b60405161036a9190615b47565b610360600a5481565b61036061076e366004615a06565b60156020526000908152604090205481565b6103a361078e366004615a21565b613661565b6103a36107a1366004615a21565b613776565b6107b96107b4366004615773565b6138ff565b60405161036a929190615c9b565b61036060195481565b6107e36107de3660046158ec565b613bab565b60405161036a929190615c87565b6103606107ff366004615a06565b613fce565b610817610812366004615773565b61400d565b60408051948552602085019390935291830152606082015260800161036a565b610861610845366004615a3d565b6018602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161036a565b610360600e5481565b6104aa61088d366004615773565b61454f565b6103a36108a0366004615a3d565b614784565b600d546105fb906001600160a01b031681565b600080600860008460038111156108d1576108d1615eac565b60038111156108e2576108e2615eac565b815260200190815260200160002080549050905060006007600085600381111561090e5761090e615eac565b600381111561091f5761091f615eac565b815260200190815260200160002054905060005b828110156109b05761099c826008600088600381111561095557610955615eac565b600381111561096657610966615eac565b8152602001908152602001600020838154811061098557610985615ed8565b9060005260206000209060020201600101546147c8565b9150806109a881615e5b565b915050610933565b509392505050565b600d546001600160a01b031633146109eb5760405162461bcd60e51b81526004016109e290615c5f565b60405180910390fd5b60135460ff16156109ff576109ff836147fc565b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d90610a34908590600401615c05565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190615a56565b905060005b8351811015610c565760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610ad457610ad4615ed8565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610b0957610b09615eac565b6003811115610b1a57610b1a615eac565b8152602001908152602001600020548152602001856003811115610b4057610b40615eac565b905281546001810183556000928352602092839020825180519394600690930290910192610b719284920190615507565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610bc457610bc4615eac565b021790555050506001600160a01b038516600090815260056020526040812054610bf090600190615dc6565b905060405180604001604052806201518042610c0c9190615d09565b8152426020918201526001600160a01b0388166000908152601682526040808220948252938252929092208151815591015160019091015580610c4e81615e5b565b915050610a89565b506001600160a01b038416600090815260056020526040902054610c7e9060019086906149d1565b8251600e6000828254610c919190615d09565b90915550508251600f6000846003811115610cae57610cae615eac565b6003811115610cbf57610cbf615eac565b81526020019081526020016000206000828254610cdc9190615d09565b909155505082516001600160a01b038516600090815260176020526040812090846003811115610d0e57610d0e615eac565b6003811115610d1f57610d1f615eac565b81526020019081526020016000206000828254610d3c9190615d09565b909155505050505050565b6000806060610d5733600261239a565b81600281518110610d6a57610d6a615ed8565b602002602001018181525050610d8133600161239a565b81600181518110610d9457610d94615ed8565b60200260200101818152505060005b8451811015610fe4576000858281518110610dc057610dc0615ed8565b60200260200101519050600060056000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610e0257610e02615ed8565b90600052602060002090600602016040518060c0016040529081600082018054610e2b90615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5790615e20565b8015610ea45780601f10610e7957610100808354040283529160200191610ea4565b820191906000526020600020905b815481529060010190602001808311610e8757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610ef357610ef3615eac565b6003811115610f0457610f04615eac565b8152505090506000848260a001516003811115610f2357610f23615eac565b81518110610f3357610f33615ed8565b6020026020010151601254610f489190615d68565b905060006305f5e100610f5b8382615dc6565b601560008660a001516003811115610f7557610f75615eac565b6003811115610f8657610f86615eac565b815260200190815260200160002054610f9f9190615d68565b610fa99190615d46565b905062015180610fb98b83615d68565b610fc39190615d46565b610fcd9088615d09565b96505050505080610fdd90615e5b565b9050610da3565b50909150505b92915050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561114257838290600052602060002090600602016040518060c001604052908160008201805461105690615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461108290615e20565b80156110cf5780601f106110a4576101008083540402835291602001916110cf565b820191906000526020600020905b8154815290600101906020018083116110b257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561111e5761111e615eac565b600381111561112f5761112f615eac565b8152505081526020019060010190611023565b50508251929350505080841061119a5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f7065720000000060448201526064016109e2565b60008285815181106111ae576111ae615ed8565b6020026020010151905060006111ca8683846040015142614a7a565b979650505050505050565b600d546001600160a01b03163314806111f85750600c546001600160a01b031633145b6112145760405162461bcd60e51b81526004016109e290615c5f565b600b55565b600d546001600160a01b031633148061123c5750600c546001600160a01b031633145b6112585760405162461bcd60e51b81526004016109e290615c5f565b6001600160a01b03811661129d5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016109e2565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806112e25750600c546001600160a01b031633145b6112fe5760405162461bcd60e51b81526004016109e290615c5f565b600a55565b600d546001600160a01b03163314806113265750600c546001600160a01b031633145b6113425760405162461bcd60e51b81526004016109e290615c5f565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806113875750600c546001600160a01b031633145b6113a35760405162461bcd60e51b81526004016109e290615c5f565b80600660008460038111156113ba576113ba615eac565b60038111156113cb576113cb615eac565b81526020810191909152604001600020555050565b60408051808201909152600080825260208201526001600160a01b0383166000908152601660209081526040808320858452825291829020825180840190935280548084526001909101549183019190915261143c5760145481525b6000805b60195481116114ca576000818152601860209081526040918290208251808401909352805480845260019091015460ff16151583830152908501511061148657506114ba565b60208101511515600114156114b357602084015181516114a69085615d09565b6114b09190615dc6565b92505b5160208401525b6114c381615e5b565b9050611440565b5060195460009081526018602052604090205442111561151e5760135460ff166115175760195460009081526018602052604090205461150a4283615d09565b6115149190615dc6565b90505b4260208301525b80826000018181516115309190615d09565b90525090949350505050565b606061154782614ab5565b61155f57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156116b457838290600052602060002090600602016040518060c00160405290816000820180546115c890615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546115f490615e20565b80156116415780601f1061161657610100808354040283529160200191611641565b820191906000526020600020905b81548152906001019060200180831161162457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561169057611690615eac565b60038111156116a1576116a1615eac565b8152505081526020019060010190611595565b5050505090506000815190506116c861558b565b60006116f1846000815181106116e0576116e0615ed8565b602002602001015160200151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785785818151811061172957611729615ed8565b6020026020010151935082826117428660200151614ad2565b60405160200161175493929190615b04565b6040516020818303038152906040529250808061177090615e5b565b91505061170f565b50909695505050505050565b606061178f82614ab5565b6117a757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156118fc57838290600052602060002090600602016040518060c001604052908160008201805461181090615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461183c90615e20565b80156118895780601f1061185e57610100808354040283529160200191611889565b820191906000526020600020905b81548152906001019060200180831161186c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156118d8576118d8615eac565b60038111156118e9576118e9615eac565b81525050815260200190600101906117dd565b505082519293504291506000905061195261194d8286818761192057611920615ed8565b60200260200101518760008151811061193b5761193b615ed8565b60200260200101516040015186614a7a565b614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785782826119bf61194d848a868151811061199357611993615ed8565b60200260200101518b87815181106119ad576119ad615ed8565b6020026020010151604001518a614a7a565b6040516020016119d193929190615b04565b604051602081830303815290604052925080806119ed90615e5b565b915050611970565b600d546001600160a01b0316331480611a185750600c546001600160a01b031633145b611a345760405162461bcd60e51b81526004016109e290615c5f565b600955565b6001600160a01b038116600090815260026020526040812054610fea565b6060611a6282614ab5565b611a7a57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611bcf57838290600052602060002090600602016040518060c0016040529081600082018054611ae390615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0f90615e20565b8015611b5c5780601f10611b3157610100808354040283529160200191611b5c565b820191906000526020600020905b815481529060010190602001808311611b3f57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611bab57611bab615eac565b6003811115611bbc57611bbc615eac565b8152505081526020019060010190611ab0565b505050509050600081519050611be361558b565b6000611c0c84600081518110611bfb57611bfb615ed8565b602002602001015160400151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110611c4457611c44615ed8565b602002602001015193508282611c5d8660400151614ad2565b604051602001611c6f93929190615b04565b60405160208183030381529060405292508080611c8b90615e5b565b915050611c2a565b600d546001600160a01b0316331480611cb65750600c546001600160a01b031633145b611cd25760405162461bcd60e51b81526004016109e290615c5f565b601180546001600160a01b0319166001600160a01b0396909616959095179094556012929092557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d5560145560408051808201909152428152600160208083019182526000808052601890915291517f999d26de3473317ead3eeaf34ca78057f1439db67b6953469c3c96ce9caf6bd755517f999d26de3473317ead3eeaf34ca78057f1439db67b6953469c3c96ce9caf6bd8805460ff1916911515919091179055601955565b600d546001600160a01b0316331480611dde5750600c546001600160a01b031633145b611dfa5760405162461bcd60e51b81526004016109e290615c5f565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e3e57600080fd5b505afa158015611e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e769190615a56565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe91906159e9565b611f4a5760405162461bcd60e51b815260206004820152601b60248201527f4d4f4e54485f4645455f57495448445241573a20494e56414c4944000000000060448201526064016109e2565b5050565b6060611f5982614ab5565b611f7157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156120c657838290600052602060002090600602016040518060c0016040529081600082018054611fda90615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461200690615e20565b80156120535780601f1061202857610100808354040283529160200191612053565b820191906000526020600020905b81548152906001019060200180831161203657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156120a2576120a2615eac565b60038111156120b3576120b3615eac565b8152505081526020019060010190611fa7565b5050505090506000815190506120da61558b565b6000612103846000815181106120f2576120f2615ed8565b602002602001015160600151614ad2565b604080518082019091526001808252602360f81b6020830152919250905b848110156117785785818151811061213b5761213b615ed8565b6020026020010151935082826121548660600151614ad2565b60405160200161216693929190615b04565b6040516020818303038152906040529250808061218290615e5b565b915050612121565b600061219582614ab5565b6121a157506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156122f357838290600052602060002090600602016040518060c001604052908160008201805461220790615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461223390615e20565b80156122805780601f1061225557610100808354040283529160200191612280565b820191906000526020600020905b81548152906001019060200180831161226357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156122cf576122cf615eac565b60038111156122e0576122e0615eac565b81525050815260200190600101906121d4565b5050825192935060009150505b8181101561235657600083828151811061231c5761231c615ed8565b602002602001015190506123368282836040015142614a7a565b6123409086615d09565b945050808061234e90615e5b565b915050612300565b5091949350505050565b6000610fea82614ab5565b60008061237884846113e0565b90504281600001511015612390576001915050610fea565b5060009392505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156124ec57838290600052602060002090600602016040518060c001604052908160008201805461240090615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461242c90615e20565b80156124795780601f1061244e57610100808354040283529160200191612479565b820191906000526020600020905b81548152906001019060200180831161245c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156124c8576124c8615eac565b60038111156124d9576124d9615eac565b81525050815260200190600101906123cd565b505050509050600080600090505b82518110156125855784600381111561251557612515615eac565b83828151811061252757612527615ed8565b602002602001015160a00151600381111561254457612544615eac565b1461254e57612575565b600061255a87836113e0565b9050428160000151106125735761257083615e5b565b92505b505b61257e81615e5b565b90506124fa565b50949350505050565b600054610100900460ff166125a95760005460ff16156125ad565b303b155b6126105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109e2565b600054610100900460ff16158015612632576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b60038110156128305786818151811061265f5761265f615ed8565b60200260200101516006600083600381111561267d5761267d615eac565b600381111561268e5761268e615eac565b600381111561269f5761269f615eac565b8152602001908152602001600020819055508581815181106126c3576126c3615ed8565b6020026020010151600760008360038111156126e1576126e1615eac565b60038111156126f2576126f2615eac565b600381111561270357612703615eac565b8152602001908152602001600020819055506000600f600083600381111561272d5761272d615eac565b600381111561273e5761273e615eac565b600381111561274f5761274f615eac565b8152602001908152602001600020819055506008600082600381111561277757612777615eac565b600381111561278857612788615eac565b600381111561279957612799615eac565b815260200152600860008260038111156127b5576127b5615eac565b60038111156127c6576127c6615eac565b60038111156127d7576127d7615eac565b81526020808201929092526040908101600090812082518084019093528583528284018281528154600181810184559284529490922092516002909402909201928355519101558061282881615e5b565b915050612644565b50506009839055600c80546001600160a01b03191633179055600b8290558015612860576000805461ff00191690555b5050505050565b600d546001600160a01b031633148061288a5750600c546001600160a01b031633145b6128a65760405162461bcd60e51b81526004016109e290615c5f565b6001600160a01b0381166128eb5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016109e2565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606061291882614ab5565b61293057505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612a8557838290600052602060002090600602016040518060c001604052908160008201805461299990615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546129c590615e20565b8015612a125780601f106129e757610100808354040283529160200191612a12565b820191906000526020600020905b8154815290600101906020018083116129f557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612a6157612a61615eac565b6003811115612a7257612a72615eac565b8152505081526020019060010190612966565b505050509050600081519050612a9961558b565b6000612ac161194d85600081518110612ab457612ab4615ed8565b6020026020010151614bf2565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110612af957612af9615ed8565b602002602001015193508282612b1161194d87614bf2565b604051602001612b2393929190615b04565b60405160208183030381529060405292508080612b3f90615e5b565b915050612adf565b600d546001600160a01b0316331480612b6a5750600c546001600160a01b031633145b612b865760405162461bcd60e51b81526004016109e290615c5f565b600060086000836003811115612b9e57612b9e615eac565b6003811115612baf57612baf615eac565b8152602081019190915260400160002054905060018111612c225760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b60648201526084016109e2565b60086000836003811115612c3857612c38615eac565b6003811115612c4957612c49615eac565b8152602001908152602001600020805480612c6657612c66615ec2565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b0316331480612cab5750600c546001600160a01b031633145b612cc75760405162461bcd60e51b81526004016109e290615c5f565b60135460ff1615158115151415612d205760405162461bcd60e51b815260206004820152601960248201527f4d4f4e54485f4645453a20494e56414c4944205354415455530000000000000060448201526064016109e2565b6013805460ff191682151517905560198054906000612d3e83615e5b565b90915550506040805180820182524281529115156020808401918252601954600090815260189091529190912091518255516001909101805460ff1916911515919091179055565b6060612d9182614ab5565b612da957505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612efe57838290600052602060002090600602016040518060c0016040529081600082018054612e1290615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054612e3e90615e20565b8015612e8b5780601f10612e6057610100808354040283529160200191612e8b565b820191906000526020600020905b815481529060010190602001808311612e6e57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612eda57612eda615eac565b6003811115612eeb57612eeb615eac565b8152505081526020019060010190612ddf565b505050509050600081519050612f1261558b565b6000612f4784600081518110612f2a57612f2a615ed8565b602002602001015160a00151600381111561194d5761194d615eac565b604080518082019091526001808252602360f81b6020830152919250905b8481101561177857858181518110612f7f57612f7f615ed8565b602002602001015193508282612fa48660a00151600381111561194d5761194d615eac565b604051602001612fb693929190615b04565b60405160208183030381529060405292508080612fd290615e5b565b915050612f65565b62015180821480612fed57506203f48082145b6130395760405162461bcd60e51b815260206004820152601960248201527f4d4f4e54485f4645453a204e6f742076616c69642074696d650000000000000060448201526064016109e2565b60006130458383610d47565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561309857600080fd5b505af11580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d091906159e9565b6131135760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b60448201526064016109e2565b60005b82518110156132245760006131443385848151811061313757613137615ed8565b60200260200101516113e0565b905042816000015110156131a65760405162461bcd60e51b8152602060048201526024808201527f4d4f4e54485f4645453a20436f6e747261637420686173206265656e206578706044820152631a5c995960e21b60648201526084016109e2565b84816000018181516131b89190615d09565b9052504260208083019190915233600090815260169091526040812085518392908790869081106131eb576131eb615ed8565b602090810291909101810151825281810192909252604001600020825181559101516001909101555061321d81615e5b565b9050613116565b50505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561337c57838290600052602060002090600602016040518060c001604052908160008201805461329090615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546132bc90615e20565b80156133095780601f106132de57610100808354040283529160200191613309565b820191906000526020600020905b8154815290600101906020018083116132ec57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561335857613358615eac565b600381111561336957613369615eac565b815250508152602001906001019061325d565b5050825192935050508084106133d45760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f7065720000000060448201526064016109e2565b60008285815181106133e8576133e8615ed8565b60200260200101519050613406858283602001518460400151614a7a565b9695505050505050565b606080600060056000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561357957838290600052602060002090600602016040518060c001604052908160008201805461348d90615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546134b990615e20565b80156135065780601f106134db57610100808354040283529160200191613506565b820191906000526020600020905b8154815290600101906020018083116134e957829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561355557613555615eac565b600381111561356657613566615eac565b815250508152602001906001019061345a565b50505050905060005b815181101561365857600082828151811061359f5761359f615ed8565b6020026020010151905060006135b587846113e0565b9050600060405180610100016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561360d5761360d615eac565b815260200183600001518152602001836020015181525090508086858151811061363957613639615ed8565b60200260200101819052505050508061365190615e5b565b9050613582565b50909392505050565b600d546001600160a01b03163314806136845750600c546001600160a01b031633145b6136a05760405162461bcd60e51b81526004016109e290615c5f565b6305f5e10081126137045760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b60648201526084016109e2565b6008600083600381111561371a5761371a615eac565b600381111561372b5761372b615eac565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b03163314806137995750600c546001600160a01b031633145b6137b55760405162461bcd60e51b81526004016109e290615c5f565b80600760008460038111156137cc576137cc615eac565b60038111156137dd576137dd615eac565b81526020019081526020016000208190555060006008600084600381111561380757613807615eac565b600381111561381857613818615eac565b815260200190815260200160002060008154811061383857613838615ed8565b90600052602060002090600202016000015490506008600084600381111561386257613862615eac565b600381111561387357613873615eac565b8152602001908152602001600020600061388d91906155d1565b600860008460038111156138a3576138a3615eac565b60038111156138b4576138b4615eac565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b6000606061390c83614ab5565b6139285750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015613a7d57838290600052602060002090600602016040518060c001604052908160008201805461399190615e20565b80601f01602080910402602001604051908101604052809291908181526020018280546139bd90615e20565b8015613a0a5780601f106139df57610100808354040283529160200191613a0a565b820191906000526020600020905b8154815290600101906020018083116139ed57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613a5957613a59615eac565b6003811115613a6a57613a6a615eac565b815250508152602001906001019061395e565b5050825192935060009150613ae8905081848185613a9d57613a9d615ed8565b602002602001015185600081518110613ab857613ab8615ed8565b60200260200101516020015186600081518110613ad757613ad7615ed8565b602002602001015160400151614a7a565b9050809450613af681614ad2565b604080518082019091526001808252602360f81b6020830152919550905b83811015613ba1576000858281518110613b3057613b30615ed8565b602002602001015190506000613b50838384602001518560400151614a7a565b9050613b5c818a615d09565b98508784613b6983614ad2565b604051602001613b7b93929190615b04565b604051602081830303815290604052975050508080613b9990615e5b565b915050613b14565b5050505050915091565b600d5460009081906001600160a01b03163314613bda5760405162461bcd60e51b81526004016109e290615c5f565b60135460ff1615613bef57613bef8484614bfe565b6001600160a01b038416600090815260056020526040902080548410613c4b5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b60448201526064016109e2565b6000818581548110613c5f57613c5f615ed8565b90600052602060002090600602019050613c7c8160020154615050565b613cee5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e00000000000060648201526084016109e2565b60004290506000613dfc87846040518060c0016040529081600082018054613d1590615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054613d4190615e20565b8015613d8e5780601f10613d6357610100808354040283529160200191613d8e565b820191906000526020600020905b815481529060010190602001808311613d7157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613ddd57613ddd615eac565b6003811115613dee57613dee615eac565b905250600286015485614a7a565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16613fb757613f3887846040518060c0016040529081600082018054613e5190615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054613e7d90615e20565b8015613eca5780601f10613e9f57610100808354040283529160200191613eca565b820191906000526020600020905b815481529060010190602001808311613ead57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613f1957613f19615eac565b6003811115613f2a57613f2a615eac565b905250600186015442614a7a565b836004015411613fb7576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92613fae9260ff9190911691615c13565b60405180910390a15b6005909201549194505060ff169150509250929050565b6000600f6000836003811115613fe657613fe6615eac565b6003811115613ff757613ff7615eac565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b031633146140405760405162461bcd60e51b81526004016109e290615c5f565b60135460ff161561405457614054856147fc565b6001600160a01b03851660009081526005602052604090208054806140d35760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b60648201526084016109e2565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b8581101561447f5786818154811061412557614125615ed8565b90600052602060002090600602019450600061423e82876040518060c001604052908160008201805461415790615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461418390615e20565b80156141d05780601f106141a5576101008083540402835291602001916141d0565b820191906000526020600020905b8154815290600101906020018083116141b357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561421f5761421f615eac565b600381111561423057614230615eac565b905250600289015442614a7a565b905061424a8186615d09565b60058701549095508190859060ff16600381111561426a5761426a615eac565b60ff166003811061427d5761427d615ed8565b6020020181815161428e9190615d09565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff161580156143d557506143cd82876040518060c00160405290816000820180546142e690615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461431290615e20565b801561435f5780601f106143345761010080835404028352916020019161435f565b820191906000526020600020905b81548152906001019060200180831161434257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156143ae576143ae615eac565b60038111156143bf576143bf615eac565b905250600189015442614a7a565b866004015411155b1561446c576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561442157614421615eac565b9050838160ff166003811061443857614438615ed8565b6020020151614448906001615d21565b848260ff166003811061445d5761445d615ed8565b60ff9092166020929092020152505b508061447781615e5b565b91505061410b565b5060005b60038160ff16101561452d576000828260ff16600381106144a6576144a6615ed8565b602002015160ff16111561451b577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156144ea576144ea615eac565b838360ff16600381106144ff576144ff615ed8565b6020020151604051614512929190615c2e565b60405180910390a15b8061452581615e76565b915050614483565b505080516020820151604090920151929b909a50909850909650945050505050565b606061455a82614ab5565b61457257505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156146c757838290600052602060002090600602016040518060c00160405290816000820180546145db90615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461460790615e20565b80156146545780601f1061462957610100808354040283529160200191614654565b820191906000526020600020905b81548152906001019060200180831161463757829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156146a3576146a3615eac565b60038111156146b4576146b4615eac565b81525050815260200190600101906145a8565b5050505090506000815190506146db61558b565b6000836000815181106146f0576146f0615ed8565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156117785785818151811061473d5761473d615ed8565b602002602001015193508282856000015160405160200161476093929190615b04565b6040516020818303038152906040529250808061477c90615e5b565b915050614723565b600d546001600160a01b03163314806147a75750600c546001600160a01b031633145b6147c35760405162461bcd60e51b81526004016109e290615c5f565b601255565b6000806147d9836305f5e100615d87565b90506305f5e1006147ea8286615d68565b6147f49190615d46565b949350505050565b6001600160a01b038116600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561495157838290600052602060002090600602016040518060c001604052908160008201805461486590615e20565b80601f016020809104026020016040519081016040528092919081815260200182805461489190615e20565b80156148de5780601f106148b3576101008083540402835291602001916148de565b820191906000526020600020905b8154815290600101906020018083116148c157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561492d5761492d615eac565b600381111561493e5761493e615eac565b8152505081526020019060010190614832565b505050509050805160001415614965575050565b6000600182516149759190615dc6565b905060005b8251811015613224578181111561499057613224565b61499a8482614bfe565b6001600160a01b0384166000908152600560205260409020546149bf90600190615dc6565b91506149ca81615e5b565b905061497a565b6001600160a01b038216600090815260038401602052604090205460ff1615614a16576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b60135460009060ff168015614a945750614a94338661236b565b15614aa1575060006147f4565b614aac848484615069565b95945050505050565b6001600160a01b0316600090815260026020526040902054151590565b606081614af65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614b205780614b0a81615e5b565b9150614b199050600a83615d46565b9150614afa565b60008167ffffffffffffffff811115614b3b57614b3b615eee565b6040519080825280601f01601f191660200182016040528015614b65576020820181803683370190505b509050815b851561258557614b7b600182615dc6565b90506000614b8a600a88615d46565b614b9590600a615d68565b614b9f9088615dc6565b614baa906030615d21565b905060008160f81b905080848481518110614bc757614bc7615ed8565b60200101906001600160f81b031916908160001a905350614be9600a89615d46565b97505050614b6a565b6000610fea8242615368565b6000614c0a83836113e0565b905042816000015110614c4b576001600160a01b03909216600090815260166020908152604080832093835292815291902082518155910151600190910155565b6001600160a01b0383166000908152600560205260408120805484908110614c7557614c75615ed8565b90600052602060002090600602016040518060c0016040529081600082018054614c9e90615e20565b80601f0160208091040260200160405190810160405280929190818152602001828054614cca90615e20565b8015614d175780601f10614cec57610100808354040283529160200191614d17565b820191906000526020600020905b815481529060010190602001808311614cfa57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115614d6657614d66615eac565b6003811115614d7757614d77615eac565b9052506001600160a01b03851660009081526005602052604081205491925090614da390600190615dc6565b6001600160a01b038616600090815260056020526040902080549192509082908110614dd157614dd1615ed8565b906000526020600020906006020160056000876001600160a01b03166001600160a01b031681526020019081526020016000208581548110614e1557614e15615ed8565b90600052602060002090600602016000820181600001908054614e3790615e20565b614e429291906155f5565b5060018281015482820155600280840154908301556003808401548184015560048085015490840155600580850154908401805460ff90921693909260ff19909216918490811115614e9657614e96615eac565b021790555050506001600160a01b03851660008181526016602090815260408083208584528252808320888452818420815481556001918201549101559282526005905220805480614eea57614eea615ec2565b60008281526020812060001990920191600683020190614f0a8282615670565b50600060018281018290556002830182905560038301829055600483018290556005928301805460ff19169055929093556001600160a01b038816808452601660209081526040808620878752825280862086815585018690559185529190915290912054614f7b919087906149d1565b6001600e6000828254614f8e9190615dc6565b925050819055506001600f60008460a001516003811115614fb157614fb1615eac565b6003811115614fc257614fc2615eac565b81526020019081526020016000206000828254614fdf9190615dc6565b90915550506001600160a01b038516600090815260176020526040812060a084015160019290600381111561501657615016615eac565b600381111561502757615027615eac565b815260200190815260200160002060008282546150449190615dc6565b90915550505050505050565b600042600954836150619190615d09565b111592915050565b6000818311156150b25760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b60448201526064016109e2565b83602001518310156150f95760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b60448201526064016109e2565b60a0840151600061510a8286615412565b905060006151188386615412565b6080880151909150600061512c8989615368565b60208a01516000975090915088908790819081885b8881101561529457600860008c600381111561515f5761515f615eac565b600381111561517057615170615eac565b8152602001908152602001600020818154811061518f5761518f615ed8565b90600052602060002090600202016000015494506151ad86846154ed565b6151b786856154ed565b14801592506151ef576151ca86846154ed565b6151d5906001615d09565b600a546151e29190615d68565b6151ec9084615d09565b94505b6151f98686615dc6565b93508495506301e13380846305f5e100898b6152159190615d68565b61521f9190615d46565b6152299190615d68565b6152339190615d46565b61523d908d615d09565b9b5081156152655761525187600b546147c8565b96508061525d81615e09565b915050615282565b61527f87600860008e600381111561095557610955615eac565b96505b8061528c81615e5b565b915050615141565b505b8b8514615356578b93506152aa85836154ed565b6152b485846154ed565b14801591506152ec576152c785836154ed565b6152d2906001615d09565b600a546152df9190615d68565b6152e99083615d09565b93505b6152f68585615dc6565b92508394506301e13380836305f5e100888a6153129190615d68565b61531c9190615d46565b6153269190615d68565b6153309190615d46565b61533a908c615d09565b9a5080156153515761534e86600b546147c8565b95505b615296565b505050505050505050505b9392505050565b602082015160a083015160608401516000929190836153878385615412565b905060006153958488615412565b9050815b818110156153cf576153bb846008600088600381111561095557610955615eac565b9350806153c781615e5b565b915050615399565b5060006153dc88876154ed565b90505b801561540557806153ef81615e09565b9150506153fe84600b546147c8565b93506153df565b5091979650505050505050565b6000808060088186600381111561542b5761542b615eac565b600381111561543c5761543c615eac565b815260208101919091526040016000205490505b818111156109b057600060026154668385615d09565b6154709190615d46565b9050846008600088600381111561548957615489615eac565b600381111561549a5761549a615eac565b815260200190815260200160002082815481106154b9576154b9615ed8565b90600052602060002090600202016000015410156154e3576154dc816001615d09565b92506154e7565b8091505b50615450565b600a546000906154fd8385615dc6565b6153619190615d46565b82805461551390615e20565b90600052602060002090601f016020900481019282615535576000855561557b565b82601f1061554e57805160ff191683800117855561557b565b8280016001018555821561557b579182015b8281111561557b578251825591602001919060010190615560565b506155879291506156a6565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156155cc576155cc615eac565b905290565b50805460008255600202906000526020600020908101906155f291906156bb565b50565b82805461560190615e20565b90600052602060002090601f016020900481019282615623576000855561557b565b82601f10615634578054855561557b565b8280016001018555821561557b57600052602060002091601f016020900482015b8281111561557b578254825591600101919060010190615655565b50805461567c90615e20565b6000825580601f1061568c575050565b601f0160209004906000526020600020908101906155f291905b5b8082111561558757600081556001016156a7565b5b8082111561558757600080825560018201556002016156bc565b80356001600160a01b03811681146156ed57600080fd5b919050565b600082601f83011261570357600080fd5b8135602061571861571383615ce5565b615cb4565b80838252828201915082860187848660051b890101111561573857600080fd5b60005b858110156157575781358452928401929084019060010161573b565b5090979650505050505050565b8035600481106156ed57600080fd5b60006020828403121561578557600080fd5b615361826156d6565b6000806000606084860312156157a357600080fd5b6157ac846156d6565b925060208085013567ffffffffffffffff808211156157ca57600080fd5b818701915087601f8301126157de57600080fd5b81356157ec61571382615ce5565b8082825285820191508585018b878560051b880101111561580c57600080fd5b60005b848110156158995781358681111561582657600080fd5b8701603f81018e1361583757600080fd5b888101358781111561584b5761584b615eee565b61585d601f8201601f19168b01615cb4565b8181528f604083850101111561587257600080fd5b81604084018c83013760009181018b0191909152855250928701929087019060010161580f565b50508097505050505050506158b060408501615764565b90509250925092565b600080604083850312156158cc57600080fd5b6158d5836156d6565b91506158e360208401615764565b90509250929050565b600080604083850312156158ff57600080fd5b615908836156d6565b946020939093013593505050565b600080600080600060a0868803121561592e57600080fd5b615937866156d6565b97602087013597506040870135966060810135965060800135945092505050565b6000806000806080858703121561596e57600080fd5b843567ffffffffffffffff8082111561598657600080fd5b615992888389016156f2565b955060208701359150808211156159a857600080fd5b506159b5878288016156f2565b949794965050505060408301359260600135919050565b6000602082840312156159de57600080fd5b813561536181615f04565b6000602082840312156159fb57600080fd5b815161536181615f04565b600060208284031215615a1857600080fd5b61536182615764565b60008060408385031215615a3457600080fd5b61590883615764565b600060208284031215615a4f57600080fd5b5035919050565b600060208284031215615a6857600080fd5b5051919050565b60008060408385031215615a8257600080fd5b82359150602083013567ffffffffffffffff811115615aa057600080fd5b615aac858286016156f2565b9150509250929050565b60048110615ad457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452615af0816020860160208601615ddd565b601f01601f19169290920160200192915050565b60008451615b16818460208901615ddd565b845190830190615b2a818360208901615ddd565b8451910190615b3d818360208801615ddd565b0195945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015615bf757603f1989840301855281516101008151818652615b9582870182615ad8565b915050888201518986015287820151888601526060808301518187015250608080830151818701525060a080830151615bd082880182615ab6565b505060c0828101519086015260e09182015191909401529386019390860190600101615b6e565b509098975050505050505050565b60208101610fea8284615ab6565b60408101615c218285615ab6565b8260208301529392505050565b60408101615c3c8285615ab6565b60ff831660208301529392505050565b6020815260006153616020830184615ad8565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b828152604081016153616020830184615ab6565b8281526040602082015260006147f46040830184615ad8565b604051601f8201601f1916810167ffffffffffffffff81118282101715615cdd57615cdd615eee565b604052919050565b600067ffffffffffffffff821115615cff57615cff615eee565b5060051b60200190565b60008219821115615d1c57615d1c615e96565b500190565b600060ff821660ff84168060ff03821115615d3e57615d3e615e96565b019392505050565b600082615d6357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615d8257615d82615e96565b500290565b60008083128015600160ff1b850184121615615da557615da5615e96565b6001600160ff1b0384018313811615615dc057615dc0615e96565b50500390565b600082821015615dd857615dd8615e96565b500390565b60005b83811015615df8578181015183820152602001615de0565b838111156132245750506000910152565b600081615e1857615e18615e96565b506000190190565b600181811c90821680615e3457607f821691505b60208210811415615e5557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615e6f57615e6f615e96565b5060010190565b600060ff821660ff811415615e8d57615e8d615e96565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146155f257600080fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_cashoutContReward(address,uint256)": {
        "params": {
          "_contIndex": "contract index",
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getClaimedAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from contract creation time to latest claim.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "list": "a packed list of every entries",
          "total": "total amount of reward available for account, tax included"
        }
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInIntervalV2` to calculate claimed in an interval from contract creationTime to latest claim.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "rewardCont": "amount of reward available for selected contract"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_cashoutContReward(address,uint256)": {
        "notice": "reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getClaimedAmountOf(address)": {
        "notice": "query claimed amount of an address in every contract"
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "notice": "query claimed amount of one contract"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "notice": "only used when admin makes mistake about APR change: reset every APR changes/"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5422,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)14890_storage"
      },
      {
        "astId": 5428,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5386_storage)dyn_storage)"
      },
      {
        "astId": 5433,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5351,t_uint256)"
      },
      {
        "astId": 5438,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5351,t_uint256)"
      },
      {
        "astId": 5445,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5351,t_array(t_struct(APRChangesEntry)5419_storage)dyn_storage)"
      },
      {
        "astId": 5447,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5449,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5451,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5453,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5455,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5457,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5462,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5351,t_uint256)"
      },
      {
        "astId": 5468,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5471,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 5473,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "decreaseFeePercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5476,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "isMonthFeeActive",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 5478,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "defaultExpireIn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5483,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeInMonth",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(ContType)5351,t_uint256)"
      },
      {
        "astId": 5490,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "additionalDataContract",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5391_storage))"
      },
      {
        "astId": 5497,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "userAsset",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_enum(ContType)5351,t_uint256))"
      },
      {
        "astId": 5502,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "monthFeeLogs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(MonthFeeLog)5414_storage)"
      },
      {
        "astId": 5504,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "maxIndexMonthFeeLogs",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5419_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5419_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5386_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5386_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ContType)5351": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5386_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5386_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(ContType)5351,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum ContType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(ContType)5351,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5391_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5391_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5351,t_array(t_struct(APRChangesEntry)5419_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5351",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5419_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5351,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5351",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5391_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(AdditionalDataEntity)5391_storage"
      },
      "t_mapping(t_uint256,t_struct(MonthFeeLog)5414_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.MonthFeeLog)",
        "numberOfBytes": "32",
        "value": "t_struct(MonthFeeLog)5414_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5419_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5416,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5418,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AdditionalDataEntity)5391_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.AdditionalDataEntity",
        "members": [
          {
            "astId": 5388,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "expireIn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5390,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)5386_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5374,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5376,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5378,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5380,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5382,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5385,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5351"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)14890_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 14877,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14881,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14885,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14889,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MonthFeeLog)5414_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.MonthFeeLog",
        "members": [
          {
            "astId": 5411,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "currentTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5413,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}