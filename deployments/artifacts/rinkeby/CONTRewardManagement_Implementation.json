{
  "address": "0x434b5425AD9AF75Bb132CDA71edfa431b347bC8e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FOUR_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXUINT256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "list",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getClaimedAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCont",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "additionalDataContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expireIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFeeContract",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "changeFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "changeMonthFeeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpireIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "time",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "extendContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "feeInMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getExpireIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            }
          ],
          "internalType": "struct CONTRewardManagement.AdditionalDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "time",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "getExtendContractFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFullDataAllCont",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ContType",
              "name": "cType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.FullDataEntity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFullDataCont",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ContType",
              "name": "cType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFeeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.FullDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isExpiredCont",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isFeeContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMonthFeeActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIndexMonthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tesseractFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cubeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultExpireIn",
          "type": "uint256"
        }
      ],
      "name": "setupDataForMonthFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9da9896389264fa70fb8dceb0edd319109e70f232d284aaa3c53c29c4fb58d01",
  "receipt": {
    "to": null,
    "from": "0x0AB01869EEC7240e63990F16Be309D8364814AA8",
    "contractAddress": "0x434b5425AD9AF75Bb132CDA71edfa431b347bC8e",
    "transactionIndex": 0,
    "gasUsed": "5098397",
    "logsBloom": "0x
    "blockHash": "0x995e8f4be3cf940ac21cfb3e7b53b8a2c38c1fda44a27895f6885f6b8007868f",
    "transactionHash": "0x9da9896389264fa70fb8dceb0edd319109e70f232d284aaa3c53c29c4fb58d01",
    "logs": [],
    "blockNumber": 10747142,
    "cumulativeGasUsed": "5098397",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 34,
  "solcInputHash": "40b3338e9e70d2414ecad4d374524bc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOUR_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXUINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"list\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getClaimedAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCont\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"additionalDataContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"changeFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeMonthFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpireIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"extendContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"feeInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExpireIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"}],\"internalType\":\"struct CONTRewardManagement.AdditionalDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"getExtendContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullDataAllCont\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.FullDataEntity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFullDataCont\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.FullDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isExpiredCont\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isFeeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMonthFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexMonthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tesseractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cubeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultExpireIn\",\"type\":\"uint256\"}],\"name\":\"setupDataForMonthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getClaimedAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"list\":\"a packed list of every entries\",\"total\":\"total amount of reward available for account, tax included\"}},\"_getClaimedAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"rewardCont\":\"amount of reward available for selected contract\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getClaimedAmountOf(address)\":{\"notice\":\"query claimed amount of an address in every contract\"},\"_getClaimedAmountOfIndex(address,uint256)\":{\"notice\":\"query claimed amount of one contract\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant ADDITION_TIME_FOR_OLD = 3 hours;\\n    uint256 private constant ADDITION_TIME_FOR_NEW = 6 hours;\\n    uint256 public constant ONE_MONTH = 3 hours;\\n    uint256 public constant TWO_MONTH = 6 hours;\\n    uint256 public constant THREE_MONTH = 9 hours;\\n    uint256 public constant FOUR_MONTH = 12 hours;\\n    uint256 public constant MAXUINT256 = type(uint256).max;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    struct AdditionalDataEntity {\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n        bool isFeeContract;\\n    }\\n\\n    struct FullDataEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n        bool isFeeContract;\\n        uint256 reward;\\n        uint256 claimed;\\n    }\\n\\n    struct MonthFeeLog {\\n        uint256 currentTime;\\n        bool state;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // Adding feature - fee by month\\n    // using ContEntity[] => cannot update field into ContEntity struct (because using proxy\\n\\n    IERC20 public feeToken;\\n    uint256 public decreaseFeePercent;\\n    bool public isMonthFeeActive = true;\\n    uint256 public defaultExpireIn;\\n    mapping(ContType => uint256) public feeInMonth;\\n    // using mapping instead of array to easy scale with proxy\\n    mapping(address => mapping(uint256 => AdditionalDataEntity)) public additionalDataContract;\\n    mapping(uint256 => MonthFeeLog) public monthFeeLogs;\\n    uint256 public maxIndexMonthFeeLogs;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFee(\\n        address _feeToken,\\n        uint256 _tesseractFee,\\n        uint256 _cubeFee,\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n        feeInMonth[ContType.Tesseract] = _tesseractFee;\\n        feeInMonth[ContType.Cube] = _cubeFee;\\n        defaultExpireIn = _defaultExpireIn;\\n        monthFeeLogs[0] = MonthFeeLog(block.timestamp, true);\\n        maxIndexMonthFeeLogs = 0;\\n        isMonthFeeActive = true;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n            uint256 index = _contsOfUser[account].length - 1;\\n            bool _isFeeCont = isFeeContract(account, index);\\n            additionalDataContract[account][index] = AdditionalDataEntity({\\n                expireIn: block.timestamp + ADDITION_TIME_FOR_NEW,\\n                lastUpdated: block.timestamp,\\n                isFeeContract: _isFeeCont\\n            });\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    // / @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    // / @param account account of owner\\n    // / @param _contIndex contract index\\n    // / @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        if (isMonthFeeActive) {\\n            _updateCont(account, _contIndex);\\n            AdditionalDataEntity memory data = additionalDataContract[account][_contIndex];\\n            if (data.isFeeContract && data.expireIn < block.timestamp) {\\n                revert(\\\"Need extend contract\\\");\\n            }\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInInterval(cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            if (isMonthFeeActive) {\\n                _updateCont(account, i);\\n                AdditionalDataEntity memory data = additionalDataContract[account][i];\\n                if (data.isFeeContract && data.expireIn < block.timestamp) {\\n                    continue;\\n                }\\n            }\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInInterval(_cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function extendContract(uint256[] memory time, uint256[] memory indexes) external {\\n        require(isMonthFeeActive, \\\"MONTH_FEE: Not enable\\\");\\n        uint256 fee = getExtendContractFee(msg.sender, time, indexes);\\n        require(feeToken.transferFrom(msg.sender, address(this), fee), \\\"MONTH_FEE: Not valid\\\");\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            AdditionalDataEntity memory additionData = getExpireIn(msg.sender, indexes[i]);\\n            require(additionData.isFeeContract, \\\"MONTH_FEE: Not valid type\\\");\\n            additionData.expireIn += time[i];\\n            additionData.lastUpdated = block.timestamp;\\n            additionalDataContract[msg.sender][indexes[i]] = additionData;\\n        }\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        require(newPrice > 0, \\\"MONTH_FEE: NOT VALID\\\");\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function changeFeeToken(address _feeToken) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n    }\\n\\n    function changeMonthFeeState(bool _status) external onlyAuthorities {\\n        require(_status != isMonthFeeActive, \\\"MONTH_FEE: INVALID STATUS\\\");\\n        isMonthFeeActive = _status;\\n        maxIndexMonthFeeLogs++;\\n        monthFeeLogs[maxIndexMonthFeeLogs] = MonthFeeLog(block.timestamp, _status);\\n    }\\n\\n    function withdrawFeeToken(address _user) external onlyAuthorities {\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        require(feeToken.transfer(_user, amount), \\\"MONTH_FEE_WITHDRAW: INVALID\\\");\\n    }\\n\\n    function _updateCont(address account, uint256 _contIndex) private {\\n        if (!isFeeContract(account, _contIndex)) {\\n            return ;\\n        }\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, _contIndex);\\n        additionalDataContract[account][_contIndex] = additionalData;\\n    }\\n\\n    function _updateAllCont(address account) private {\\n        ContEntity[] memory listCont = _contsOfUser[account];\\n        if (listCont.length == 0) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            _updateCont(account, i);\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n\\n    function isExpiredCont(address account, uint256 index) public view returns (bool) {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, index);\\n        if (additionalData.expireIn < block.timestamp && additionalData.isFeeContract) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            if (isExpiredCont(account, i)) {\\n                continue;\\n            }\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        if (isExpiredCont(account, _contIndex)) {\\n            return 0;\\n        }\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return total total amount of reward available for account, tax included\\n        @return list a packed list of every entries\\n    */\\n    function _getClaimedAmountOf(address account) public view returns (uint256 total, string memory list) {\\n        if (!isContOwner(account)) return (0, \\\"\\\");\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 total = contRewardInInterval(conts[0], conts[0].creationTime, conts[0].lastUpdateTime);\\n        list = uint2str(total);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            uint256 _claimed;\\n            ContEntity memory _cont = conts[i];\\n            _claimed = contRewardInInterval(_cont, _cont.creationTime, _cont.lastUpdateTime);\\n            total += _claimed;\\n            list = string(abi.encodePacked(list, separator, uint2str(_claimed)));\\n        }\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInInterval` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) public view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInInterval(cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardFirstIndex;\\n        if (!isExpiredCont(account, 0)) {\\n            rewardFirstIndex = contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp);\\n        }\\n        string memory _rewardsAvailable = uint2str(\\n            rewardFirstIndex\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            uint256 reward;\\n            if (!isExpiredCont(account, i)) {\\n                reward = contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp);\\n            }\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(reward)\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    function getExtendContractFee(address account, uint256[] memory time, uint256[] memory indexes) public view returns (uint256) {\\n        require(time.length == indexes.length, \\\"INPUT: INVALID\\\");\\n        uint256 totalFee;\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            uint256 index = indexes[i];\\n            uint256 _time = time[i];\\n            require(_time == ONE_MONTH || _time == TWO_MONTH || _time == THREE_MONTH || _time == FOUR_MONTH, \\\"MONTH_FEE: Not valid time\\\");\\n            ContEntity memory cont = _contsOfUser[account][index];\\n            totalFee += feeInMonth[cont.cType] * _time / ONE_MONTH;\\n        }\\n        return totalFee;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate reward in an interval\\n    /// @dev iterate through APR change log and for each APR segment/interval, add up its reward to the result\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param leftTstamp left border of the interval\\n    /// @param rightTstamp right border of the interval\\n    /// @return result\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256 result) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 firstUpdateInd = historyBinarySearch(_cType, leftTstamp);\\n        uint256 lastUpdateInd = historyBinarySearch(_cType, rightTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp;\\n        result = 0;\\n        uint256 deltaTstamp;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = firstUpdateInd; index < lastUpdateInd; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    /// @notice convert uint256 to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice reduce input to a percentage with decimals\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    /// @notice check if an account is a contract owner\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n\\n    function getExpireIn(address user, uint256 index) public view returns (AdditionalDataEntity memory) {\\n        if ( !isFeeContract(user, index)) {\\n            return AdditionalDataEntity(\\n                0,\\n                0,\\n                false\\n            );\\n        }\\n        AdditionalDataEntity memory additionalData = additionalDataContract[user][index];\\n        if (additionalData.expireIn == 0) {\\n            additionalData.expireIn = defaultExpireIn;\\n            additionalData.lastUpdated = defaultExpireIn - ADDITION_TIME_FOR_OLD;\\n        }\\n        uint256 totalDelay = 0;\\n        for (uint256 i = 0; i <= maxIndexMonthFeeLogs; ++i) {\\n            MonthFeeLog memory log = monthFeeLogs[i];\\n            if (additionalData.lastUpdated >= log.currentTime) {\\n                continue;\\n            }\\n            if (log.state == true) {\\n                totalDelay = totalDelay + log.currentTime - additionalData.lastUpdated;\\n            }\\n            additionalData.lastUpdated = log.currentTime;\\n        }\\n\\n        if (block.timestamp > monthFeeLogs[maxIndexMonthFeeLogs].currentTime) {\\n            if (isMonthFeeActive == false) {\\n                totalDelay = totalDelay + block.timestamp - monthFeeLogs[maxIndexMonthFeeLogs].currentTime;\\n            }\\n            additionalData.lastUpdated = block.timestamp;\\n        }\\n\\n        additionalData.expireIn += totalDelay;\\n        additionalData.isFeeContract = true;\\n\\n        return additionalData;\\n    }\\n\\n    function getFullDataAllCont(address user) public view returns (FullDataEntity[] memory) {\\n        ContEntity[] memory listCont = _contsOfUser[user];\\n        FullDataEntity[] memory fullData = new FullDataEntity[](listCont.length);\\n\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            ContEntity memory cont = listCont[i];\\n            AdditionalDataEntity memory additional = getExpireIn(user, i);\\n            FullDataEntity memory item = FullDataEntity(\\n                cont.name,\\n                cont.creationTime,\\n                cont.lastUpdateTime,\\n                cont.initialAPR,\\n                cont.buyPrice,\\n                cont.cType,\\n                additional.expireIn,\\n                additional.lastUpdated,\\n                additional.isFeeContract,\\n                contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp),\\n                _getClaimedAmountOfIndex(user, i)\\n            );\\n            fullData[i] = item;\\n        }\\n        return fullData;\\n    }\\n\\n    function getFullDataCont(address user, uint256 index) public view returns (FullDataEntity memory) {\\n        ContEntity memory cont = _contsOfUser[user][index];\\n\\n        AdditionalDataEntity memory additional = getExpireIn(user, index);\\n        FullDataEntity memory item = FullDataEntity(\\n            cont.name,\\n            cont.creationTime,\\n            cont.lastUpdateTime,\\n            cont.initialAPR,\\n            cont.buyPrice,\\n            cont.cType,\\n            additional.expireIn,\\n            additional.lastUpdated,\\n            additional.isFeeContract,\\n            contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp),\\n            _getClaimedAmountOfIndex(user, index)\\n        );\\n        return item;\\n    }\\n\\n    function isFeeContract(address user, uint256 index) public view returns (bool) {\\n        ContEntity memory cont = _contsOfUser[user][index];\\n        return _isFeeContract(cont);\\n    }\\n\\n    function _isFeeContract(ContEntity memory cont) internal pure returns (bool) {\\n        if (cont.cType == ContType.Tesseract || cont.cType == ContType.Cube) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4a632bb632d8fd7371c0e225e6af8967d73349f3227ef036a8ed3824b3bd0894\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526013805460ff1916600117905534801561001d57600080fd5b50615ad7806200002e6000396000f3fe608060405234801561001057600080fd5b50600436106102e35760003560e01c8063665bb078116101895780639d2040f0116100df5780639d2040f0146106d5578063a1a99b91146106e8578063a8ad436814610709578063c19f40d214610729578063c2202b6614610732578063c3bbc55a14610753578063ce6912a314610773578063d08e7e1e14610786578063d094fa8d1461078f578063dc73ff5e146107c2578063de2fb95c14610801578063e18f03ad1461080a578063ed9ddfcb14610813578063f743f31914610826578063fc0c546a1461083957600080fd5b8063665bb078146105ae57806367d04cc4146105c15780636bb4d902146105d45780636eb5a7f4146105dd578063704b6c02146105f057806377ec7826146106035780637bed9600146106165780638201bf2614610644578063872a60ad14610657578063879613ae1461066a5780638bf145141461067d578063927831b41461069057806393520a80146106a35780639b28d1a7146106ac5780639d078b98146106b557600080fd5b8063367fd0741161023e578063367fd07414610441578063390c991e146104545780633c4024071461046757806344fea1b91461047a5780634e1f2e761461048d5780634ec7b429146104e75780634f88de01146104f057806351bf120c1461051057806355091dad1461052357806355a757d0146105365780635dbab6ed1461053f578063619a635e1461055257806363a9b09814610565578063647846a51461058557806365aa5bbb146105a557600080fd5b8062c73e4d146102e857806303bac12a1461030e5780630534cc681461032b5780630b9f6cfe146103405780630c12252b146103535780630d9f9f0c1461035c578063144fa6d71461036f5780631565f50e146103825780631a440de6146103955780631d5a1731146103a85780631f7f63c0146103bb57806320988cef146103f2578063234c4544146103fb578063261c75d81461040e57806328cceb2414610421575b600080fd5b6102fb6102f6366004615540565b61084c565b6040519081526020015b60405180910390f35b60135461031b9060ff1681565b6040519015158152602001610305565b61033e610339366004615230565b61094c565b005b6102fb61034e3660046153cd565b610c96565b6102fb617e9081565b61033e61036a366004615577565b610e66565b61033e61037d366004615215565b610eaa565b61033e610390366004615577565b610f31565b61033e6103a3366004615215565b610f75565b61033e6103b636600461555b565b610fd6565b6103ce6103c93660046153cd565b611099565b60408051825181526020808401519082015291810151151590820152606001610305565b6102fb612a3081565b61031b6104093660046153cd565b611266565b61033e61041c366004615430565b6113ab565b61043461042f366004615215565b611608565b6040516103059190615793565b61043461044f366004615215565b611850565b61033e610462366004615577565b611afe565b6102fb61047536600461535a565b611b42565b6102fb610488366004615215565b611def565b6104ca61049b3660046153cd565b601660209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610305565b6102fb60145481565b6102fb6104fe366004615540565b60076020526000908152604090205481565b61043461051e366004615215565b611dfc565b61033e610531366004615215565b612038565b6102fb60095481565b61043461054d366004615215565b6121ce565b6102fb610560366004615215565b61240a565b6102fb610573366004615540565b60066020526000908152604090205481565b601154610598906001600160a01b031681565b60405161030591906156d6565b6102fb60001981565b61031b6105bc366004615215565b6125f3565b61031b6105cf3660046153cd565b6125fe565b6102fb60125481565b61033e6105eb366004615493565b61263a565b61033e6105fe366004615215565b612913565b610434610611366004615215565b61299a565b61031b6106243660046153cd565b601060209081526000928352604080842090915290825290205460ff1681565b61033e610652366004615540565b612bd9565b600c54610598906001600160a01b031681565b61033e610678366004615506565b612d1a565b61043461068b366004615215565b612e14565b6102fb61069e3660046153cd565b613068565b6102fb600b5481565b6102fb600a5481565b6102fb6106c3366004615540565b60156020526000908152604090205481565b61033e6106e336600461555b565b61321d565b6106fb6106f6366004615215565b613332565b604051610305929190615852565b61071c610717366004615215565b6135d8565b60405161030591906156ea565b6102fb60185481565b6107456107403660046153cd565b613891565b60405161030592919061583e565b6107666107613660046153cd565b613d4e565b604051610305919061582b565b6102fb610781366004615540565b613f3a565b6102fb61a8c081565b6107a261079d366004615215565b613f79565b604080519485526020850193909352918301526060820152608001610305565b6107ec6107d0366004615577565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610305565b6102fb61546081565b6102fb600e5481565b61033e6108213660046153f7565b614521565b610434610834366004615215565b614653565b600d54610598906001600160a01b031681565b6000806008600084600381111561086557610865615a61565b600381111561087657610876615a61565b81526020019081526020016000208054905090506000600760008560038111156108a2576108a2615a61565b60038111156108b3576108b3615a61565b815260200190815260200160002054905060005b828110156109445761093082600860008860038111156108e9576108e9615a61565b60038111156108fa576108fa615a61565b8152602001908152602001600020838154811061091957610919615a8d565b906000526020600020906002020160010154614888565b91508061093c81615a10565b9150506108c7565b509392505050565b600d546001600160a01b0316331461097f5760405162461bcd60e51b8152600401610976906157a6565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d906109b490859060040161574c565b60206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190615590565b905060005b8351811015610c055760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610a5457610a54615a8d565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610a8957610a89615a61565b6003811115610a9a57610a9a615a61565b8152602001908152602001600020548152602001856003811115610ac057610ac0615a61565b905281546001810183556000928352602092839020825180519394600690930290910192610af19284920190615039565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610b4457610b44615a61565b021790555050506001600160a01b038516600090815260056020526040812054610b709060019061597b565b90506000610b7e8783611266565b9050604051806060016040528061546042610b9991906158be565b8152426020808301919091529215156040918201526001600160a01b0389166000908152601684528181209481529383529283902081518155918101516001830155909101516002909101805460ff191691151591909117905580610bfd81615a10565b915050610a09565b506001600160a01b038416600090815260056020526040902054610c2d9060019086906148b4565b8251600e6000828254610c4091906158be565b90915550508251600f6000846003811115610c5d57610c5d615a61565b6003811115610c6e57610c6e615a61565b81526020019081526020016000206000828254610c8b91906158be565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610de857838290600052602060002090600602016040518060c0016040529081600082018054610cfc906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d28906159d5565b8015610d755780601f10610d4a57610100808354040283529160200191610d75565b820191906000526020600020905b815481529060010190602001808311610d5857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610dc457610dc4615a61565b6003811115610dd557610dd5615a61565b8152505081526020019060010190610cc9565b505082519293505050808410610e105760405162461bcd60e51b8152600401610976906157ce565b610e1a85856125fe565b15610e2a57600092505050610e60565b6000828581518110610e3e57610e3e615a8d565b602002602001015190506000610e598283604001514261495d565b9450505050505b92915050565b600d546001600160a01b0316331480610e895750600c546001600160a01b031633145b610ea55760405162461bcd60e51b8152600401610976906157a6565b600b55565b600d546001600160a01b0316331480610ecd5750600c546001600160a01b031633145b610ee95760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b038116610f0f5760405162461bcd60e51b815260040161097690615805565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610f545750600c546001600160a01b031633145b610f705760405162461bcd60e51b8152600401610976906157a6565b600a55565b600d546001600160a01b0316331480610f985750600c546001600160a01b031633145b610fb45760405162461bcd60e51b8152600401610976906157a6565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610ff95750600c546001600160a01b031633145b6110155760405162461bcd60e51b8152600401610976906157a6565b6000811161105c5760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e881393d508159053125160621b6044820152606401610976565b806006600084600381111561107357611073615a61565b600381111561108457611084615a61565b81526020810191909152604001600020555050565b6110bf604051806060016040528060008152602001600081526020016000151581525090565b6110c98383611266565b6110f45760405180606001604052806000815260200160008152602001600015158152509050610e60565b6001600160a01b03831660009081526016602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526111605760145480825261115a90612a309061597b565b60208201525b6000805b60185481116111ee576000818152601760209081526040918290208251808401909352805480845260019091015460ff1615158383015290850151106111aa57506111de565b60208101511515600114156111d757602084015181516111ca90856158be565b6111d4919061597b565b92505b5160208401525b6111e781615a10565b9050611164565b506018546000908152601760205260409020544211156112425760135460ff1661123b5760185460009081526017602052604090205461122e42836158be565b611238919061597b565b90505b4260208301525b808260000181815161125491906158be565b90525050600160408201529392505050565b6001600160a01b038216600090815260056020526040812080548291908490811061129357611293615a8d565b90600052602060002090600602016040518060c00160405290816000820180546112bc906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546112e8906159d5565b80156113355780601f1061130a57610100808354040283529160200191611335565b820191906000526020600020905b81548152906001019060200180831161131857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561138457611384615a61565b600381111561139557611395615a61565b90525090506113a381614c5b565b949350505050565b60135460ff166113f55760405162461bcd60e51b81526020600482015260156024820152744d4f4e54485f4645453a204e6f7420656e61626c6560581b6044820152606401610976565b6000611402338484611b42565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190615523565b6114d05760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b6044820152606401610976565b60005b8251811015611602576000611501338584815181106114f4576114f4615a8d565b6020026020010151611099565b905080604001516115505760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c6964207479706560381b6044820152606401610976565b84828151811061156257611562615a8d565b60200260200101518160000181815161157b91906158be565b9052504260208083019190915233600090815260169091526040812085518392908790869081106115ae576115ae615a8d565b60209081029190910181015182528181019290925260409081016000208351815591830151600183015591909101516002909101805460ff1916911515919091179055506115fb81615a10565b90506114d3565b50505050565b606061161382614cab565b61162b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561178057838290600052602060002090600602016040518060c0016040529081600082018054611694906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546116c0906159d5565b801561170d5780601f106116e25761010080835404028352916020019161170d565b820191906000526020600020905b8154815290600101906020018083116116f057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561175c5761175c615a61565b600381111561176d5761176d615a61565b8152505081526020019060010190611661565b5050505090506000815190506117946150bd565b60006117bd846000815181106117ac576117ac615a8d565b602002602001015160200151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b84811015611844578581815181106117f5576117f5615a8d565b60200260200101519350828261180e8660200151614cc0565b60405160200161182093929190615693565b6040516020818303038152906040529250808061183c90615a10565b9150506117db565b50909695505050505050565b606061185b82614cab565b61187357505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156119c857838290600052602060002090600602016040518060c00160405290816000820180546118dc906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611908906159d5565b80156119555780601f1061192a57610100808354040283529160200191611955565b820191906000526020600020905b81548152906001019060200180831161193857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156119a4576119a4615a61565b60038111156119b5576119b5615a61565b81525050815260200190600101906118a9565b50508251929350429150600090506119e086826125fe565b611a2a57611a27846000815181106119fa576119fa615a8d565b602002602001015185600081518110611a1557611a15615a8d565b6020026020010151604001518461495d565b90505b6000611a3582614cc0565b604080518082019091526001808252602360f81b6020830152919250905b85811015611af1576000611a678a836125fe565b611aaf57611aac888381518110611a8057611a80615a8d565b6020026020010151898481518110611a9a57611a9a615a8d565b6020026020010151604001518861495d565b90505b8383611aba83614cc0565b604051602001611acc93929190615693565b6040516020818303038152906040529350508080611ae990615a10565b915050611a53565b5090979650505050505050565b600d546001600160a01b0316331480611b215750600c546001600160a01b031633145b611b3d5760405162461bcd60e51b8152600401610976906157a6565b600955565b60008151835114611b865760405162461bcd60e51b815260206004820152600e60248201526d12539415550e881253959053125160921b6044820152606401610976565b6000805b8351811015611de4576000848281518110611ba757611ba7615a8d565b602002602001015190506000868381518110611bc557611bc5615a8d565b60200260200101519050612a30811480611be0575061546081145b80611bec5750617e9081145b80611bf8575061a8c081145b611c405760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c69642074696d6560381b6044820152606401610976565b6001600160a01b0388166000908152600560205260408120805484908110611c6a57611c6a615a8d565b90600052602060002090600602016040518060c0016040529081600082018054611c93906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbf906159d5565b8015611d0c5780601f10611ce157610100808354040283529160200191611d0c565b820191906000526020600020905b815481529060010190602001808311611cef57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611d5b57611d5b615a61565b6003811115611d6c57611d6c615a61565b815250509050612a3082601560008460a001516003811115611d9057611d90615a61565b6003811115611da157611da1615a61565b815260200190815260200160002054611dba919061591d565b611dc491906158fb565b611dce90866158be565b945050505080611ddd90615a10565b9050611b8a565b5090505b9392505050565b6000610e60600183614de8565b6060611e0782614cab565b611e1f57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611f7457838290600052602060002090600602016040518060c0016040529081600082018054611e88906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb4906159d5565b8015611f015780601f10611ed657610100808354040283529160200191611f01565b820191906000526020600020905b815481529060010190602001808311611ee457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611f5057611f50615a61565b6003811115611f6157611f61615a61565b8152505081526020019060010190611e55565b505050509050600081519050611f886150bd565b6000611fb184600081518110611fa057611fa0615a8d565b602002602001015160400151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b8481101561184457858181518110611fe957611fe9615a8d565b6020026020010151935082826120028660400151614cc0565b60405160200161201493929190615693565b6040516020818303038152906040529250808061203090615a10565b915050611fcf565b600d546001600160a01b031633148061205b5750600c546001600160a01b031633145b6120775760405162461bcd60e51b8152600401610976906157a6565b6011546040516370a0823160e01b81526000916001600160a01b0316906370a08231906120a89030906004016156d6565b60206040518083038186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f89190615590565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561214857600080fd5b505af115801561215c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121809190615523565b6121ca5760405162461bcd60e51b815260206004820152601b60248201527a1353d3951217d1915157d5d2551211149055ce8812539590531251602a1b6044820152606401610976565b5050565b60606121d982614cab565b6121f157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561234657838290600052602060002090600602016040518060c001604052908160008201805461225a906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612286906159d5565b80156122d35780601f106122a8576101008083540402835291602001916122d3565b820191906000526020600020905b8154815290600101906020018083116122b657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561232257612322615a61565b600381111561233357612333615a61565b8152505081526020019060010190612227565b50505050905060008151905061235a6150bd565b60006123838460008151811061237257612372615a8d565b602002602001015160600151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b84811015611844578581815181106123bb576123bb615a8d565b6020026020010151935082826123d48660600151614cc0565b6040516020016123e693929190615693565b6040516020818303038152906040529250808061240290615a10565b9150506123a1565b600061241582614cab565b61242157506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561257357838290600052602060002090600602016040518060c0016040529081600082018054612487906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546124b3906159d5565b80156125005780601f106124d557610100808354040283529160200191612500565b820191906000526020600020905b8154815290600101906020018083116124e357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561254f5761254f615a61565b600381111561256057612560615a61565b8152505081526020019060010190612454565b5050825192935060009150505b818110156125e95761259286826125fe565b1561259c576125d7565b60008382815181106125b0576125b0615a8d565b602002602001015190506125c98182604001514261495d565b6125d390866158be565b9450505b806125e181615a10565b915050612580565b5091949350505050565b6000610e6082614cab565b60008061260b8484611099565b9050428160000151108015612621575080604001515b15612630576001915050610e60565b5060009392505050565b600054610100900460ff166126555760005460ff1615612659565b303b155b6126bc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610976565b600054610100900460ff161580156126de576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b60038110156128dc5786818151811061270b5761270b615a8d565b60200260200101516006600083600381111561272957612729615a61565b600381111561273a5761273a615a61565b600381111561274b5761274b615a61565b81526020019081526020016000208190555085818151811061276f5761276f615a8d565b60200260200101516007600083600381111561278d5761278d615a61565b600381111561279e5761279e615a61565b60038111156127af576127af615a61565b8152602001908152602001600020819055506000600f60008360038111156127d9576127d9615a61565b60038111156127ea576127ea615a61565b60038111156127fb576127fb615a61565b8152602001908152602001600020819055506008600082600381111561282357612823615a61565b600381111561283457612834615a61565b600381111561284557612845615a61565b8152602001526008600082600381111561286157612861615a61565b600381111561287257612872615a61565b600381111561288357612883615a61565b8152602080820192909252604090810160009081208251808401909352858352828401828152815460018181018455928452949092209251600290940290920192835551910155806128d481615a10565b9150506126f0565b50506009839055600c80546001600160a01b03191633179055600b829055801561290c576000805461ff00191690555b5050505050565b600d546001600160a01b03163314806129365750600c546001600160a01b031633145b6129525760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b0381166129785760405162461bcd60e51b815260040161097690615805565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60606129a582614cab565b6129bd57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612b1257838290600052602060002090600602016040518060c0016040529081600082018054612a26906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612a52906159d5565b8015612a9f5780601f10612a7457610100808354040283529160200191612a9f565b820191906000526020600020905b815481529060010190602001808311612a8257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612aee57612aee615a61565b6003811115612aff57612aff615a61565b81525050815260200190600101906129f3565b505050509050600081519050612b266150bd565b6000612b53612b4e85600081518110612b4157612b41615a8d565b6020026020010151614e07565b614cc0565b604080518082019091526001808252602360f81b6020830152919250905b8481101561184457858181518110612b8b57612b8b615a8d565b602002602001015193508282612ba3612b4e87614e07565b604051602001612bb593929190615693565b60405160208183030381529060405292508080612bd190615a10565b915050612b71565b600d546001600160a01b0316331480612bfc5750600c546001600160a01b031633145b612c185760405162461bcd60e51b8152600401610976906157a6565b600060086000836003811115612c3057612c30615a61565b6003811115612c4157612c41615a61565b8152602081019190915260400160002054905060018111612cb45760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610976565b60086000836003811115612cca57612cca615a61565b6003811115612cdb57612cdb615a61565b8152602001908152602001600020805480612cf857612cf8615a77565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b0316331480612d3d5750600c546001600160a01b031633145b612d595760405162461bcd60e51b8152600401610976906157a6565b60135460ff1615158115151415612dae5760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a20494e56414c49442053544154555360381b6044820152606401610976565b6013805460ff191682151517905560188054906000612dcc83615a10565b90915550506040805180820182524281529115156020808401918252601854600090815260179091529190912091518255516001909101805460ff1916911515919091179055565b6060612e1f82614cab565b612e3757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612f8c57838290600052602060002090600602016040518060c0016040529081600082018054612ea0906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612ecc906159d5565b8015612f195780601f10612eee57610100808354040283529160200191612f19565b820191906000526020600020905b815481529060010190602001808311612efc57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612f6857612f68615a61565b6003811115612f7957612f79615a61565b8152505081526020019060010190612e6d565b505050509050600081519050612fa06150bd565b6000612fd584600081518110612fb857612fb8615a8d565b602002602001015160a001516003811115612b4e57612b4e615a61565b604080518082019091526001808252602360f81b6020830152919250905b848110156118445785818151811061300d5761300d615a8d565b6020026020010151935082826130328660a001516003811115612b4e57612b4e615a61565b60405160200161304493929190615693565b6040516020818303038152906040529250808061306090615a10565b915050612ff3565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156131ba57838290600052602060002090600602016040518060c00160405290816000820180546130ce906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546130fa906159d5565b80156131475780601f1061311c57610100808354040283529160200191613147565b820191906000526020600020905b81548152906001019060200180831161312a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561319657613196615a61565b60038111156131a7576131a7615a61565b815250508152602001906001019061309b565b5050825192935050508084106131e25760405162461bcd60e51b8152600401610976906157ce565b60008285815181106131f6576131f6615a8d565b60200260200101519050613213818260200151836040015161495d565b9695505050505050565b600d546001600160a01b03163314806132405750600c546001600160a01b031633145b61325c5760405162461bcd60e51b8152600401610976906157a6565b6305f5e10081126132c05760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610976565b600860008360038111156132d6576132d6615a61565b60038111156132e7576132e7615a61565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b6000606061333f83614cab565b61335b5750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156134b057838290600052602060002090600602016040518060c00160405290816000820180546133c4906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546133f0906159d5565b801561343d5780601f106134125761010080835404028352916020019161343d565b820191906000526020600020905b81548152906001019060200180831161342057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561348c5761348c615a61565b600381111561349d5761349d615a61565b8152505081526020019060010190613391565b505082519293506000915061351a90508382846134cf576134cf615a8d565b6020026020010151846000815181106134ea576134ea615a8d565b6020026020010151602001518560008151811061350957613509615a8d565b60200260200101516040015161495d565b905061352581614cc0565b604080518082019091526001808252602360f81b6020830152919550905b838110156135ce5760008086838151811061356057613560615a8d565b6020026020010151905061357d818260200151836040015161495d565b915061358982866158be565b9450878461359684614cc0565b6040516020016135a893929190615693565b6040516020818303038152906040529750505080806135c690615a10565b915050613543565b5050505050915091565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609493849084015b8282101561372c57838290600052602060002090600602016040518060c0016040529081600082018054613640906159d5565b80601f016020809104026020016040519081016040528092919081815260200182805461366c906159d5565b80156136b95780601f1061368e576101008083540402835291602001916136b9565b820191906000526020600020905b81548152906001019060200180831161369c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561370857613708615a61565b600381111561371957613719615a61565b815250508152602001906001019061360d565b505050509050600081516001600160401b0381111561374d5761374d615aa3565b60405190808252806020026020018201604052801561378657816020015b613773615103565b81526020019060019003908161376b5790505b50905060005b82518110156109445760008382815181106137a9576137a9615a8d565b6020026020010151905060006137bf8784611099565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561381757613817615a61565b8152602001836000015181526020018360200151815260200183604001511515815260200161384b8586604001514261495d565b815260200161385a8a87613068565b81525090508085858151811061387257613872615a8d565b60200260200101819052505050508061388a90615a10565b905061378c565b600d5460009081906001600160a01b031633146138c05760405162461bcd60e51b8152600401610976906157a6565b60135460ff1615613974576138d58484614e13565b6001600160a01b03841660009081526016602090815260408083208684528252918290208251606081018452815481526001820154928101929092526002015460ff1615801592820183905290919061392e5750805142115b156139725760405162461bcd60e51b81526020600482015260146024820152731399595908195e1d195b990818dbdb9d1c9858dd60621b6044820152606401610976565b505b6001600160a01b0384166000908152600560205260409020805484106139d05760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610976565b60008185815481106139e4576139e4615a8d565b90600052602060002090600602019050613a018160020154614e81565b613a705760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f2077616974206044820152793132b337b9329031b630b4b6b4b733903a3434b99031b7b73a1760311b6064820152608401610976565b60004290506000613b7d836040518060c0016040529081600082018054613a96906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613ac2906159d5565b8015613b0f5780601f10613ae457610100808354040283529160200191613b0f565b820191906000526020600020905b815481529060010190602001808311613af257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613b5e57613b5e615a61565b6003811115613b6f57613b6f615a61565b90525060028501548461495d565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16613d3757613cb8836040518060c0016040529081600082018054613bd1906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613bfd906159d5565b8015613c4a5780601f10613c1f57610100808354040283529160200191613c4a565b820191906000526020600020905b815481529060010190602001808311613c2d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613c9957613c99615a61565b6003811115613caa57613caa615a61565b90525060018501544261495d565b836004015411613d37576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92613d2e9260ff919091169161575a565b60405180910390a15b6005909201549194505060ff169150509250929050565b613d56615103565b6001600160a01b0383166000908152600560205260408120805484908110613d8057613d80615a8d565b90600052602060002090600602016040518060c0016040529081600082018054613da9906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613dd5906159d5565b8015613e225780601f10613df757610100808354040283529160200191613e22565b820191906000526020600020905b815481529060010190602001808311613e0557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613e7157613e71615a61565b6003811115613e8257613e82615a61565b90525090506000613e938585611099565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a001516003811115613eeb57613eeb615a61565b81526020018360000151815260200183602001518152602001836040015115158152602001613f1f8586604001514261495d565b8152602001613f2e8888613068565b90529695505050505050565b6000600f6000836003811115613f5257613f52615a61565b6003811115613f6357613f63615a61565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b03163314613fac5760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b038516600090815260056020526040902080548061402b5760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610976565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b858110156144515760135460ff16156140e6576140808c82614e13565b6001600160a01b038c1660009081526016602090815260408083208484528252918290208251606081018452815481526001820154928101929092526002015460ff161580159282018390529091906140d95750805142115b156140e4575061443f565b505b8681815481106140f8576140f8615a8d565b906000526020600020906006020194506000614210866040518060c0016040529081600082018054614129906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054614155906159d5565b80156141a25780601f10614177576101008083540402835291602001916141a2565b820191906000526020600020905b81548152906001019060200180831161418557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156141f1576141f1615a61565b600381111561420257614202615a61565b90525060028801544261495d565b905061421c81866158be565b60058701549095508190859060ff16600381111561423c5761423c615a61565b60ff166003811061424f5761424f615a8d565b6020020181815161426091906158be565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff161580156143a6575061439e866040518060c00160405290816000820180546142b7906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546142e3906159d5565b80156143305780601f1061430557610100808354040283529160200191614330565b820191906000526020600020905b81548152906001019060200180831161431357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561437f5761437f615a61565b600381111561439057614390615a61565b90525060018801544261495d565b866004015411155b1561443d576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff1660038111156143f2576143f2615a61565b9050838160ff166003811061440957614409615a8d565b60200201516144199060016158d6565b848260ff166003811061442e5761442e615a8d565b60ff9092166020929092020152505b505b8061444981615a10565b915050614063565b5060005b60038160ff1610156144ff576000828260ff166003811061447857614478615a8d565b602002015160ff1611156144ed577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156144bc576144bc615a61565b838360ff16600381106144d1576144d1615a8d565b60200201516040516144e4929190615775565b60405180910390a15b806144f781615a2b565b915050614455565b505080516020820151604090920151929b909a50909850909650945050505050565b600d546001600160a01b03163314806145445750600c546001600160a01b031633145b6145605760405162461bcd60e51b8152600401610976906157a6565b601180546001600160a01b0319166001600160a01b0395909516949094179093557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b919091557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d5560145560408051808201909152428152600160208083018281526000808052601790925292517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89b5591517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89c805491151560ff1992831617905560189290925560138054909216179055565b606061465e82614cab565b61467657505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156147cb57838290600052602060002090600602016040518060c00160405290816000820180546146df906159d5565b80601f016020809104026020016040519081016040528092919081815260200182805461470b906159d5565b80156147585780601f1061472d57610100808354040283529160200191614758565b820191906000526020600020905b81548152906001019060200180831161473b57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156147a7576147a7615a61565b60038111156147b8576147b8615a61565b81525050815260200190600101906146ac565b5050505090506000815190506147df6150bd565b6000836000815181106147f4576147f4615a8d565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156118445785818151811061484157614841615a8d565b602002602001015193508282856000015160405160200161486493929190615693565b6040516020818303038152906040529250808061488090615a10565b915050614827565b600080614899836305f5e10061593c565b90506305f5e1006148aa828661591d565b6113a391906158fb565b6001600160a01b038216600090815260038401602052604090205460ff16156148f9576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156149a65760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610976565b83602001518310156149ed5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610976565b60a084015160006149fe8286614e9a565b90506000614a0c8386614e9a565b60808801519091506000614a208989614f75565b60208a01516000975090915088908790819081885b88811015614b8857600860008c6003811115614a5357614a53615a61565b6003811115614a6457614a64615a61565b81526020019081526020016000208181548110614a8357614a83615a8d565b9060005260206000209060020201600001549450614aa1868461501f565b614aab868561501f565b1480159250614ae357614abe868461501f565b614ac99060016158be565b600a54614ad6919061591d565b614ae090846158be565b94505b614aed868661597b565b93508495506301e13380846305f5e100898b614b09919061591d565b614b1391906158fb565b614b1d919061591d565b614b2791906158fb565b614b31908d6158be565b9b508115614b5957614b4587600b54614888565b965080614b51816159be565b915050614b76565b614b7387600860008e60038111156108e9576108e9615a61565b96505b80614b8081615a10565b915050614a35565b505b8b8514614c4a578b9350614b9e858361501f565b614ba8858461501f565b1480159150614be057614bbb858361501f565b614bc69060016158be565b600a54614bd3919061591d565b614bdd90836158be565b93505b614bea858561597b565b92508394506301e13380836305f5e100888a614c06919061591d565b614c1091906158fb565b614c1a919061591d565b614c2491906158fb565b614c2e908c6158be565b9a508015614c4557614c4286600b54614888565b95505b614b8a565b505050505050505050509392505050565b600060028260a001516003811115614c7557614c75615a61565b1480614c96575060018260a001516003811115614c9457614c94615a61565b145b15614ca357506001919050565b506000919050565b600080614cb9600184614de8565b1192915050565b606081614ce45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614d0e5780614cf881615a10565b9150614d079050600a836158fb565b9150614ce8565b6000816001600160401b03811115614d2857614d28615aa3565b6040519080825280601f01601f191660200182016040528015614d52576020820181803683370190505b509050815b8515614ddf57614d6860018261597b565b90506000614d77600a886158fb565b614d8290600a61591d565b614d8c908861597b565b614d979060306158d6565b905060008160f81b905080848481518110614db457614db4615a8d565b60200101906001600160f81b031916908160001a905350614dd6600a896158fb565b97505050614d57565b50949350505050565b6001600160a01b03166000908152600191909101602052604090205490565b6000610e608242614f75565b614e1d8282611266565b614e25575050565b6000614e318383611099565b6001600160a01b03939093166000908152601660209081526040808320948352938152908390208451815590840151600182015591909201516002909101805460ff191691151591909117905550565b60004260095483614e9291906158be565b111592915050565b60008080600881866003811115614eb357614eb3615a61565b6003811115614ec457614ec4615a61565b815260208101919091526040016000205490505b818111156109445760006002614eee83856158be565b614ef891906158fb565b90508460086000886003811115614f1157614f11615a61565b6003811115614f2257614f22615a61565b81526020019081526020016000208281548110614f4157614f41615a8d565b9060005260206000209060020201600001541015614f6b57614f648160016158be565b9250614f6f565b8091505b50614ed8565b602082015160a08301516060840151600092919083614f948385614e9a565b90506000614fa28488614e9a565b9050815b81811015614fdc57614fc884600860008860038111156108e9576108e9615a61565b935080614fd481615a10565b915050614fa6565b506000614fe9888761501f565b90505b80156150125780614ffc816159be565b91505061500b84600b54614888565b9350614fec565b5091979650505050505050565b600a5460009061502f838561597b565b611de891906158fb565b828054615045906159d5565b90600052602060002090601f01602090048101928261506757600085556150ad565b82601f1061508057805160ff19168380011785556150ad565b828001600101855582156150ad579182015b828111156150ad578251825591602001919060010190615092565b506150b9929150615170565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156150fe576150fe615a61565b905290565b60405180610160016040528060608152602001600081526020016000815260200160008152602001600081526020016000600381111561514557615145615a61565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b5b808211156150b95760008155600101615171565b80356001600160a01b038116811461519c57600080fd5b919050565b600082601f8301126151b257600080fd5b813560206151c76151c28361589b565b61586b565b80838252828201915082860187848660051b89010111156151e757600080fd5b60005b85811015611af1578135845292840192908401906001016151ea565b80356004811061519c57600080fd5b60006020828403121561522757600080fd5b611de882615185565b60008060006060848603121561524557600080fd5b61524e84615185565b92506020808501356001600160401b038082111561526b57600080fd5b818701915087601f83011261527f57600080fd5b813561528d6151c28261589b565b8082825285820191508585018b878560051b88010111156152ad57600080fd5b60005b8481101561533a578135868111156152c757600080fd5b8701603f81018e136152d857600080fd5b88810135878111156152ec576152ec615aa3565b6152fe601f8201601f19168b0161586b565b8181528f604083850101111561531357600080fd5b81604084018c83013760009181018b019190915285525092870192908701906001016152b0565b505080975050505050505061535160408501615206565b90509250925092565b60008060006060848603121561536f57600080fd5b61537884615185565b925060208401356001600160401b038082111561539457600080fd5b6153a0878388016151a1565b935060408601359150808211156153b657600080fd5b506153c3868287016151a1565b9150509250925092565b600080604083850312156153e057600080fd5b6153e983615185565b946020939093013593505050565b6000806000806080858703121561540d57600080fd5b61541685615185565b966020860135965060408601359560600135945092505050565b6000806040838503121561544357600080fd5b82356001600160401b038082111561545a57600080fd5b615466868387016151a1565b9350602085013591508082111561547c57600080fd5b50615489858286016151a1565b9150509250929050565b600080600080608085870312156154a957600080fd5b84356001600160401b03808211156154c057600080fd5b6154cc888389016151a1565b955060208701359150808211156154e257600080fd5b506154ef878288016151a1565b949794965050505060408301359260600135919050565b60006020828403121561551857600080fd5b8135611de881615ab9565b60006020828403121561553557600080fd5b8151611de881615ab9565b60006020828403121561555257600080fd5b611de882615206565b6000806040838503121561556e57600080fd5b6153e983615206565b60006020828403121561558957600080fd5b5035919050565b6000602082840312156155a257600080fd5b5051919050565b600481106155c757634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526155e3816020860160208601615992565b601f01601f19169290920160200192915050565b6000610160825181855261560d828601826155cb565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015161564a60a08601826155a9565b5060c083015160c085015260e083015160e0850152610100808401516156738287018215159052565b505061012083810151908501526101409283015192909301919091525090565b600084516156a5818460208901615992565b8451908301906156b9818360208901615992565b84519101906156cc818360208801615992565b0195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561573f57603f1988860301845261572d8583516155f7565b94509285019290850190600101615711565b5092979650505050505050565b60208101610e6082846155a9565b6040810161576882856155a9565b8260208301529392505050565b6040810161578382856155a9565b60ff831660208301529392505050565b602081526000611de860208301846155cb565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252601c908201527f434f4e543a20436f6e7420696e64657820697320696d70726f70657200000000604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b602081526000611de860208301846155f7565b82815260408101611de860208301846155a9565b8281526040602082015260006113a360408301846155cb565b604051601f8201601f191681016001600160401b038111828210171561589357615893615aa3565b604052919050565b60006001600160401b038211156158b4576158b4615aa3565b5060051b60200190565b600082198211156158d1576158d1615a4b565b500190565b600060ff821660ff84168060ff038211156158f3576158f3615a4b565b019392505050565b60008261591857634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561593757615937615a4b565b500290565b60008083128015600160ff1b85018412161561595a5761595a615a4b565b6001600160ff1b038401831381161561597557615975615a4b565b50500390565b60008282101561598d5761598d615a4b565b500390565b60005b838110156159ad578181015183820152602001615995565b838111156116025750506000910152565b6000816159cd576159cd615a4b565b506000190190565b600181811c908216806159e957607f821691505b60208210811415615a0a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615a2457615a24615a4b565b5060010190565b600060ff821660ff811415615a4257615a42615a4b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114615ac757600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e35760003560e01c8063665bb078116101895780639d2040f0116100df5780639d2040f0146106d5578063a1a99b91146106e8578063a8ad436814610709578063c19f40d214610729578063c2202b6614610732578063c3bbc55a14610753578063ce6912a314610773578063d08e7e1e14610786578063d094fa8d1461078f578063dc73ff5e146107c2578063de2fb95c14610801578063e18f03ad1461080a578063ed9ddfcb14610813578063f743f31914610826578063fc0c546a1461083957600080fd5b8063665bb078146105ae57806367d04cc4146105c15780636bb4d902146105d45780636eb5a7f4146105dd578063704b6c02146105f057806377ec7826146106035780637bed9600146106165780638201bf2614610644578063872a60ad14610657578063879613ae1461066a5780638bf145141461067d578063927831b41461069057806393520a80146106a35780639b28d1a7146106ac5780639d078b98146106b557600080fd5b8063367fd0741161023e578063367fd07414610441578063390c991e146104545780633c4024071461046757806344fea1b91461047a5780634e1f2e761461048d5780634ec7b429146104e75780634f88de01146104f057806351bf120c1461051057806355091dad1461052357806355a757d0146105365780635dbab6ed1461053f578063619a635e1461055257806363a9b09814610565578063647846a51461058557806365aa5bbb146105a557600080fd5b8062c73e4d146102e857806303bac12a1461030e5780630534cc681461032b5780630b9f6cfe146103405780630c12252b146103535780630d9f9f0c1461035c578063144fa6d71461036f5780631565f50e146103825780631a440de6146103955780631d5a1731146103a85780631f7f63c0146103bb57806320988cef146103f2578063234c4544146103fb578063261c75d81461040e57806328cceb2414610421575b600080fd5b6102fb6102f6366004615540565b61084c565b6040519081526020015b60405180910390f35b60135461031b9060ff1681565b6040519015158152602001610305565b61033e610339366004615230565b61094c565b005b6102fb61034e3660046153cd565b610c96565b6102fb617e9081565b61033e61036a366004615577565b610e66565b61033e61037d366004615215565b610eaa565b61033e610390366004615577565b610f31565b61033e6103a3366004615215565b610f75565b61033e6103b636600461555b565b610fd6565b6103ce6103c93660046153cd565b611099565b60408051825181526020808401519082015291810151151590820152606001610305565b6102fb612a3081565b61031b6104093660046153cd565b611266565b61033e61041c366004615430565b6113ab565b61043461042f366004615215565b611608565b6040516103059190615793565b61043461044f366004615215565b611850565b61033e610462366004615577565b611afe565b6102fb61047536600461535a565b611b42565b6102fb610488366004615215565b611def565b6104ca61049b3660046153cd565b601660209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610305565b6102fb60145481565b6102fb6104fe366004615540565b60076020526000908152604090205481565b61043461051e366004615215565b611dfc565b61033e610531366004615215565b612038565b6102fb60095481565b61043461054d366004615215565b6121ce565b6102fb610560366004615215565b61240a565b6102fb610573366004615540565b60066020526000908152604090205481565b601154610598906001600160a01b031681565b60405161030591906156d6565b6102fb60001981565b61031b6105bc366004615215565b6125f3565b61031b6105cf3660046153cd565b6125fe565b6102fb60125481565b61033e6105eb366004615493565b61263a565b61033e6105fe366004615215565b612913565b610434610611366004615215565b61299a565b61031b6106243660046153cd565b601060209081526000928352604080842090915290825290205460ff1681565b61033e610652366004615540565b612bd9565b600c54610598906001600160a01b031681565b61033e610678366004615506565b612d1a565b61043461068b366004615215565b612e14565b6102fb61069e3660046153cd565b613068565b6102fb600b5481565b6102fb600a5481565b6102fb6106c3366004615540565b60156020526000908152604090205481565b61033e6106e336600461555b565b61321d565b6106fb6106f6366004615215565b613332565b604051610305929190615852565b61071c610717366004615215565b6135d8565b60405161030591906156ea565b6102fb60185481565b6107456107403660046153cd565b613891565b60405161030592919061583e565b6107666107613660046153cd565b613d4e565b604051610305919061582b565b6102fb610781366004615540565b613f3a565b6102fb61a8c081565b6107a261079d366004615215565b613f79565b604080519485526020850193909352918301526060820152608001610305565b6107ec6107d0366004615577565b6017602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610305565b6102fb61546081565b6102fb600e5481565b61033e6108213660046153f7565b614521565b610434610834366004615215565b614653565b600d54610598906001600160a01b031681565b6000806008600084600381111561086557610865615a61565b600381111561087657610876615a61565b81526020019081526020016000208054905090506000600760008560038111156108a2576108a2615a61565b60038111156108b3576108b3615a61565b815260200190815260200160002054905060005b828110156109445761093082600860008860038111156108e9576108e9615a61565b60038111156108fa576108fa615a61565b8152602001908152602001600020838154811061091957610919615a8d565b906000526020600020906002020160010154614888565b91508061093c81615a10565b9150506108c7565b509392505050565b600d546001600160a01b0316331461097f5760405162461bcd60e51b8152600401610976906157a6565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d906109b490859060040161574c565b60206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190615590565b905060005b8351811015610c055760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610a5457610a54615a8d565b6020026020010151815260200142815260200142815260200184815260200160066000876003811115610a8957610a89615a61565b6003811115610a9a57610a9a615a61565b8152602001908152602001600020548152602001856003811115610ac057610ac0615a61565b905281546001810183556000928352602092839020825180519394600690930290910192610af19284920190615039565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610b4457610b44615a61565b021790555050506001600160a01b038516600090815260056020526040812054610b709060019061597b565b90506000610b7e8783611266565b9050604051806060016040528061546042610b9991906158be565b8152426020808301919091529215156040918201526001600160a01b0389166000908152601684528181209481529383529283902081518155918101516001830155909101516002909101805460ff191691151591909117905580610bfd81615a10565b915050610a09565b506001600160a01b038416600090815260056020526040902054610c2d9060019086906148b4565b8251600e6000828254610c4091906158be565b90915550508251600f6000846003811115610c5d57610c5d615a61565b6003811115610c6e57610c6e615a61565b81526020019081526020016000206000828254610c8b91906158be565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610de857838290600052602060002090600602016040518060c0016040529081600082018054610cfc906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d28906159d5565b8015610d755780601f10610d4a57610100808354040283529160200191610d75565b820191906000526020600020905b815481529060010190602001808311610d5857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610dc457610dc4615a61565b6003811115610dd557610dd5615a61565b8152505081526020019060010190610cc9565b505082519293505050808410610e105760405162461bcd60e51b8152600401610976906157ce565b610e1a85856125fe565b15610e2a57600092505050610e60565b6000828581518110610e3e57610e3e615a8d565b602002602001015190506000610e598283604001514261495d565b9450505050505b92915050565b600d546001600160a01b0316331480610e895750600c546001600160a01b031633145b610ea55760405162461bcd60e51b8152600401610976906157a6565b600b55565b600d546001600160a01b0316331480610ecd5750600c546001600160a01b031633145b610ee95760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b038116610f0f5760405162461bcd60e51b815260040161097690615805565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610f545750600c546001600160a01b031633145b610f705760405162461bcd60e51b8152600401610976906157a6565b600a55565b600d546001600160a01b0316331480610f985750600c546001600160a01b031633145b610fb45760405162461bcd60e51b8152600401610976906157a6565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610ff95750600c546001600160a01b031633145b6110155760405162461bcd60e51b8152600401610976906157a6565b6000811161105c5760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e881393d508159053125160621b6044820152606401610976565b806006600084600381111561107357611073615a61565b600381111561108457611084615a61565b81526020810191909152604001600020555050565b6110bf604051806060016040528060008152602001600081526020016000151581525090565b6110c98383611266565b6110f45760405180606001604052806000815260200160008152602001600015158152509050610e60565b6001600160a01b03831660009081526016602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526111605760145480825261115a90612a309061597b565b60208201525b6000805b60185481116111ee576000818152601760209081526040918290208251808401909352805480845260019091015460ff1615158383015290850151106111aa57506111de565b60208101511515600114156111d757602084015181516111ca90856158be565b6111d4919061597b565b92505b5160208401525b6111e781615a10565b9050611164565b506018546000908152601760205260409020544211156112425760135460ff1661123b5760185460009081526017602052604090205461122e42836158be565b611238919061597b565b90505b4260208301525b808260000181815161125491906158be565b90525050600160408201529392505050565b6001600160a01b038216600090815260056020526040812080548291908490811061129357611293615a8d565b90600052602060002090600602016040518060c00160405290816000820180546112bc906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546112e8906159d5565b80156113355780601f1061130a57610100808354040283529160200191611335565b820191906000526020600020905b81548152906001019060200180831161131857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561138457611384615a61565b600381111561139557611395615a61565b90525090506113a381614c5b565b949350505050565b60135460ff166113f55760405162461bcd60e51b81526020600482015260156024820152744d4f4e54485f4645453a204e6f7420656e61626c6560581b6044820152606401610976565b6000611402338484611b42565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190615523565b6114d05760405162461bcd60e51b81526020600482015260146024820152731353d3951217d191514e88139bdd081d985b1a5960621b6044820152606401610976565b60005b8251811015611602576000611501338584815181106114f4576114f4615a8d565b6020026020010151611099565b905080604001516115505760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c6964207479706560381b6044820152606401610976565b84828151811061156257611562615a8d565b60200260200101518160000181815161157b91906158be565b9052504260208083019190915233600090815260169091526040812085518392908790869081106115ae576115ae615a8d565b60209081029190910181015182528181019290925260409081016000208351815591830151600183015591909101516002909101805460ff1916911515919091179055506115fb81615a10565b90506114d3565b50505050565b606061161382614cab565b61162b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561178057838290600052602060002090600602016040518060c0016040529081600082018054611694906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546116c0906159d5565b801561170d5780601f106116e25761010080835404028352916020019161170d565b820191906000526020600020905b8154815290600101906020018083116116f057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561175c5761175c615a61565b600381111561176d5761176d615a61565b8152505081526020019060010190611661565b5050505090506000815190506117946150bd565b60006117bd846000815181106117ac576117ac615a8d565b602002602001015160200151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b84811015611844578581815181106117f5576117f5615a8d565b60200260200101519350828261180e8660200151614cc0565b60405160200161182093929190615693565b6040516020818303038152906040529250808061183c90615a10565b9150506117db565b50909695505050505050565b606061185b82614cab565b61187357505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156119c857838290600052602060002090600602016040518060c00160405290816000820180546118dc906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611908906159d5565b80156119555780601f1061192a57610100808354040283529160200191611955565b820191906000526020600020905b81548152906001019060200180831161193857829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156119a4576119a4615a61565b60038111156119b5576119b5615a61565b81525050815260200190600101906118a9565b50508251929350429150600090506119e086826125fe565b611a2a57611a27846000815181106119fa576119fa615a8d565b602002602001015185600081518110611a1557611a15615a8d565b6020026020010151604001518461495d565b90505b6000611a3582614cc0565b604080518082019091526001808252602360f81b6020830152919250905b85811015611af1576000611a678a836125fe565b611aaf57611aac888381518110611a8057611a80615a8d565b6020026020010151898481518110611a9a57611a9a615a8d565b6020026020010151604001518861495d565b90505b8383611aba83614cc0565b604051602001611acc93929190615693565b6040516020818303038152906040529350508080611ae990615a10565b915050611a53565b5090979650505050505050565b600d546001600160a01b0316331480611b215750600c546001600160a01b031633145b611b3d5760405162461bcd60e51b8152600401610976906157a6565b600955565b60008151835114611b865760405162461bcd60e51b815260206004820152600e60248201526d12539415550e881253959053125160921b6044820152606401610976565b6000805b8351811015611de4576000848281518110611ba757611ba7615a8d565b602002602001015190506000868381518110611bc557611bc5615a8d565b60200260200101519050612a30811480611be0575061546081145b80611bec5750617e9081145b80611bf8575061a8c081145b611c405760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a204e6f742076616c69642074696d6560381b6044820152606401610976565b6001600160a01b0388166000908152600560205260408120805484908110611c6a57611c6a615a8d565b90600052602060002090600602016040518060c0016040529081600082018054611c93906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbf906159d5565b8015611d0c5780601f10611ce157610100808354040283529160200191611d0c565b820191906000526020600020905b815481529060010190602001808311611cef57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611d5b57611d5b615a61565b6003811115611d6c57611d6c615a61565b815250509050612a3082601560008460a001516003811115611d9057611d90615a61565b6003811115611da157611da1615a61565b815260200190815260200160002054611dba919061591d565b611dc491906158fb565b611dce90866158be565b945050505080611ddd90615a10565b9050611b8a565b5090505b9392505050565b6000610e60600183614de8565b6060611e0782614cab565b611e1f57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611f7457838290600052602060002090600602016040518060c0016040529081600082018054611e88906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb4906159d5565b8015611f015780601f10611ed657610100808354040283529160200191611f01565b820191906000526020600020905b815481529060010190602001808311611ee457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611f5057611f50615a61565b6003811115611f6157611f61615a61565b8152505081526020019060010190611e55565b505050509050600081519050611f886150bd565b6000611fb184600081518110611fa057611fa0615a8d565b602002602001015160400151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b8481101561184457858181518110611fe957611fe9615a8d565b6020026020010151935082826120028660400151614cc0565b60405160200161201493929190615693565b6040516020818303038152906040529250808061203090615a10565b915050611fcf565b600d546001600160a01b031633148061205b5750600c546001600160a01b031633145b6120775760405162461bcd60e51b8152600401610976906157a6565b6011546040516370a0823160e01b81526000916001600160a01b0316906370a08231906120a89030906004016156d6565b60206040518083038186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f89190615590565b60115460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561214857600080fd5b505af115801561215c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121809190615523565b6121ca5760405162461bcd60e51b815260206004820152601b60248201527a1353d3951217d1915157d5d2551211149055ce8812539590531251602a1b6044820152606401610976565b5050565b60606121d982614cab565b6121f157505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561234657838290600052602060002090600602016040518060c001604052908160008201805461225a906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612286906159d5565b80156122d35780601f106122a8576101008083540402835291602001916122d3565b820191906000526020600020905b8154815290600101906020018083116122b657829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561232257612322615a61565b600381111561233357612333615a61565b8152505081526020019060010190612227565b50505050905060008151905061235a6150bd565b60006123838460008151811061237257612372615a8d565b602002602001015160600151614cc0565b604080518082019091526001808252602360f81b6020830152919250905b84811015611844578581815181106123bb576123bb615a8d565b6020026020010151935082826123d48660600151614cc0565b6040516020016123e693929190615693565b6040516020818303038152906040529250808061240290615a10565b9150506123a1565b600061241582614cab565b61242157506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561257357838290600052602060002090600602016040518060c0016040529081600082018054612487906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546124b3906159d5565b80156125005780601f106124d557610100808354040283529160200191612500565b820191906000526020600020905b8154815290600101906020018083116124e357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561254f5761254f615a61565b600381111561256057612560615a61565b8152505081526020019060010190612454565b5050825192935060009150505b818110156125e95761259286826125fe565b1561259c576125d7565b60008382815181106125b0576125b0615a8d565b602002602001015190506125c98182604001514261495d565b6125d390866158be565b9450505b806125e181615a10565b915050612580565b5091949350505050565b6000610e6082614cab565b60008061260b8484611099565b9050428160000151108015612621575080604001515b15612630576001915050610e60565b5060009392505050565b600054610100900460ff166126555760005460ff1615612659565b303b155b6126bc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610976565b600054610100900460ff161580156126de576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b60038110156128dc5786818151811061270b5761270b615a8d565b60200260200101516006600083600381111561272957612729615a61565b600381111561273a5761273a615a61565b600381111561274b5761274b615a61565b81526020019081526020016000208190555085818151811061276f5761276f615a8d565b60200260200101516007600083600381111561278d5761278d615a61565b600381111561279e5761279e615a61565b60038111156127af576127af615a61565b8152602001908152602001600020819055506000600f60008360038111156127d9576127d9615a61565b60038111156127ea576127ea615a61565b60038111156127fb576127fb615a61565b8152602001908152602001600020819055506008600082600381111561282357612823615a61565b600381111561283457612834615a61565b600381111561284557612845615a61565b8152602001526008600082600381111561286157612861615a61565b600381111561287257612872615a61565b600381111561288357612883615a61565b8152602080820192909252604090810160009081208251808401909352858352828401828152815460018181018455928452949092209251600290940290920192835551910155806128d481615a10565b9150506126f0565b50506009839055600c80546001600160a01b03191633179055600b829055801561290c576000805461ff00191690555b5050505050565b600d546001600160a01b03163314806129365750600c546001600160a01b031633145b6129525760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b0381166129785760405162461bcd60e51b815260040161097690615805565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60606129a582614cab565b6129bd57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612b1257838290600052602060002090600602016040518060c0016040529081600082018054612a26906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612a52906159d5565b8015612a9f5780601f10612a7457610100808354040283529160200191612a9f565b820191906000526020600020905b815481529060010190602001808311612a8257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612aee57612aee615a61565b6003811115612aff57612aff615a61565b81525050815260200190600101906129f3565b505050509050600081519050612b266150bd565b6000612b53612b4e85600081518110612b4157612b41615a8d565b6020026020010151614e07565b614cc0565b604080518082019091526001808252602360f81b6020830152919250905b8481101561184457858181518110612b8b57612b8b615a8d565b602002602001015193508282612ba3612b4e87614e07565b604051602001612bb593929190615693565b60405160208183030381529060405292508080612bd190615a10565b915050612b71565b600d546001600160a01b0316331480612bfc5750600c546001600160a01b031633145b612c185760405162461bcd60e51b8152600401610976906157a6565b600060086000836003811115612c3057612c30615a61565b6003811115612c4157612c41615a61565b8152602081019190915260400160002054905060018111612cb45760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610976565b60086000836003811115612cca57612cca615a61565b6003811115612cdb57612cdb615a61565b8152602001908152602001600020805480612cf857612cf8615a77565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b0316331480612d3d5750600c546001600160a01b031633145b612d595760405162461bcd60e51b8152600401610976906157a6565b60135460ff1615158115151415612dae5760405162461bcd60e51b81526020600482015260196024820152784d4f4e54485f4645453a20494e56414c49442053544154555360381b6044820152606401610976565b6013805460ff191682151517905560188054906000612dcc83615a10565b90915550506040805180820182524281529115156020808401918252601854600090815260179091529190912091518255516001909101805460ff1916911515919091179055565b6060612e1f82614cab565b612e3757505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612f8c57838290600052602060002090600602016040518060c0016040529081600082018054612ea0906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054612ecc906159d5565b8015612f195780601f10612eee57610100808354040283529160200191612f19565b820191906000526020600020905b815481529060010190602001808311612efc57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612f6857612f68615a61565b6003811115612f7957612f79615a61565b8152505081526020019060010190612e6d565b505050509050600081519050612fa06150bd565b6000612fd584600081518110612fb857612fb8615a8d565b602002602001015160a001516003811115612b4e57612b4e615a61565b604080518082019091526001808252602360f81b6020830152919250905b848110156118445785818151811061300d5761300d615a8d565b6020026020010151935082826130328660a001516003811115612b4e57612b4e615a61565b60405160200161304493929190615693565b6040516020818303038152906040529250808061306090615a10565b915050612ff3565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156131ba57838290600052602060002090600602016040518060c00160405290816000820180546130ce906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546130fa906159d5565b80156131475780601f1061311c57610100808354040283529160200191613147565b820191906000526020600020905b81548152906001019060200180831161312a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561319657613196615a61565b60038111156131a7576131a7615a61565b815250508152602001906001019061309b565b5050825192935050508084106131e25760405162461bcd60e51b8152600401610976906157ce565b60008285815181106131f6576131f6615a8d565b60200260200101519050613213818260200151836040015161495d565b9695505050505050565b600d546001600160a01b03163314806132405750600c546001600160a01b031633145b61325c5760405162461bcd60e51b8152600401610976906157a6565b6305f5e10081126132c05760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610976565b600860008360038111156132d6576132d6615a61565b60038111156132e7576132e7615a61565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b6000606061333f83614cab565b61335b5750506040805160208101909152600080825292909150565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156134b057838290600052602060002090600602016040518060c00160405290816000820180546133c4906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546133f0906159d5565b801561343d5780601f106134125761010080835404028352916020019161343d565b820191906000526020600020905b81548152906001019060200180831161342057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561348c5761348c615a61565b600381111561349d5761349d615a61565b8152505081526020019060010190613391565b505082519293506000915061351a90508382846134cf576134cf615a8d565b6020026020010151846000815181106134ea576134ea615a8d565b6020026020010151602001518560008151811061350957613509615a8d565b60200260200101516040015161495d565b905061352581614cc0565b604080518082019091526001808252602360f81b6020830152919550905b838110156135ce5760008086838151811061356057613560615a8d565b6020026020010151905061357d818260200151836040015161495d565b915061358982866158be565b9450878461359684614cc0565b6040516020016135a893929190615693565b6040516020818303038152906040529750505080806135c690615a10565b915050613543565b5050505050915091565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609493849084015b8282101561372c57838290600052602060002090600602016040518060c0016040529081600082018054613640906159d5565b80601f016020809104026020016040519081016040528092919081815260200182805461366c906159d5565b80156136b95780601f1061368e576101008083540402835291602001916136b9565b820191906000526020600020905b81548152906001019060200180831161369c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561370857613708615a61565b600381111561371957613719615a61565b815250508152602001906001019061360d565b505050509050600081516001600160401b0381111561374d5761374d615aa3565b60405190808252806020026020018201604052801561378657816020015b613773615103565b81526020019060019003908161376b5790505b50905060005b82518110156109445760008382815181106137a9576137a9615a8d565b6020026020010151905060006137bf8784611099565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a00151600381111561381757613817615a61565b8152602001836000015181526020018360200151815260200183604001511515815260200161384b8586604001514261495d565b815260200161385a8a87613068565b81525090508085858151811061387257613872615a8d565b60200260200101819052505050508061388a90615a10565b905061378c565b600d5460009081906001600160a01b031633146138c05760405162461bcd60e51b8152600401610976906157a6565b60135460ff1615613974576138d58484614e13565b6001600160a01b03841660009081526016602090815260408083208684528252918290208251606081018452815481526001820154928101929092526002015460ff1615801592820183905290919061392e5750805142115b156139725760405162461bcd60e51b81526020600482015260146024820152731399595908195e1d195b990818dbdb9d1c9858dd60621b6044820152606401610976565b505b6001600160a01b0384166000908152600560205260409020805484106139d05760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610976565b60008185815481106139e4576139e4615a8d565b90600052602060002090600602019050613a018160020154614e81565b613a705760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f2077616974206044820152793132b337b9329031b630b4b6b4b733903a3434b99031b7b73a1760311b6064820152608401610976565b60004290506000613b7d836040518060c0016040529081600082018054613a96906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613ac2906159d5565b8015613b0f5780601f10613ae457610100808354040283529160200191613b0f565b820191906000526020600020905b815481529060010190602001808311613af257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613b5e57613b5e615a61565b6003811115613b6f57613b6f615a61565b90525060028501548461495d565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16613d3757613cb8836040518060c0016040529081600082018054613bd1906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613bfd906159d5565b8015613c4a5780601f10613c1f57610100808354040283529160200191613c4a565b820191906000526020600020905b815481529060010190602001808311613c2d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613c9957613c99615a61565b6003811115613caa57613caa615a61565b90525060018501544261495d565b836004015411613d37576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92613d2e9260ff919091169161575a565b60405180910390a15b6005909201549194505060ff169150509250929050565b613d56615103565b6001600160a01b0383166000908152600560205260408120805484908110613d8057613d80615a8d565b90600052602060002090600602016040518060c0016040529081600082018054613da9906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054613dd5906159d5565b8015613e225780601f10613df757610100808354040283529160200191613e22565b820191906000526020600020905b815481529060010190602001808311613e0557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115613e7157613e71615a61565b6003811115613e8257613e82615a61565b90525090506000613e938585611099565b9050600060405180610160016040528084600001518152602001846020015181526020018460400151815260200184606001518152602001846080015181526020018460a001516003811115613eeb57613eeb615a61565b81526020018360000151815260200183602001518152602001836040015115158152602001613f1f8586604001514261495d565b8152602001613f2e8888613068565b90529695505050505050565b6000600f6000836003811115613f5257613f52615a61565b6003811115613f6357613f63615a61565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b03163314613fac5760405162461bcd60e51b8152600401610976906157a6565b6001600160a01b038516600090815260056020526040902080548061402b5760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610976565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b858110156144515760135460ff16156140e6576140808c82614e13565b6001600160a01b038c1660009081526016602090815260408083208484528252918290208251606081018452815481526001820154928101929092526002015460ff161580159282018390529091906140d95750805142115b156140e4575061443f565b505b8681815481106140f8576140f8615a8d565b906000526020600020906006020194506000614210866040518060c0016040529081600082018054614129906159d5565b80601f0160208091040260200160405190810160405280929190818152602001828054614155906159d5565b80156141a25780601f10614177576101008083540402835291602001916141a2565b820191906000526020600020905b81548152906001019060200180831161418557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156141f1576141f1615a61565b600381111561420257614202615a61565b90525060028801544261495d565b905061421c81866158be565b60058701549095508190859060ff16600381111561423c5761423c615a61565b60ff166003811061424f5761424f615a8d565b6020020181815161426091906158be565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff161580156143a6575061439e866040518060c00160405290816000820180546142b7906159d5565b80601f01602080910402602001604051908101604052809291908181526020018280546142e3906159d5565b80156143305780601f1061430557610100808354040283529160200191614330565b820191906000526020600020905b81548152906001019060200180831161431357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561437f5761437f615a61565b600381111561439057614390615a61565b90525060018801544261495d565b866004015411155b1561443d576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff1660038111156143f2576143f2615a61565b9050838160ff166003811061440957614409615a8d565b60200201516144199060016158d6565b848260ff166003811061442e5761442e615a8d565b60ff9092166020929092020152505b505b8061444981615a10565b915050614063565b5060005b60038160ff1610156144ff576000828260ff166003811061447857614478615a8d565b602002015160ff1611156144ed577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156144bc576144bc615a61565b838360ff16600381106144d1576144d1615a8d565b60200201516040516144e4929190615775565b60405180910390a15b806144f781615a2b565b915050614455565b505080516020820151604090920151929b909a50909850909650945050505050565b600d546001600160a01b03163314806145445750600c546001600160a01b031633145b6145605760405162461bcd60e51b8152600401610976906157a6565b601180546001600160a01b0319166001600160a01b0395909516949094179093557f07d4ff730d9753101d832555708a37d38c2c45fce8cacaefc99f06074e93fe0b919091557f27739e4bb5e6f8b5e4b57a047dca8767cc9b982a011081e086cbb0dfa9de818d5560145560408051808201909152428152600160208083018281526000808052601790925292517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89b5591517fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89c805491151560ff1992831617905560189290925560138054909216179055565b606061465e82614cab565b61467657505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156147cb57838290600052602060002090600602016040518060c00160405290816000820180546146df906159d5565b80601f016020809104026020016040519081016040528092919081815260200182805461470b906159d5565b80156147585780601f1061472d57610100808354040283529160200191614758565b820191906000526020600020905b81548152906001019060200180831161473b57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156147a7576147a7615a61565b60038111156147b8576147b8615a61565b81525050815260200190600101906146ac565b5050505090506000815190506147df6150bd565b6000836000815181106147f4576147f4615a8d565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b848110156118445785818151811061484157614841615a8d565b602002602001015193508282856000015160405160200161486493929190615693565b6040516020818303038152906040529250808061488090615a10565b915050614827565b600080614899836305f5e10061593c565b90506305f5e1006148aa828661591d565b6113a391906158fb565b6001600160a01b038216600090815260038401602052604090205460ff16156148f9576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156149a65760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610976565b83602001518310156149ed5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610976565b60a084015160006149fe8286614e9a565b90506000614a0c8386614e9a565b60808801519091506000614a208989614f75565b60208a01516000975090915088908790819081885b88811015614b8857600860008c6003811115614a5357614a53615a61565b6003811115614a6457614a64615a61565b81526020019081526020016000208181548110614a8357614a83615a8d565b9060005260206000209060020201600001549450614aa1868461501f565b614aab868561501f565b1480159250614ae357614abe868461501f565b614ac99060016158be565b600a54614ad6919061591d565b614ae090846158be565b94505b614aed868661597b565b93508495506301e13380846305f5e100898b614b09919061591d565b614b1391906158fb565b614b1d919061591d565b614b2791906158fb565b614b31908d6158be565b9b508115614b5957614b4587600b54614888565b965080614b51816159be565b915050614b76565b614b7387600860008e60038111156108e9576108e9615a61565b96505b80614b8081615a10565b915050614a35565b505b8b8514614c4a578b9350614b9e858361501f565b614ba8858461501f565b1480159150614be057614bbb858361501f565b614bc69060016158be565b600a54614bd3919061591d565b614bdd90836158be565b93505b614bea858561597b565b92508394506301e13380836305f5e100888a614c06919061591d565b614c1091906158fb565b614c1a919061591d565b614c2491906158fb565b614c2e908c6158be565b9a508015614c4557614c4286600b54614888565b95505b614b8a565b505050505050505050509392505050565b600060028260a001516003811115614c7557614c75615a61565b1480614c96575060018260a001516003811115614c9457614c94615a61565b145b15614ca357506001919050565b506000919050565b600080614cb9600184614de8565b1192915050565b606081614ce45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614d0e5780614cf881615a10565b9150614d079050600a836158fb565b9150614ce8565b6000816001600160401b03811115614d2857614d28615aa3565b6040519080825280601f01601f191660200182016040528015614d52576020820181803683370190505b509050815b8515614ddf57614d6860018261597b565b90506000614d77600a886158fb565b614d8290600a61591d565b614d8c908861597b565b614d979060306158d6565b905060008160f81b905080848481518110614db457614db4615a8d565b60200101906001600160f81b031916908160001a905350614dd6600a896158fb565b97505050614d57565b50949350505050565b6001600160a01b03166000908152600191909101602052604090205490565b6000610e608242614f75565b614e1d8282611266565b614e25575050565b6000614e318383611099565b6001600160a01b03939093166000908152601660209081526040808320948352938152908390208451815590840151600182015591909201516002909101805460ff191691151591909117905550565b60004260095483614e9291906158be565b111592915050565b60008080600881866003811115614eb357614eb3615a61565b6003811115614ec457614ec4615a61565b815260208101919091526040016000205490505b818111156109445760006002614eee83856158be565b614ef891906158fb565b90508460086000886003811115614f1157614f11615a61565b6003811115614f2257614f22615a61565b81526020019081526020016000208281548110614f4157614f41615a8d565b9060005260206000209060020201600001541015614f6b57614f648160016158be565b9250614f6f565b8091505b50614ed8565b602082015160a08301516060840151600092919083614f948385614e9a565b90506000614fa28488614e9a565b9050815b81811015614fdc57614fc884600860008860038111156108e9576108e9615a61565b935080614fd481615a10565b915050614fa6565b506000614fe9888761501f565b90505b80156150125780614ffc816159be565b91505061500b84600b54614888565b9350614fec565b5091979650505050505050565b600a5460009061502f838561597b565b611de891906158fb565b828054615045906159d5565b90600052602060002090601f01602090048101928261506757600085556150ad565b82601f1061508057805160ff19168380011785556150ad565b828001600101855582156150ad579182015b828111156150ad578251825591602001919060010190615092565b506150b9929150615170565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160008152602001600060038111156150fe576150fe615a61565b905290565b60405180610160016040528060608152602001600081526020016000815260200160008152602001600081526020016000600381111561514557615145615a61565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b5b808211156150b95760008155600101615171565b80356001600160a01b038116811461519c57600080fd5b919050565b600082601f8301126151b257600080fd5b813560206151c76151c28361589b565b61586b565b80838252828201915082860187848660051b89010111156151e757600080fd5b60005b85811015611af1578135845292840192908401906001016151ea565b80356004811061519c57600080fd5b60006020828403121561522757600080fd5b611de882615185565b60008060006060848603121561524557600080fd5b61524e84615185565b92506020808501356001600160401b038082111561526b57600080fd5b818701915087601f83011261527f57600080fd5b813561528d6151c28261589b565b8082825285820191508585018b878560051b88010111156152ad57600080fd5b60005b8481101561533a578135868111156152c757600080fd5b8701603f81018e136152d857600080fd5b88810135878111156152ec576152ec615aa3565b6152fe601f8201601f19168b0161586b565b8181528f604083850101111561531357600080fd5b81604084018c83013760009181018b019190915285525092870192908701906001016152b0565b505080975050505050505061535160408501615206565b90509250925092565b60008060006060848603121561536f57600080fd5b61537884615185565b925060208401356001600160401b038082111561539457600080fd5b6153a0878388016151a1565b935060408601359150808211156153b657600080fd5b506153c3868287016151a1565b9150509250925092565b600080604083850312156153e057600080fd5b6153e983615185565b946020939093013593505050565b6000806000806080858703121561540d57600080fd5b61541685615185565b966020860135965060408601359560600135945092505050565b6000806040838503121561544357600080fd5b82356001600160401b038082111561545a57600080fd5b615466868387016151a1565b9350602085013591508082111561547c57600080fd5b50615489858286016151a1565b9150509250929050565b600080600080608085870312156154a957600080fd5b84356001600160401b03808211156154c057600080fd5b6154cc888389016151a1565b955060208701359150808211156154e257600080fd5b506154ef878288016151a1565b949794965050505060408301359260600135919050565b60006020828403121561551857600080fd5b8135611de881615ab9565b60006020828403121561553557600080fd5b8151611de881615ab9565b60006020828403121561555257600080fd5b611de882615206565b6000806040838503121561556e57600080fd5b6153e983615206565b60006020828403121561558957600080fd5b5035919050565b6000602082840312156155a257600080fd5b5051919050565b600481106155c757634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526155e3816020860160208601615992565b601f01601f19169290920160200192915050565b6000610160825181855261560d828601826155cb565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015161564a60a08601826155a9565b5060c083015160c085015260e083015160e0850152610100808401516156738287018215159052565b505061012083810151908501526101409283015192909301919091525090565b600084516156a5818460208901615992565b8451908301906156b9818360208901615992565b84519101906156cc818360208801615992565b0195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561573f57603f1988860301845261572d8583516155f7565b94509285019290850190600101615711565b5092979650505050505050565b60208101610e6082846155a9565b6040810161576882856155a9565b8260208301529392505050565b6040810161578382856155a9565b60ff831660208301529392505050565b602081526000611de860208301846155cb565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252601c908201527f434f4e543a20436f6e7420696e64657820697320696d70726f70657200000000604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b602081526000611de860208301846155f7565b82815260408101611de860208301846155a9565b8281526040602082015260006113a360408301846155cb565b604051601f8201601f191681016001600160401b038111828210171561589357615893615aa3565b604052919050565b60006001600160401b038211156158b4576158b4615aa3565b5060051b60200190565b600082198211156158d1576158d1615a4b565b500190565b600060ff821660ff84168060ff038211156158f3576158f3615a4b565b019392505050565b60008261591857634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561593757615937615a4b565b500290565b60008083128015600160ff1b85018412161561595a5761595a615a4b565b6001600160ff1b038401831381161561597557615975615a4b565b50500390565b60008282101561598d5761598d615a4b565b500390565b60005b838110156159ad578181015183820152602001615995565b838111156116025750506000910152565b6000816159cd576159cd615a4b565b506000190190565b600181811c908216806159e957607f821691505b60208210811415615a0a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615a2457615a24615a4b565b5060010190565b600060ff821660ff811415615a4257615a42615a4b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114615ac757600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getClaimedAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "list": "a packed list of every entries",
          "total": "total amount of reward available for account, tax included"
        }
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "rewardCont": "amount of reward available for selected contract"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getClaimedAmountOf(address)": {
        "notice": "query claimed amount of an address in every contract"
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "notice": "query claimed amount of one contract"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5404,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)14783_storage"
      },
      {
        "astId": 5410,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5360_storage)dyn_storage)"
      },
      {
        "astId": 5415,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5420,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5427,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5309,t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage)"
      },
      {
        "astId": 5429,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5431,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5433,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5435,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5437,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5439,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5444,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5450,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5453,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 5455,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "decreaseFeePercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5458,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "isMonthFeeActive",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 5460,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "defaultExpireIn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5465,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeInMonth",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(ContType)5309,t_uint256)"
      },
      {
        "astId": 5472,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "additionalDataContract",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage))"
      },
      {
        "astId": 5477,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "monthFeeLogs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(MonthFeeLog)5396_storage)"
      },
      {
        "astId": 5479,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "maxIndexMonthFeeLogs",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5401_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5360_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5360_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ContType)5309": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5360_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5360_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5309,t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5309",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5401_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5309,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5309",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5367_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(AdditionalDataEntity)5367_storage"
      },
      "t_mapping(t_uint256,t_struct(MonthFeeLog)5396_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.MonthFeeLog)",
        "numberOfBytes": "32",
        "value": "t_struct(MonthFeeLog)5396_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5401_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5398,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5400,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AdditionalDataEntity)5367_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.AdditionalDataEntity",
        "members": [
          {
            "astId": 5362,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "expireIn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5364,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5366,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "isFeeContract",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ContEntity)5360_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5348,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5350,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5352,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5354,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5356,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5359,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5309"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)14783_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 14770,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14774,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14778,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14782,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MonthFeeLog)5396_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.MonthFeeLog",
        "members": [
          {
            "astId": 5393,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "currentTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5395,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}