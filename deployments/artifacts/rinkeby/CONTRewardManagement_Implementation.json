{
  "address": "0x0E8c097bE7a7B209f64b9fdce3a43c31CE193Ed5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "list",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getClaimedAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCont",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "additionalDataContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expireIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_decreaseFeePercent",
          "type": "uint256"
        }
      ],
      "name": "changeDecreaseFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "changeFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "changeMonthFeeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpireIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "extendContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "feeInMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getExpireIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "expireIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct CONTRewardManagement.AdditionalDataEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "getExtendContractFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getNumberOfConts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isExpiredCont",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMonthFeeActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIndexMonthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monthFeeLogs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tesseractFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cubeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultExpireIn",
          "type": "uint256"
        }
      ],
      "name": "setupDataForMonthFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "userAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c01a03bf34f09a3c9742319c0988a838b4d9abffed3f98ca546180bf5c4009e",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x0E8c097bE7a7B209f64b9fdce3a43c31CE193Ed5",
    "transactionIndex": 2,
    "gasUsed": "5149516",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4a87be0899037febc752ecf9122a79f1c442d0f6c25164eda445d0347b8aaf7a",
    "transactionHash": "0x0c01a03bf34f09a3c9742319c0988a838b4d9abffed3f98ca546180bf5c4009e",
    "logs": [],
    "blockNumber": 10706772,
    "cumulativeGasUsed": "5201504",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "d3c0dd92c6377c73a6566fd19e79eb2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"list\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getClaimedAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCont\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"additionalDataContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decreaseFeePercent\",\"type\":\"uint256\"}],\"name\":\"changeDecreaseFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"changeFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeMonthFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpireIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"extendContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"feeInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExpireIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct CONTRewardManagement.AdditionalDataEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"getExtendContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getNumberOfConts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isExpiredCont\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMonthFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexMonthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthFeeLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tesseractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cubeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultExpireIn\",\"type\":\"uint256\"}],\"name\":\"setupDataForMonthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_cashoutContReward(address,uint256)\":{\"params\":{\"_contIndex\":\"contract index\",\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getClaimedAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from contract creation time to latest claim.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"list\":\"a packed list of every entries\",\"total\":\"total amount of reward available for account, tax included\"}},\"_getClaimedAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInIntervalV2` to calculate claimed in an interval from contract creationTime to latest claim.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"rewardCont\":\"amount of reward available for selected contract\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_resetAllAPRChange(uint8,uint256)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_cashoutContReward(address,uint256)\":{\"notice\":\"reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getClaimedAmountOf(address)\":{\"notice\":\"query claimed amount of an address in every contract\"},\"_getClaimedAmountOfIndex(address,uint256)\":{\"notice\":\"query claimed amount of one contract\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_resetAllAPRChange(uint8,uint256)\":{\"notice\":\"only used when admin makes mistake about APR change: reset every APR changes/\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 public constant ONE_MONTH = 1 days;\\n    uint256 public constant THREE_MONTH = 3 days;\\n    // uint256\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    struct AdditionalDataEntity {\\n        uint256 expireIn;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct MonthFeeLog {\\n        uint256 currentTime;\\n        bool state;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // upgrade for month fee\\n\\n    // Adding feature - fee by month\\n    // using ContEntity[] => cannot update field into ContEntity struct (because using proxy\\n\\n    IERC20 public feeToken;\\n    uint256 public decreaseFeePercent;\\n    bool public isMonthFeeActive = true;\\n    uint256 public defaultExpireIn;\\n    mapping(ContType => uint256) public feeInMonth;\\n    mapping(address => mapping(uint256 => AdditionalDataEntity)) public additionalDataContract;\\n    mapping(address => mapping(ContType => uint256)) public userAsset;\\n    // using mapping instead of array to easy scale with proxy\\n    mapping(uint256 => MonthFeeLog) public monthFeeLogs;\\n    uint256 public maxIndexMonthFeeLogs;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // only run after deploy month fee feature\\n    function setupDataForMonthFee(\\n        address _feeToken,\\n        uint256 _decreaseFeePercent,\\n        uint256 _tesseractFee,\\n        uint256 _cubeFee,\\n        uint256 _defaultExpireIn\\n    ) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n        decreaseFeePercent = _decreaseFeePercent;\\n        feeInMonth[ContType.Tesseract] = _tesseractFee;\\n        feeInMonth[ContType.Cube] = _cubeFee;\\n        defaultExpireIn = _defaultExpireIn;\\n        monthFeeLogs[0] = MonthFeeLog(block.timestamp, true);\\n        maxIndexMonthFeeLogs = 0;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n            uint256 index = _contsOfUser[account].length - 1;\\n            additionalDataContract[account][index] = AdditionalDataEntity({\\n                expireIn: block.timestamp + ONE_MONTH,\\n                lastUpdated: block.timestamp\\n            });\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n        userAsset[account][_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        if (isMonthFeeActive) {\\n            _cleanExpiredOrUpdateCont(account, _contIndex);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInIntervalV2(_contIndex, cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (isMonthFeeActive) {\\n            _cleanAllExpiredOrUpdateCont(account);\\n        }\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInIntervalV2(i, _cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    function extendContract(uint256 time, uint256[] memory indexes) external {\\n        require(time == ONE_MONTH || time == THREE_MONTH, \\\"MONTH_FEE: Not valid time\\\");\\n        uint256 fee = getExtendContractFee(time, indexes);\\n        require(feeToken.transferFrom(msg.sender, address(this), fee), \\\"MONTH_FEE: Not valid\\\");\\n\\n        // extend expire in\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            AdditionalDataEntity memory additionData = getExpireIn(msg.sender, indexes[i]);\\n            //            AdditionalDataEntity storage additionData = additionalDataContract[msg.sender][indexes[i]];\\n            require(additionData.expireIn >= block.timestamp, \\\"MONTH_FEE: Contract has been expired\\\");\\n            additionData.expireIn += time;\\n            additionData.lastUpdated = block.timestamp;\\n            additionalDataContract[msg.sender][indexes[i]] = additionData;\\n        }\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    function changeDecreaseFeePercent(uint256 _decreaseFeePercent) external onlyAuthorities {\\n        decreaseFeePercent = _decreaseFeePercent;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    function changeFeeToken(address _feeToken) external onlyAuthorities {\\n        feeToken = IERC20(_feeToken);\\n    }\\n\\n    function changeMonthFeeState(bool _status) external onlyAuthorities {\\n        require(_status != isMonthFeeActive, \\\"MONTH_FEE: INVALID STATUS\\\");\\n        isMonthFeeActive = _status;\\n        maxIndexMonthFeeLogs++;\\n        monthFeeLogs[maxIndexMonthFeeLogs] = MonthFeeLog(block.timestamp, _status);\\n    }\\n\\n    function withdrawFeeToken(address _user) external onlyAuthorities {\\n        uint256 amount = feeToken.balanceOf(address(this));\\n        require(feeToken.transfer(_user, amount), \\\"MONTH_FEE_WITHDRAW: INVALID\\\");\\n    }\\n\\n    function _cleanExpiredOrUpdateCont(address account, uint256 _contIndex) private {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, _contIndex);\\n        if (additionalData.expireIn >= block.timestamp) {\\n            additionalDataContract[account][_contIndex] = additionalData;\\n            return;\\n        }\\n        ContEntity memory currentCont = _contsOfUser[account][_contIndex];\\n        uint256 maxIndex = _contsOfUser[account].length - 1;\\n        _contsOfUser[account][_contIndex] = _contsOfUser[account][maxIndex];\\n        additionalDataContract[account][_contIndex] = additionalDataContract[account][maxIndex];\\n        _contsOfUser[account].pop();\\n        delete additionalDataContract[account][maxIndex];\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated -= 1;\\n        _totalContsPerType[currentCont.cType] -= 1;\\n        userAsset[account][currentCont.cType] -= 1;\\n    }\\n\\n    function _cleanAllExpiredOrUpdateCont(address account) private {\\n        ContEntity[] memory listCont = _contsOfUser[account];\\n        uint256 maxIndex = listCont.length - 1;\\n        for (uint256 i = 0; i < listCont.length; ++i) {\\n            if (i > maxIndex) {\\n                break;\\n            }\\n            _cleanExpiredOrUpdateCont(account, i);\\n            maxIndex = _contsOfUser[account].length - 1;\\n        }\\n    }\\n\\n    // ----- External READ functions -----\\n\\n    function isExpiredCont(address account, uint256 index) public view returns (bool) {\\n        AdditionalDataEntity memory additionalData = getExpireIn(account, index);\\n        if (additionalData.expireIn < block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInIntervalV2(i, _cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return total total amount of reward available for account, tax included\\n        @return list a packed list of every entries\\n    */\\n    function _getClaimedAmountOf(address account) external view returns (uint256 total, string memory list) {\\n        if (!isContOwner(account)) return (0, \\\"\\\");\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 rw = contRewardInIntervalV2(0, conts[0], conts[0].creationTime, conts[0].lastUpdateTime);\\n        total = rw;\\n        list = uint2str(rw);\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            uint256 _claimed = contRewardInIntervalV2(i, _cont, _cont.creationTime, _cont.lastUpdateTime);\\n            total += _claimed;\\n            list = string(abi.encodePacked(list, separator, uint2str(_claimed)));\\n        }\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInIntervalV2` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInIntervalV2(_contIndex, cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInIntervalV2(0, conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInIntervalV2(i, conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    function getExtendContractFee(uint256 time, uint256[] memory indexes) public view returns (uint256) {\\n        uint256 totalFee;\\n        uint256[] memory numberOfContType;\\n        numberOfContType[(uint256)(ContType.Tesseract)] = getNumberOfConts(msg.sender, ContType.Tesseract);\\n        numberOfContType[(uint256)(ContType.Cube)] = getNumberOfConts(msg.sender, ContType.Cube);\\n\\n        for (uint256 i = 0; i < indexes.length; ++i) {\\n            uint256 index = indexes[i];\\n            ContEntity memory cont = _contsOfUser[msg.sender][index];\\n            uint256 totalDecreasePercent = decreaseFeePercent * numberOfContType[(uint256)(cont.cType)];\\n            uint256 feeForContOneMonth = (feeInMonth[cont.cType] * (HUNDRED_PERCENT - totalDecreasePercent)) /\\n                HUNDRED_PERCENT;\\n            totalFee += (feeForContOneMonth * time) / ONE_MONTH;\\n        }\\n        return totalFee;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    /// @notice calculate reward in an interval\\n    /// @dev iterate through APR change log and for each APR segment/interval, add up its reward to the result\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param leftTstamp left border of the interval\\n    /// @param rightTstamp right border of the interval\\n    /// @return result\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256 result) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 firstUpdateInd = historyBinarySearch(_cType, leftTstamp);\\n        uint256 lastUpdateInd = historyBinarySearch(_cType, rightTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp;\\n        result = 0;\\n        uint256 deltaTstamp;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = firstUpdateInd; index < lastUpdateInd; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            itrTstamp = nextTstamp;\\n            result += (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function contRewardInIntervalV2(\\n        uint256 indexCont,\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        if (isMonthFeeActive && isExpiredCont(msg.sender, indexCont)) {\\n            return 0;\\n        }\\n        return contRewardInInterval(cont, leftTstamp, rightTstamp);\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    /// @notice convert uint256 to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice reduce input to a percentage with decimals\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    /// @notice check if an account is a contract owner\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n\\n    function getExpireIn(address user, uint256 index) public view returns (AdditionalDataEntity memory) {\\n        AdditionalDataEntity memory additionalData = additionalDataContract[user][index];\\n        if (additionalData.expireIn == 0) {\\n            additionalData.expireIn = defaultExpireIn;\\n        }\\n        uint256 totalDelay = 0;\\n        for (uint256 i = 0; i <= maxIndexMonthFeeLogs; ++i) {\\n            MonthFeeLog memory log = monthFeeLogs[i];\\n            if (additionalData.lastUpdated >= log.currentTime) {\\n                continue;\\n            }\\n            if (log.state == true) {\\n                totalDelay = totalDelay + log.currentTime - additionalData.lastUpdated;\\n            }\\n            additionalData.lastUpdated = log.currentTime;\\n        }\\n\\n        if (block.timestamp > monthFeeLogs[maxIndexMonthFeeLogs].currentTime) {\\n            if (isMonthFeeActive == false) {\\n                totalDelay = totalDelay + block.timestamp - monthFeeLogs[maxIndexMonthFeeLogs].currentTime;\\n            }\\n            additionalData.lastUpdated = block.timestamp;\\n        }\\n\\n        additionalData.expireIn += totalDelay;\\n\\n        return additionalData;\\n    }\\n\\n    function getNumberOfConts(address account, ContType _cType) public view returns (uint256) {\\n        ContEntity[] memory listConts = _contsOfUser[account];\\n        uint256 count;\\n        for (uint256 i = 0; i < listConts.length; ++i) {\\n            if (listConts[i].cType != _cType) {\\n                continue;\\n            }\\n            AdditionalDataEntity memory data = getExpireIn(account, i);\\n            if (data.expireIn >= block.timestamp) {\\n                ++count;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0x10017a6f610748dc8960ac87731364f195d801c2b0a3633c0130c5cf081611be\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_cashoutContReward(address,uint256)": {
        "params": {
          "_contIndex": "contract index",
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getClaimedAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from contract creation time to latest claim.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "list": "a packed list of every entries",
          "total": "total amount of reward available for account, tax included"
        }
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInIntervalV2` to calculate claimed in an interval from contract creationTime to latest claim.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "rewardCont": "amount of reward available for selected contract"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInIntervalV2` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_cashoutContReward(address,uint256)": {
        "notice": "reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getClaimedAmountOf(address)": {
        "notice": "query claimed amount of an address in every contract"
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "notice": "query claimed amount of one contract"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "notice": "only used when admin makes mistake about APR change: reset every APR changes/"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5358,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)14709_storage"
      },
      {
        "astId": 5364,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5340_storage)dyn_storage)"
      },
      {
        "astId": 5369,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5308,t_uint256)"
      },
      {
        "astId": 5374,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5308,t_uint256)"
      },
      {
        "astId": 5381,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5308,t_array(t_struct(APRChangesEntry)5355_storage)dyn_storage)"
      },
      {
        "astId": 5383,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5385,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5387,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5389,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5391,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5393,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5398,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5308,t_uint256)"
      },
      {
        "astId": 5404,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5407,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)2517"
      },
      {
        "astId": 5409,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "decreaseFeePercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5412,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "isMonthFeeActive",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 5414,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "defaultExpireIn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5419,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "feeInMonth",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(ContType)5308,t_uint256)"
      },
      {
        "astId": 5426,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "additionalDataContract",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5345_storage))"
      },
      {
        "astId": 5433,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "userAsset",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_enum(ContType)5308,t_uint256))"
      },
      {
        "astId": 5438,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "monthFeeLogs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(MonthFeeLog)5350_storage)"
      },
      {
        "astId": 5440,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "maxIndexMonthFeeLogs",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5355_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5355_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5340_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5340_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ContType)5308": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5340_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5340_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(ContType)5308,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum ContType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(ContType)5308,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AdditionalDataEntity)5345_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5345_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5308,t_array(t_struct(APRChangesEntry)5355_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5308",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5355_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5308,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5308",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(AdditionalDataEntity)5345_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.AdditionalDataEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(AdditionalDataEntity)5345_storage"
      },
      "t_mapping(t_uint256,t_struct(MonthFeeLog)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CONTRewardManagement.MonthFeeLog)",
        "numberOfBytes": "32",
        "value": "t_struct(MonthFeeLog)5350_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5355_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5352,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5354,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AdditionalDataEntity)5345_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.AdditionalDataEntity",
        "members": [
          {
            "astId": 5342,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "expireIn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5344,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)5340_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5328,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5330,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5332,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5334,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5336,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5339,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5308"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)14709_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 14696,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14700,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14704,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14708,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MonthFeeLog)5350_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.MonthFeeLog",
        "members": [
          {
            "astId": 5347,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "currentTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5349,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}