{
  "address": "0x64F68f661D328B67b85b1ecB90F13aF64172817a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "BreakevenChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_brokeevenContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllContsReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutContReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeContPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerCont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getClaimedAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCont",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getContsTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "contPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "contNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createConts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerCont",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_contPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalContsPerContType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7ace6133f1606bf091c2c28f008c1611e87b12ab63bcb6ddeb475cc42ead46f",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x64F68f661D328B67b85b1ecB90F13aF64172817a",
    "transactionIndex": 1,
    "gasUsed": "3703759",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8d458568bb1a47dc6af61a80d2c5f1ad3804f2da829b71fbac91b0d6852e2ecc",
    "transactionHash": "0xe7ace6133f1606bf091c2c28f008c1611e87b12ab63bcb6ddeb475cc42ead46f",
    "logs": [],
    "blockNumber": 10663598,
    "cumulativeGasUsed": "3724759",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "60263a61cd1d413400450851528470a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"BreakevenChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_brokeevenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllContsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutContReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeContPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getClaimedAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCont\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getContsTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"contNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createConts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerCont\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_contPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalContsPerContType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"params\":{\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_cashoutContReward(address,uint256)\":{\"params\":{\"_contIndex\":\"contract index\",\"account\":\"account of owner\"},\"returns\":{\"_0\":\"rewardsTotal total amount of rewards claimed\"}},\"_changeAutoReduceAPRInterval(uint256)\":{\"params\":{\"newInterval\":\"new interval\"}},\"_changeAutoReduceAPRRate(uint256)\":{\"params\":{\"newRate\":\"new reduction rate (100% == 100_000_000)\"}},\"_changeCashoutTimeout(uint256)\":{\"params\":{\"newTime\":\"new length of interval\"}},\"_changeContPrice(uint8,uint256)\":{\"params\":{\"_cType\":\"contract type to change price\",\"newPrice\":\"new price per contract (0xB)\"}},\"_changeRewardAPRPerCont(uint8,int256)\":{\"details\":\"the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\",\"params\":{\"_cType\":\"contract type to change APR\",\"reducedPercentage\":\"reduction percentage\"}},\"_getClaimedAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"rewardAmount\":\"total amount of reward available for account, tax included\"}},\"_getClaimedAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"rewardCont\":\"amount of reward available for selected contract\"}},\"_getContNumberOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"count number of contracts owned by this account\"}},\"_getContsCreationTime(address)\":{\"details\":\"concatenate creation time into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsCurrentAPR(address)\":{\"details\":\"concate current aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsInitialAPR(address)\":{\"details\":\"concate initial aprs into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsLastUpdateTime(address)\":{\"details\":\"concate last update times into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsNames(address)\":{\"details\":\"concatenate names into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsRewardAvailable(address)\":{\"details\":\"concate available rewards into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getContsTypes(address)\":{\"details\":\"concate ctypes into one string, separated by a separator ('#')\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"result a string of concatenated result\"}},\"_getRewardAmountOf(address)\":{\"details\":\"iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardAmount total amount of reward available for account, tax included\"}},\"_getRewardAmountOfIndex(address,uint256)\":{\"details\":\"use `contRewardInInterval` to calculate reward in an interval from user last claims to now.\",\"params\":{\"_contIndex\":\"index of contract in user's list\",\"account\":\"address to query\"},\"returns\":{\"_0\":\"rewardCont amount of reward available for selected contract\"}},\"_isContOwner(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"res true if account is the contract number\"}},\"_resetAllAPRChange(uint8,uint256)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"_undoRewardAPRChange(uint8)\":{\"params\":{\"_cType\":\"type of contract to pop last change\"}},\"createConts(address,string[],uint8)\":{\"params\":{\"_cType\":\"type of contract\",\"account\":\"account of owner\",\"contNames\":\"list of names of contract\"}},\"currentRewardAPRPerNewCont(uint8)\":{\"details\":\"iterate through a list of APR changes in history\",\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"result apr of contract type _cType\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"address of newAdmin\"}},\"setToken(address)\":{\"params\":{\"token_\":\"new address of 0xB\"}},\"totalContsPerContType(uint8)\":{\"params\":{\"_cType\":\"contract type to query\"},\"returns\":{\"_0\":\"res return number of contract for each contract type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_cashoutAllContsReward(address)\":{\"notice\":\"reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_cashoutContReward(address,uint256)\":{\"notice\":\"reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\"},\"_changeAutoReduceAPRInterval(uint256)\":{\"notice\":\"change auto APR reduce interval per contract\"},\"_changeAutoReduceAPRRate(uint256)\":{\"notice\":\"change auto APR reduce rate per contract\"},\"_changeCashoutTimeout(uint256)\":{\"notice\":\"change cashout timeout. User cannot claim 2 times in one interval of newTime.\"},\"_changeContPrice(uint8,uint256)\":{\"notice\":\"change contract price of one type\"},\"_changeRewardAPRPerCont(uint8,int256)\":{\"notice\":\"change reward apr of one contract type\"},\"_getClaimedAmountOf(address)\":{\"notice\":\"query claimed amount of an address in every contract\"},\"_getClaimedAmountOfIndex(address,uint256)\":{\"notice\":\"query claimed amount of one contract\"},\"_getContNumberOf(address)\":{\"notice\":\"get number of contract from one owner\"},\"_getContsCreationTime(address)\":{\"notice\":\"get the list of contracts creation time from one owner\"},\"_getContsCurrentAPR(address)\":{\"notice\":\"get the list of contracts current aprs from one owner\"},\"_getContsInitialAPR(address)\":{\"notice\":\"get the list of contracts initial aprs from one owner\"},\"_getContsLastUpdateTime(address)\":{\"notice\":\"get the list of contracts last update times from one owner\"},\"_getContsNames(address)\":{\"notice\":\"get the list of contracts name from one owner\"},\"_getContsRewardAvailable(address)\":{\"notice\":\"get the list of contracts available rewards from one owner\"},\"_getContsTypes(address)\":{\"notice\":\"get the list of contracts ctypes from one owner\"},\"_getRewardAmountOf(address)\":{\"notice\":\"query total reward amount of an address in every contract\"},\"_getRewardAmountOfIndex(address,uint256)\":{\"notice\":\"query reward amount of one contract\"},\"_isContOwner(address)\":{\"notice\":\"query if an account is an owner of any contract\"},\"_resetAllAPRChange(uint8,uint256)\":{\"notice\":\"only used when admin makes mistake about APR change: reset every APR changes/\"},\"_undoRewardAPRChange(uint8)\":{\"notice\":\"only used when admin makes mistake about APR change: undo last APR change of one type\"},\"createConts(address,string[],uint8)\":{\"notice\":\"create new contract storages for account\"},\"currentRewardAPRPerNewCont(uint8)\":{\"notice\":\"calculate initial APR for new contract to display on dApp\"},\"setAdmin(address)\":{\"notice\":\"change admin of contract\"},\"setToken(address)\":{\"notice\":\"set 0xB token Address\"},\"totalContsPerContType(uint8)\":{\"notice\":\"return number of contract of contract type _cType\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/CONTRewardManagement.sol\":\"CONTRewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/CONTRewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContType {\\n    Square,\\n    Cube,\\n    Tesseract,\\n    Other\\n}\\n\\ncontract CONTRewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Cont Structs -----\\n    struct ContEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private contOwners;\\n    mapping(address => ContEntity[]) private _contsOfUser;\\n\\n    mapping(ContType => uint256) public contPrice;\\n    mapping(ContType => uint256) public initRewardAPRPerCont;\\n    mapping(ContType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalContsCreated;\\n\\n    // ----- Admin Dashboard Variables -----\\n    mapping(ContType => uint256) private _totalContsPerType;\\n    mapping(address => mapping(uint256 => bool)) public _brokeevenContract;\\n\\n    // ----- Events -----\\n    event BreakevenChanged(ContType _cType, uint256 delta);\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _contPrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalContsCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            contPrice[ContType(i)] = _contPrices[i];\\n            initRewardAPRPerCont[ContType(i)] = _rewardAPRs[i];\\n            _totalContsPerType[ContType(i)] = 0;\\n            aprChangesHistory[ContType(i)];\\n            aprChangesHistory[ContType(i)].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    /**\\n        @notice change admin of contract\\n        @param newAdmin address of newAdmin\\n    */\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        require(newAdmin != address(0), \\\"zero address\\\");\\n        admin0XB = newAdmin;\\n    }\\n\\n    /**\\n        @notice set 0xB token Address\\n        @param token_ new address of 0xB\\n    */\\n    function setToken(address token_) external onlyAuthorities {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        token = token_;\\n    }\\n\\n    /// @notice create new contract storages for account\\n    /// @param account account of owner\\n    /// @param contNames list of names of contract\\n    /// @param _cType type of contract\\n    function createConts(\\n        address account,\\n        string[] memory contNames,\\n        ContType _cType\\n    ) external onlyToken {\\n        _contsOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewCont(_cType);\\n\\n        for (uint256 i = 0; i < contNames.length; i++) {\\n            _contsOfUser[account].push(\\n                ContEntity({\\n                    name: contNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: contPrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        contOwners.set(account, _contsOfUser[account].length);\\n        totalContsCreated += contNames.length;\\n        _totalContsPerType[_cType] += contNames.length;\\n    }\\n\\n    /// @notice reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @param _contIndex contract index\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutContReward(address account, uint256 _contIndex) external onlyToken returns (uint256, ContType) {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        require(_contIndex >= 0 && _contIndex < conts.length, \\\"CONT: Index Error\\\");\\n        ContEntity storage cont = conts[_contIndex];\\n        require(claimable(cont.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this cont.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, currentTstamp);\\n        cont.lastUpdateTime = currentTstamp;\\n\\n        if (!_brokeevenContract[account][_contIndex]) {\\n            if (cont.buyPrice <= contRewardInInterval(cont, cont.creationTime, block.timestamp)) {\\n                _brokeevenContract[account][_contIndex] = true;\\n                emit BreakevenChanged(cont.cType, 1);\\n            }\\n        }\\n        return (rewardCont, cont.cType);\\n    }\\n\\n    /// @notice reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens\\n    /// @param account account of owner\\n    /// @return rewardsTotal total amount of rewards claimed\\n    function _cashoutAllContsReward(address account)\\n        external\\n        onlyToken\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        ContEntity[] storage conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        require(contsCount > 0, \\\"CASHOUT ERROR: You don't have conts to cash-out\\\");\\n        ContEntity storage _cont;\\n        uint256 rewardsTotal = 0;\\n        uint256[3] memory typeTotal = [rewardsTotal, rewardsTotal, rewardsTotal];\\n\\n        uint8[3] memory newBreakeven = [0, 0, 0];\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            _cont = conts[i];\\n            uint256 contReward = contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n            rewardsTotal += contReward;\\n            typeTotal[uint8(_cont.cType)] += contReward;\\n            _cont.lastUpdateTime = block.timestamp;\\n\\n            if (\\n                !_brokeevenContract[account][i] &&\\n                _cont.buyPrice <= contRewardInInterval(_cont, _cont.creationTime, block.timestamp)\\n            ) {\\n                _brokeevenContract[account][i] = true;\\n                uint8 ct = uint8(_cont.cType);\\n                newBreakeven[ct] = newBreakeven[ct] + 1;\\n            }\\n        }\\n        for (uint8 ct = 0; ct < 3; ct++) {\\n            if (newBreakeven[ct] > 0) {\\n                emit BreakevenChanged(ContType(ct), newBreakeven[ct]);\\n            }\\n        }\\n        return (rewardsTotal, typeTotal[0], typeTotal[1], typeTotal[2]);\\n    }\\n\\n    /**\\n        @notice change contract price of one type\\n        @param _cType contract type to change price\\n        @param newPrice new price per contract (0xB)\\n    */\\n    function _changeContPrice(ContType _cType, uint256 newPrice) external onlyAuthorities {\\n        contPrice[_cType] = newPrice;\\n    }\\n\\n    /**\\n        @notice change reward apr of one contract type\\n        @dev the model of calculating reward requires heavily on reduction percentage. Use reduction percent as\\n        the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.\\n        @param _cType contract type to change APR\\n        @param reducedPercentage reduction percentage\\n    */\\n    function _changeRewardAPRPerCont(ContType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: undo last APR change of one type\\n    /// @param _cType type of contract to pop last change\\n    function _undoRewardAPRChange(ContType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    /// @notice only used when admin makes mistake about APR change: reset every APR changes/\\n    /// @param _cType type of contract to pop last change\\n    function _resetAllAPRChange(ContType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerCont[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    /**\\n        @notice change cashout timeout. User cannot claim 2 times in one interval of newTime.\\n        @param newTime new length of interval\\n    */\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce interval per contract\\n        @param newInterval new interval\\n    */\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    /**\\n        @notice change auto APR reduce rate per contract\\n        @param newRate new reduction rate (100% == 100_000_000)\\n    */\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    /**\\n        @notice calculate initial APR for new contract to display on dApp\\n        @dev iterate through a list of APR changes in history\\n        @param _cType contract type to query\\n        @return result apr of contract type _cType\\n    */\\n    function currentRewardAPRPerNewCont(ContType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerCont[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n        @notice return number of contract of contract type _cType\\n        @param _cType contract type to query\\n        @return res return number of contract for each contract type\\n    */\\n    function totalContsPerContType(ContType _cType) external view returns (uint256) {\\n        return _totalContsPerType[_cType];\\n    }\\n\\n    /**\\n        @notice query if an account is an owner of any contract\\n        @param account address to query\\n        @return res true if account is the contract number\\n    */\\n    function _isContOwner(address account) external view returns (bool) {\\n        return isContOwner(account);\\n    }\\n\\n    /**\\n        @notice query total reward amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        if (!isContOwner(account)) return 0;\\n\\n        uint256 rewardAmount = 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInInterval(_cont, _cont.lastUpdateTime, block.timestamp);\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n        @notice query reward amount of one contract\\n        @dev use `contRewardInInterval` to calculate reward in an interval\\n        from user last claims to now.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getRewardAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        uint256 rewardCont = contRewardInInterval(cont, cont.lastUpdateTime, block.timestamp);\\n        return rewardCont;\\n    }\\n\\n    /**\\n        @notice query claimed amount of an address in every contract\\n        @dev iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval\\n        from contract creation time to latest claim.\\n        @param account address to query\\n        @return rewardAmount total amount of reward available for account, tax included\\n    */\\n    function _getClaimedAmountOf(address account) external view returns (uint256 rewardAmount) {\\n        if (!isContOwner(account)) return 0;\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        rewardAmount = 0;\\n\\n        for (uint256 i = 0; i < contsCount; i++) {\\n            ContEntity memory _cont = conts[i];\\n            rewardAmount += contRewardInInterval(_cont, _cont.creationTime, _cont.lastUpdateTime);\\n        }\\n\\n    }\\n\\n    /**\\n        @notice query claimed amount of one contract\\n        @dev use `contRewardInInterval` to calculate claimed in an interval\\n        from contract creationTime to latest claim.\\n        @param account address to query\\n        @param _contIndex index of contract in user's list\\n        @return rewardCont amount of reward available for selected contract\\n    */\\n    function _getClaimedAmountOfIndex(address account, uint256 _contIndex) external view returns (uint256 rewardCont) {\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 numberOfConts = conts.length;\\n        require(_contIndex >= 0 && _contIndex < numberOfConts, \\\"CONT: Cont index is improper\\\");\\n        ContEntity memory cont = conts[_contIndex];\\n        rewardCont = contRewardInInterval(cont, cont.creationTime, cont.lastUpdateTime);\\n    }\\n\\n    /**\\n        @notice get the list of contracts name from one owner\\n        @dev concatenate names into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsNames(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory names = conts[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            names = string(abi.encodePacked(names, separator, _cont.name));\\n        }\\n        return names;\\n    }\\n\\n    /**\\n        @notice get the list of contracts creation time from one owner\\n        @dev concatenate creation time into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCreationTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _creationTimes = uint2str(conts[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_cont.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    /**\\n        @notice get the list of contracts ctypes from one owner\\n        @dev concate ctypes into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsTypes(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(uint256(conts[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_cont.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts initial aprs from one owner\\n        @dev concate initial aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsInitialAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(conts[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_cont.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts current aprs from one owner\\n        @dev concate current aprs into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsCurrentAPR(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _types = uint2str(currentAPRSingleCont(conts[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleCont(_cont))));\\n        }\\n        return _types;\\n    }\\n\\n    /**\\n        @notice get the list of contracts available rewards from one owner\\n        @dev concate available rewards into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsRewardAvailable(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(\\n            contRewardInInterval(conts[0], conts[0].lastUpdateTime, currentTstamp)\\n        );\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(\\n                    _rewardsAvailable,\\n                    separator,\\n                    uint2str(contRewardInInterval(conts[i], conts[i].lastUpdateTime, currentTstamp))\\n                )\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    /**\\n        @notice get the list of contracts last update times from one owner\\n        @dev concate last update times into one string, separated by a separator ('#')\\n        @param account address to query\\n        @return result a string of concatenated result\\n    */\\n    function _getContsLastUpdateTime(address account) external view returns (string memory) {\\n        if (!isContOwner(account)) return \\\"\\\";\\n        ContEntity[] memory conts = _contsOfUser[account];\\n        uint256 contsCount = conts.length;\\n        ContEntity memory _cont;\\n        string memory _lastUpdateTimes = uint2str(conts[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < contsCount; i++) {\\n            _cont = conts[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_cont.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    /**\\n        @notice get number of contract from one owner\\n        @param account address to query\\n        @return count number of contracts owned by this account\\n    */\\n    function _getContNumberOf(address account) public view returns (uint256) {\\n        return contOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice find first APR change of some type after some timestamp\\n    /// @dev use binary search to find the required result in a time-sorted structure\\n    /// @param _cType contract type\\n    /// @param timestamp timestamp to query\\n    /// @return index index of the first change after timestamp\\n    function historyBinarySearch(ContType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleCont(ContEntity memory cont) private view returns (uint256) {\\n        return contAPRAt(cont, block.timestamp);\\n    }\\n\\n    /// @notice calculate APR for a single contract at some timestamp\\n    /// @dev iterate through APR change log and calculate the APR at that time\\n    /// @param cont contract entity, which contains all infos of a contract\\n    /// @param tstamp timestamp to query\\n    /// @return resultAPR\\n    function contAPRAt(ContEntity memory cont, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = cont.creationTime;\\n        ContType cType = cont.cType;\\n        uint256 resultAPR = cont.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function contRewardInInterval(\\n        ContEntity memory cont,\\n        uint256 leftTstamp,\\n        uint256 rightTstamp\\n    ) private view returns (uint256) {\\n        require(leftTstamp <= rightTstamp, \\\"wrong tstamps params\\\");\\n        require(leftTstamp >= cont.creationTime, \\\"left tstamps bad\\\");\\n        ContType _cType = cont.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, leftTstamp);\\n\\n        uint256 contBuyPrice = cont.buyPrice;\\n        uint256 itrAPR = contAPRAt(cont, leftTstamp);\\n        uint256 itrTstamp = leftTstamp;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = cont.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != rightTstamp) {\\n            nextTstamp = rightTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((contBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice mathematically count number of intervals has passed between 2 tstamps\\n    /// @param input end timestamp\\n    /// @param creatime start timestamp\\n    /// @return result number of intervals between 2 timestamps\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    /// @notice shows that if a contract is claimmable\\n    /// @param lastUpdateTime timestamp of last update\\n    /// @return result true/false\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isContOwner(address account) private view returns (bool) {\\n        return contOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x15f360e498e0b60bfe25f9015ebe026d0cc30754123421a4f3593b66bb444758\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614208806100206000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80636eb5a7f4116101305780639b28d1a7116100b8578063ce6912a31161007c578063ce6912a3146104fa578063d094fa8d1461050d578063e18f03ad14610540578063f743f31914610549578063fc0c546a1461055c57600080fd5b80639b28d1a7146104975780639d2040f0146104a05780639f227c53146104b3578063a1a99b91146104c6578063c2202b66146104d957600080fd5b80638201bf26116100ff5780638201bf261461042a578063872a60ad1461043d5780638bf1451414610468578063927831b41461047b57806393520a801461048e57600080fd5b80636eb5a7f4146103c3578063704b6c02146103d657806377ec7826146103e95780637bed9600146103fc57600080fd5b8063390c991e116101b357806355a757d01161018257806355a757d0146103515780635dbab6ed1461035a578063619a635e1461036d57806363a9b09814610380578063665bb078146103a057600080fd5b8063390c991e146102f857806344fea1b91461030b5780634f88de011461031e57806351bf120c1461033e57600080fd5b8063144fa6d7116101fa578063144fa6d71461028c5780631565f50e1461029f5780631d5a1731146102b257806328cceb24146102c5578063367fd074146102e557600080fd5b8062c73e4d1461022b5780630534cc68146102515780630b9f6cfe146102665780630d9f9f0c14610279575b600080fd5b61023e610239366004613e23565b61056f565b6040519081526020015b60405180910390f35b61026461025f366004613c5a565b61066f565b005b61023e610274366004613d85565b610912565b610264610287366004613e5a565b610af8565b61026461029a366004613c3f565b610b3c565b6102646102ad366004613e5a565b610be2565b6102646102c0366004613e3e565b610c26565b6102d86102d3366004613c3f565b610ca2565b6040516102489190613f38565b6102d86102f3366004613c3f565b610eea565b610264610306366004613e5a565b611159565b61023e610319366004613c3f565b61119d565b61023e61032c366004613e23565b60076020526000908152604090205481565b6102d861034c366004613c3f565b6111bb565b61023e60095481565b6102d8610368366004613c3f565b6113f7565b61023e61037b366004613c3f565b611633565b61023e61038e366004613e23565b60066020526000908152604090205481565b6103b36103ae366004613c3f565b611808565b6040519015158152602001610248565b6102646103d1366004613daf565b611813565b6102646103e4366004613c3f565b611aec565b6102d86103f7366004613c3f565b611b92565b6103b361040a366004613d85565b601060209081526000928352604080842090915290825290205460ff1681565b610264610438366004613e23565b611dcc565b600c54610450906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b6102d8610476366004613c3f565b611f0d565b61023e610489366004613d85565b612161565b61023e600b5481565b61023e600a5481565b6102646104ae366004613e3e565b612346565b6102646104c1366004613e3e565b61245b565b61023e6104d4366004613c3f565b6125e4565b6104ec6104e7366004613d85565b6127c1565b604051610248929190613f93565b61023e610508366004613e23565b612bcd565b61052061051b366004613c3f565b612c0c565b604080519485526020850193909352918301526060820152608001610248565b61023e600e5481565b6102d8610557366004613c3f565b613138565b600d54610450906001600160a01b031681565b60008060086000846003811115610588576105886141a3565b6003811115610599576105996141a3565b81526020019081526020016000208054905090506000600760008560038111156105c5576105c56141a3565b60038111156105d6576105d66141a3565b815260200190815260200160002054905060005b8281101561066757610653826008600088600381111561060c5761060c6141a3565b600381111561061d5761061d6141a3565b8152602001908152602001600020838154811061063c5761063c6141cf565b90600052602060002090600202016001015461336d565b91508061065f81614152565b9150506105ea565b509392505050565b600d546001600160a01b031633146106a25760405162461bcd60e51b815260040161069990613f6b565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d906106d7908590600401613ef1565b60206040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190613e73565b905060005b83518110156108815760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610777576107776141cf565b60200260200101518152602001428152602001428152602001848152602001600660008760038111156107ac576107ac6141a3565b60038111156107bd576107bd6141a3565b81526020019081526020016000205481526020018560038111156107e3576107e36141a3565b9052815460018101835560009283526020928390208251805193946006909302909101926108149284920190613a84565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610867576108676141a3565b02179055505050808061087990614152565b91505061072c565b506001600160a01b0384166000908152600560205260409020546108a99060019086906133a1565b8251600e60008282546108bc9190613ffc565b90915550508251600f60008460038111156108d9576108d96141a3565b60038111156108ea576108ea6141a3565b815260200190815260200160002060008282546109079190613ffc565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610a6457838290600052602060002090600602016040518060c001604052908160008201805461097890614117565b80601f01602080910402602001604051908101604052809291908181526020018280546109a490614117565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610a4057610a406141a3565b6003811115610a5157610a516141a3565b8152505081526020019060010190610945565b505082519293505050808410610abc5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f706572000000006044820152606401610699565b6000828581518110610ad057610ad06141cf565b602002602001015190506000610aeb8283604001514261344a565b9450505050505b92915050565b600d546001600160a01b0316331480610b1b5750600c546001600160a01b031633145b610b375760405162461bcd60e51b815260040161069990613f6b565b600b55565b600d546001600160a01b0316331480610b5f5750600c546001600160a01b031633145b610b7b5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b038116610bc05760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610699565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610c055750600c546001600160a01b031633145b610c215760405162461bcd60e51b815260040161069990613f6b565b600a55565b600d546001600160a01b0316331480610c495750600c546001600160a01b031633145b610c655760405162461bcd60e51b815260040161069990613f6b565b8060066000846003811115610c7c57610c7c6141a3565b6003811115610c8d57610c8d6141a3565b81526020810191909152604001600020555050565b6060610cad8261377a565b610cc557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015610e1a57838290600052602060002090600602016040518060c0016040529081600082018054610d2e90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5a90614117565b8015610da75780601f10610d7c57610100808354040283529160200191610da7565b820191906000526020600020905b815481529060010190602001808311610d8a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610df657610df66141a3565b6003811115610e0757610e076141a3565b8152505081526020019060010190610cfb565b505050509050600081519050610e2e613b08565b6000610e5784600081518110610e4657610e466141cf565b602002602001015160200151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110610e8f57610e8f6141cf565b602002602001015193508282610ea88660200151613797565b604051602001610eba93929190613eae565b60405160208183030381529060405292508080610ed690614152565b915050610e75565b50909695505050505050565b6060610ef58261377a565b610f0d57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561106257838290600052602060002090600602016040518060c0016040529081600082018054610f7690614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa290614117565b8015610fef5780601f10610fc457610100808354040283529160200191610fef565b820191906000526020600020905b815481529060010190602001808311610fd257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561103e5761103e6141a3565b600381111561104f5761104f6141a3565b8152505081526020019060010190610f43565b50508251929350429150600090506110b76110b2858386611085576110856141cf565b6020026020010151866000815181106110a0576110a06141cf565b6020026020010151604001518561344a565b613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede5782826111236110b28985815181106110f7576110f76141cf565b60200260200101518a8681518110611111576111116141cf565b6020026020010151604001518961344a565b60405160200161113593929190613eae565b6040516020818303038152906040529250808061115190614152565b9150506110d5565b600d546001600160a01b031633148061117c5750600c546001600160a01b031633145b6111985760405162461bcd60e51b815260040161069990613f6b565b600955565b6001600160a01b038116600090815260026020526040812054610af2565b60606111c68261377a565b6111de57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561133357838290600052602060002090600602016040518060c001604052908160008201805461124790614117565b80601f016020809104026020016040519081016040528092919081815260200182805461127390614117565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561130f5761130f6141a3565b6003811115611320576113206141a3565b8152505081526020019060010190611214565b505050509050600081519050611347613b08565b60006113708460008151811061135f5761135f6141cf565b602002602001015160400151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede578581815181106113a8576113a86141cf565b6020026020010151935082826113c18660400151613797565b6040516020016113d393929190613eae565b604051602081830303815290604052925080806113ef90614152565b91505061138e565b60606114028261377a565b61141a57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561156f57838290600052602060002090600602016040518060c001604052908160008201805461148390614117565b80601f01602080910402602001604051908101604052809291908181526020018280546114af90614117565b80156114fc5780601f106114d1576101008083540402835291602001916114fc565b820191906000526020600020905b8154815290600101906020018083116114df57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561154b5761154b6141a3565b600381111561155c5761155c6141a3565b8152505081526020019060010190611450565b505050509050600081519050611583613b08565b60006115ac8460008151811061159b5761159b6141cf565b602002602001015160600151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede578581815181106115e4576115e46141cf565b6020026020010151935082826115fd8660600151613797565b60405160200161160f93929190613eae565b6040516020818303038152906040529250808061162b90614152565b9150506115ca565b600061163e8261377a565b61164a57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561179c57838290600052602060002090600602016040518060c00160405290816000820180546116b090614117565b80601f01602080910402602001604051908101604052809291908181526020018280546116dc90614117565b80156117295780601f106116fe57610100808354040283529160200191611729565b820191906000526020600020905b81548152906001019060200180831161170c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611778576117786141a3565b6003811115611789576117896141a3565b815250508152602001906001019061167d565b5050825192935060009150505b818110156117fe5760008382815181106117c5576117c56141cf565b602002602001015190506117de8182604001514261344a565b6117e89086613ffc565b94505080806117f690614152565b9150506117a9565b5091949350505050565b6000610af28261377a565b600054610100900460ff1661182e5760005460ff1615611832565b303b155b6118955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610699565b600054610100900460ff161580156118b7576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b6003811015611ab5578681815181106118e4576118e46141cf565b602002602001015160066000836003811115611902576119026141a3565b6003811115611913576119136141a3565b6003811115611924576119246141a3565b815260200190815260200160002081905550858181518110611948576119486141cf565b602002602001015160076000836003811115611966576119666141a3565b6003811115611977576119776141a3565b6003811115611988576119886141a3565b8152602001908152602001600020819055506000600f60008360038111156119b2576119b26141a3565b60038111156119c3576119c36141a3565b60038111156119d4576119d46141a3565b815260200190815260200160002081905550600860008260038111156119fc576119fc6141a3565b6003811115611a0d57611a0d6141a3565b6003811115611a1e57611a1e6141a3565b81526020015260086000826003811115611a3a57611a3a6141a3565b6003811115611a4b57611a4b6141a3565b6003811115611a5c57611a5c6141a3565b815260208082019290925260409081016000908120825180840190935285835282840182815281546001818101845592845294909220925160029094029092019283555191015580611aad81614152565b9150506118c9565b50506009839055600c80546001600160a01b03191633179055600b8290558015611ae5576000805461ff00191690555b5050505050565b600d546001600160a01b0316331480611b0f5750600c546001600160a01b031633145b611b2b5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b038116611b705760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610699565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060611b9d8261377a565b611bb557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611d0a57838290600052602060002090600602016040518060c0016040529081600082018054611c1e90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4a90614117565b8015611c975780601f10611c6c57610100808354040283529160200191611c97565b820191906000526020600020905b815481529060010190602001808311611c7a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611ce657611ce66141a3565b6003811115611cf757611cf76141a3565b8152505081526020019060010190611beb565b505050509050600081519050611d1e613b08565b6000611d466110b285600081518110611d3957611d396141cf565b60200260200101516138c0565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110611d7e57611d7e6141cf565b602002602001015193508282611d966110b2876138c0565b604051602001611da893929190613eae565b60405160208183030381529060405292508080611dc490614152565b915050611d64565b600d546001600160a01b0316331480611def5750600c546001600160a01b031633145b611e0b5760405162461bcd60e51b815260040161069990613f6b565b600060086000836003811115611e2357611e236141a3565b6003811115611e3457611e346141a3565b8152602081019190915260400160002054905060018111611ea75760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610699565b60086000836003811115611ebd57611ebd6141a3565b6003811115611ece57611ece6141a3565b8152602001908152602001600020805480611eeb57611eeb6141b9565b6000828152602081206002600019909301928302018181556001015590555050565b6060611f188261377a565b611f3057505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561208557838290600052602060002090600602016040518060c0016040529081600082018054611f9990614117565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc590614117565b80156120125780601f10611fe757610100808354040283529160200191612012565b820191906000526020600020905b815481529060010190602001808311611ff557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612061576120616141a3565b6003811115612072576120726141a3565b8152505081526020019060010190611f66565b505050509050600081519050612099613b08565b60006120ce846000815181106120b1576120b16141cf565b602002602001015160a0015160038111156110b2576110b26141a3565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110612106576121066141cf565b60200260200101519350828261212b8660a0015160038111156110b2576110b26141a3565b60405160200161213d93929190613eae565b6040516020818303038152906040529250808061215990614152565b9150506120ec565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156122b357838290600052602060002090600602016040518060c00160405290816000820180546121c790614117565b80601f01602080910402602001604051908101604052809291908181526020018280546121f390614117565b80156122405780601f1061221557610100808354040283529160200191612240565b820191906000526020600020905b81548152906001019060200180831161222357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561228f5761228f6141a3565b60038111156122a0576122a06141a3565b8152505081526020019060010190612194565b50508251929350505080841061230b5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f706572000000006044820152606401610699565b600082858151811061231f5761231f6141cf565b6020026020010151905061233c818260200151836040015161344a565b9695505050505050565b600d546001600160a01b03163314806123695750600c546001600160a01b031633145b6123855760405162461bcd60e51b815260040161069990613f6b565b6305f5e10081126123e95760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610699565b600860008360038111156123ff576123ff6141a3565b6003811115612410576124106141a3565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b031633148061247e5750600c546001600160a01b031633145b61249a5760405162461bcd60e51b815260040161069990613f6b565b80600760008460038111156124b1576124b16141a3565b60038111156124c2576124c26141a3565b8152602001908152602001600020819055506000600860008460038111156124ec576124ec6141a3565b60038111156124fd576124fd6141a3565b815260200190815260200160002060008154811061251d5761251d6141cf565b906000526020600020906002020160000154905060086000846003811115612547576125476141a3565b6003811115612558576125586141a3565b815260200190815260200160002060006125729190613b4e565b60086000846003811115612588576125886141a3565b6003811115612599576125996141a3565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b60006125ef8261377a565b6125fb57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561275057838290600052602060002090600602016040518060c001604052908160008201805461266490614117565b80601f016020809104026020016040519081016040528092919081815260200182805461269090614117565b80156126dd5780601f106126b2576101008083540402835291602001916126dd565b820191906000526020600020905b8154815290600101906020018083116126c057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561272c5761272c6141a3565b600381111561273d5761273d6141a3565b8152505081526020019060010190612631565b5050825160009550929350849150505b818110156127b957600083828151811061277c5761277c6141cf565b60200260200101519050612799818260200151836040015161344a565b6127a39086613ffc565b94505080806127b190614152565b915050612760565b505050919050565b600d5460009081906001600160a01b031633146127f05760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b03841660009081526005602052604090208054841061284c5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610699565b6000818581548110612860576128606141cf565b9060005260206000209060060201905061287d81600201546138cc565b6128ef5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e0000000000006064820152608401610699565b600042905060006129fc836040518060c001604052908160008201805461291590614117565b80601f016020809104026020016040519081016040528092919081815260200182805461294190614117565b801561298e5780601f106129635761010080835404028352916020019161298e565b820191906000526020600020905b81548152906001019060200180831161297157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156129dd576129dd6141a3565b60038111156129ee576129ee6141a3565b90525060028501548461344a565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16612bb657612b37836040518060c0016040529081600082018054612a5090614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612a7c90614117565b8015612ac95780601f10612a9e57610100808354040283529160200191612ac9565b820191906000526020600020905b815481529060010190602001808311612aac57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612b1857612b186141a3565b6003811115612b2957612b296141a3565b90525060018501544261344a565b836004015411612bb6576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92612bad9260ff9190911691613eff565b60405180910390a15b6005909201549194505060ff169150509250929050565b6000600f6000836003811115612be557612be56141a3565b6003811115612bf657612bf66141a3565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b03163314612c3f5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b0385166000908152600560205260409020805480612cbe5760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610699565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b8581101561306857868181548110612d1057612d106141cf565b906000526020600020906006020194506000612e28866040518060c0016040529081600082018054612d4190614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612d6d90614117565b8015612dba5780601f10612d8f57610100808354040283529160200191612dba565b820191906000526020600020905b815481529060010190602001808311612d9d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612e0957612e096141a3565b6003811115612e1a57612e1a6141a3565b90525060028801544261344a565b9050612e348186613ffc565b60058701549095508190859060ff166003811115612e5457612e546141a3565b60ff1660038110612e6757612e676141cf565b60200201818151612e789190613ffc565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff16158015612fbe5750612fb6866040518060c0016040529081600082018054612ecf90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612efb90614117565b8015612f485780601f10612f1d57610100808354040283529160200191612f48565b820191906000526020600020905b815481529060010190602001808311612f2b57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612f9757612f976141a3565b6003811115612fa857612fa86141a3565b90525060018801544261344a565b866004015411155b15613055576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561300a5761300a6141a3565b9050838160ff1660038110613021576130216141cf565b6020020151613031906001614014565b848260ff1660038110613046576130466141cf565b60ff9092166020929092020152505b508061306081614152565b915050612cf6565b5060005b60038160ff161015613116576000828260ff166003811061308f5761308f6141cf565b602002015160ff161115613104577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156130d3576130d36141a3565b838360ff16600381106130e8576130e86141cf565b60200201516040516130fb929190613f1a565b60405180910390a15b8061310e8161416d565b91505061306c565b505080516020820151604090920151929b909a50909850909650945050505050565b60606131438261377a565b61315b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156132b057838290600052602060002090600602016040518060c00160405290816000820180546131c490614117565b80601f01602080910402602001604051908101604052809291908181526020018280546131f090614117565b801561323d5780601f106132125761010080835404028352916020019161323d565b820191906000526020600020905b81548152906001019060200180831161322057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561328c5761328c6141a3565b600381111561329d5761329d6141a3565b8152505081526020019060010190613191565b5050505090506000815190506132c4613b08565b6000836000815181106132d9576132d96141cf565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b84811015610ede57858181518110613326576133266141cf565b602002602001015193508282856000015160405160200161334993929190613eae565b6040516020818303038152906040529250808061336590614152565b91505061330c565b60008061337e836305f5e10061407a565b90506305f5e10061338f828661405b565b6133999190614039565b949350505050565b6001600160a01b038216600090815260038401602052604090205460ff16156133e6576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156134935760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610699565b83602001518310156134da5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610699565b60a084015160006134eb82866138e5565b608087015190915060006134ff88886139c0565b6020890151909150879060009081908190819081895b600860008d600381111561352b5761352b6141a3565b600381111561353c5761353c6141a3565b81526020810191909152604001600020548110156136a157600860008d600381111561356a5761356a6141a3565b600381111561357b5761357b6141a3565b8152602001908152602001600020818154811061359a5761359a6141cf565b90600052602060002090600202016000015496506135b88884613a6a565b6135c28885613a6a565b14801592506135fa576135d58884613a6a565b6135e0906001613ffc565b600a546135ed919061405b565b6135f79084613ffc565b96505b61360488886140b9565b94506301e13380856305f5e10061361b8c8e61405b565b6136259190614039565b61362f919061405b565b6136399190614039565b9350869750838661364a9190613ffc565b955081156136725761365e89600b5461336d565b98508061366a81614100565b91505061368f565b61368c89600860008f600381111561060c5761060c6141a3565b98505b8061369981614152565b915050613515565b505b8c8714613765578c95506136b78783613a6a565b6136c18784613a6a565b14801591506136f9576136d48783613a6a565b6136df906001613ffc565b600a546136ec919061405b565b6136f69083613ffc565b95505b61370387876140b9565b93506301e13380846305f5e10061371a8b8d61405b565b6137249190614039565b61372e919061405b565b6137389190614039565b925085965082856137499190613ffc565b945080156137605761375d88600b5461336d565b97505b6136a3565b509299505050505050505050505b9392505050565b6001600160a01b0316600090815260026020526040902054151590565b6060816137bb5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156137e557806137cf81614152565b91506137de9050600a83614039565b91506137bf565b60008167ffffffffffffffff811115613800576138006141e5565b6040519080825280601f01601f19166020018201604052801561382a576020820181803683370190505b509050815b85156138b7576138406001826140b9565b9050600061384f600a88614039565b61385a90600a61405b565b61386490886140b9565b61386f906030614014565b905060008160f81b90508084848151811061388c5761388c6141cf565b60200101906001600160f81b031916908160001a9053506138ae600a89614039565b9750505061382f565b50949350505050565b6000610af282426139c0565b600042600954836138dd9190613ffc565b111592915050565b600080806008818660038111156138fe576138fe6141a3565b600381111561390f5761390f6141a3565b815260208101919091526040016000205490505b8181111561066757600060026139398385613ffc565b6139439190614039565b9050846008600088600381111561395c5761395c6141a3565b600381111561396d5761396d6141a3565b8152602001908152602001600020828154811061398c5761398c6141cf565b90600052602060002090600202016000015410156139b6576139af816001613ffc565b92506139ba565b8091505b50613923565b602082015160a083015160608401516000929190836139df83856138e5565b905060006139ed84886138e5565b9050815b81811015613a2757613a13846008600088600381111561060c5761060c6141a3565b935080613a1f81614152565b9150506139f1565b506000613a348887613a6a565b90505b8015613a5d5780613a4781614100565b915050613a5684600b5461336d565b9350613a37565b5091979650505050505050565b600a54600090613a7a83856140b9565b6137739190614039565b828054613a9090614117565b90600052602060002090601f016020900481019282613ab25760008555613af8565b82601f10613acb57805160ff1916838001178555613af8565b82800160010185558215613af8579182015b82811115613af8578251825591602001919060010190613add565b50613b04929150613b72565b5090565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016000815260200160006003811115613b4957613b496141a3565b905290565b5080546000825560020290600052602060002090810190613b6f9190613b87565b50565b5b80821115613b045760008155600101613b73565b5b80821115613b045760008082556001820155600201613b88565b80356001600160a01b0381168114613bb957600080fd5b919050565b600082601f830112613bcf57600080fd5b81356020613be4613bdf83613fd8565b613fa7565b80838252828201915082860187848660051b8901011115613c0457600080fd5b60005b85811015613c2357813584529284019290840190600101613c07565b5090979650505050505050565b803560048110613bb957600080fd5b600060208284031215613c5157600080fd5b61377382613ba2565b600080600060608486031215613c6f57600080fd5b613c7884613ba2565b925060208085013567ffffffffffffffff80821115613c9657600080fd5b818701915087601f830112613caa57600080fd5b8135613cb8613bdf82613fd8565b8082825285820191508585018b878560051b8801011115613cd857600080fd5b60005b84811015613d6557813586811115613cf257600080fd5b8701603f81018e13613d0357600080fd5b8881013587811115613d1757613d176141e5565b613d29601f8201601f19168b01613fa7565b8181528f6040838501011115613d3e57600080fd5b81604084018c83013760009181018b01919091528552509287019290870190600101613cdb565b5050809750505050505050613d7c60408501613c30565b90509250925092565b60008060408385031215613d9857600080fd5b613da183613ba2565b946020939093013593505050565b60008060008060808587031215613dc557600080fd5b843567ffffffffffffffff80821115613ddd57600080fd5b613de988838901613bbe565b95506020870135915080821115613dff57600080fd5b50613e0c87828801613bbe565b949794965050505060408301359260600135919050565b600060208284031215613e3557600080fd5b61377382613c30565b60008060408385031215613e5157600080fd5b613da183613c30565b600060208284031215613e6c57600080fd5b5035919050565b600060208284031215613e8557600080fd5b5051919050565b60048110613eaa57634e487b7160e01b600052602160045260246000fd5b9052565b60008451613ec08184602089016140d0565b845190830190613ed48183602089016140d0565b8451910190613ee78183602088016140d0565b0195945050505050565b60208101610af28284613e8c565b60408101613f0d8285613e8c565b8260208301529392505050565b60408101613f288285613e8c565b60ff831660208301529392505050565b6020815260008251806020840152613f578160408501602087016140d0565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b828152604081016137736020830184613e8c565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fd057613fd06141e5565b604052919050565b600067ffffffffffffffff821115613ff257613ff26141e5565b5060051b60200190565b6000821982111561400f5761400f61418d565b500190565b600060ff821660ff84168060ff038211156140315761403161418d565b019392505050565b60008261405657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156140755761407561418d565b500290565b60008083128015600160ff1b8501841216156140985761409861418d565b6001600160ff1b03840183138116156140b3576140b361418d565b50500390565b6000828210156140cb576140cb61418d565b500390565b60005b838110156140eb5781810151838201526020016140d3565b838111156140fa576000848401525b50505050565b60008161410f5761410f61418d565b506000190190565b600181811c9082168061412b57607f821691505b6020821081141561414c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156141665761416661418d565b5060010190565b600060ff821660ff8114156141845761418461418d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80636eb5a7f4116101305780639b28d1a7116100b8578063ce6912a31161007c578063ce6912a3146104fa578063d094fa8d1461050d578063e18f03ad14610540578063f743f31914610549578063fc0c546a1461055c57600080fd5b80639b28d1a7146104975780639d2040f0146104a05780639f227c53146104b3578063a1a99b91146104c6578063c2202b66146104d957600080fd5b80638201bf26116100ff5780638201bf261461042a578063872a60ad1461043d5780638bf1451414610468578063927831b41461047b57806393520a801461048e57600080fd5b80636eb5a7f4146103c3578063704b6c02146103d657806377ec7826146103e95780637bed9600146103fc57600080fd5b8063390c991e116101b357806355a757d01161018257806355a757d0146103515780635dbab6ed1461035a578063619a635e1461036d57806363a9b09814610380578063665bb078146103a057600080fd5b8063390c991e146102f857806344fea1b91461030b5780634f88de011461031e57806351bf120c1461033e57600080fd5b8063144fa6d7116101fa578063144fa6d71461028c5780631565f50e1461029f5780631d5a1731146102b257806328cceb24146102c5578063367fd074146102e557600080fd5b8062c73e4d1461022b5780630534cc68146102515780630b9f6cfe146102665780630d9f9f0c14610279575b600080fd5b61023e610239366004613e23565b61056f565b6040519081526020015b60405180910390f35b61026461025f366004613c5a565b61066f565b005b61023e610274366004613d85565b610912565b610264610287366004613e5a565b610af8565b61026461029a366004613c3f565b610b3c565b6102646102ad366004613e5a565b610be2565b6102646102c0366004613e3e565b610c26565b6102d86102d3366004613c3f565b610ca2565b6040516102489190613f38565b6102d86102f3366004613c3f565b610eea565b610264610306366004613e5a565b611159565b61023e610319366004613c3f565b61119d565b61023e61032c366004613e23565b60076020526000908152604090205481565b6102d861034c366004613c3f565b6111bb565b61023e60095481565b6102d8610368366004613c3f565b6113f7565b61023e61037b366004613c3f565b611633565b61023e61038e366004613e23565b60066020526000908152604090205481565b6103b36103ae366004613c3f565b611808565b6040519015158152602001610248565b6102646103d1366004613daf565b611813565b6102646103e4366004613c3f565b611aec565b6102d86103f7366004613c3f565b611b92565b6103b361040a366004613d85565b601060209081526000928352604080842090915290825290205460ff1681565b610264610438366004613e23565b611dcc565b600c54610450906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b6102d8610476366004613c3f565b611f0d565b61023e610489366004613d85565b612161565b61023e600b5481565b61023e600a5481565b6102646104ae366004613e3e565b612346565b6102646104c1366004613e3e565b61245b565b61023e6104d4366004613c3f565b6125e4565b6104ec6104e7366004613d85565b6127c1565b604051610248929190613f93565b61023e610508366004613e23565b612bcd565b61052061051b366004613c3f565b612c0c565b604080519485526020850193909352918301526060820152608001610248565b61023e600e5481565b6102d8610557366004613c3f565b613138565b600d54610450906001600160a01b031681565b60008060086000846003811115610588576105886141a3565b6003811115610599576105996141a3565b81526020019081526020016000208054905090506000600760008560038111156105c5576105c56141a3565b60038111156105d6576105d66141a3565b815260200190815260200160002054905060005b8281101561066757610653826008600088600381111561060c5761060c6141a3565b600381111561061d5761061d6141a3565b8152602001908152602001600020838154811061063c5761063c6141cf565b90600052602060002090600202016001015461336d565b91508061065f81614152565b9150506105ea565b509392505050565b600d546001600160a01b031633146106a25760405162461bcd60e51b815260040161069990613f6b565b60405180910390fd5b6001600160a01b0383166000908152600560205260405162c73e4d60e01b8152309062c73e4d906106d7908590600401613ef1565b60206040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190613e73565b905060005b83518110156108815760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110610777576107776141cf565b60200260200101518152602001428152602001428152602001848152602001600660008760038111156107ac576107ac6141a3565b60038111156107bd576107bd6141a3565b81526020019081526020016000205481526020018560038111156107e3576107e36141a3565b9052815460018101835560009283526020928390208251805193946006909302909101926108149284920190613a84565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610867576108676141a3565b02179055505050808061087990614152565b91505061072c565b506001600160a01b0384166000908152600560205260409020546108a99060019086906133a1565b8251600e60008282546108bc9190613ffc565b90915550508251600f60008460038111156108d9576108d96141a3565b60038111156108ea576108ea6141a3565b815260200190815260200160002060008282546109079190613ffc565b909155505050505050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b82821015610a6457838290600052602060002090600602016040518060c001604052908160008201805461097890614117565b80601f01602080910402602001604051908101604052809291908181526020018280546109a490614117565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610a4057610a406141a3565b6003811115610a5157610a516141a3565b8152505081526020019060010190610945565b505082519293505050808410610abc5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f706572000000006044820152606401610699565b6000828581518110610ad057610ad06141cf565b602002602001015190506000610aeb8283604001514261344a565b9450505050505b92915050565b600d546001600160a01b0316331480610b1b5750600c546001600160a01b031633145b610b375760405162461bcd60e51b815260040161069990613f6b565b600b55565b600d546001600160a01b0316331480610b5f5750600c546001600160a01b031633145b610b7b5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b038116610bc05760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610699565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b0316331480610c055750600c546001600160a01b031633145b610c215760405162461bcd60e51b815260040161069990613f6b565b600a55565b600d546001600160a01b0316331480610c495750600c546001600160a01b031633145b610c655760405162461bcd60e51b815260040161069990613f6b565b8060066000846003811115610c7c57610c7c6141a3565b6003811115610c8d57610c8d6141a3565b81526020810191909152604001600020555050565b6060610cad8261377a565b610cc557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015610e1a57838290600052602060002090600602016040518060c0016040529081600082018054610d2e90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5a90614117565b8015610da75780601f10610d7c57610100808354040283529160200191610da7565b820191906000526020600020905b815481529060010190602001808311610d8a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610df657610df66141a3565b6003811115610e0757610e076141a3565b8152505081526020019060010190610cfb565b505050509050600081519050610e2e613b08565b6000610e5784600081518110610e4657610e466141cf565b602002602001015160200151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110610e8f57610e8f6141cf565b602002602001015193508282610ea88660200151613797565b604051602001610eba93929190613eae565b60405160208183030381529060405292508080610ed690614152565b915050610e75565b50909695505050505050565b6060610ef58261377a565b610f0d57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561106257838290600052602060002090600602016040518060c0016040529081600082018054610f7690614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa290614117565b8015610fef5780601f10610fc457610100808354040283529160200191610fef565b820191906000526020600020905b815481529060010190602001808311610fd257829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561103e5761103e6141a3565b600381111561104f5761104f6141a3565b8152505081526020019060010190610f43565b50508251929350429150600090506110b76110b2858386611085576110856141cf565b6020026020010151866000815181106110a0576110a06141cf565b6020026020010151604001518561344a565b613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede5782826111236110b28985815181106110f7576110f76141cf565b60200260200101518a8681518110611111576111116141cf565b6020026020010151604001518961344a565b60405160200161113593929190613eae565b6040516020818303038152906040529250808061115190614152565b9150506110d5565b600d546001600160a01b031633148061117c5750600c546001600160a01b031633145b6111985760405162461bcd60e51b815260040161069990613f6b565b600955565b6001600160a01b038116600090815260026020526040812054610af2565b60606111c68261377a565b6111de57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561133357838290600052602060002090600602016040518060c001604052908160008201805461124790614117565b80601f016020809104026020016040519081016040528092919081815260200182805461127390614117565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561130f5761130f6141a3565b6003811115611320576113206141a3565b8152505081526020019060010190611214565b505050509050600081519050611347613b08565b60006113708460008151811061135f5761135f6141cf565b602002602001015160400151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede578581815181106113a8576113a86141cf565b6020026020010151935082826113c18660400151613797565b6040516020016113d393929190613eae565b604051602081830303815290604052925080806113ef90614152565b91505061138e565b60606114028261377a565b61141a57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561156f57838290600052602060002090600602016040518060c001604052908160008201805461148390614117565b80601f01602080910402602001604051908101604052809291908181526020018280546114af90614117565b80156114fc5780601f106114d1576101008083540402835291602001916114fc565b820191906000526020600020905b8154815290600101906020018083116114df57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561154b5761154b6141a3565b600381111561155c5761155c6141a3565b8152505081526020019060010190611450565b505050509050600081519050611583613b08565b60006115ac8460008151811061159b5761159b6141cf565b602002602001015160600151613797565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede578581815181106115e4576115e46141cf565b6020026020010151935082826115fd8660600151613797565b60405160200161160f93929190613eae565b6040516020818303038152906040529250808061162b90614152565b9150506115ca565b600061163e8261377a565b61164a57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561179c57838290600052602060002090600602016040518060c00160405290816000820180546116b090614117565b80601f01602080910402602001604051908101604052809291908181526020018280546116dc90614117565b80156117295780601f106116fe57610100808354040283529160200191611729565b820191906000526020600020905b81548152906001019060200180831161170c57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611778576117786141a3565b6003811115611789576117896141a3565b815250508152602001906001019061167d565b5050825192935060009150505b818110156117fe5760008382815181106117c5576117c56141cf565b602002602001015190506117de8182604001514261344a565b6117e89086613ffc565b94505080806117f690614152565b9150506117a9565b5091949350505050565b6000610af28261377a565b600054610100900460ff1661182e5760005460ff1615611832565b303b155b6118955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610699565b600054610100900460ff161580156118b7576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b6003811015611ab5578681815181106118e4576118e46141cf565b602002602001015160066000836003811115611902576119026141a3565b6003811115611913576119136141a3565b6003811115611924576119246141a3565b815260200190815260200160002081905550858181518110611948576119486141cf565b602002602001015160076000836003811115611966576119666141a3565b6003811115611977576119776141a3565b6003811115611988576119886141a3565b8152602001908152602001600020819055506000600f60008360038111156119b2576119b26141a3565b60038111156119c3576119c36141a3565b60038111156119d4576119d46141a3565b815260200190815260200160002081905550600860008260038111156119fc576119fc6141a3565b6003811115611a0d57611a0d6141a3565b6003811115611a1e57611a1e6141a3565b81526020015260086000826003811115611a3a57611a3a6141a3565b6003811115611a4b57611a4b6141a3565b6003811115611a5c57611a5c6141a3565b815260208082019290925260409081016000908120825180840190935285835282840182815281546001818101845592845294909220925160029094029092019283555191015580611aad81614152565b9150506118c9565b50506009839055600c80546001600160a01b03191633179055600b8290558015611ae5576000805461ff00191690555b5050505050565b600d546001600160a01b0316331480611b0f5750600c546001600160a01b031633145b611b2b5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b038116611b705760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610699565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6060611b9d8261377a565b611bb557505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015611d0a57838290600052602060002090600602016040518060c0016040529081600082018054611c1e90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4a90614117565b8015611c975780601f10611c6c57610100808354040283529160200191611c97565b820191906000526020600020905b815481529060010190602001808311611c7a57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115611ce657611ce66141a3565b6003811115611cf757611cf76141a3565b8152505081526020019060010190611beb565b505050509050600081519050611d1e613b08565b6000611d466110b285600081518110611d3957611d396141cf565b60200260200101516138c0565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110611d7e57611d7e6141cf565b602002602001015193508282611d966110b2876138c0565b604051602001611da893929190613eae565b60405160208183030381529060405292508080611dc490614152565b915050611d64565b600d546001600160a01b0316331480611def5750600c546001600160a01b031633145b611e0b5760405162461bcd60e51b815260040161069990613f6b565b600060086000836003811115611e2357611e236141a3565b6003811115611e3457611e346141a3565b8152602081019190915260400160002054905060018111611ea75760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b6064820152608401610699565b60086000836003811115611ebd57611ebd6141a3565b6003811115611ece57611ece6141a3565b8152602001908152602001600020805480611eeb57611eeb6141b9565b6000828152602081206002600019909301928302018181556001015590555050565b6060611f188261377a565b611f3057505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561208557838290600052602060002090600602016040518060c0016040529081600082018054611f9990614117565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc590614117565b80156120125780601f10611fe757610100808354040283529160200191612012565b820191906000526020600020905b815481529060010190602001808311611ff557829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612061576120616141a3565b6003811115612072576120726141a3565b8152505081526020019060010190611f66565b505050509050600081519050612099613b08565b60006120ce846000815181106120b1576120b16141cf565b602002602001015160a0015160038111156110b2576110b26141a3565b604080518082019091526001808252602360f81b6020830152919250905b84811015610ede57858181518110612106576121066141cf565b60200260200101519350828261212b8660a0015160038111156110b2576110b26141a3565b60405160200161213d93929190613eae565b6040516020818303038152906040529250808061215990614152565b9150506120ec565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b828210156122b357838290600052602060002090600602016040518060c00160405290816000820180546121c790614117565b80601f01602080910402602001604051908101604052809291908181526020018280546121f390614117565b80156122405780601f1061221557610100808354040283529160200191612240565b820191906000526020600020905b81548152906001019060200180831161222357829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561228f5761228f6141a3565b60038111156122a0576122a06141a3565b8152505081526020019060010190612194565b50508251929350505080841061230b5760405162461bcd60e51b815260206004820152601c60248201527f434f4e543a20436f6e7420696e64657820697320696d70726f706572000000006044820152606401610699565b600082858151811061231f5761231f6141cf565b6020026020010151905061233c818260200151836040015161344a565b9695505050505050565b600d546001600160a01b03163314806123695750600c546001600160a01b031633145b6123855760405162461bcd60e51b815260040161069990613f6b565b6305f5e10081126123e95760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b6064820152608401610699565b600860008360038111156123ff576123ff6141a3565b6003811115612410576124106141a3565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b031633148061247e5750600c546001600160a01b031633145b61249a5760405162461bcd60e51b815260040161069990613f6b565b80600760008460038111156124b1576124b16141a3565b60038111156124c2576124c26141a3565b8152602001908152602001600020819055506000600860008460038111156124ec576124ec6141a3565b60038111156124fd576124fd6141a3565b815260200190815260200160002060008154811061251d5761251d6141cf565b906000526020600020906002020160000154905060086000846003811115612547576125476141a3565b6003811115612558576125586141a3565b815260200190815260200160002060006125729190613b4e565b60086000846003811115612588576125886141a3565b6003811115612599576125996141a3565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b60006125ef8261377a565b6125fb57506000919050565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561275057838290600052602060002090600602016040518060c001604052908160008201805461266490614117565b80601f016020809104026020016040519081016040528092919081815260200182805461269090614117565b80156126dd5780601f106126b2576101008083540402835291602001916126dd565b820191906000526020600020905b8154815290600101906020018083116126c057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561272c5761272c6141a3565b600381111561273d5761273d6141a3565b8152505081526020019060010190612631565b5050825160009550929350849150505b818110156127b957600083828151811061277c5761277c6141cf565b60200260200101519050612799818260200151836040015161344a565b6127a39086613ffc565b94505080806127b190614152565b915050612760565b505050919050565b600d5460009081906001600160a01b031633146127f05760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b03841660009081526005602052604090208054841061284c5760405162461bcd60e51b815260206004820152601160248201527021a7a72a1d1024b73232bc1022b93937b960791b6044820152606401610699565b6000818581548110612860576128606141cf565b9060005260206000209060060201905061287d81600201546138cc565b6128ef5760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e67207468697320636f6e742e0000000000006064820152608401610699565b600042905060006129fc836040518060c001604052908160008201805461291590614117565b80601f016020809104026020016040519081016040528092919081815260200182805461294190614117565b801561298e5780601f106129635761010080835404028352916020019161298e565b820191906000526020600020905b81548152906001019060200180831161297157829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff16908111156129dd576129dd6141a3565b60038111156129ee576129ee6141a3565b90525060028501548461344a565b600284018390556001600160a01b03891660009081526010602090815260408083208b845290915290205490915060ff16612bb657612b37836040518060c0016040529081600082018054612a5090614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612a7c90614117565b8015612ac95780601f10612a9e57610100808354040283529160200191612ac9565b820191906000526020600020905b815481529060010190602001808311612aac57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612b1857612b186141a3565b6003811115612b2957612b296141a3565b90525060018501544261344a565b836004015411612bb6576001600160a01b03881660009081526010602090815260408083208a845290915290819020805460ff19166001908117909155600585015491517f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd92612bad9260ff9190911691613eff565b60405180910390a15b6005909201549194505060ff169150509250929050565b6000600f6000836003811115612be557612be56141a3565b6003811115612bf657612bf66141a3565b8152602001908152602001600020549050919050565b600d546000908190819081906001600160a01b03163314612c3f5760405162461bcd60e51b815260040161069990613f6b565b6001600160a01b0385166000908152600560205260409020805480612cbe5760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e2774206861766520636f60448201526e1b9d1cc81d1bc818d85cda0b5bdd5d608a1b6064820152608401610699565b604080516060808201835260008083526020808401829052838501829052845192830185528183528201819052928101839052829190825b8581101561306857868181548110612d1057612d106141cf565b906000526020600020906006020194506000612e28866040518060c0016040529081600082018054612d4190614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612d6d90614117565b8015612dba5780601f10612d8f57610100808354040283529160200191612dba565b820191906000526020600020905b815481529060010190602001808311612d9d57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612e0957612e096141a3565b6003811115612e1a57612e1a6141a3565b90525060028801544261344a565b9050612e348186613ffc565b60058701549095508190859060ff166003811115612e5457612e546141a3565b60ff1660038110612e6757612e676141cf565b60200201818151612e789190613ffc565b9052504260028701556001600160a01b038d16600090815260106020908152604080832085845290915290205460ff16158015612fbe5750612fb6866040518060c0016040529081600082018054612ecf90614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612efb90614117565b8015612f485780601f10612f1d57610100808354040283529160200191612f48565b820191906000526020600020905b815481529060010190602001808311612f2b57829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115612f9757612f976141a3565b6003811115612fa857612fa86141a3565b90525060018801544261344a565b866004015411155b15613055576001600160a01b038d1660009081526010602090815260408083208584529091528120805460ff19166001179055600587015460ff16600381111561300a5761300a6141a3565b9050838160ff1660038110613021576130216141cf565b6020020151613031906001614014565b848260ff1660038110613046576130466141cf565b60ff9092166020929092020152505b508061306081614152565b915050612cf6565b5060005b60038160ff161015613116576000828260ff166003811061308f5761308f6141cf565b602002015160ff161115613104577f973cb5e7d2831babd05fc3de4db9926ae3b4301b00c92c3542e0771ea471b0fd8160ff1660038111156130d3576130d36141a3565b838360ff16600381106130e8576130e86141cf565b60200201516040516130fb929190613f1a565b60405180910390a15b8061310e8161416d565b91505061306c565b505080516020820151604090920151929b909a50909850909650945050505050565b60606131438261377a565b61315b57505060408051602081019091526000815290565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156132b057838290600052602060002090600602016040518060c00160405290816000820180546131c490614117565b80601f01602080910402602001604051908101604052809291908181526020018280546131f090614117565b801561323d5780601f106132125761010080835404028352916020019161323d565b820191906000526020600020905b81548152906001019060200180831161322057829003601f168201915b50505091835250506001820154602082015260028201546040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561328c5761328c6141a3565b600381111561329d5761329d6141a3565b8152505081526020019060010190613191565b5050505090506000815190506132c4613b08565b6000836000815181106132d9576132d96141cf565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b84811015610ede57858181518110613326576133266141cf565b602002602001015193508282856000015160405160200161334993929190613eae565b6040516020818303038152906040529250808061336590614152565b91505061330c565b60008061337e836305f5e10061407a565b90506305f5e10061338f828661405b565b6133999190614039565b949350505050565b6001600160a01b038216600090815260038401602052604090205460ff16156133e6576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b6000818311156134935760405162461bcd60e51b815260206004820152601460248201527377726f6e6720747374616d707320706172616d7360601b6044820152606401610699565b83602001518310156134da5760405162461bcd60e51b815260206004820152601060248201526f1b19599d081d1cdd185b5c1cc818985960821b6044820152606401610699565b60a084015160006134eb82866138e5565b608087015190915060006134ff88886139c0565b6020890151909150879060009081908190819081895b600860008d600381111561352b5761352b6141a3565b600381111561353c5761353c6141a3565b81526020810191909152604001600020548110156136a157600860008d600381111561356a5761356a6141a3565b600381111561357b5761357b6141a3565b8152602001908152602001600020818154811061359a5761359a6141cf565b90600052602060002090600202016000015496506135b88884613a6a565b6135c28885613a6a565b14801592506135fa576135d58884613a6a565b6135e0906001613ffc565b600a546135ed919061405b565b6135f79084613ffc565b96505b61360488886140b9565b94506301e13380856305f5e10061361b8c8e61405b565b6136259190614039565b61362f919061405b565b6136399190614039565b9350869750838661364a9190613ffc565b955081156136725761365e89600b5461336d565b98508061366a81614100565b91505061368f565b61368c89600860008f600381111561060c5761060c6141a3565b98505b8061369981614152565b915050613515565b505b8c8714613765578c95506136b78783613a6a565b6136c18784613a6a565b14801591506136f9576136d48783613a6a565b6136df906001613ffc565b600a546136ec919061405b565b6136f69083613ffc565b95505b61370387876140b9565b93506301e13380846305f5e10061371a8b8d61405b565b6137249190614039565b61372e919061405b565b6137389190614039565b925085965082856137499190613ffc565b945080156137605761375d88600b5461336d565b97505b6136a3565b509299505050505050505050505b9392505050565b6001600160a01b0316600090815260026020526040902054151590565b6060816137bb5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156137e557806137cf81614152565b91506137de9050600a83614039565b91506137bf565b60008167ffffffffffffffff811115613800576138006141e5565b6040519080825280601f01601f19166020018201604052801561382a576020820181803683370190505b509050815b85156138b7576138406001826140b9565b9050600061384f600a88614039565b61385a90600a61405b565b61386490886140b9565b61386f906030614014565b905060008160f81b90508084848151811061388c5761388c6141cf565b60200101906001600160f81b031916908160001a9053506138ae600a89614039565b9750505061382f565b50949350505050565b6000610af282426139c0565b600042600954836138dd9190613ffc565b111592915050565b600080806008818660038111156138fe576138fe6141a3565b600381111561390f5761390f6141a3565b815260208101919091526040016000205490505b8181111561066757600060026139398385613ffc565b6139439190614039565b9050846008600088600381111561395c5761395c6141a3565b600381111561396d5761396d6141a3565b8152602001908152602001600020828154811061398c5761398c6141cf565b90600052602060002090600202016000015410156139b6576139af816001613ffc565b92506139ba565b8091505b50613923565b602082015160a083015160608401516000929190836139df83856138e5565b905060006139ed84886138e5565b9050815b81811015613a2757613a13846008600088600381111561060c5761060c6141a3565b935080613a1f81614152565b9150506139f1565b506000613a348887613a6a565b90505b8015613a5d5780613a4781614100565b915050613a5684600b5461336d565b9350613a37565b5091979650505050505050565b600a54600090613a7a83856140b9565b6137739190614039565b828054613a9090614117565b90600052602060002090601f016020900481019282613ab25760008555613af8565b82601f10613acb57805160ff1916838001178555613af8565b82800160010185558215613af8579182015b82811115613af8578251825591602001919060010190613add565b50613b04929150613b72565b5090565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016000815260200160006003811115613b4957613b496141a3565b905290565b5080546000825560020290600052602060002090810190613b6f9190613b87565b50565b5b80821115613b045760008155600101613b73565b5b80821115613b045760008082556001820155600201613b88565b80356001600160a01b0381168114613bb957600080fd5b919050565b600082601f830112613bcf57600080fd5b81356020613be4613bdf83613fd8565b613fa7565b80838252828201915082860187848660051b8901011115613c0457600080fd5b60005b85811015613c2357813584529284019290840190600101613c07565b5090979650505050505050565b803560048110613bb957600080fd5b600060208284031215613c5157600080fd5b61377382613ba2565b600080600060608486031215613c6f57600080fd5b613c7884613ba2565b925060208085013567ffffffffffffffff80821115613c9657600080fd5b818701915087601f830112613caa57600080fd5b8135613cb8613bdf82613fd8565b8082825285820191508585018b878560051b8801011115613cd857600080fd5b60005b84811015613d6557813586811115613cf257600080fd5b8701603f81018e13613d0357600080fd5b8881013587811115613d1757613d176141e5565b613d29601f8201601f19168b01613fa7565b8181528f6040838501011115613d3e57600080fd5b81604084018c83013760009181018b01919091528552509287019290870190600101613cdb565b5050809750505050505050613d7c60408501613c30565b90509250925092565b60008060408385031215613d9857600080fd5b613da183613ba2565b946020939093013593505050565b60008060008060808587031215613dc557600080fd5b843567ffffffffffffffff80821115613ddd57600080fd5b613de988838901613bbe565b95506020870135915080821115613dff57600080fd5b50613e0c87828801613bbe565b949794965050505060408301359260600135919050565b600060208284031215613e3557600080fd5b61377382613c30565b60008060408385031215613e5157600080fd5b613da183613c30565b600060208284031215613e6c57600080fd5b5035919050565b600060208284031215613e8557600080fd5b5051919050565b60048110613eaa57634e487b7160e01b600052602160045260246000fd5b9052565b60008451613ec08184602089016140d0565b845190830190613ed48183602089016140d0565b8451910190613ee78183602088016140d0565b0195945050505050565b60208101610af28284613e8c565b60408101613f0d8285613e8c565b8260208301529392505050565b60408101613f288285613e8c565b60ff831660208301529392505050565b6020815260008251806020840152613f578160408501602087016140d0565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b828152604081016137736020830184613e8c565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fd057613fd06141e5565b604052919050565b600067ffffffffffffffff821115613ff257613ff26141e5565b5060051b60200190565b6000821982111561400f5761400f61418d565b500190565b600060ff821660ff84168060ff038211156140315761403161418d565b019392505050565b60008261405657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156140755761407561418d565b500290565b60008083128015600160ff1b8501841216156140985761409861418d565b6001600160ff1b03840183138116156140b3576140b361418d565b50500390565b6000828210156140cb576140cb61418d565b500390565b60005b838110156140eb5781810151838201526020016140d3565b838111156140fa576000848401525b50505050565b60008161410f5761410f61418d565b506000190190565b600181811c9082168061412b57607f821691505b6020821081141561414c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156141665761416661418d565b5060010190565b600060ff821660ff8114156141845761418461418d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "params": {
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_cashoutContReward(address,uint256)": {
        "params": {
          "_contIndex": "contract index",
          "account": "account of owner"
        },
        "returns": {
          "_0": "rewardsTotal total amount of rewards claimed"
        }
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "params": {
          "newInterval": "new interval"
        }
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "params": {
          "newRate": "new reduction rate (100% == 100_000_000)"
        }
      },
      "_changeCashoutTimeout(uint256)": {
        "params": {
          "newTime": "new length of interval"
        }
      },
      "_changeContPrice(uint8,uint256)": {
        "params": {
          "_cType": "contract type to change price",
          "newPrice": "new price per contract (0xB)"
        }
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "details": "the model of calculating reward requires heavily on reduction percentage. Use reduction percent as the input. Negative percentages are allowed (if want to increase APR). 100_000_000 = 100%.",
        "params": {
          "_cType": "contract type to change APR",
          "reducedPercentage": "reduction percentage"
        }
      },
      "_getClaimedAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from contract creation time to latest claim.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "rewardAmount": "total amount of reward available for account, tax included"
        }
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate claimed in an interval from contract creationTime to latest claim.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "rewardCont": "amount of reward available for selected contract"
        }
      },
      "_getContNumberOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "count number of contracts owned by this account"
        }
      },
      "_getContsCreationTime(address)": {
        "details": "concatenate creation time into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsCurrentAPR(address)": {
        "details": "concate current aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsInitialAPR(address)": {
        "details": "concate initial aprs into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsLastUpdateTime(address)": {
        "details": "concate last update times into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsNames(address)": {
        "details": "concatenate names into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsRewardAvailable(address)": {
        "details": "concate available rewards into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getContsTypes(address)": {
        "details": "concate ctypes into one string, separated by a separator ('#')",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "result a string of concatenated result"
        }
      },
      "_getRewardAmountOf(address)": {
        "details": "iterate through every contract. Use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardAmount total amount of reward available for account, tax included"
        }
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "details": "use `contRewardInInterval` to calculate reward in an interval from user last claims to now.",
        "params": {
          "_contIndex": "index of contract in user's list",
          "account": "address to query"
        },
        "returns": {
          "_0": "rewardCont amount of reward available for selected contract"
        }
      },
      "_isContOwner(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "res true if account is the contract number"
        }
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "_undoRewardAPRChange(uint8)": {
        "params": {
          "_cType": "type of contract to pop last change"
        }
      },
      "createConts(address,string[],uint8)": {
        "params": {
          "_cType": "type of contract",
          "account": "account of owner",
          "contNames": "list of names of contract"
        }
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "details": "iterate through a list of APR changes in history",
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "result apr of contract type _cType"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "address of newAdmin"
        }
      },
      "setToken(address)": {
        "params": {
          "token_": "new address of 0xB"
        }
      },
      "totalContsPerContType(uint8)": {
        "params": {
          "_cType": "contract type to query"
        },
        "returns": {
          "_0": "res return number of contract for each contract type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_cashoutAllContsReward(address)": {
        "notice": "reduce all conts reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_cashoutContReward(address,uint256)": {
        "notice": "reduce chosen cont reward to 0 and return amount of rewards claimed so token contract can send tokens"
      },
      "_changeAutoReduceAPRInterval(uint256)": {
        "notice": "change auto APR reduce interval per contract"
      },
      "_changeAutoReduceAPRRate(uint256)": {
        "notice": "change auto APR reduce rate per contract"
      },
      "_changeCashoutTimeout(uint256)": {
        "notice": "change cashout timeout. User cannot claim 2 times in one interval of newTime."
      },
      "_changeContPrice(uint8,uint256)": {
        "notice": "change contract price of one type"
      },
      "_changeRewardAPRPerCont(uint8,int256)": {
        "notice": "change reward apr of one contract type"
      },
      "_getClaimedAmountOf(address)": {
        "notice": "query claimed amount of an address in every contract"
      },
      "_getClaimedAmountOfIndex(address,uint256)": {
        "notice": "query claimed amount of one contract"
      },
      "_getContNumberOf(address)": {
        "notice": "get number of contract from one owner"
      },
      "_getContsCreationTime(address)": {
        "notice": "get the list of contracts creation time from one owner"
      },
      "_getContsCurrentAPR(address)": {
        "notice": "get the list of contracts current aprs from one owner"
      },
      "_getContsInitialAPR(address)": {
        "notice": "get the list of contracts initial aprs from one owner"
      },
      "_getContsLastUpdateTime(address)": {
        "notice": "get the list of contracts last update times from one owner"
      },
      "_getContsNames(address)": {
        "notice": "get the list of contracts name from one owner"
      },
      "_getContsRewardAvailable(address)": {
        "notice": "get the list of contracts available rewards from one owner"
      },
      "_getContsTypes(address)": {
        "notice": "get the list of contracts ctypes from one owner"
      },
      "_getRewardAmountOf(address)": {
        "notice": "query total reward amount of an address in every contract"
      },
      "_getRewardAmountOfIndex(address,uint256)": {
        "notice": "query reward amount of one contract"
      },
      "_isContOwner(address)": {
        "notice": "query if an account is an owner of any contract"
      },
      "_resetAllAPRChange(uint8,uint256)": {
        "notice": "only used when admin makes mistake about APR change: reset every APR changes/"
      },
      "_undoRewardAPRChange(uint8)": {
        "notice": "only used when admin makes mistake about APR change: undo last APR change of one type"
      },
      "createConts(address,string[],uint8)": {
        "notice": "create new contract storages for account"
      },
      "currentRewardAPRPerNewCont(uint8)": {
        "notice": "calculate initial APR for new contract to display on dApp"
      },
      "setAdmin(address)": {
        "notice": "change admin of contract"
      },
      "setToken(address)": {
        "notice": "set 0xB token Address"
      },
      "totalContsPerContType(uint8)": {
        "notice": "return number of contract of contract type _cType"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5207,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)13632_storage"
      },
      {
        "astId": 5213,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_contsOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(ContEntity)5199_storage)dyn_storage)"
      },
      {
        "astId": 5218,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "contPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5223,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "initRewardAPRPerCont",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5230,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContType)5173,t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage)"
      },
      {
        "astId": 5232,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5234,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5236,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5238,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5240,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5242,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "totalContsCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5247,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_totalContsPerType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContType)5173,t_uint256)"
      },
      {
        "astId": 5253,
        "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
        "label": "_brokeevenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)5204_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContEntity)5199_storage)dyn_storage": {
        "base": "t_struct(ContEntity)5199_storage",
        "encoding": "dynamic_array",
        "label": "struct CONTRewardManagement.ContEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ContType)5173": {
        "encoding": "inplace",
        "label": "enum ContType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContEntity)5199_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CONTRewardManagement.ContEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContEntity)5199_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContType)5173,t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5173",
        "label": "mapping(enum ContType => struct CONTRewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)5204_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContType)5173,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContType)5173",
        "label": "mapping(enum ContType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)5204_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 5201,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5203,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ContEntity)5199_storage": {
        "encoding": "inplace",
        "label": "struct CONTRewardManagement.ContEntity",
        "members": [
          {
            "astId": 5187,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5189,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5191,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5193,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5195,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5198,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContType)5173"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)13632_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 13619,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13623,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 13627,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 13631,
            "contract": "contracts/dependencies/CONTRewardManagement.sol:CONTRewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}