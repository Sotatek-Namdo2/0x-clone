{
  "address": "0x83Ae9C863Dc5c15589eeA344d542986eF37464be",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserPendingReward",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserStakeAmounts",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserTimestamps",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserUnstakedAmount",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStakingEntitiesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmountInPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc0xBPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "taxOfEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0xBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "totalStakeOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_amount",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxPortion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe4a12ba39d0fda389a68fbd55dbd5a7fea3cb80da25de7c5b5dba296bc4341e9",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x83Ae9C863Dc5c15589eeA344d542986eF37464be",
    "transactionIndex": 46,
    "gasUsed": "2940960",
    "logsBloom": "0x
    "blockHash": "0x1689084653767bd504d834bff2e38bbf6c11ca9a8e90c27c08ac6d5fdea39425",
    "transactionHash": "0xe4a12ba39d0fda389a68fbd55dbd5a7fea3cb80da25de7c5b5dba296bc4341e9",
    "logs": [],
    "blockNumber": 10576866,
    "cumulativeGasUsed": "11231647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1c9f0a8cf187f5fe6229e89366dc8ed5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPendingReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStakeAmounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserTimestamps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserUnstakedAmount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingEntitiesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc0xBPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"taxOfEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0xBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakeOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LPStaking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\n// todo: comment code\\n\\n// structure:\\n// - My pools:\\n// + APR (read BA docs)\\n\\ncontract LPStaking is Initializable, PaymentSplitterUpgradeable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant DAY = 86400;\\n    uint256 private constant YEAR = 86400 * 365;\\n    uint256 private constant ONE_LP = 1e18;\\n    string private constant SEPARATOR = \\\"#\\\";\\n\\n    // ----- Structs -----\\n    struct LPStakeEntity {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 creationTime;\\n        uint256 withdrawn;\\n    }\\n\\n    struct UserLPStakeInfo {\\n        uint256 size;\\n        mapping(uint8 => LPStakeEntity) entities;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken;\\n        uint256 lpAmountInPool;\\n        uint256 totalDistribute;\\n        uint256 startTime;\\n        uint256 duration;\\n        uint256 acc0xBPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    // ----- Contract Storage -----\\n    uint256 public lpStakingEntitiesLimit;\\n\\n    // ----- Limits on withdrawal -----\\n    uint256 public withdrawTimeout;\\n    uint256[] public withdrawTaxLevel;\\n    uint256[] public withdrawTaxPortion;\\n    address public earlyWithdrawTaxPool;\\n\\n    PoolInfo[] public pools;\\n    mapping(uint32 => mapping(address => UserLPStakeInfo)) private userInfo;\\n    mapping(address => bool) private whitelistAuthorities;\\n\\n    // ----- Router Addresses -----\\n    address public token0xBAddress;\\n    address public admin0xB;\\n\\n    // ----- Constructor -----\\n    function initialize() public initializer {\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        __PaymentSplitter_init(payees, shares);\\n        admin0xB = msg.sender;\\n        lpStakingEntitiesLimit = 100;\\n        withdrawTimeout = DAY;\\n        withdrawTaxLevel = [0, 0, DAY * 30, DAY * 60];\\n        withdrawTaxPortion = [5_000_000, 5_000_000, 2_500_000, 0];\\n        earlyWithdrawTaxPool = msg.sender;\\n    }\\n\\n    // ----- Events -----\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token0xBAddress || msg.sender == admin0xB || isWhitelisted(msg.sender), \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    function getAPR(uint32 _poolId) public view returns (uint256 apr) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        apr = (pool.totalDistribute * YEAR * uint256(1e18)) / pool.duration / pool.lpAmountInPool;\\n    }\\n\\n    function totalStakeOfUser(uint32 _poolId, address addr) public view returns (uint256 totalStake) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        totalStake = 0;\\n        for (uint8 i = 1; i < user.size; i++) {\\n            totalStake += user.entities[i].amount;\\n        }\\n    }\\n\\n    function getUserTimestamps(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].creationTime);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].creationTime)));\\n        }\\n    }\\n\\n    function getUserStakeAmounts(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].amount + user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 amount = user.entities[i].amount + user.entities[i].withdrawn;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(amount)));\\n        }\\n    }\\n\\n    function getUserPendingReward(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(pendingReward(_poolId, addr, 0));\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(pendingReward(_poolId, addr, i))));\\n        }\\n    }\\n\\n    function getUserUnstakedAmount(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].withdrawn)));\\n        }\\n    }\\n\\n    function pendingReward(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        LPStakeEntity memory entity = user.entities[uint8(_index)];\\n        uint256 acc0xBPerShare = pool.acc0xBPerShare;\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 reward = 0;\\n            acc0xBPerShare = ((acc0xBPerShare + reward) * ONE_LP) / lpSupply;\\n        }\\n        return (entity.amount * acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    }\\n\\n    function isWhitelisted(address addr) public view returns (bool) {\\n        return whitelistAuthorities[addr];\\n    }\\n\\n    function withdrawable(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (bool) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        return (entity.creationTime + withdrawTimeout < block.timestamp);\\n    }\\n\\n    function taxOfEntity(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        uint256 durationSinceStart = block.timestamp - entity.creationTime;\\n        for (uint256 i = withdrawTaxPortion.length - 1; i > 0; i--) {\\n            if (withdrawTaxLevel[i] <= durationSinceStart) {\\n                return withdrawTaxPortion[i];\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // ----- Admin WRITE functions -----\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        token0xBAddress = _token;\\n    }\\n\\n    function addPool(\\n        address _token,\\n        uint256 _totalDistribute,\\n        uint256 _startTime,\\n        uint256 _duration\\n    ) external onlyAuthorities {\\n        require(_startTime >= block.timestamp, \\\"start time should be in the future\\\");\\n        IERC20(token0xBAddress).transferFrom(msg.sender, address(this), _totalDistribute);\\n        pools.push(\\n            PoolInfo({\\n                lpToken: IERC20(_token),\\n                totalDistribute: _totalDistribute,\\n                startTime: _startTime,\\n                duration: _duration,\\n                acc0xBPerShare: 0,\\n                lpAmountInPool: 0,\\n                lastRewardTimestamp: _startTime\\n            })\\n        );\\n    }\\n\\n    // ----- Public WRITE functions -----\\n\\n    // only create new records\\n    function deposit(uint32 _poolId, uint256 _amount) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please stake\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(user.size < lpStakingEntitiesLimit, \\\"too many entities, please withdraw some\\\");\\n\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        pool.lpAmountInPool = pool.lpAmountInPool + _amount;\\n        user.entities[uint8(user.size)] = LPStakeEntity({\\n            amount: _amount,\\n            rewardDebt: 0,\\n            creationTime: block.timestamp,\\n            withdrawn: 0\\n        });\\n        user.size = user.size + 1;\\n    }\\n\\n    function withdraw(\\n        uint32 _poolId,\\n        uint32 _index,\\n        uint32 _amount\\n    ) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please unstake\\\");\\n        require(withdrawable(_poolId, msg.sender, _index), \\\"entity in withdrawal timeout\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(_index < user.size, \\\"wrong index\\\");\\n        require(_amount <= user.entities[uint8(_index)].amount, \\\"amount too big\\\");\\n\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        LPStakeEntity storage entity = user.entities[uint8(_index)];\\n\\n        // transfer 0xB reward\\n        uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n        IERC20(token0xBAddress).transfer(sender, reward);\\n        entity.rewardDebt = entity.rewardDebt + reward;\\n\\n        uint256 tax = taxOfEntity(_poolId, sender, _index);\\n        if (tax > 0) {\\n            tax = (tax * _amount) / HUNDRED_PERCENT;\\n            pool.lpToken.transferFrom(address(this), earlyWithdrawTaxPool, tax);\\n        }\\n        pool.lpToken.transferFrom(address(this), address(msg.sender), _amount - tax);\\n        pool.lpAmountInPool = pool.lpAmountInPool - _amount;\\n\\n        // swap from last place to current entity\\n        if (_amount == entity.amount) {\\n            user.size = user.size - 1;\\n            user.entities[uint8(_index)] = user.entities[uint8(user.size)];\\n        } else {\\n            entity.amount = entity.amount - _amount;\\n            entity.withdrawn = entity.withdrawn + _amount;\\n        }\\n    }\\n\\n    function claimReward(uint32 _poolId, uint32 _index) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(_index < user.size, \\\"wrong index\\\");\\n\\n        updatePool(_poolId);\\n        LPStakeEntity storage entity = user.entities[uint8(_index)];\\n        PoolInfo storage pool = pools[_poolId];\\n        uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n        IERC20(token0xBAddress).transfer(sender, reward);\\n        entity.rewardDebt = entity.rewardDebt + reward;\\n    }\\n\\n    function claimAllReward(uint32 _poolId) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n\\n        uint256 totalReward = 0;\\n        uint256 reward;\\n\\n        for (uint8 i = 0; i < user.size; i++) {\\n            LPStakeEntity storage entity = user.entities[i];\\n            reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalReward += reward;\\n            entity.rewardDebt = entity.rewardDebt + reward;\\n        }\\n        IERC20(token0xBAddress).transfer(sender, totalReward);\\n    }\\n\\n    function updatePool(uint32 _poolId) public {\\n        PoolInfo storage pool = pools[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 rewardSinceLastChange = getDelta(pool.lastRewardTimestamp, block.timestamp) *\\n            getCurrentRewardPerLPPerSecond(pool);\\n        pool.acc0xBPerShare = pool.acc0xBPerShare + rewardSinceLastChange;\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function getDelta(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to - _from;\\n    }\\n\\n    function getCurrentRewardPerLPPerSecond(PoolInfo memory _pi) internal pure returns (uint256) {\\n        return (_pi.totalDistribute * uint256(ONE_LP)) / _pi.duration / _pi.lpAmountInPool;\\n    }\\n\\n    function isPoolClaimable(PoolInfo memory _pi) internal view returns (bool) {\\n        return (block.timestamp >= _pi.startTime);\\n    }\\n\\n    function isPoolActive(PoolInfo memory _pi) internal view returns (bool) {\\n        return (isPoolClaimable(_pi) && block.timestamp <= _pi.startTime + _pi.duration);\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x31fee785e18ed7867daafa90581e8e0e0342cb1d95642ec9d86809679e27764b\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061343e806100206000396000f3fe6080604052600436106102085760003560e01c80639852595c11610118578063b2a17049116100a0578063d4491a061161006f578063d4491a06146106a2578063d63c564b146106c2578063d79779b2146106e2578063e17f8d5514610718578063e33b7de31461072e57600080fd5b8063b2a170491461060c578063c3e691b51461062c578063ce7c2ac21461064c578063cedb682a1461068257600080fd5b8063a71f06f0116100e7578063a71f06f01461052d578063aaf103981461054d578063ac4afa381461056d578063aeeacef1146105cc578063b0cdad26146105ec57600080fd5b80639852595c146104a15780639c15d1a2146104d7578063a494a0c0146104ed578063a6503e761461050d57600080fd5b80633af32abf1161019b5780634b7ea33d1161016a5780634b7ea33d146103ff5780635931583d1461042c5780635a4ec0ca1461044c5780638129fc1c1461046c5780638b83209b1461048157600080fd5b80633af32abf1461036f5780633da3a82d1461039f578063406072a9146103bf57806348b75044146103df57600080fd5b806329efdc41116101d757806329efdc41146102ec5780632f3ef5da1461031a578063303d50c21461033a5780633a98ef391461035a57600080fd5b8063031299111461024d5780630584aecf1461026f578063144fa6d7146102ac57806319165587146102cc57600080fd5b36610248577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770333460405161023e929190613155565b60405180910390a1005b600080fd5b34801561025957600080fd5b5061026d6102683660046130ca565b610743565b005b34801561027b57600080fd5b50606e5461028f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102b857600080fd5b5061026d6102c7366004612f0c565b610c0a565b3480156102d857600080fd5b5061026d6102e7366004612f0c565b610ce8565b3480156102f857600080fd5b5061030c610307366004613028565b610e0d565b6040519081526020016102a3565b34801561032657600080fd5b5061026d610335366004612ff1565b610f35565b34801561034657600080fd5b5061030c610355366004613028565b611020565b34801561036657600080fd5b5060335461030c565b34801561037b57600080fd5b5061038f61038a366004612f0c565b611217565b60405190151581526020016102a3565b3480156103ab57600080fd5b5061030c6103ba366004612fbf565b611235565b3480156103cb57600080fd5b5061030c6103da366004612f86565b611256565b3480156103eb57600080fd5b5061026d6103fa366004612f86565b611283565b34801561040b57600080fd5b5061041f61041a36600461300c565b611442565b6040516102a39190613192565b34801561043857600080fd5b5061030c610447366004612fbf565b61155f565b34801561045857600080fd5b5061026d610467366004612f29565b61156f565b34801561047857600080fd5b5061026d611832565b34801561048d57600080fd5b5061028f61049c366004612fbf565b611a3c565b3480156104ad57600080fd5b5061030c6104bc366004612f0c565b6001600160a01b031660009081526036602052604090205490565b3480156104e357600080fd5b5061030c60665481565b3480156104f957600080fd5b5061041f61050836600461300c565b611a6c565b34801561051957600080fd5b5061030c61052836600461300c565b611b62565b34801561053957600080fd5b5061026d610548366004613097565b611bf8565b34801561055957600080fd5b5061026d61056836600461306d565b611dae565b34801561057957600080fd5b5061058d610588366004612fbf565b611fce565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016102a3565b3480156105d857600080fd5b5061038f6105e7366004613028565b612027565b3480156105f857600080fd5b5061041f61060736600461300c565b6120d1565b34801561061857600080fd5b5061030c610627366004612ff1565b6121e6565b34801561063857600080fd5b5061026d610647366004612ff1565b6122d0565b34801561065857600080fd5b5061030c610667366004612f0c565b6001600160a01b031660009081526035602052604090205490565b34801561068e57600080fd5b50606d5461028f906001600160a01b031681565b3480156106ae57600080fd5b5060695461028f906001600160a01b031681565b3480156106ce57600080fd5b5061041f6106dd36600461300c565b612468565b3480156106ee57600080fd5b5061030c6106fd366004612f0c565b6001600160a01b031660009081526038602052604090205490565b34801561072457600080fd5b5061030c60655481565b34801561073a57600080fd5b5060345461030c565b606a5463ffffffff8416106107735760405162461bcd60e51b815260040161076a9061320b565b60405180910390fd5b60008163ffffffff16116107ba5760405162461bcd60e51b815260206004820152600e60248201526d706c6561736520756e7374616b6560901b604482015260640161076a565b6107c5833384612027565b6108115760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161076a565b63ffffffff8084166000908152606b60209081526040808320338085529252909120805491929091908516106108775760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b604482015260640161076a565b60ff8416600090815260018201602052604090205463ffffffff841611156108d25760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e7420746f6f2062696760901b604482015260640161076a565b6108db85610f35565b6000606a8663ffffffff16815481106108f6576108f66133f0565b9060005260206000209060070201905060008260010160008760ff1660ff168152602001908152602001600020905060008160010154670de0b6b3a7640000846005015484600001546109499190613322565b6109539190613300565b61095d9190613341565b606d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906109909088908590600401613155565b602060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190612f64565b508082600101546109f391906132c3565b60018301556000610a0589878a610e0d565b90508015610aba576305f5e100610a2263ffffffff891683613322565b610a2c9190613300565b84546069546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92610a66923092911690869060040161316e565b602060405180830381600087803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190612f64565b505b83546001600160a01b03166323b872dd3033610adc8563ffffffff8d16613341565b6040518463ffffffff1660e01b8152600401610afa9392919061316e565b602060405180830381600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190612f64565b508663ffffffff168460010154610b639190613341565b6001850155825463ffffffff88161415610bce578454610b8590600190613341565b80865560ff908116600090815260018088016020526040808320938c16835290912082548155828201549181019190915560028083015490820155600391820154910155610bff565b8254610be19063ffffffff891690613341565b83556003830154610bf99063ffffffff8916906132c3565b60038401555b505050505050505050565b606d546001600160a01b0316331480610c2d5750606e546001600160a01b031633145b80610c3c5750610c3c33611217565b610c795760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161076a565b6001600160a01b038116610cc65760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161076a565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260356020526040902054610d1d5760405162461bcd60e51b815260040161076a906131c5565b6000610d2860345490565b610d3290476132c3565b90506000610d5f8383610d5a866001600160a01b031660009081526036602052604090205490565b61258e565b905080610d7e5760405162461bcd60e51b815260040161076a9061322d565b6001600160a01b03831660009081526036602052604081208054839290610da69084906132c3565b925050819055508060346000828254610dbf91906132c3565b90915550610dcf905083826125d4565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610e00929190613155565b60405180910390a1505050565b606a5460009063ffffffff851610610e375760405162461bcd60e51b815260040161076a9061320b565b63ffffffff84166000908152606b602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352818420825160808101845281548152918101549382019390935260028301549181018290526003909201546060830152909190610eaa9042613341565b606854909150600090610ebf90600190613341565b90505b8015610f26578160678281548110610edc57610edc6133f0565b906000526020600020015411610f145760688181548110610eff57610eff6133f0565b90600052602060002001549350505050610f2e565b80610f1e81613388565b915050610ec2565b506000925050505b9392505050565b6000606a8263ffffffff1681548110610f5057610f506133f0565b9060005260206000209060070201905080600601544211610f6f575050565b600181015480610f8457504260069091015550565b6040805160e08101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600090610fe5906126f2565b610ff384600601544261272a565b610ffd9190613322565b905080836005015461100f91906132c3565b600584015550504260069091015550565b606a5460009063ffffffff85161061104a5760405162461bcd60e51b815260040161076a9061320b565b6000606a8563ffffffff1681548110611065576110656133f0565b90600052602060002090600702016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000606b60008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360a0015190506000846020015190508460c00151421180156111a757508015155b156111da57600081670de0b6b3a76400006111c283866132c3565b6111cc9190613322565b6111d69190613300565b9250505b60208301518351670de0b6b3a7640000906111f6908590613322565b6112009190613300565b61120a9190613341565b9998505050505050505050565b6001600160a01b03166000908152606c602052604090205460ff1690565b6068818154811061124557600080fd5b600091825260209091200154905081565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152603560205260409020546112b85760405162461bcd60e51b815260040161076a906131c5565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190612fd8565b61135291906132c3565b905060006113658383610d5a8787611256565b9050806113845760405162461bcd60e51b815260040161076a9061322d565b6001600160a01b038085166000908152603960209081526040808320938716835292905290812080548392906113bb9084906132c3565b90915550506001600160a01b038416600090815260386020526040812080548392906113e89084906132c3565b909155506113f99050848483612736565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051611434929190613155565b60405180910390a250505050565b606a5460609063ffffffff84161061146c5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b0386168452909152902080546114b157505060408051602081019091526000815261127d565b60008080526001820160205260409020600301546114ce9061278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b8152506115218460010160008560ff1660ff1681526020019081526020016000206003015461278c565b60405160200161153393929190613112565b6040516020818303038152906040529250808061154f906133ba565b9150506114d3565b505092915050565b6067818154811061124557600080fd5b606d546001600160a01b03163314806115925750606e546001600160a01b031633145b806115a157506115a133611217565b6115de5760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161076a565b428210156116395760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b606482015260840161076a565b606d546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061166d9033903090889060040161316e565b602060405180830381600087803b15801561168757600080fd5b505af115801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190612f64565b506040805160e0810182526001600160a01b039586168152600060208201818152928201958652606082018581526080830194855260a0830182815260c08401968752606a8054600181018255935292517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a51600790930292830180546001600160a01b031916919099161790975591517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5283015593517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5382015593517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a54850155517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5584015590517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a56830155517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5790910155565b600054610100900460ff1661184d5760005460ff1615611851565b303b155b6118b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161076a565b600054610100900460ff161580156118d6576000805461ffff19166101011790555b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061190c5761190c6133f0565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060018160008151811061195e5761195e6133f0565b60200260200101818152505061197482826128b5565b606e80546001600160a01b031916331790556064606555620151806066819055604080516080810182526000808252602082015291908201906119b890601e613322565b81526020016119cb62015180603c613322565b90526119db906067906004612e51565b5060408051608081018252624c4b408082526020820152622625a09181019190915260006060820152611a12906068906004612e9c565b5050606980546001600160a01b03191633179055508015611a39576000805461ff00191690555b50565b600060378281548110611a5157611a516133f0565b6000918252602090912001546001600160a01b031692915050565b606a5460609063ffffffff841610611a965760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b038616845290915290208054611adb57505060408051602081019091526000815261127d565b611aef611aea85856000611020565b61278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b815250611b2c611aea88888660ff16611020565b604051602001611b3e93929190613112565b60405160208183030381529060405292508080611b5a906133ba565b915050611af4565b606a5460009063ffffffff841610611b8c5760405162461bcd60e51b815260040161076a9061320b565b5063ffffffff82166000908152606b602090815260408083206001600160a01b0385168452909152812060015b815460ff821610156115575760ff81166000908152600183016020526040902054611be490846132c3565b925080611bf0816133ba565b915050611bb9565b606a5463ffffffff831610611c1f5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff8083166000908152606b6020908152604080832033808552925290912080549192909190841610611c855760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b604482015260640161076a565b611c8e84610f35565b60ff831660009081526001820160205260408120606a805491929163ffffffff8816908110611cbf57611cbf6133f0565b9060005260206000209060070201905060008260010154670de0b6b3a764000083600501548560000154611cf39190613322565b611cfd9190613300565b611d079190613341565b606d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90611d3a9088908590600401613155565b602060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c9190612f64565b50808360010154611d9d91906132c3565b836001018190555050505050505050565b606a5463ffffffff831610611dd55760405162461bcd60e51b815260040161076a9061320b565b60008111611e145760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b604482015260640161076a565b63ffffffff82166000908152606b60209081526040808320338085529252909120606554815410611e975760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b606482015260840161076a565b611ea084610f35565b6000606a8563ffffffff1681548110611ebb57611ebb6133f0565b6000918252602090912060079091020180546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611eff9033903090899060040161316e565b602060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190612f64565b50838160010154611f6291906132c3565b60018083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff16855289880190935294909220925183559051828501559151600282015590516003909101558254611fc5916132c3565b90915550505050565b606a8181548110611fde57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b606a5460009063ffffffff8516106120515760405162461bcd60e51b815260040161076a9061320b565b63ffffffff84166000908152606b602090815260408083206001600160a01b0387168452825280832060ff86168452600190810183529281902081516080810183528154815293810154928401929092526002820154908301819052600390910154606083015260665442916120c791906132c3565b1095945050505050565b606a5460609063ffffffff8416106120fb5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b03861684529091529020805461214057505060408051602081019091526000815261127d565b600080805260018201602052604090206002015461215d9061278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b8152506121b08460010160008560ff1660ff1681526020019081526020016000206002015461278c565b6040516020016121c293929190613112565b604051602081830303815290604052925080806121de906133ba565b915050612162565b606a5460009063ffffffff8316106122105760405162461bcd60e51b815260040161076a9061320b565b6000606a8363ffffffff168154811061222b5761222b6133f0565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b031683526001810154938301849052600281015491830182905260038101546060840152600481015460808401819052600582015460a085015260069091015460c0840152919350670de0b6b3a7640000906122b2906301e1338090613322565b6122bc9190613322565b6122c69190613300565b610f2e9190613300565b606a5463ffffffff8216106122f75760405162461bcd60e51b815260040161076a9061320b565b63ffffffff81166000908152606b6020908152604080832033808552925290912061232183610f35565b6000606a8463ffffffff168154811061233c5761233c6133f0565b600091825260208220600790910201915080805b845460ff821610156123da5760ff81166000908152600180870160205260409091209081015460058601548254670de0b6b3a76400009161239091613322565b61239a9190613300565b6123a49190613341565b92506123b083856132c3565b93508281600101546123c291906132c3565b600190910155806123d2816133ba565b915050612350565b50606d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061240d9088908690600401613155565b602060405180830381600087803b15801561242757600080fd5b505af115801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190612f64565b50505050505050565b606a5460609063ffffffff8416106124925760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b0386168452909152902080546124d757505060408051602081019091526000815261127d565b60008080526001820160205260409020600381015490546124fb91611aea916132c3565b915060015b815460ff821610156115575760ff8116600090815260018301602052604081206003810154905461253191906132c3565b905083604051806040016040528060018152602001602360f81b8152506125578361278c565b60405160200161256993929190613112565b6040516020818303038152906040529350508080612586906133ba565b915050612500565b6033546001600160a01b038416600090815260356020526040812054909183916125b89086613322565b6125c29190613300565b6125cc9190613341565b949350505050565b804710156126245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161076a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612671576040519150601f19603f3d011682016040523d82523d6000602084013e612676565b606091505b50509050806126ed5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161076a565b505050565b600081602001518260800151670de0b6b3a764000084604001516127169190613322565b6127209190613300565b61127d9190613300565b6000610f2e8383613341565b6126ed8363a9059cbb60e01b8484604051602401612755929190613155565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128ea565b6060816127b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127da57806127c48161339f565b91506127d39050600a83613300565b91506127b4565b60008167ffffffffffffffff8111156127f5576127f5613406565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050815b85156128ac57612835600182613341565b90506000612844600a88613300565b61284f90600a613322565b6128599088613341565b6128649060306132db565b905060008160f81b905080848481518110612881576128816133f0565b60200101906001600160f81b031916908160001a9053506128a3600a89613300565b97505050612824565b50949350505050565b600054610100900460ff166128dc5760405162461bcd60e51b815260040161076a90613278565b6128e682826129bc565b5050565b600061293f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612afa9092919063ffffffff16565b8051909150156126ed578080602001905181019061295d9190612f64565b6126ed5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161076a565b600054610100900460ff166129e35760405162461bcd60e51b815260040161076a90613278565b8051825114612a4f5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161076a565b6000825111612aa05760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161076a565b60005b82518110156126ed57612ae8838281518110612ac157612ac16133f0565b6020026020010151838381518110612adb57612adb6133f0565b6020026020010151612b09565b80612af28161339f565b915050612aa3565b60606125cc8484600085612ce7565b6001600160a01b038216612b745760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161076a565b60008111612bc45760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161076a565b6001600160a01b03821660009081526035602052604090205415612c3e5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161076a565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152603560205260409020819055603354612ca69082906132c3565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90612cdb9084908490613155565b60405180910390a15050565b606082471015612d485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161076a565b6001600160a01b0385163b612d9f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161076a565b600080866001600160a01b03168587604051612dbb91906130f6565b60006040518083038185875af1925050503d8060008114612df8576040519150601f19603f3d011682016040523d82523d6000602084013e612dfd565b606091505b5091509150612e0d828286612e18565b979650505050505050565b60608315612e27575081610f2e565b825115612e375782518084602001fd5b8160405162461bcd60e51b815260040161076a9190613192565b828054828255906000526020600020908101928215612e8c579160200282015b82811115612e8c578251825591602001919060010190612e71565b50612e98929150612ede565b5090565b828054828255906000526020600020908101928215612e8c579160200282015b82811115612e8c578251829062ffffff16905591602001919060010190612ebc565b5b80821115612e985760008155600101612edf565b803563ffffffff81168114612f0757600080fd5b919050565b600060208284031215612f1e57600080fd5b8135610f2e8161341c565b60008060008060808587031215612f3f57600080fd5b8435612f4a8161341c565b966020860135965060408601359560600135945092505050565b600060208284031215612f7657600080fd5b81518015158114610f2e57600080fd5b60008060408385031215612f9957600080fd5b8235612fa48161341c565b91506020830135612fb48161341c565b809150509250929050565b600060208284031215612fd157600080fd5b5035919050565b600060208284031215612fea57600080fd5b5051919050565b60006020828403121561300357600080fd5b610f2e82612ef3565b6000806040838503121561301f57600080fd5b612fa483612ef3565b60008060006060848603121561303d57600080fd5b61304684612ef3565b925060208401356130568161341c565b915061306460408501612ef3565b90509250925092565b6000806040838503121561308057600080fd5b61308983612ef3565b946020939093013593505050565b600080604083850312156130aa57600080fd5b6130b383612ef3565b91506130c160208401612ef3565b90509250929050565b6000806000606084860312156130df57600080fd5b6130e884612ef3565b925061305660208501612ef3565b60008251613108818460208701613358565b9190910192915050565b60008451613124818460208901613358565b845190830190613138818360208901613358565b845191019061314b818360208801613358565b0195945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208152600082518060208401526131b1816040850160208701613358565b601f01601f19169190910160400192915050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156132d6576132d66133da565b500190565b600060ff821660ff84168060ff038211156132f8576132f86133da565b019392505050565b60008261331d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561333c5761333c6133da565b500290565b600082821015613353576133536133da565b500390565b60005b8381101561337357818101518382015260200161335b565b83811115613382576000848401525b50505050565b600081613397576133976133da565b506000190190565b60006000198214156133b3576133b36133da565b5060010190565b600060ff821660ff8114156133d1576133d16133da565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a3957600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c80639852595c11610118578063b2a17049116100a0578063d4491a061161006f578063d4491a06146106a2578063d63c564b146106c2578063d79779b2146106e2578063e17f8d5514610718578063e33b7de31461072e57600080fd5b8063b2a170491461060c578063c3e691b51461062c578063ce7c2ac21461064c578063cedb682a1461068257600080fd5b8063a71f06f0116100e7578063a71f06f01461052d578063aaf103981461054d578063ac4afa381461056d578063aeeacef1146105cc578063b0cdad26146105ec57600080fd5b80639852595c146104a15780639c15d1a2146104d7578063a494a0c0146104ed578063a6503e761461050d57600080fd5b80633af32abf1161019b5780634b7ea33d1161016a5780634b7ea33d146103ff5780635931583d1461042c5780635a4ec0ca1461044c5780638129fc1c1461046c5780638b83209b1461048157600080fd5b80633af32abf1461036f5780633da3a82d1461039f578063406072a9146103bf57806348b75044146103df57600080fd5b806329efdc41116101d757806329efdc41146102ec5780632f3ef5da1461031a578063303d50c21461033a5780633a98ef391461035a57600080fd5b8063031299111461024d5780630584aecf1461026f578063144fa6d7146102ac57806319165587146102cc57600080fd5b36610248577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770333460405161023e929190613155565b60405180910390a1005b600080fd5b34801561025957600080fd5b5061026d6102683660046130ca565b610743565b005b34801561027b57600080fd5b50606e5461028f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102b857600080fd5b5061026d6102c7366004612f0c565b610c0a565b3480156102d857600080fd5b5061026d6102e7366004612f0c565b610ce8565b3480156102f857600080fd5b5061030c610307366004613028565b610e0d565b6040519081526020016102a3565b34801561032657600080fd5b5061026d610335366004612ff1565b610f35565b34801561034657600080fd5b5061030c610355366004613028565b611020565b34801561036657600080fd5b5060335461030c565b34801561037b57600080fd5b5061038f61038a366004612f0c565b611217565b60405190151581526020016102a3565b3480156103ab57600080fd5b5061030c6103ba366004612fbf565b611235565b3480156103cb57600080fd5b5061030c6103da366004612f86565b611256565b3480156103eb57600080fd5b5061026d6103fa366004612f86565b611283565b34801561040b57600080fd5b5061041f61041a36600461300c565b611442565b6040516102a39190613192565b34801561043857600080fd5b5061030c610447366004612fbf565b61155f565b34801561045857600080fd5b5061026d610467366004612f29565b61156f565b34801561047857600080fd5b5061026d611832565b34801561048d57600080fd5b5061028f61049c366004612fbf565b611a3c565b3480156104ad57600080fd5b5061030c6104bc366004612f0c565b6001600160a01b031660009081526036602052604090205490565b3480156104e357600080fd5b5061030c60665481565b3480156104f957600080fd5b5061041f61050836600461300c565b611a6c565b34801561051957600080fd5b5061030c61052836600461300c565b611b62565b34801561053957600080fd5b5061026d610548366004613097565b611bf8565b34801561055957600080fd5b5061026d61056836600461306d565b611dae565b34801561057957600080fd5b5061058d610588366004612fbf565b611fce565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016102a3565b3480156105d857600080fd5b5061038f6105e7366004613028565b612027565b3480156105f857600080fd5b5061041f61060736600461300c565b6120d1565b34801561061857600080fd5b5061030c610627366004612ff1565b6121e6565b34801561063857600080fd5b5061026d610647366004612ff1565b6122d0565b34801561065857600080fd5b5061030c610667366004612f0c565b6001600160a01b031660009081526035602052604090205490565b34801561068e57600080fd5b50606d5461028f906001600160a01b031681565b3480156106ae57600080fd5b5060695461028f906001600160a01b031681565b3480156106ce57600080fd5b5061041f6106dd36600461300c565b612468565b3480156106ee57600080fd5b5061030c6106fd366004612f0c565b6001600160a01b031660009081526038602052604090205490565b34801561072457600080fd5b5061030c60655481565b34801561073a57600080fd5b5060345461030c565b606a5463ffffffff8416106107735760405162461bcd60e51b815260040161076a9061320b565b60405180910390fd5b60008163ffffffff16116107ba5760405162461bcd60e51b815260206004820152600e60248201526d706c6561736520756e7374616b6560901b604482015260640161076a565b6107c5833384612027565b6108115760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161076a565b63ffffffff8084166000908152606b60209081526040808320338085529252909120805491929091908516106108775760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b604482015260640161076a565b60ff8416600090815260018201602052604090205463ffffffff841611156108d25760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e7420746f6f2062696760901b604482015260640161076a565b6108db85610f35565b6000606a8663ffffffff16815481106108f6576108f66133f0565b9060005260206000209060070201905060008260010160008760ff1660ff168152602001908152602001600020905060008160010154670de0b6b3a7640000846005015484600001546109499190613322565b6109539190613300565b61095d9190613341565b606d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906109909088908590600401613155565b602060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190612f64565b508082600101546109f391906132c3565b60018301556000610a0589878a610e0d565b90508015610aba576305f5e100610a2263ffffffff891683613322565b610a2c9190613300565b84546069546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92610a66923092911690869060040161316e565b602060405180830381600087803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190612f64565b505b83546001600160a01b03166323b872dd3033610adc8563ffffffff8d16613341565b6040518463ffffffff1660e01b8152600401610afa9392919061316e565b602060405180830381600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190612f64565b508663ffffffff168460010154610b639190613341565b6001850155825463ffffffff88161415610bce578454610b8590600190613341565b80865560ff908116600090815260018088016020526040808320938c16835290912082548155828201549181019190915560028083015490820155600391820154910155610bff565b8254610be19063ffffffff891690613341565b83556003830154610bf99063ffffffff8916906132c3565b60038401555b505050505050505050565b606d546001600160a01b0316331480610c2d5750606e546001600160a01b031633145b80610c3c5750610c3c33611217565b610c795760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161076a565b6001600160a01b038116610cc65760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161076a565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260356020526040902054610d1d5760405162461bcd60e51b815260040161076a906131c5565b6000610d2860345490565b610d3290476132c3565b90506000610d5f8383610d5a866001600160a01b031660009081526036602052604090205490565b61258e565b905080610d7e5760405162461bcd60e51b815260040161076a9061322d565b6001600160a01b03831660009081526036602052604081208054839290610da69084906132c3565b925050819055508060346000828254610dbf91906132c3565b90915550610dcf905083826125d4565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568382604051610e00929190613155565b60405180910390a1505050565b606a5460009063ffffffff851610610e375760405162461bcd60e51b815260040161076a9061320b565b63ffffffff84166000908152606b602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352818420825160808101845281548152918101549382019390935260028301549181018290526003909201546060830152909190610eaa9042613341565b606854909150600090610ebf90600190613341565b90505b8015610f26578160678281548110610edc57610edc6133f0565b906000526020600020015411610f145760688181548110610eff57610eff6133f0565b90600052602060002001549350505050610f2e565b80610f1e81613388565b915050610ec2565b506000925050505b9392505050565b6000606a8263ffffffff1681548110610f5057610f506133f0565b9060005260206000209060070201905080600601544211610f6f575050565b600181015480610f8457504260069091015550565b6040805160e08101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600090610fe5906126f2565b610ff384600601544261272a565b610ffd9190613322565b905080836005015461100f91906132c3565b600584015550504260069091015550565b606a5460009063ffffffff85161061104a5760405162461bcd60e51b815260040161076a9061320b565b6000606a8563ffffffff1681548110611065576110656133f0565b90600052602060002090600702016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000606b60008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360a0015190506000846020015190508460c00151421180156111a757508015155b156111da57600081670de0b6b3a76400006111c283866132c3565b6111cc9190613322565b6111d69190613300565b9250505b60208301518351670de0b6b3a7640000906111f6908590613322565b6112009190613300565b61120a9190613341565b9998505050505050505050565b6001600160a01b03166000908152606c602052604090205460ff1690565b6068818154811061124557600080fd5b600091825260209091200154905081565b6001600160a01b038083166000908152603960209081526040808320938516835292905220545b92915050565b6001600160a01b0381166000908152603560205260409020546112b85760405162461bcd60e51b815260040161076a906131c5565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190612fd8565b61135291906132c3565b905060006113658383610d5a8787611256565b9050806113845760405162461bcd60e51b815260040161076a9061322d565b6001600160a01b038085166000908152603960209081526040808320938716835292905290812080548392906113bb9084906132c3565b90915550506001600160a01b038416600090815260386020526040812080548392906113e89084906132c3565b909155506113f99050848483612736565b836001600160a01b03167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a8483604051611434929190613155565b60405180910390a250505050565b606a5460609063ffffffff84161061146c5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b0386168452909152902080546114b157505060408051602081019091526000815261127d565b60008080526001820160205260409020600301546114ce9061278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b8152506115218460010160008560ff1660ff1681526020019081526020016000206003015461278c565b60405160200161153393929190613112565b6040516020818303038152906040529250808061154f906133ba565b9150506114d3565b505092915050565b6067818154811061124557600080fd5b606d546001600160a01b03163314806115925750606e546001600160a01b031633145b806115a157506115a133611217565b6115de5760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161076a565b428210156116395760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b606482015260840161076a565b606d546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061166d9033903090889060040161316e565b602060405180830381600087803b15801561168757600080fd5b505af115801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190612f64565b506040805160e0810182526001600160a01b039586168152600060208201818152928201958652606082018581526080830194855260a0830182815260c08401968752606a8054600181018255935292517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a51600790930292830180546001600160a01b031916919099161790975591517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5283015593517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5382015593517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a54850155517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5584015590517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a56830155517f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a5790910155565b600054610100900460ff1661184d5760005460ff1615611851565b303b155b6118b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161076a565b600054610100900460ff161580156118d6576000805461ffff19166101011790555b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061190c5761190c6133f0565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060018160008151811061195e5761195e6133f0565b60200260200101818152505061197482826128b5565b606e80546001600160a01b031916331790556064606555620151806066819055604080516080810182526000808252602082015291908201906119b890601e613322565b81526020016119cb62015180603c613322565b90526119db906067906004612e51565b5060408051608081018252624c4b408082526020820152622625a09181019190915260006060820152611a12906068906004612e9c565b5050606980546001600160a01b03191633179055508015611a39576000805461ff00191690555b50565b600060378281548110611a5157611a516133f0565b6000918252602090912001546001600160a01b031692915050565b606a5460609063ffffffff841610611a965760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b038616845290915290208054611adb57505060408051602081019091526000815261127d565b611aef611aea85856000611020565b61278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b815250611b2c611aea88888660ff16611020565b604051602001611b3e93929190613112565b60405160208183030381529060405292508080611b5a906133ba565b915050611af4565b606a5460009063ffffffff841610611b8c5760405162461bcd60e51b815260040161076a9061320b565b5063ffffffff82166000908152606b602090815260408083206001600160a01b0385168452909152812060015b815460ff821610156115575760ff81166000908152600183016020526040902054611be490846132c3565b925080611bf0816133ba565b915050611bb9565b606a5463ffffffff831610611c1f5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff8083166000908152606b6020908152604080832033808552925290912080549192909190841610611c855760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b604482015260640161076a565b611c8e84610f35565b60ff831660009081526001820160205260408120606a805491929163ffffffff8816908110611cbf57611cbf6133f0565b9060005260206000209060070201905060008260010154670de0b6b3a764000083600501548560000154611cf39190613322565b611cfd9190613300565b611d079190613341565b606d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90611d3a9088908590600401613155565b602060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c9190612f64565b50808360010154611d9d91906132c3565b836001018190555050505050505050565b606a5463ffffffff831610611dd55760405162461bcd60e51b815260040161076a9061320b565b60008111611e145760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b604482015260640161076a565b63ffffffff82166000908152606b60209081526040808320338085529252909120606554815410611e975760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b606482015260840161076a565b611ea084610f35565b6000606a8563ffffffff1681548110611ebb57611ebb6133f0565b6000918252602090912060079091020180546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611eff9033903090899060040161316e565b602060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190612f64565b50838160010154611f6291906132c3565b60018083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff16855289880190935294909220925183559051828501559151600282015590516003909101558254611fc5916132c3565b90915550505050565b606a8181548110611fde57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b606a5460009063ffffffff8516106120515760405162461bcd60e51b815260040161076a9061320b565b63ffffffff84166000908152606b602090815260408083206001600160a01b0387168452825280832060ff86168452600190810183529281902081516080810183528154815293810154928401929092526002820154908301819052600390910154606083015260665442916120c791906132c3565b1095945050505050565b606a5460609063ffffffff8416106120fb5760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b03861684529091529020805461214057505060408051602081019091526000815261127d565b600080805260018201602052604090206002015461215d9061278c565b915060015b815460ff821610156115575782604051806040016040528060018152602001602360f81b8152506121b08460010160008560ff1660ff1681526020019081526020016000206002015461278c565b6040516020016121c293929190613112565b604051602081830303815290604052925080806121de906133ba565b915050612162565b606a5460009063ffffffff8316106122105760405162461bcd60e51b815260040161076a9061320b565b6000606a8363ffffffff168154811061222b5761222b6133f0565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b031683526001810154938301849052600281015491830182905260038101546060840152600481015460808401819052600582015460a085015260069091015460c0840152919350670de0b6b3a7640000906122b2906301e1338090613322565b6122bc9190613322565b6122c69190613300565b610f2e9190613300565b606a5463ffffffff8216106122f75760405162461bcd60e51b815260040161076a9061320b565b63ffffffff81166000908152606b6020908152604080832033808552925290912061232183610f35565b6000606a8463ffffffff168154811061233c5761233c6133f0565b600091825260208220600790910201915080805b845460ff821610156123da5760ff81166000908152600180870160205260409091209081015460058601548254670de0b6b3a76400009161239091613322565b61239a9190613300565b6123a49190613341565b92506123b083856132c3565b93508281600101546123c291906132c3565b600190910155806123d2816133ba565b915050612350565b50606d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061240d9088908690600401613155565b602060405180830381600087803b15801561242757600080fd5b505af115801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190612f64565b50505050505050565b606a5460609063ffffffff8416106124925760405162461bcd60e51b815260040161076a9061320b565b63ffffffff83166000908152606b602090815260408083206001600160a01b0386168452909152902080546124d757505060408051602081019091526000815261127d565b60008080526001820160205260409020600381015490546124fb91611aea916132c3565b915060015b815460ff821610156115575760ff8116600090815260018301602052604081206003810154905461253191906132c3565b905083604051806040016040528060018152602001602360f81b8152506125578361278c565b60405160200161256993929190613112565b6040516020818303038152906040529350508080612586906133ba565b915050612500565b6033546001600160a01b038416600090815260356020526040812054909183916125b89086613322565b6125c29190613300565b6125cc9190613341565b949350505050565b804710156126245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161076a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612671576040519150601f19603f3d011682016040523d82523d6000602084013e612676565b606091505b50509050806126ed5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161076a565b505050565b600081602001518260800151670de0b6b3a764000084604001516127169190613322565b6127209190613300565b61127d9190613300565b6000610f2e8383613341565b6126ed8363a9059cbb60e01b8484604051602401612755929190613155565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128ea565b6060816127b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127da57806127c48161339f565b91506127d39050600a83613300565b91506127b4565b60008167ffffffffffffffff8111156127f5576127f5613406565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050815b85156128ac57612835600182613341565b90506000612844600a88613300565b61284f90600a613322565b6128599088613341565b6128649060306132db565b905060008160f81b905080848481518110612881576128816133f0565b60200101906001600160f81b031916908160001a9053506128a3600a89613300565b97505050612824565b50949350505050565b600054610100900460ff166128dc5760405162461bcd60e51b815260040161076a90613278565b6128e682826129bc565b5050565b600061293f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612afa9092919063ffffffff16565b8051909150156126ed578080602001905181019061295d9190612f64565b6126ed5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161076a565b600054610100900460ff166129e35760405162461bcd60e51b815260040161076a90613278565b8051825114612a4f5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840161076a565b6000825111612aa05760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640161076a565b60005b82518110156126ed57612ae8838281518110612ac157612ac16133f0565b6020026020010151838381518110612adb57612adb6133f0565b6020026020010151612b09565b80612af28161339f565b915050612aa3565b60606125cc8484600085612ce7565b6001600160a01b038216612b745760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840161076a565b60008111612bc45760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640161076a565b6001600160a01b03821660009081526035602052604090205415612c3e5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840161076a565b60378054600181019091557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152603560205260409020819055603354612ca69082906132c3565b6033556040517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac90612cdb9084908490613155565b60405180910390a15050565b606082471015612d485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161076a565b6001600160a01b0385163b612d9f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161076a565b600080866001600160a01b03168587604051612dbb91906130f6565b60006040518083038185875af1925050503d8060008114612df8576040519150601f19603f3d011682016040523d82523d6000602084013e612dfd565b606091505b5091509150612e0d828286612e18565b979650505050505050565b60608315612e27575081610f2e565b825115612e375782518084602001fd5b8160405162461bcd60e51b815260040161076a9190613192565b828054828255906000526020600020908101928215612e8c579160200282015b82811115612e8c578251825591602001919060010190612e71565b50612e98929150612ede565b5090565b828054828255906000526020600020908101928215612e8c579160200282015b82811115612e8c578251829062ffffff16905591602001919060010190612ebc565b5b80821115612e985760008155600101612edf565b803563ffffffff81168114612f0757600080fd5b919050565b600060208284031215612f1e57600080fd5b8135610f2e8161341c565b60008060008060808587031215612f3f57600080fd5b8435612f4a8161341c565b966020860135965060408601359560600135945092505050565b600060208284031215612f7657600080fd5b81518015158114610f2e57600080fd5b60008060408385031215612f9957600080fd5b8235612fa48161341c565b91506020830135612fb48161341c565b809150509250929050565b600060208284031215612fd157600080fd5b5035919050565b600060208284031215612fea57600080fd5b5051919050565b60006020828403121561300357600080fd5b610f2e82612ef3565b6000806040838503121561301f57600080fd5b612fa483612ef3565b60008060006060848603121561303d57600080fd5b61304684612ef3565b925060208401356130568161341c565b915061306460408501612ef3565b90509250925092565b6000806040838503121561308057600080fd5b61308983612ef3565b946020939093013593505050565b600080604083850312156130aa57600080fd5b6130b383612ef3565b91506130c160208401612ef3565b90509250929050565b6000806000606084860312156130df57600080fd5b6130e884612ef3565b925061305660208501612ef3565b60008251613108818460208701613358565b9190910192915050565b60008451613124818460208901613358565b845190830190613138818360208901613358565b845191019061314b818360208801613358565b0195945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208152600082518060208401526131b1816040850160208701613358565b601f01601f19169190910160400192915050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156132d6576132d66133da565b500190565b600060ff821660ff84168060ff038211156132f8576132f86133da565b019392505050565b60008261331d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561333c5761333c6133da565b500290565b600082821015613353576133536133da565b500390565b60005b8381101561337357818101518382015260200161335b565b83811115613382576000848401525b50505050565b600081613397576133976133da565b506000190190565b60006000198214156133b3576133b36133da565b5060010190565b600060ff821660ff8114156133d1576133d16133da565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a3957600080fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_totalShares",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_shares",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_released",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_payees",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 7530,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "lpStakingEntitiesLimit",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 7532,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTimeout",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 7535,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxLevel",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7538,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxPortion",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7540,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "earlyWithdrawTaxPool",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 7544,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "pools",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_struct(PoolInfo)7528_storage)dyn_storage"
      },
      {
        "astId": 7551,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7512_storage))"
      },
      {
        "astId": 7555,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "whitelistAuthorities",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7557,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "token0xBAddress",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 7559,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "admin0xB",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)7528_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7528_storage",
        "encoding": "dynamic_array",
        "label": "struct LPStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserLPStakeInfo)7512_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPStaking.UserLPStakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPStakeInfo)7512_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7512_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct LPStaking.UserLPStakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserLPStakeInfo)7512_storage)"
      },
      "t_mapping(t_uint8,t_struct(LPStakeEntity)7504_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LPStaking.LPStakeEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(LPStakeEntity)7504_storage"
      },
      "t_struct(LPStakeEntity)7504_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.LPStakeEntity",
        "members": [
          {
            "astId": 7497,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7499,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7501,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7503,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "withdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)7528_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.PoolInfo",
        "members": [
          {
            "astId": 7515,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2517"
          },
          {
            "astId": 7517,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpAmountInPool",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7519,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "totalDistribute",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7521,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7523,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7525,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "acc0xBPerShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7527,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserLPStakeInfo)7512_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.UserLPStakeInfo",
        "members": [
          {
            "astId": 7506,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7511,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "entities",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_struct(LPStakeEntity)7504_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}