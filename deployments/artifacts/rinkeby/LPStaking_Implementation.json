{
  "address": "0x4936FBdab15ec9755294E281a372BF191Ff86dBd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_indices",
          "type": "uint8[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyActive",
          "type": "bool"
        }
      ],
      "name": "getJSONAllPoolsInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getJSONAllPoolsUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getJSONSinglePoolInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getJSONSinglePoolUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserPendingReward",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ttl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserStakeAmounts",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ttl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserTimestamps",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserUnstakedAmount",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStakingEntitiesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setWithdrawTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "taxOfEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0xBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "totalStakeOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_entityIndices",
          "type": "uint8[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxPortion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e789a51a149bac41f111409c06f2c912e02f77d1d3359ef6142a95d4e90915e",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x4936FBdab15ec9755294E281a372BF191Ff86dBd",
    "transactionIndex": 44,
    "gasUsed": "3312682",
    "logsBloom": "0x
    "blockHash": "0x7ec7dc668970fcd093686efa1a92b8b067acc46c9aa996ac4071a1bcc0f7b946",
    "transactionHash": "0x0e789a51a149bac41f111409c06f2c912e02f77d1d3359ef6142a95d4e90915e",
    "logs": [],
    "blockNumber": 10621990,
    "cumulativeGasUsed": "15048135",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "6d69c9bd64246af609b368425f8c96a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_indices\",\"type\":\"uint8[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyActive\",\"type\":\"bool\"}],\"name\":\"getJSONAllPoolsInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getJSONAllPoolsUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getJSONSinglePoolInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getJSONSinglePoolUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPendingReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ttl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStakeAmounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ttl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserTimestamps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserUnstakedAmount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingEntitiesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithdrawTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"taxOfEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0xBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakeOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_entityIndices\",\"type\":\"uint8[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"params\":{\"_duration\":\"duration of pool\",\"_startTime\":\"timestamp to start pool\",\"_token\":\"address of LP token\",\"_totalDistribute\":\"total distribution in 0xB for this pool\"}},\"claimReward(uint32,uint8[])\":{\"details\":\"update reward debt and send reward to user\",\"params\":{\"_poolId\":\"index of pool\"}},\"deposit(uint32,uint256)\":{\"details\":\"add new entity to control staking timestamp and taxes, never add token to older entities\",\"params\":{\"_amount\":\"amount to stake\",\"_poolId\":\"index of one pool\"}},\"getAPR(uint32)\":{\"params\":{\"_poolId\":\"index of pool\"},\"returns\":{\"apr\":\"current APR of an LP pool\"}},\"getJSONAllPoolsInfo(bool)\":{\"params\":{\"_onlyActive\":\"decide if only return info of active pool\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONAllPoolsUser(bool,address)\":{\"params\":{\"_onlyActive\":\"decide if only return info of active pool\",\"_user\":\"address of an user\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONSinglePoolInfo(uint32)\":{\"params\":{\"_poolId\":\"index of pool\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONSinglePoolUser(uint32,address)\":{\"params\":{\"_poolId\":\"index of pool\",\"_user\":\"address of an user\"},\"returns\":{\"res\":\"JSON\"}},\"getPoolsCount()\":{\"returns\":{\"_0\":\"len number of pools\"}},\"getUserPendingReward(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserStakeAmounts(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrawn\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserTimestamps(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserUnstakedAmount(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"isWhitelisted(address)\":{\"params\":{\"addr\":\"address to query\"},\"returns\":{\"_0\":\"isWhitelisted true if `addr` is whitelisted\"}},\"pendingReward(uint32,address,uint32)\":{\"details\":\"the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool\",\"params\":{\"_index\":\"index of some entity\",\"_poolId\":\"id of pool\",\"addr\":\"address of user\"},\"returns\":{\"_0\":\"reward pending reward of user\"}},\"setToken(address)\":{\"params\":{\"_token\":\"address of 0xB\"}},\"setWithdrawTaxPool(address)\":{\"params\":{\"_pool\":\"new tax pool\"}},\"setWithdrawTimeout(uint256)\":{\"params\":{\"_timeout\":\"new timeout\"}},\"taxOfEntity(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"tax amount of tax of an entity\"}},\"totalStakeOfUser(uint32,address)\":{\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of the user\"},\"returns\":{\"totalStake\":\"total amount of LP staked in the user\"}},\"updatePool(uint32)\":{\"details\":\"update accumulated reward per share of a pool for sake of reward optimization\",\"params\":{\"_poolId\":\"index of pool\"}},\"withdrawMultiple(uint32,uint8[])\":{\"details\":\"same as withdraw, relocations of entities from an user is required\",\"params\":{\"_entityIndices\":\"indices of entities to withdraw\",\"_poolId\":\"index of pool\"}},\"withdrawable(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"withdrawable true if the entity is withdrawable\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"notice\":\"add new pool to stake LP\"},\"claimReward(uint32,uint8[])\":{\"notice\":\"claim all reward from all entity of pool\"},\"deposit(uint32,uint256)\":{\"notice\":\"deposit _amount of lp to the pool with index _poolId to start new entity of staking\"},\"getAPR(uint32)\":{\"notice\":\"calculate the current APR of one LP pool\"},\"getJSONAllPoolsInfo(bool)\":{\"notice\":\"return a JSON includes info of all pool, can choose to get only active pools or not\"},\"getJSONAllPoolsUser(bool,address)\":{\"notice\":\"return a JSON includes info of all pool that specific to an user, can choose to get only active pools or not\"},\"getJSONSinglePoolInfo(uint32)\":{\"notice\":\"return a JSON includes all info of a pool\"},\"getJSONSinglePoolUser(uint32,address)\":{\"notice\":\"return a JSON includes all info of an user in a pool\"},\"getPoolsCount()\":{\"notice\":\"number of pools \"},\"getUserPendingReward(uint32,address)\":{\"notice\":\"get the pending rewards of every entity that user staked in one pool\"},\"getUserStakeAmounts(uint32,address)\":{\"notice\":\"get the stake amount of every entity that user staked in one pool\"},\"getUserTimestamps(uint32,address)\":{\"notice\":\"get the timestamps of every entity that user staked in one pool\"},\"getUserUnstakedAmount(uint32,address)\":{\"notice\":\"get the unstaked amount of every entity that user staked in one pool\"},\"isWhitelisted(address)\":{\"notice\":\"show if an address is whitelisted to create a pool\"},\"pendingReward(uint32,address,uint32)\":{\"notice\":\"calculate the unclaimed reward of a user in one entity\"},\"setToken(address)\":{\"notice\":\"set address of 0xB token\"},\"setWithdrawTaxPool(address)\":{\"notice\":\"set new withdrawal tax pool\"},\"setWithdrawTimeout(uint256)\":{\"notice\":\"set new withdrawal timeout\"},\"taxOfEntity(uint32,address,uint32)\":{\"notice\":\"return current tax of an entity\"},\"totalStakeOfUser(uint32,address)\":{\"notice\":\"calculate total stake of one address in a pool\"},\"updatePool(uint32)\":{\"notice\":\"update data in a lp staking pool\"},\"withdrawMultiple(uint32,uint8[])\":{\"notice\":\"withdraw an amount from an entity. remove the entity if withdrawn everything\"},\"withdrawable(uint32,address,uint32)\":{\"notice\":\"show if an entity is withdrawable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LPStaking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LPStaking is Initializable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant DAY = 86400;\\n    uint256 private constant YEAR = 86400 * 365;\\n    uint256 private constant ONE_LP = 1e18;\\n    string private constant SEPARATOR = \\\"#\\\";\\n\\n    // ----- Structs -----\\n    struct LPStakeEntity {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 creationTime;\\n        uint256 withdrawn;\\n    }\\n\\n    struct UserLPStakeInfo {\\n        uint8 size;\\n        mapping(uint8 => LPStakeEntity) entities;\\n    }\\n\\n    struct PoolInfo {\\n        string name;\\n        IERC20 lpToken;\\n        uint256 lpAmountInPool;\\n        uint256 totalDistribute;\\n        uint256 startTime;\\n        uint256 duration;\\n        uint256 acc0xBPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    // ----- Contract Storage -----\\n    uint256 public lpStakingEntitiesLimit;\\n\\n    // ----- Limits on withdrawal -----\\n    uint256 public withdrawTimeout;\\n    uint256[] public withdrawTaxLevel;\\n    uint256[] public withdrawTaxPortion;\\n    address public earlyWithdrawTaxPool;\\n\\n    PoolInfo[] private pools;\\n    mapping(uint32 => mapping(address => UserLPStakeInfo)) private userInfo;\\n    mapping(address => bool) private whitelistAuthorities;\\n\\n    // ----- Router Addresses -----\\n    address public token0xBAddress;\\n    address public admin0xB;\\n\\n    // ----- Constructor -----\\n    function initialize() public initializer {\\n        admin0xB = msg.sender;\\n        lpStakingEntitiesLimit = 100;\\n        withdrawTimeout = 0;\\n        withdrawTaxLevel = [0, 0, DAY * 30, DAY * 60];\\n        withdrawTaxPortion = [5_000_000, 5_000_000, 2_500_000, 0];\\n        earlyWithdrawTaxPool = msg.sender;\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n\\n    // ----- Events -----\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token0xBAddress || msg.sender == admin0xB || isWhitelisted(msg.sender), \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    /**\\n        @notice return a JSON includes all info of a pool\\n        @param _poolId index of pool\\n        @return res JSON\\n    */\\n    // solhint-disable \\n    function getJSONSinglePoolInfo(uint32 _poolId) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong pool id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        res = string(abi.encodePacked('{\\\"index\\\":\\\"', uint2str(_poolId), '\\\",\\\"name\\\":\\\"'));\\n        res = string(abi.encodePacked(res, pool.name, '\\\",\\\"lpTokenAddress\\\":\\\"'));\\n        res = string(abi.encodePacked(res, toAsciiString(address(pool.lpToken)), '\\\",\\\"lpAmountInPool\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.lpAmountInPool), '\\\",\\\"totalDistribute\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.totalDistribute), '\\\",\\\"startTime\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.startTime), '\\\",\\\"duration\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.duration), '\\\",\\\"acc0xBPerShare\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.acc0xBPerShare), '\\\",\\\"lastRewardTimestamp\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.lastRewardTimestamp), '\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes all info of an user in a pool\\n        @param _poolId index of pool\\n        @param _user address of an user\\n        @return res JSON\\n    */\\n    function getJSONSinglePoolUser(uint32 _poolId, address _user) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong pool id\\\");\\n        res = string(abi.encodePacked('{\\\"index\\\":\\\"', uint2str(_poolId), '\\\",\\\"stakedAmount\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(totalStakeOfUser(_poolId, _user)), '\\\",\\\"pendingReward\\\":\\\"'));\\n        (, uint256 pendingRw) = getUserPendingReward(_poolId, _user);\\n        res = string(abi.encodePacked(res, uint2str(pendingRw), '\\\",\\\"minTimestamp\\\":\\\"'));\\n        (, uint256 minTstamp) = getUserTimestamps(_poolId, _user);\\n        res = string(abi.encodePacked(res, uint2str(minTstamp), '\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes info of all pool, can choose to get only active pools or not\\n        @param _onlyActive decide if only return info of active pool\\n        @return res JSON\\n    */\\n    function getJSONAllPoolsInfo(bool _onlyActive) public view returns (string memory res) {\\n        res = \\\"{\\\";\\n        for (uint32 _pi = 0; _pi < pools.length; _pi++) {\\n            if (!_onlyActive || isPoolActive(pools[_pi])) {\\n                res = string(abi.encodePacked(res, '\\\"', uint2str(_pi), '\\\":', getJSONSinglePoolInfo(_pi), \\\",\\\"));\\n            }\\n        }\\n        res = string(abi.encodePacked(res, '\\\"info\\\":\\\"\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes info of all pool that specific to an user,\\n        can choose to get only active pools or not\\n        @param _onlyActive decide if only return info of active pool\\n        @param _user address of an user\\n        @return res JSON\\n    */\\n    function getJSONAllPoolsUser(bool _onlyActive, address _user) public view returns (string memory res) {\\n        res = \\\"{\\\";\\n        for (uint32 _pi = 0; _pi < pools.length; _pi++) {\\n            if (!_onlyActive || isPoolActive(pools[_pi])) {\\n                res = string(abi.encodePacked(res, '\\\"', uint2str(_pi), '\\\":', getJSONSinglePoolUser(_pi, _user), \\\",\\\"));\\n            }\\n        }\\n        res = string(abi.encodePacked(res, '\\\"user\\\":\\\"\\\"}'));\\n    }\\n\\n    /**\\n        @notice number of pools \\n        @return len number of pools\\n    */\\n    function getPoolsCount() public view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /**\\n        @notice calculate the current APR of one LP pool\\n        @param _poolId index of pool\\n        @return apr current APR of an LP pool\\n    */\\n    function getAPR(uint32 _poolId) public view returns (uint256 apr) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        apr = (pool.totalDistribute * YEAR * uint256(1e18)) / pool.duration / pool.lpAmountInPool;\\n    }\\n\\n    /**\\n        @notice calculate total stake of one address in a pool\\n        @param _poolId index of pool\\n        @param addr address of the user\\n        @return totalStake total amount of LP staked in the user\\n    */\\n    function totalStakeOfUser(uint32 _poolId, address addr) public view returns (uint256 totalStake) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        totalStake = 0;\\n        for (uint8 i = 1; i < user.size; i++) {\\n            totalStake += user.entities[i].amount;\\n        }\\n    }\\n\\n    /**\\n        @notice get the timestamps of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserTimestamps(uint32 _poolId, address addr) public view returns (string memory res, uint256 minTs) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        minTs = 2**256 - 1;\\n        if (user.size == 0) {\\n            return (\\\"\\\", minTs);\\n        }\\n        res = uint2str(user.entities[0].creationTime);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 creatime = user.entities[i].creationTime;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(creatime)));\\n            if (creatime < minTs) minTs = creatime;\\n        }\\n    }\\n\\n    /**\\n        @notice get the stake amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @dev for each entity, the amount staked at first is separated into 2 variable: amount + withdrawn\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserStakeAmounts(uint32 _poolId, address addr) public view returns (string memory res, uint256 ttl) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return (\\\"\\\", 0);\\n        }\\n        ttl = 0;\\n        res = uint2str(user.entities[0].amount + user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 amount = user.entities[i].amount + user.entities[i].withdrawn;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(amount)));\\n            ttl += amount;\\n        }\\n    }\\n\\n    /**\\n        @notice get the pending rewards of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserPendingReward(uint32 _poolId, address addr) public view returns (string memory res, uint256 ttl) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return (\\\"\\\", 0);\\n        }\\n        ttl = 0;\\n        res = uint2str(pendingReward(_poolId, addr, 0));\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 rw = pendingReward(_poolId, addr, i);\\n            ttl += rw;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(rw)));\\n        }\\n    }\\n\\n    /**\\n        @notice get the unstaked amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserUnstakedAmount(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].withdrawn)));\\n        }\\n    }\\n\\n    /**\\n        @notice calculate the unclaimed reward of a user in one entity\\n        @dev the accumulated reward per share is considered, add with reward from latest pool update\\n        @dev using current state of pool (total lp in pool).\\n        @dev the formula is: (a * n) + delta(now - l) * c - rewardDebt\\n        @dev a: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last update\\n        @dev c: current reward per share per second, rewardDebt: reward already claimed by user in this pool\\n        @param _poolId id of pool\\n        @param addr address of user\\n        @param _index index of some entity\\n        @return reward pending reward of user\\n    */\\n    function pendingReward(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        LPStakeEntity memory entity = user.entities[uint8(_index)];\\n        uint256 acc0xBPerShare = pool.acc0xBPerShare;\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 reward = getDelta(pool.lastRewardTimestamp, block.timestamp) * getCurrentRewardPerLPPerSecond(pool);\\n            acc0xBPerShare = acc0xBPerShare + (reward * ONE_LP) / lpSupply;\\n        }\\n        return (entity.amount * acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    }\\n\\n    /**\\n        @notice show if an address is whitelisted to create a pool\\n        @param addr address to query\\n        @return isWhitelisted true if `addr` is whitelisted\\n    */\\n    function isWhitelisted(address addr) public view returns (bool) {\\n        return whitelistAuthorities[addr];\\n    }\\n\\n    /**\\n        @notice show if an entity is withdrawable\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return withdrawable true if the entity is withdrawable\\n    */\\n    function withdrawable(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (bool) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        return (entity.creationTime + withdrawTimeout < block.timestamp);\\n    }\\n\\n    /**\\n        @notice return current tax of an entity\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return tax amount of tax of an entity\\n    */\\n    function taxOfEntity(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        uint256 durationSinceStart = block.timestamp - entity.creationTime;\\n        for (uint256 i = withdrawTaxPortion.length - 1; i > 0; i--) {\\n            if (withdrawTaxLevel[i] <= durationSinceStart) {\\n                return withdrawTaxPortion[i];\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // ----- Admin WRITE functions -----\\n    /**\\n        @notice set address of 0xB token\\n        @param _token address of 0xB\\n    */\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        token0xBAddress = _token;\\n    }\\n\\n    /**\\n        @notice set new withdrawal timeout\\n        @param _timeout new timeout\\n    */\\n    function setWithdrawTimeout(uint256 _timeout) external onlyAuthorities {\\n        withdrawTimeout = _timeout;\\n    }\\n\\n    /**\\n        @notice set new withdrawal tax pool\\n        @param _pool new tax pool\\n    */\\n    function setWithdrawTaxPool(address _pool) external onlyAuthorities {\\n        require(_pool != address(0), \\\"zero addr\\\");\\n        earlyWithdrawTaxPool = _pool;\\n    }\\n\\n    /**\\n        @notice add new pool to stake LP\\n        @param _token address of LP token\\n        @param _totalDistribute total distribution in 0xB for this pool\\n        @param _startTime timestamp to start pool\\n        @param _duration duration of pool\\n    */\\n    function addPool(\\n        string memory _name,\\n        address _token,\\n        uint256 _totalDistribute,\\n        uint256 _startTime,\\n        uint256 _duration\\n    ) external onlyAuthorities {\\n        require(_startTime >= block.timestamp, \\\"start time should be in the future\\\");\\n        IERC20(token0xBAddress).transferFrom(msg.sender, address(this), _totalDistribute);\\n        pools.push(\\n            PoolInfo({\\n                name: _name,\\n                lpToken: IERC20(_token),\\n                totalDistribute: _totalDistribute,\\n                startTime: _startTime,\\n                duration: _duration,\\n                acc0xBPerShare: 0,\\n                lpAmountInPool: 0,\\n                lastRewardTimestamp: _startTime\\n            })\\n        );\\n    }\\n\\n    // ----- Public WRITE functions -----\\n    /**\\n        @notice deposit _amount of lp to the pool with index _poolId to start new entity of staking\\n        @dev add new entity to control staking timestamp and taxes, never add token to older entities\\n        @param _poolId index of one pool\\n        @param _amount amount to stake\\n    */\\n    function deposit(uint32 _poolId, uint256 _amount) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please stake\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(user.size < lpStakingEntitiesLimit, \\\"too many entities, please withdraw some\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolActive(pool), \\\"pool inactive\\\");\\n        updatePool(_poolId);\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        pool.lpAmountInPool = pool.lpAmountInPool + _amount;\\n        user.entities[uint8(user.size)] = LPStakeEntity({\\n            amount: _amount,\\n            rewardDebt: 0,\\n            creationTime: block.timestamp,\\n            withdrawn: 0\\n        });\\n        user.size = user.size + 1;\\n    }\\n\\n    // /**\\n    //     @notice withdraw an amount from an entity. remove the entity if withdrawn everything\\n    //     @dev reduce amount in pool and increase the withdrawn value\\n    //     @param _poolId index of pool\\n    //     @param _index index of entity\\n    //     @param _amount amount to withdraw\\n    // */\\n    // function withdraw(\\n    //     uint32 _poolId,\\n    //     uint32 _index,\\n    //     uint256 _amount\\n    // ) external {\\n    //     require(_poolId < pools.length, \\\"wrong id\\\");\\n    //     require(_amount > 0, \\\"please unstake\\\");\\n    //     require(withdrawable(_poolId, msg.sender, _index), \\\"entity in withdrawal timeout\\\");\\n    //     address sender = msg.sender;\\n    //     UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n    //     require(_index < user.size, \\\"wrong index\\\");\\n    //     require(_amount <= user.entities[uint8(_index)].amount, \\\"amount too big\\\");\\n\\n    //     updatePool(_poolId);\\n    //     PoolInfo storage pool = pools[_poolId];\\n    //     LPStakeEntity storage entity = user.entities[uint8(_index)];\\n\\n    //     // transfer 0xB reward\\n    //     uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    //     IERC20(token0xBAddress).transfer(sender, reward);\\n    //     entity.rewardDebt = entity.rewardDebt + reward;\\n\\n    //     uint256 tax = taxOfEntity(_poolId, sender, _index);\\n    //     if (tax > 0) {\\n    //         tax = (tax * _amount) / HUNDRED_PERCENT;\\n    //         pool.lpToken.transferFrom(address(this), earlyWithdrawTaxPool, tax);\\n    //     }\\n    //     pool.lpToken.transferFrom(address(this), address(msg.sender), _amount - tax);\\n    //     pool.lpAmountInPool = pool.lpAmountInPool - _amount;\\n\\n    //     // swap from last place to current entity\\n    //     entity.amount = entity.amount - _amount;\\n    //     entity.withdrawn = entity.withdrawn + _amount;\\n    //     if (entity.amount == 0) {\\n    //         user.size = user.size - 1;\\n    //         user.entities[uint8(_index)] = user.entities[uint8(user.size)];\\n    //     }\\n    // }\\n\\n    /**\\n        @notice withdraw an amount from an entity. remove the entity if withdrawn everything\\n        @dev same as withdraw, relocations of entities from an user is required\\n        @param _poolId index of pool\\n        @param _entityIndices indices of entities to withdraw\\n    */\\n    function withdrawMultiple(uint32 _poolId, uint8[] memory _entityIndices) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        for (uint256 i = 0; i < _entityIndices.length; i++) {\\n            require(withdrawable(_poolId, msg.sender, _entityIndices[i]), \\\"entity in withdrawal timeout\\\");\\n            require(_entityIndices[i] < userInfo[_poolId][msg.sender].size, \\\"wrong index\\\");\\n        }\\n        address sender = msg.sender;\\n\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        uint256 totalPendingReward = 0;\\n        uint256 totalTax = 0;\\n        uint256 totalWithdrawn = 0;\\n        uint256 newReward;\\n        uint256 _amount;\\n\\n        for (uint256 i = 0; i < _entityIndices.length; i++) {\\n            LPStakeEntity storage entity = user.entities[_entityIndices[i]];\\n            _amount = entity.amount;\\n            newReward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalPendingReward += newReward;\\n            totalTax += (_amount * taxOfEntity(_poolId, sender, _entityIndices[i])) / HUNDRED_PERCENT;\\n            totalWithdrawn += _amount;\\n            entity.rewardDebt = entity.rewardDebt + newReward;\\n            entity.amount = entity.amount - _amount;\\n            entity.withdrawn = entity.withdrawn + _amount;\\n        }\\n\\n        // transfer reward\\n        IERC20(token0xBAddress).transfer(sender, totalPendingReward);\\n\\n        // transfer lp tokens\\n        pool.lpToken.transferFrom(address(this), earlyWithdrawTaxPool, totalTax);\\n        pool.lpToken.transferFrom(address(this), sender, totalWithdrawn - totalTax);\\n        pool.lpAmountInPool = pool.lpAmountInPool - totalWithdrawn;\\n\\n        // refactor user storage using O(n) two-pointer algorithm\\n        uint8 ptrLeft = 0;\\n        uint8 ptrRight = user.size - 1;\\n        while (true) {\\n            while (ptrLeft < user.size && user.entities[ptrLeft].amount > 0) {\\n                ptrLeft++;\\n            }\\n            while (user.entities[ptrRight].amount == 0) {\\n                if (ptrRight == 0) break;\\n                ptrRight--;\\n            }\\n            if (ptrLeft >= ptrRight) break;\\n            user.entities[ptrLeft] = user.entities[ptrRight];\\n            ptrLeft++;\\n            ptrRight--;\\n        }\\n        user.size = (user.entities[ptrRight].amount == 0) ? 0 : ptrRight + 1;\\n    }\\n\\n    // /**\\n    //     @notice claim reward from a pool, with a chosen entity\\n    //     @dev update reward debt of user and send new reward to user\\n    //     @param _poolId index of pool\\n    //     @param _index index of entity\\n    //  */\\n    // function claimReward(uint32 _poolId, uint32 _index) external {\\n    //     require(_poolId < pools.length, \\\"wrong id\\\");\\n    //     PoolInfo storage pool = pools[_poolId];\\n    //     require(isPoolClaimable(pool), \\\"pool has not started yet\\\");\\n    //     address sender = msg.sender;\\n    //     UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n    //     require(_index < user.size, \\\"wrong index\\\");\\n\\n    //     updatePool(_poolId);\\n    //     LPStakeEntity storage entity = user.entities[uint8(_index)];\\n    //     uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    //     IERC20(token0xBAddress).transfer(sender, reward);\\n    //     entity.rewardDebt = entity.rewardDebt + reward;\\n    // }\\n\\n    /**\\n        @notice claim all reward from all entity of pool\\n        @dev update reward debt and send reward to user\\n        @param _poolId index of pool\\n    */\\n    function claimReward(uint32 _poolId, uint8[] memory _indices) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolClaimable(pool), \\\"pool has not started yet\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n\\n        uint256 totalReward = 0;\\n        uint256 reward;\\n\\n        for (uint8 i = 0; i < _indices.length; i++) {\\n            uint8 index = _indices[i];\\n            LPStakeEntity storage entity = user.entities[index];\\n            reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalReward += reward;\\n            entity.rewardDebt = entity.rewardDebt + reward;\\n        }\\n        IERC20(token0xBAddress).transfer(sender, totalReward);\\n    }\\n\\n    /**\\n        @notice update data in a lp staking pool\\n        @dev update accumulated reward per share of a pool for sake of reward optimization\\n        @param _poolId index of pool\\n    */\\n    function updatePool(uint32 _poolId) public {\\n        PoolInfo storage pool = pools[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 rewardSinceLastChange = getDelta(pool.lastRewardTimestamp, block.timestamp) *\\n            getCurrentRewardPerLPPerSecond(pool);\\n        pool.acc0xBPerShare = pool.acc0xBPerShare + rewardSinceLastChange;\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice get time different from _from to _to\\n    function getDelta(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to - _from;\\n    }\\n\\n    /// @notice get current reward per LP per second\\n    function getCurrentRewardPerLPPerSecond(PoolInfo memory _pi) internal pure returns (uint256) {\\n        return (_pi.totalDistribute * uint256(ONE_LP)) / _pi.duration / _pi.lpAmountInPool;\\n    }\\n\\n    /// @notice true if able to start claiming from pool\\n    function isPoolClaimable(PoolInfo memory _pi) internal view returns (bool) {\\n        return (block.timestamp >= _pi.startTime);\\n    }\\n\\n    /// @notice true if pool is active\\n    function isPoolActive(PoolInfo memory _pi) internal view returns (bool) {\\n        return (isPoolClaimable(_pi) && block.timestamp <= _pi.startTime + _pi.duration);\\n    }\\n\\n    /// @notice convert uint to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice convert address to human-readable ascii\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    /// @notice convert bytes1 to char\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\",\"keccak256\":\"0xa89e0f057eb99956b7e11b93e9b0525971196a736abe980742fc1e8218ecb78c\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613af6806100206000396000f3fe6080604052600436106101cc5760003560e01c8063992b10f411610102578063b2a1704911610095578063d63c564b11610064578063d63c564b14610570578063e17f8d5514610590578063eed873c2146105a6578063f78d4897146105c657600080fd5b8063b2a17049146104fb578063b4ac68601461051b578063cedb682a14610530578063d4491a061461055057600080fd5b8063a6503e76116100d1578063a6503e761461047b578063aaf103981461049b578063aeeacef1146104bb578063b0cdad26146104db57600080fd5b8063992b10f4146103f757806399e9de00146104175780639c15d1a214610437578063a494a0c01461044d57600080fd5b806341c67a1d1161017a5780635643b4e3116101495780635643b4e3146103825780635931583d146103a257806372941460146103c25780638129fc1c146103e257600080fd5b806341c67a1d146102f5578063480729df146103225780634b7ea33d146103425780634dc89ff81461036257600080fd5b80630584aecf146101d8578063144fa6d71461021557806329efdc41146102375780632f3ef5da14610265578063303d50c2146102855780633af32abf146102a55780633da3a82d146102d557600080fd5b366101d357005b600080fd5b3480156101e457600080fd5b50600a546101f8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b50610235610230366004612f3b565b6105e6565b005b34801561024357600080fd5b506102576102523660046130d6565b6106ac565b60405190815260200161020c565b34801561027157600080fd5b5061023561028036600461309f565b6107d4565b34801561029157600080fd5b506102576102a03660046130d6565b610957565b3480156102b157600080fd5b506102c56102c0366004612f3b565b610c03565b604051901515815260200161020c565b3480156102e157600080fd5b506102576102f0366004613086565b610c21565b34801561030157600080fd5b506103156103103660046130ba565b610c42565b60405161020c91906136fd565b34801561032e57600080fd5b5061023561033d366004612f3b565b610d6f565b34801561034e57600080fd5b5061031561035d3660046130ba565b610e21565b34801561036e57600080fd5b5061031561037d36600461309f565b610f46565b34801561038e57600080fd5b5061031561039d366004612f56565b611254565b3480156103ae57600080fd5b506102576103bd366004613086565b611420565b3480156103ce57600080fd5b506102356103dd366004613086565b611430565b3480156103ee57600080fd5b50610235611483565b34801561040357600080fd5b50610315610412366004612f90565b6115eb565b34801561042357600080fd5b50610235610432366004613119565b6116b8565b34801561044357600080fd5b5061025760025481565b34801561045957600080fd5b5061046d6104683660046130ba565b6119c6565b60405161020c929190613710565b34801561048757600080fd5b506102576104963660046130ba565b611aea565b3480156104a757600080fd5b506102356104b63660046131ea565b611b84565b3480156104c757600080fd5b506102c56104d63660046130d6565b611e19565b3480156104e757600080fd5b5061046d6104f63660046130ba565b611ec3565b34801561050757600080fd5b5061025761051636600461309f565b611ff0565b34801561052757600080fd5b50600654610257565b34801561053c57600080fd5b506009546101f8906001600160a01b031681565b34801561055c57600080fd5b506005546101f8906001600160a01b031681565b34801561057c57600080fd5b5061046d61058b3660046130ba565b612193565b34801561059c57600080fd5b5061025760015481565b3480156105b257600080fd5b506102356105c1366004612fc5565b6122d8565b3480156105d257600080fd5b506102356105e1366004613119565b612505565b6009546001600160a01b03163314806106095750600a546001600160a01b031633145b80610618575061061833610c03565b61063d5760405162461bcd60e51b815260040161063490613732565b60405180910390fd5b6001600160a01b03811661068a5760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b6044820152606401610634565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60065460009063ffffffff8516106106d65760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352818420825160808101845281548152918101549382019390935260028301549181018290526003909201546060830152909190610749904261394b565b60045490915060009061075e9060019061394b565b90505b80156107c557816003828154811061077b5761077b613aaf565b9060005260206000200154116107b3576004818154811061079e5761079e613aaf565b906000526020600020015493505050506107cd565b806107bd816139b5565b915050610761565b506000925050505b9392505050565b600060068263ffffffff16815481106107ef576107ef613aaf565b906000526020600020906008020190508060070154421161080e575050565b60028101548061082357504260079091015550565b600061091c8360405180610100016040529081600082018054610845906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610871906139e9565b80156108be5780601f10610893576101008083540402835291602001916108be565b820191906000526020600020905b8154815290600101906020018083116108a157829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612ad8565b61092a846007015442612b10565b610934919061390b565b905080836006015461094691906137ad565b600684015550504260079091015550565b60065460009063ffffffff8516106109815760405162461bcd60e51b81526004016106349061375a565b600060068563ffffffff168154811061099c5761099c613aaf565b9060005260206000209060080201604051806101000160405290816000820180546109c6906139e9565b80601f01602080910402602001604051908101604052809291908181526020018280546109f2906139e9565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000600760008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360c0015190506000846040015190508460e0015142118015610b7157508015155b15610bc6576000610b8186612ad8565b610b8f8760e0015142612b10565b610b99919061390b565b905081610bae670de0b6b3a76400008361390b565b610bb891906137ea565b610bc290846137ad565b9250505b60208301518351670de0b6b3a764000090610be290859061390b565b610bec91906137ea565b610bf6919061394b565b9998505050505050505050565b6001600160a01b031660009081526008602052604090205460ff1690565b60048181548110610c3157600080fd5b600091825260209091200154905081565b60065460609063ffffffff841610610c8c5760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b6044820152606401610634565b610c9b8363ffffffff16612b1c565b604051602001610cab919061368a565b604051602081830303815290604052905080610ccf610cca8585611aea565b612b1c565b604051602001610ce0929190613365565b60405160208183030381529060405290506000610cfd84846119c6565b91505081610d0a82612b1c565b604051602001610d1b9291906132cb565b60405160208183030381529060405291506000610d388585611ec3565b91505082610d4582612b1c565b604051602001610d56929190613401565b6040516020818303038152906040529250505092915050565b6009546001600160a01b0316331480610d925750600a546001600160a01b031633145b80610da15750610da133610c03565b610dbd5760405162461bcd60e51b815260040161063490613732565b6001600160a01b038116610dff5760405162461bcd60e51b81526020600482015260096024820152683d32b9379030b2323960b91b6044820152606401610634565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60065460609063ffffffff841610610e4b5760405162461bcd60e51b81526004016106349061375a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16610e93575050604080516020810190915260008152610f40565b6000808052600182016020526040902060030154610eb090612b1c565b915060015b815460ff9081169082161015610f3d5782604051806040016040528060018152602001602360f81b815250610f078460010160008560ff1660ff16815260200190815260200160002060030154612b1c565b604051602001610f1993929190613240565b60405160208183030381529060405292508080610f3590613a63565b915050610eb5565b50505b92915050565b60065460609063ffffffff831610610f905760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b6044820152606401610634565b600060068363ffffffff1681548110610fab57610fab613aaf565b906000526020600020906008020160405180610100016040529081600082018054610fd5906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611001906139e9565b801561104e5780601f106110235761010080835404028352916020019161104e565b820191906000526020600020905b81548152906001019060200180831161103157829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015290506110b863ffffffff8416612b1c565b6040516020016110c89190613643565b60408051601f198184030181529082905282519093506110ed91849190602001613317565b60405160208183030381529060405291508161110c8260200151612c45565b60405160200161111d9291906134e2565b60405160208183030381529060405291508161113c8260400151612b1c565b60405160200161114d9291906133b2565b60405160208183030381529060405291508161116c8260600151612b1c565b60405160200161117d929190613530565b60405160208183030381529060405291508161119c8260800151612b1c565b6040516020016111ad929190613283565b6040516020818303038152906040529150816111cc8260a00151612b1c565b6040516020016111dd929190613494565b6040516020818303038152906040529150816111fc8260c00151612b1c565b60405160200161120d92919061343d565b60405160208183030381529060405291508161122c8260e00151612b1c565b60405160200161123d929190613401565b604051602081830303815290604052915050919050565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff821610156113f8578215806113a457506113a460068263ffffffff16815481106112a3576112a3613aaf565b9060005260206000209060080201604051806101000160405290816000820180546112cd906139e9565b80601f01602080910402602001604051908101604052809291908181526020018280546112f9906139e9565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612d8c565b156113e657816113b98263ffffffff16612b1c565b6113c283610f46565b6040516020016113d493929190613579565b60405160208183030381529060405291505b806113f081613a3f565b91505061126f565b508060405160200161140a91906135e7565b6040516020818303038152906040529050919050565b60038181548110610c3157600080fd5b6009546001600160a01b03163314806114535750600a546001600160a01b031633145b80611462575061146233610c03565b61147e5760405162461bcd60e51b815260040161063490613732565b600255565b600054610100900460ff1661149e5760005460ff16156114a2565b303b155b6115055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610634565b600054610100900460ff16158015611527576000805461ffff19166101011790555b600a80546001600160a01b03191633179055606460015560006002819055604080516080810182528281526020810192909252810161156a62015180601e61390b565b815260200161157d62015180603c61390b565b905261158d906003906004612dfb565b5060408051608081018252624c4b408082526020820152622625a091810191909152600060608201526115c39060049081612e46565b50600580546001600160a01b0319163317905580156115e8576000805461ff00191690555b50565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff8216101561168f5783158061163a575061163a60068263ffffffff16815481106112a3576112a3613aaf565b1561167d578161164f8263ffffffff16612b1c565b6116598386610c42565b60405160200161166b93929190613579565b60405160208183030381529060405291505b8061168781613a3f565b915050611606565b50806040516020016116a19190613615565b604051602081830303815290604052905092915050565b60065463ffffffff8316106116df5760405162461bcd60e51b81526004016106349061375a565b600060068363ffffffff16815481106116fa576116fa613aaf565b90600052602060002090600802019050611806816040518061010001604052908160008201805461172a906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611756906139e9565b80156117a35780601f10611778576101008083540402835291602001916117a3565b820191906000526020600020905b81548152906001019060200180831161178657829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526080015142101590565b61184d5760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b6044820152606401610634565b63ffffffff83166000908152600760209081526040808320338085529252909120611877856107d4565b600080805b86518160ff161015611935576000878260ff168151811061189f5761189f613aaf565b6020026020010151905060008560010160008360ff1660ff16815260200190815260200160002090508060010154670de0b6b3a7640000896006015483600001546118ea919061390b565b6118f491906137ea565b6118fe919061394b565b935061190a84866137ad565b945083816001015461191c91906137ad565b600190910155508061192d81613a63565b91505061187c565b5060095460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561198457600080fd5b505af1158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190612f73565b5050505050505050565b60065460609060009063ffffffff8516106119f35760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff16611a3f57505060408051602081019091526000808252909150611ae3565b60009150611a52610cca86866000610957565b925060015b815460ff9081169082161015611ae0576000611a7787878460ff16610957565b9050611a8381856137ad565b935084604051806040016040528060018152602001602360f81b815250611aa983612b1c565b604051602001611abb93929190613240565b6040516020818303038152906040529450508080611ad890613a63565b915050611a57565b50505b9250929050565b60065460009063ffffffff841610611b145760405162461bcd60e51b81526004016106349061375a565b5063ffffffff821660009081526007602090815260408083206001600160a01b0385168452909152812060015b815460ff9081169082161015610f3d5760ff81166000908152600183016020526040902054611b7090846137ad565b925080611b7c81613a63565b915050611b41565b60065463ffffffff831610611bab5760405162461bcd60e51b81526004016106349061375a565b60008111611bea5760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b6044820152606401610634565b63ffffffff82166000908152600760209081526040808320338085529252909120600154815460ff1610611c705760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b6064820152608401610634565b600060068563ffffffff1681548110611c8b57611c8b613aaf565b90600052602060002090600802019050611cbb81604051806101000160405290816000820180546112cd906139e9565b611cf75760405162461bcd60e51b815260206004820152600d60248201526c706f6f6c20696e61637469766560981b6044820152606401610634565b611d00856107d4565b60018101546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611d36903390309089906004016136d9565b602060405180830381600087803b158015611d5057600080fd5b505af1158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612f73565b50838160020154611d9991906137ad565b60028083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff90811686526001808c0190955296909420945185559051848301555194830194909455516003909101558354611e03929116906137c5565b825460ff191660ff919091161790915550505050565b60065460009063ffffffff851610611e435760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352928190208151608081018352815481529381015492840192909252600280830154918401829052600390920154606084015290544291611eb991906137ad565b1095945050505050565b60065460609060009063ffffffff851610611ef05760405162461bcd60e51b81526004016106349061375a565b5063ffffffff831660009081526007602090815260408083206001600160a01b038616845290915290208054600019919060ff16611f3f57506040805160208101909152600081529150611ae3565b6000808052600182016020526040902060020154611f5c90612b1c565b925060015b815460ff9081169082161015611ae05760ff8116600090815260018084016020908152604092839020600201548351808501909452918352602360f81b90830152908590611fae83612b1c565b604051602001611fc093929190613240565b604051602081830303815290604052945083811015611fdd578093505b5080611fe881613a63565b915050611f61565b60065460009063ffffffff83161061201a5760405162461bcd60e51b81526004016106349061375a565b600060068363ffffffff168154811061203557612035613aaf565b90600052602060002090600802016040518061010001604052908160008201805461205f906139e9565b80601f016020809104026020016040519081016040528092919081815260200182805461208b906139e9565b80156120d85780601f106120ad576101008083540402835291602001916120d8565b820191906000526020600020905b8154815290600101906020018083116120bb57829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905080604001518160a00151670de0b6b3a76400006301e133808460600151612175919061390b565b61217f919061390b565b61218991906137ea565b6107cd91906137ea565b60065460609060009063ffffffff8516106121c05760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff1661220c57505060408051602081019091526000808252909150611ae3565b600080805260018201602052604081206003810154905491935061223491610cca91906137ad565b925060015b815460ff9081169082161015611ae05760ff8116600090815260018301602052604081206003810154905461226e91906137ad565b905084604051806040016040528060018152602001602360f81b81525061229483612b1c565b6040516020016122a693929190613240565b60408051601f1981840301815291905294506122c281856137ad565b93505080806122d090613a63565b915050612239565b6009546001600160a01b03163314806122fb5750600a546001600160a01b031633145b8061230a575061230a33610c03565b6123265760405162461bcd60e51b815260040161063490613732565b428210156123815760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b6064820152608401610634565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906123b5903390309088906004016136d9565b602060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190612f73565b5060408051610100810182528681526001600160a01b0386166020808301919091526000928201839052606082018690526080820185905260a0820184905260c0820183905260e082018590526006805460018101825593528151805192936008027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926124999284920190612e88565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b60065463ffffffff83161061252c5760405162461bcd60e51b81526004016106349061375a565b60005b815181101561263e5761255f833384848151811061254f5761254f613aaf565b602002602001015160ff16611e19565b6125ab5760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f7574000000006044820152606401610634565b63ffffffff83166000908152600760209081526040808320338452909152902054825160ff909116908390839081106125e6576125e6613aaf565b602002602001015160ff161061262c5760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b6044820152606401610634565b8061263681613a24565b91505061252f565b5063ffffffff82166000908152600760209081526040808320338085529252909120612669846107d4565b600060068563ffffffff168154811061268457612684613aaf565b906000526020600020906008020190506000806000808060005b89518110156127ce5760008860010160008c84815181106126c1576126c1613aaf565b602002602001015160ff1660ff1681526020019081526020016000209050806000015492508060010154670de0b6b3a764000089600601548360000154612708919061390b565b61271291906137ea565b61271c919061394b565b935061272884886137ad565b96506305f5e1006127568d8c8e868151811061274657612746613aaf565b602002602001015160ff166106ac565b612760908561390b565b61276a91906137ea565b61277490876137ad565b955061278083866137ad565b945083816001015461279291906137ad565b600182015580546127a490849061394b565b815560038101546127b69084906137ad565b600390910155806127c681613a24565b91505061269e565b5060095460405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018890529091169063a9059cbb90604401602060405180830381600087803b15801561281d57600080fd5b505af1158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190612f73565b5060018601546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926128919230929091169089906004016136d9565b602060405180830381600087803b1580156128ab57600080fd5b505af11580156128bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e39190612f73565b5060018601546001600160a01b03166323b872dd308a612903888861394b565b6040518463ffffffff1660e01b8152600401612921939291906136d9565b602060405180830381600087803b15801561293b57600080fd5b505af115801561294f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129739190612f73565b50828660020154612984919061394b565b60028701558654600090819061299f9060019060ff16613962565b90505b885460ff9081169083161080156129cc575060ff8216600090815260018a01602052604090205415155b156129e357816129db81613a63565b9250506129a2565b60ff8116600090815260018a016020526040902054612a1b5760ff8116612a0957612a1b565b80612a13816139cc565b9150506129e3565b8060ff168260ff1610612a2d57612a8e565b60ff80821660009081526001808c01602052604080832093861683529091208254815582820154918101919091556002808301549082015560039182015491015581612a7881613a63565b9250508080612a86906139cc565b9150506129a2565b60ff8116600090815260018a01602052604090205415612ab857612ab38160016137c5565b612abb565b60005b895460ff191660ff91909116179098555050505050505050505050565b600081604001518260a00151670de0b6b3a76400008460600151612afc919061390b565b612b0691906137ea565b610f4091906137ea565b60006107cd838361394b565b606081612b405750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b6a5780612b5481613a24565b9150612b639050600a836137ea565b9150612b44565b60008167ffffffffffffffff811115612b8557612b85613ac5565b6040519080825280601f01601f191660200182016040528015612baf576020820181803683370190505b509050815b8515612c3c57612bc560018261394b565b90506000612bd4600a886137ea565b612bdf90600a61390b565b612be9908861394b565b612bf49060306137c5565b905060008160f81b905080848481518110612c1157612c11613aaf565b60200101906001600160f81b031916908160001a905350612c33600a896137ea565b97505050612bb4565b50949350505050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015612d85576000612c8282601361394b565b612c8d90600861390b565b612c98906002613863565b612cab906001600160a01b0387166137ea565b60f81b9050600060108260f81c612cc291906137fe565b60f81b905060008160f81c6010612cd9919061392a565b8360f81c612ce79190613962565b60f81b9050612cf582612dc0565b85612d0186600261390b565b81518110612d1157612d11613aaf565b60200101906001600160f81b031916908160001a905350612d3181612dc0565b85612d3d86600261390b565b612d489060016137ad565b81518110612d5857612d58613aaf565b60200101906001600160f81b031916908160001a9053505050508080612d7d90613a24565b915050612c6c565b5092915050565b6000612d9c826080015142101590565b8015610f4057508160a001518260800151612db791906137ad565b42111592915050565b6000600a60f883901c1015612de757612dde60f883901c60306137c5565b60f81b92915050565b612dde60f883901c60576137c5565b919050565b828054828255906000526020600020908101928215612e36579160200282015b82811115612e36578251825591602001919060010190612e1b565b50612e42929150612efb565b5090565b828054828255906000526020600020908101928215612e36579160200282015b82811115612e36578251829062ffffff16905591602001919060010190612e66565b828054612e94906139e9565b90600052602060002090601f016020900481019282612eb65760008555612e36565b82601f10612ecf57805160ff1916838001178555612e36565b82800160010185558215612e365791820182811115612e36578251825591602001919060010190612e1b565b5b80821115612e425760008155600101612efc565b80356001600160a01b0381168114612df657600080fd5b803563ffffffff81168114612df657600080fd5b600060208284031215612f4d57600080fd5b6107cd82612f10565b600060208284031215612f6857600080fd5b81356107cd81613adb565b600060208284031215612f8557600080fd5b81516107cd81613adb565b60008060408385031215612fa357600080fd5b8235612fae81613adb565b9150612fbc60208401612f10565b90509250929050565b600080600080600060a08688031215612fdd57600080fd5b853567ffffffffffffffff80821115612ff557600080fd5b818801915088601f83011261300957600080fd5b813560208282111561301d5761301d613ac5565b61302f601f8301601f1916820161377c565b92508183528a8183860101111561304557600080fd5b81818501828501376000818385010152829850613063818b01612f10565b989b989a5050505060408701359660608101359660809091013595509350505050565b60006020828403121561309857600080fd5b5035919050565b6000602082840312156130b157600080fd5b6107cd82612f27565b600080604083850312156130cd57600080fd5b612fae83612f27565b6000806000606084860312156130eb57600080fd5b6130f484612f27565b925061310260208501612f10565b915061311060408501612f27565b90509250925092565b6000806040838503121561312c57600080fd5b61313583612f27565b915060208084013567ffffffffffffffff8082111561315357600080fd5b818601915086601f83011261316757600080fd5b81358181111561317957613179613ac5565b8060051b915061318a84830161377c565b8181528481019084860184860187018b10156131a557600080fd5b600095508594505b838510156131d957803560ff811681146131c5578687fd5b8352600194909401939186019186016131ad565b508096505050505050509250929050565b600080604083850312156131fd57600080fd5b61320683612f27565b946020939093013593505050565b6000815180845261322c816020860160208601613985565b601f01601f19169290920160200192915050565b60008451613252818460208901613985565b845190830190613266818360208901613985565b8451910190613279818360208801613985565b0195945050505050565b60008351613295818460208801613985565b8351908301906132a9818360208801613985565b6d111611323ab930ba34b7b7111d1160911b9101908152600e01949350505050565b600083516132dd818460208801613985565b8351908301906132f1818360208801613985565b7111161136b4b72a34b6b2b9ba30b6b8111d1160711b9101908152601201949350505050565b60008351613329818460208801613985565b83519083019061333d818360208801613985565b7311161136382a37b5b2b720b2323932b9b9911d1160611b9101908152601401949350505050565b60008351613377818460208801613985565b83519083019061338b818360208801613985565b721116113832b73234b733a932bbb0b932111d1160691b9101908152601301949350505050565b600083516133c4818460208801613985565b8351908301906133d8818360208801613985565b741116113a37ba30b62234b9ba3934b13aba32911d1160591b9101908152601501949350505050565b60008351613413818460208801613985565b835190830190613427818360208801613985565b61227d60f01b9101908152600201949350505050565b6000835161344f818460208801613985565b835190830190613463818360208801613985565b7f222c226c61737452657761726454696d657374616d70223a22000000000000009101908152601901949350505050565b600083516134a6818460208801613985565b8351908301906134ba818360208801613985565b7311161130b1b1983c212832b929b430b932911d1160611b9101908152601401949350505050565b600083516134f4818460208801613985565b835190830190613508818360208801613985565b73111611363820b6b7bab73a24b72837b7b6111d1160611b9101908152601401949350505050565b60008351613542818460208801613985565b835190830190613556818360208801613985565b6e11161139ba30b93a2a34b6b2911d1160891b9101908152600f01949350505050565b6000845161358b818460208901613985565b601160f91b90830190815284516135a9816001840160208901613985565b61111d60f11b6001929091019182015283516135cc816003840160208801613985565b600b60fa1b6003929091019182015260040195945050505050565b600082516135f9818460208701613985565b6922696e666f223a22227d60b01b920191825250600a01919050565b60008251613627818460208701613985565b692275736572223a22227d60b01b920191825250600a01919050565b693d9134b73232bc111d1160b11b8152815160009061366981600a850160208701613985565b691116113730b6b2911d1160b11b600a939091019283015250601401919050565b693d9134b73232bc111d1160b11b815281516000906136b081600a850160208701613985565b7111161139ba30b5b2b220b6b7bab73a111d1160711b600a939091019283015250601c01919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020815260006107cd6020830184613214565b6040815260006137236040830185613214565b90508260208301529392505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156137a5576137a5613ac5565b604052919050565b600082198211156137c0576137c0613a83565b500190565b600060ff821660ff84168060ff038211156137e2576137e2613a83565b019392505050565b6000826137f9576137f9613a99565b500490565b600060ff83168061381157613811613a99565b8060ff84160491505092915050565b600181815b8085111561385b57816000190482111561384157613841613a83565b8085161561384e57918102915b93841c9390800290613825565b509250929050565b60006107cd838360008261387957506001610f40565b8161388657506000610f40565b816001811461389c57600281146138a6576138c2565b6001915050610f40565b60ff8411156138b7576138b7613a83565b50506001821b610f40565b5060208310610133831016604e8410600b84101617156138e5575081810a610f40565b6138ef8383613820565b806000190482111561390357613903613a83565b029392505050565b600081600019048311821515161561392557613925613a83565b500290565b600060ff821660ff84168160ff048111821515161561390357613903613a83565b60008282101561395d5761395d613a83565b500390565b600060ff821660ff84168082101561397c5761397c613a83565b90039392505050565b60005b838110156139a0578181015183820152602001613988565b838111156139af576000848401525b50505050565b6000816139c4576139c4613a83565b506000190190565b600060ff8216806139df576139df613a83565b6000190192915050565b600181811c908216806139fd57607f821691505b60208210811415613a1e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613a3857613a38613a83565b5060010190565b600063ffffffff80831681811415613a5957613a59613a83565b6001019392505050565b600060ff821660ff811415613a7a57613a7a613a83565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146115e857600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106101cc5760003560e01c8063992b10f411610102578063b2a1704911610095578063d63c564b11610064578063d63c564b14610570578063e17f8d5514610590578063eed873c2146105a6578063f78d4897146105c657600080fd5b8063b2a17049146104fb578063b4ac68601461051b578063cedb682a14610530578063d4491a061461055057600080fd5b8063a6503e76116100d1578063a6503e761461047b578063aaf103981461049b578063aeeacef1146104bb578063b0cdad26146104db57600080fd5b8063992b10f4146103f757806399e9de00146104175780639c15d1a214610437578063a494a0c01461044d57600080fd5b806341c67a1d1161017a5780635643b4e3116101495780635643b4e3146103825780635931583d146103a257806372941460146103c25780638129fc1c146103e257600080fd5b806341c67a1d146102f5578063480729df146103225780634b7ea33d146103425780634dc89ff81461036257600080fd5b80630584aecf146101d8578063144fa6d71461021557806329efdc41146102375780632f3ef5da14610265578063303d50c2146102855780633af32abf146102a55780633da3a82d146102d557600080fd5b366101d357005b600080fd5b3480156101e457600080fd5b50600a546101f8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b50610235610230366004612f3b565b6105e6565b005b34801561024357600080fd5b506102576102523660046130d6565b6106ac565b60405190815260200161020c565b34801561027157600080fd5b5061023561028036600461309f565b6107d4565b34801561029157600080fd5b506102576102a03660046130d6565b610957565b3480156102b157600080fd5b506102c56102c0366004612f3b565b610c03565b604051901515815260200161020c565b3480156102e157600080fd5b506102576102f0366004613086565b610c21565b34801561030157600080fd5b506103156103103660046130ba565b610c42565b60405161020c91906136fd565b34801561032e57600080fd5b5061023561033d366004612f3b565b610d6f565b34801561034e57600080fd5b5061031561035d3660046130ba565b610e21565b34801561036e57600080fd5b5061031561037d36600461309f565b610f46565b34801561038e57600080fd5b5061031561039d366004612f56565b611254565b3480156103ae57600080fd5b506102576103bd366004613086565b611420565b3480156103ce57600080fd5b506102356103dd366004613086565b611430565b3480156103ee57600080fd5b50610235611483565b34801561040357600080fd5b50610315610412366004612f90565b6115eb565b34801561042357600080fd5b50610235610432366004613119565b6116b8565b34801561044357600080fd5b5061025760025481565b34801561045957600080fd5b5061046d6104683660046130ba565b6119c6565b60405161020c929190613710565b34801561048757600080fd5b506102576104963660046130ba565b611aea565b3480156104a757600080fd5b506102356104b63660046131ea565b611b84565b3480156104c757600080fd5b506102c56104d63660046130d6565b611e19565b3480156104e757600080fd5b5061046d6104f63660046130ba565b611ec3565b34801561050757600080fd5b5061025761051636600461309f565b611ff0565b34801561052757600080fd5b50600654610257565b34801561053c57600080fd5b506009546101f8906001600160a01b031681565b34801561055c57600080fd5b506005546101f8906001600160a01b031681565b34801561057c57600080fd5b5061046d61058b3660046130ba565b612193565b34801561059c57600080fd5b5061025760015481565b3480156105b257600080fd5b506102356105c1366004612fc5565b6122d8565b3480156105d257600080fd5b506102356105e1366004613119565b612505565b6009546001600160a01b03163314806106095750600a546001600160a01b031633145b80610618575061061833610c03565b61063d5760405162461bcd60e51b815260040161063490613732565b60405180910390fd5b6001600160a01b03811661068a5760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b6044820152606401610634565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60065460009063ffffffff8516106106d65760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352818420825160808101845281548152918101549382019390935260028301549181018290526003909201546060830152909190610749904261394b565b60045490915060009061075e9060019061394b565b90505b80156107c557816003828154811061077b5761077b613aaf565b9060005260206000200154116107b3576004818154811061079e5761079e613aaf565b906000526020600020015493505050506107cd565b806107bd816139b5565b915050610761565b506000925050505b9392505050565b600060068263ffffffff16815481106107ef576107ef613aaf565b906000526020600020906008020190508060070154421161080e575050565b60028101548061082357504260079091015550565b600061091c8360405180610100016040529081600082018054610845906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610871906139e9565b80156108be5780601f10610893576101008083540402835291602001916108be565b820191906000526020600020905b8154815290600101906020018083116108a157829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612ad8565b61092a846007015442612b10565b610934919061390b565b905080836006015461094691906137ad565b600684015550504260079091015550565b60065460009063ffffffff8516106109815760405162461bcd60e51b81526004016106349061375a565b600060068563ffffffff168154811061099c5761099c613aaf565b9060005260206000209060080201604051806101000160405290816000820180546109c6906139e9565b80601f01602080910402602001604051908101604052809291908181526020018280546109f2906139e9565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000600760008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360c0015190506000846040015190508460e0015142118015610b7157508015155b15610bc6576000610b8186612ad8565b610b8f8760e0015142612b10565b610b99919061390b565b905081610bae670de0b6b3a76400008361390b565b610bb891906137ea565b610bc290846137ad565b9250505b60208301518351670de0b6b3a764000090610be290859061390b565b610bec91906137ea565b610bf6919061394b565b9998505050505050505050565b6001600160a01b031660009081526008602052604090205460ff1690565b60048181548110610c3157600080fd5b600091825260209091200154905081565b60065460609063ffffffff841610610c8c5760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b6044820152606401610634565b610c9b8363ffffffff16612b1c565b604051602001610cab919061368a565b604051602081830303815290604052905080610ccf610cca8585611aea565b612b1c565b604051602001610ce0929190613365565b60405160208183030381529060405290506000610cfd84846119c6565b91505081610d0a82612b1c565b604051602001610d1b9291906132cb565b60405160208183030381529060405291506000610d388585611ec3565b91505082610d4582612b1c565b604051602001610d56929190613401565b6040516020818303038152906040529250505092915050565b6009546001600160a01b0316331480610d925750600a546001600160a01b031633145b80610da15750610da133610c03565b610dbd5760405162461bcd60e51b815260040161063490613732565b6001600160a01b038116610dff5760405162461bcd60e51b81526020600482015260096024820152683d32b9379030b2323960b91b6044820152606401610634565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60065460609063ffffffff841610610e4b5760405162461bcd60e51b81526004016106349061375a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16610e93575050604080516020810190915260008152610f40565b6000808052600182016020526040902060030154610eb090612b1c565b915060015b815460ff9081169082161015610f3d5782604051806040016040528060018152602001602360f81b815250610f078460010160008560ff1660ff16815260200190815260200160002060030154612b1c565b604051602001610f1993929190613240565b60405160208183030381529060405292508080610f3590613a63565b915050610eb5565b50505b92915050565b60065460609063ffffffff831610610f905760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b6044820152606401610634565b600060068363ffffffff1681548110610fab57610fab613aaf565b906000526020600020906008020160405180610100016040529081600082018054610fd5906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611001906139e9565b801561104e5780601f106110235761010080835404028352916020019161104e565b820191906000526020600020905b81548152906001019060200180831161103157829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015290506110b863ffffffff8416612b1c565b6040516020016110c89190613643565b60408051601f198184030181529082905282519093506110ed91849190602001613317565b60405160208183030381529060405291508161110c8260200151612c45565b60405160200161111d9291906134e2565b60405160208183030381529060405291508161113c8260400151612b1c565b60405160200161114d9291906133b2565b60405160208183030381529060405291508161116c8260600151612b1c565b60405160200161117d929190613530565b60405160208183030381529060405291508161119c8260800151612b1c565b6040516020016111ad929190613283565b6040516020818303038152906040529150816111cc8260a00151612b1c565b6040516020016111dd929190613494565b6040516020818303038152906040529150816111fc8260c00151612b1c565b60405160200161120d92919061343d565b60405160208183030381529060405291508161122c8260e00151612b1c565b60405160200161123d929190613401565b604051602081830303815290604052915050919050565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff821610156113f8578215806113a457506113a460068263ffffffff16815481106112a3576112a3613aaf565b9060005260206000209060080201604051806101000160405290816000820180546112cd906139e9565b80601f01602080910402602001604051908101604052809291908181526020018280546112f9906139e9565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612d8c565b156113e657816113b98263ffffffff16612b1c565b6113c283610f46565b6040516020016113d493929190613579565b60405160208183030381529060405291505b806113f081613a3f565b91505061126f565b508060405160200161140a91906135e7565b6040516020818303038152906040529050919050565b60038181548110610c3157600080fd5b6009546001600160a01b03163314806114535750600a546001600160a01b031633145b80611462575061146233610c03565b61147e5760405162461bcd60e51b815260040161063490613732565b600255565b600054610100900460ff1661149e5760005460ff16156114a2565b303b155b6115055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610634565b600054610100900460ff16158015611527576000805461ffff19166101011790555b600a80546001600160a01b03191633179055606460015560006002819055604080516080810182528281526020810192909252810161156a62015180601e61390b565b815260200161157d62015180603c61390b565b905261158d906003906004612dfb565b5060408051608081018252624c4b408082526020820152622625a091810191909152600060608201526115c39060049081612e46565b50600580546001600160a01b0319163317905580156115e8576000805461ff00191690555b50565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff8216101561168f5783158061163a575061163a60068263ffffffff16815481106112a3576112a3613aaf565b1561167d578161164f8263ffffffff16612b1c565b6116598386610c42565b60405160200161166b93929190613579565b60405160208183030381529060405291505b8061168781613a3f565b915050611606565b50806040516020016116a19190613615565b604051602081830303815290604052905092915050565b60065463ffffffff8316106116df5760405162461bcd60e51b81526004016106349061375a565b600060068363ffffffff16815481106116fa576116fa613aaf565b90600052602060002090600802019050611806816040518061010001604052908160008201805461172a906139e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611756906139e9565b80156117a35780601f10611778576101008083540402835291602001916117a3565b820191906000526020600020905b81548152906001019060200180831161178657829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526080015142101590565b61184d5760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b6044820152606401610634565b63ffffffff83166000908152600760209081526040808320338085529252909120611877856107d4565b600080805b86518160ff161015611935576000878260ff168151811061189f5761189f613aaf565b6020026020010151905060008560010160008360ff1660ff16815260200190815260200160002090508060010154670de0b6b3a7640000896006015483600001546118ea919061390b565b6118f491906137ea565b6118fe919061394b565b935061190a84866137ad565b945083816001015461191c91906137ad565b600190910155508061192d81613a63565b91505061187c565b5060095460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561198457600080fd5b505af1158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190612f73565b5050505050505050565b60065460609060009063ffffffff8516106119f35760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff16611a3f57505060408051602081019091526000808252909150611ae3565b60009150611a52610cca86866000610957565b925060015b815460ff9081169082161015611ae0576000611a7787878460ff16610957565b9050611a8381856137ad565b935084604051806040016040528060018152602001602360f81b815250611aa983612b1c565b604051602001611abb93929190613240565b6040516020818303038152906040529450508080611ad890613a63565b915050611a57565b50505b9250929050565b60065460009063ffffffff841610611b145760405162461bcd60e51b81526004016106349061375a565b5063ffffffff821660009081526007602090815260408083206001600160a01b0385168452909152812060015b815460ff9081169082161015610f3d5760ff81166000908152600183016020526040902054611b7090846137ad565b925080611b7c81613a63565b915050611b41565b60065463ffffffff831610611bab5760405162461bcd60e51b81526004016106349061375a565b60008111611bea5760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b6044820152606401610634565b63ffffffff82166000908152600760209081526040808320338085529252909120600154815460ff1610611c705760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b6064820152608401610634565b600060068563ffffffff1681548110611c8b57611c8b613aaf565b90600052602060002090600802019050611cbb81604051806101000160405290816000820180546112cd906139e9565b611cf75760405162461bcd60e51b815260206004820152600d60248201526c706f6f6c20696e61637469766560981b6044820152606401610634565b611d00856107d4565b60018101546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611d36903390309089906004016136d9565b602060405180830381600087803b158015611d5057600080fd5b505af1158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612f73565b50838160020154611d9991906137ad565b60028083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff90811686526001808c0190955296909420945185559051848301555194830194909455516003909101558354611e03929116906137c5565b825460ff191660ff919091161790915550505050565b60065460009063ffffffff851610611e435760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352928190208151608081018352815481529381015492840192909252600280830154918401829052600390920154606084015290544291611eb991906137ad565b1095945050505050565b60065460609060009063ffffffff851610611ef05760405162461bcd60e51b81526004016106349061375a565b5063ffffffff831660009081526007602090815260408083206001600160a01b038616845290915290208054600019919060ff16611f3f57506040805160208101909152600081529150611ae3565b6000808052600182016020526040902060020154611f5c90612b1c565b925060015b815460ff9081169082161015611ae05760ff8116600090815260018084016020908152604092839020600201548351808501909452918352602360f81b90830152908590611fae83612b1c565b604051602001611fc093929190613240565b604051602081830303815290604052945083811015611fdd578093505b5080611fe881613a63565b915050611f61565b60065460009063ffffffff83161061201a5760405162461bcd60e51b81526004016106349061375a565b600060068363ffffffff168154811061203557612035613aaf565b90600052602060002090600802016040518061010001604052908160008201805461205f906139e9565b80601f016020809104026020016040519081016040528092919081815260200182805461208b906139e9565b80156120d85780601f106120ad576101008083540402835291602001916120d8565b820191906000526020600020905b8154815290600101906020018083116120bb57829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905080604001518160a00151670de0b6b3a76400006301e133808460600151612175919061390b565b61217f919061390b565b61218991906137ea565b6107cd91906137ea565b60065460609060009063ffffffff8516106121c05760405162461bcd60e51b81526004016106349061375a565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff1661220c57505060408051602081019091526000808252909150611ae3565b600080805260018201602052604081206003810154905491935061223491610cca91906137ad565b925060015b815460ff9081169082161015611ae05760ff8116600090815260018301602052604081206003810154905461226e91906137ad565b905084604051806040016040528060018152602001602360f81b81525061229483612b1c565b6040516020016122a693929190613240565b60408051601f1981840301815291905294506122c281856137ad565b93505080806122d090613a63565b915050612239565b6009546001600160a01b03163314806122fb5750600a546001600160a01b031633145b8061230a575061230a33610c03565b6123265760405162461bcd60e51b815260040161063490613732565b428210156123815760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b6064820152608401610634565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906123b5903390309088906004016136d9565b602060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190612f73565b5060408051610100810182528681526001600160a01b0386166020808301919091526000928201839052606082018690526080820185905260a0820184905260c0820183905260e082018590526006805460018101825593528151805192936008027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926124999284920190612e88565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b60065463ffffffff83161061252c5760405162461bcd60e51b81526004016106349061375a565b60005b815181101561263e5761255f833384848151811061254f5761254f613aaf565b602002602001015160ff16611e19565b6125ab5760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f7574000000006044820152606401610634565b63ffffffff83166000908152600760209081526040808320338452909152902054825160ff909116908390839081106125e6576125e6613aaf565b602002602001015160ff161061262c5760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b6044820152606401610634565b8061263681613a24565b91505061252f565b5063ffffffff82166000908152600760209081526040808320338085529252909120612669846107d4565b600060068563ffffffff168154811061268457612684613aaf565b906000526020600020906008020190506000806000808060005b89518110156127ce5760008860010160008c84815181106126c1576126c1613aaf565b602002602001015160ff1660ff1681526020019081526020016000209050806000015492508060010154670de0b6b3a764000089600601548360000154612708919061390b565b61271291906137ea565b61271c919061394b565b935061272884886137ad565b96506305f5e1006127568d8c8e868151811061274657612746613aaf565b602002602001015160ff166106ac565b612760908561390b565b61276a91906137ea565b61277490876137ad565b955061278083866137ad565b945083816001015461279291906137ad565b600182015580546127a490849061394b565b815560038101546127b69084906137ad565b600390910155806127c681613a24565b91505061269e565b5060095460405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018890529091169063a9059cbb90604401602060405180830381600087803b15801561281d57600080fd5b505af1158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190612f73565b5060018601546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926128919230929091169089906004016136d9565b602060405180830381600087803b1580156128ab57600080fd5b505af11580156128bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e39190612f73565b5060018601546001600160a01b03166323b872dd308a612903888861394b565b6040518463ffffffff1660e01b8152600401612921939291906136d9565b602060405180830381600087803b15801561293b57600080fd5b505af115801561294f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129739190612f73565b50828660020154612984919061394b565b60028701558654600090819061299f9060019060ff16613962565b90505b885460ff9081169083161080156129cc575060ff8216600090815260018a01602052604090205415155b156129e357816129db81613a63565b9250506129a2565b60ff8116600090815260018a016020526040902054612a1b5760ff8116612a0957612a1b565b80612a13816139cc565b9150506129e3565b8060ff168260ff1610612a2d57612a8e565b60ff80821660009081526001808c01602052604080832093861683529091208254815582820154918101919091556002808301549082015560039182015491015581612a7881613a63565b9250508080612a86906139cc565b9150506129a2565b60ff8116600090815260018a01602052604090205415612ab857612ab38160016137c5565b612abb565b60005b895460ff191660ff91909116179098555050505050505050505050565b600081604001518260a00151670de0b6b3a76400008460600151612afc919061390b565b612b0691906137ea565b610f4091906137ea565b60006107cd838361394b565b606081612b405750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b6a5780612b5481613a24565b9150612b639050600a836137ea565b9150612b44565b60008167ffffffffffffffff811115612b8557612b85613ac5565b6040519080825280601f01601f191660200182016040528015612baf576020820181803683370190505b509050815b8515612c3c57612bc560018261394b565b90506000612bd4600a886137ea565b612bdf90600a61390b565b612be9908861394b565b612bf49060306137c5565b905060008160f81b905080848481518110612c1157612c11613aaf565b60200101906001600160f81b031916908160001a905350612c33600a896137ea565b97505050612bb4565b50949350505050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015612d85576000612c8282601361394b565b612c8d90600861390b565b612c98906002613863565b612cab906001600160a01b0387166137ea565b60f81b9050600060108260f81c612cc291906137fe565b60f81b905060008160f81c6010612cd9919061392a565b8360f81c612ce79190613962565b60f81b9050612cf582612dc0565b85612d0186600261390b565b81518110612d1157612d11613aaf565b60200101906001600160f81b031916908160001a905350612d3181612dc0565b85612d3d86600261390b565b612d489060016137ad565b81518110612d5857612d58613aaf565b60200101906001600160f81b031916908160001a9053505050508080612d7d90613a24565b915050612c6c565b5092915050565b6000612d9c826080015142101590565b8015610f4057508160a001518260800151612db791906137ad565b42111592915050565b6000600a60f883901c1015612de757612dde60f883901c60306137c5565b60f81b92915050565b612dde60f883901c60576137c5565b919050565b828054828255906000526020600020908101928215612e36579160200282015b82811115612e36578251825591602001919060010190612e1b565b50612e42929150612efb565b5090565b828054828255906000526020600020908101928215612e36579160200282015b82811115612e36578251829062ffffff16905591602001919060010190612e66565b828054612e94906139e9565b90600052602060002090601f016020900481019282612eb65760008555612e36565b82601f10612ecf57805160ff1916838001178555612e36565b82800160010185558215612e365791820182811115612e36578251825591602001919060010190612e1b565b5b80821115612e425760008155600101612efc565b80356001600160a01b0381168114612df657600080fd5b803563ffffffff81168114612df657600080fd5b600060208284031215612f4d57600080fd5b6107cd82612f10565b600060208284031215612f6857600080fd5b81356107cd81613adb565b600060208284031215612f8557600080fd5b81516107cd81613adb565b60008060408385031215612fa357600080fd5b8235612fae81613adb565b9150612fbc60208401612f10565b90509250929050565b600080600080600060a08688031215612fdd57600080fd5b853567ffffffffffffffff80821115612ff557600080fd5b818801915088601f83011261300957600080fd5b813560208282111561301d5761301d613ac5565b61302f601f8301601f1916820161377c565b92508183528a8183860101111561304557600080fd5b81818501828501376000818385010152829850613063818b01612f10565b989b989a5050505060408701359660608101359660809091013595509350505050565b60006020828403121561309857600080fd5b5035919050565b6000602082840312156130b157600080fd5b6107cd82612f27565b600080604083850312156130cd57600080fd5b612fae83612f27565b6000806000606084860312156130eb57600080fd5b6130f484612f27565b925061310260208501612f10565b915061311060408501612f27565b90509250925092565b6000806040838503121561312c57600080fd5b61313583612f27565b915060208084013567ffffffffffffffff8082111561315357600080fd5b818601915086601f83011261316757600080fd5b81358181111561317957613179613ac5565b8060051b915061318a84830161377c565b8181528481019084860184860187018b10156131a557600080fd5b600095508594505b838510156131d957803560ff811681146131c5578687fd5b8352600194909401939186019186016131ad565b508096505050505050509250929050565b600080604083850312156131fd57600080fd5b61320683612f27565b946020939093013593505050565b6000815180845261322c816020860160208601613985565b601f01601f19169290920160200192915050565b60008451613252818460208901613985565b845190830190613266818360208901613985565b8451910190613279818360208801613985565b0195945050505050565b60008351613295818460208801613985565b8351908301906132a9818360208801613985565b6d111611323ab930ba34b7b7111d1160911b9101908152600e01949350505050565b600083516132dd818460208801613985565b8351908301906132f1818360208801613985565b7111161136b4b72a34b6b2b9ba30b6b8111d1160711b9101908152601201949350505050565b60008351613329818460208801613985565b83519083019061333d818360208801613985565b7311161136382a37b5b2b720b2323932b9b9911d1160611b9101908152601401949350505050565b60008351613377818460208801613985565b83519083019061338b818360208801613985565b721116113832b73234b733a932bbb0b932111d1160691b9101908152601301949350505050565b600083516133c4818460208801613985565b8351908301906133d8818360208801613985565b741116113a37ba30b62234b9ba3934b13aba32911d1160591b9101908152601501949350505050565b60008351613413818460208801613985565b835190830190613427818360208801613985565b61227d60f01b9101908152600201949350505050565b6000835161344f818460208801613985565b835190830190613463818360208801613985565b7f222c226c61737452657761726454696d657374616d70223a22000000000000009101908152601901949350505050565b600083516134a6818460208801613985565b8351908301906134ba818360208801613985565b7311161130b1b1983c212832b929b430b932911d1160611b9101908152601401949350505050565b600083516134f4818460208801613985565b835190830190613508818360208801613985565b73111611363820b6b7bab73a24b72837b7b6111d1160611b9101908152601401949350505050565b60008351613542818460208801613985565b835190830190613556818360208801613985565b6e11161139ba30b93a2a34b6b2911d1160891b9101908152600f01949350505050565b6000845161358b818460208901613985565b601160f91b90830190815284516135a9816001840160208901613985565b61111d60f11b6001929091019182015283516135cc816003840160208801613985565b600b60fa1b6003929091019182015260040195945050505050565b600082516135f9818460208701613985565b6922696e666f223a22227d60b01b920191825250600a01919050565b60008251613627818460208701613985565b692275736572223a22227d60b01b920191825250600a01919050565b693d9134b73232bc111d1160b11b8152815160009061366981600a850160208701613985565b691116113730b6b2911d1160b11b600a939091019283015250601401919050565b693d9134b73232bc111d1160b11b815281516000906136b081600a850160208701613985565b7111161139ba30b5b2b220b6b7bab73a111d1160711b600a939091019283015250601c01919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020815260006107cd6020830184613214565b6040815260006137236040830185613214565b90508260208301529392505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156137a5576137a5613ac5565b604052919050565b600082198211156137c0576137c0613a83565b500190565b600060ff821660ff84168060ff038211156137e2576137e2613a83565b019392505050565b6000826137f9576137f9613a99565b500490565b600060ff83168061381157613811613a99565b8060ff84160491505092915050565b600181815b8085111561385b57816000190482111561384157613841613a83565b8085161561384e57918102915b93841c9390800290613825565b509250929050565b60006107cd838360008261387957506001610f40565b8161388657506000610f40565b816001811461389c57600281146138a6576138c2565b6001915050610f40565b60ff8411156138b7576138b7613a83565b50506001821b610f40565b5060208310610133831016604e8410600b84101617156138e5575081810a610f40565b6138ef8383613820565b806000190482111561390357613903613a83565b029392505050565b600081600019048311821515161561392557613925613a83565b500290565b600060ff821660ff84168160ff048111821515161561390357613903613a83565b60008282101561395d5761395d613a83565b500390565b600060ff821660ff84168082101561397c5761397c613a83565b90039392505050565b60005b838110156139a0578181015183820152602001613988565b838111156139af576000848401525b50505050565b6000816139c4576139c4613a83565b506000190190565b600060ff8216806139df576139df613a83565b6000190192915050565b600181811c908216806139fd57607f821691505b60208210811415613a1e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613a3857613a38613a83565b5060010190565b600063ffffffff80831681811415613a5957613a59613a83565b6001019392505050565b600060ff821660ff811415613a7a57613a7a613a83565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146115e857600080fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "params": {
          "_duration": "duration of pool",
          "_startTime": "timestamp to start pool",
          "_token": "address of LP token",
          "_totalDistribute": "total distribution in 0xB for this pool"
        }
      },
      "claimReward(uint32,uint8[])": {
        "details": "update reward debt and send reward to user",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "deposit(uint32,uint256)": {
        "details": "add new entity to control staking timestamp and taxes, never add token to older entities",
        "params": {
          "_amount": "amount to stake",
          "_poolId": "index of one pool"
        }
      },
      "getAPR(uint32)": {
        "params": {
          "_poolId": "index of pool"
        },
        "returns": {
          "apr": "current APR of an LP pool"
        }
      },
      "getJSONAllPoolsInfo(bool)": {
        "params": {
          "_onlyActive": "decide if only return info of active pool"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONAllPoolsUser(bool,address)": {
        "params": {
          "_onlyActive": "decide if only return info of active pool",
          "_user": "address of an user"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONSinglePoolInfo(uint32)": {
        "params": {
          "_poolId": "index of pool"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONSinglePoolUser(uint32,address)": {
        "params": {
          "_poolId": "index of pool",
          "_user": "address of an user"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getPoolsCount()": {
        "returns": {
          "_0": "len number of pools"
        }
      },
      "getUserPendingReward(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserStakeAmounts(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrawn",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserTimestamps(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserUnstakedAmount(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "isWhitelisted(address)": {
        "params": {
          "addr": "address to query"
        },
        "returns": {
          "_0": "isWhitelisted true if `addr` is whitelisted"
        }
      },
      "pendingReward(uint32,address,uint32)": {
        "details": "the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool",
        "params": {
          "_index": "index of some entity",
          "_poolId": "id of pool",
          "addr": "address of user"
        },
        "returns": {
          "_0": "reward pending reward of user"
        }
      },
      "setToken(address)": {
        "params": {
          "_token": "address of 0xB"
        }
      },
      "setWithdrawTaxPool(address)": {
        "params": {
          "_pool": "new tax pool"
        }
      },
      "setWithdrawTimeout(uint256)": {
        "params": {
          "_timeout": "new timeout"
        }
      },
      "taxOfEntity(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "tax amount of tax of an entity"
        }
      },
      "totalStakeOfUser(uint32,address)": {
        "params": {
          "_poolId": "index of pool",
          "addr": "address of the user"
        },
        "returns": {
          "totalStake": "total amount of LP staked in the user"
        }
      },
      "updatePool(uint32)": {
        "details": "update accumulated reward per share of a pool for sake of reward optimization",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "withdrawMultiple(uint32,uint8[])": {
        "details": "same as withdraw, relocations of entities from an user is required",
        "params": {
          "_entityIndices": "indices of entities to withdraw",
          "_poolId": "index of pool"
        }
      },
      "withdrawable(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "withdrawable true if the entity is withdrawable"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "notice": "add new pool to stake LP"
      },
      "claimReward(uint32,uint8[])": {
        "notice": "claim all reward from all entity of pool"
      },
      "deposit(uint32,uint256)": {
        "notice": "deposit _amount of lp to the pool with index _poolId to start new entity of staking"
      },
      "getAPR(uint32)": {
        "notice": "calculate the current APR of one LP pool"
      },
      "getJSONAllPoolsInfo(bool)": {
        "notice": "return a JSON includes info of all pool, can choose to get only active pools or not"
      },
      "getJSONAllPoolsUser(bool,address)": {
        "notice": "return a JSON includes info of all pool that specific to an user, can choose to get only active pools or not"
      },
      "getJSONSinglePoolInfo(uint32)": {
        "notice": "return a JSON includes all info of a pool"
      },
      "getJSONSinglePoolUser(uint32,address)": {
        "notice": "return a JSON includes all info of an user in a pool"
      },
      "getPoolsCount()": {
        "notice": "number of pools "
      },
      "getUserPendingReward(uint32,address)": {
        "notice": "get the pending rewards of every entity that user staked in one pool"
      },
      "getUserStakeAmounts(uint32,address)": {
        "notice": "get the stake amount of every entity that user staked in one pool"
      },
      "getUserTimestamps(uint32,address)": {
        "notice": "get the timestamps of every entity that user staked in one pool"
      },
      "getUserUnstakedAmount(uint32,address)": {
        "notice": "get the unstaked amount of every entity that user staked in one pool"
      },
      "isWhitelisted(address)": {
        "notice": "show if an address is whitelisted to create a pool"
      },
      "pendingReward(uint32,address,uint32)": {
        "notice": "calculate the unclaimed reward of a user in one entity"
      },
      "setToken(address)": {
        "notice": "set address of 0xB token"
      },
      "setWithdrawTaxPool(address)": {
        "notice": "set new withdrawal tax pool"
      },
      "setWithdrawTimeout(uint256)": {
        "notice": "set new withdrawal timeout"
      },
      "taxOfEntity(uint32,address,uint32)": {
        "notice": "return current tax of an entity"
      },
      "totalStakeOfUser(uint32,address)": {
        "notice": "calculate total stake of one address in a pool"
      },
      "updatePool(uint32)": {
        "notice": "update data in a lp staking pool"
      },
      "withdrawMultiple(uint32,uint8[])": {
        "notice": "withdraw an amount from an entity. remove the entity if withdrawn everything"
      },
      "withdrawable(uint32,address,uint32)": {
        "notice": "show if an entity is withdrawable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7469,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "lpStakingEntitiesLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7471,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTimeout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7474,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxLevel",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7477,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxPortion",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7479,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "earlyWithdrawTaxPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7483,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "pools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)7467_storage)dyn_storage"
      },
      {
        "astId": 7490,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))"
      },
      {
        "astId": 7494,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "whitelistAuthorities",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7496,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "token0xBAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7498,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "admin0xB",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)7467_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7467_storage",
        "encoding": "dynamic_array",
        "label": "struct LPStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPStaking.UserLPStakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPStakeInfo)7449_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct LPStaking.UserLPStakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)"
      },
      "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LPStaking.LPStakeEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(LPStakeEntity)7441_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LPStakeEntity)7441_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.LPStakeEntity",
        "members": [
          {
            "astId": 7434,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7436,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7438,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7440,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "withdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)7467_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.PoolInfo",
        "members": [
          {
            "astId": 7451,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7454,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2517"
          },
          {
            "astId": 7456,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpAmountInPool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7458,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "totalDistribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7460,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7462,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7464,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "acc0xBPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7466,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserLPStakeInfo)7449_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.UserLPStakeInfo",
        "members": [
          {
            "astId": 7443,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7448,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "entities",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}