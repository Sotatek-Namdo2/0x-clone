{
  "address": "0x82fd29029cfDf9BA835cCa16FD75cEA9C9CAc50a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "debug",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserPendingReward",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserStakeAmounts",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserTimestamps",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserUnstakedAmount",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStakingEntitiesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmountInPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc0xBPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "taxOfEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0xBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "totalStakeOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_entityIndices",
          "type": "uint8[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxPortion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1a6df6da1ab1eef53d72c2458061a4712375ad5827aeab2a3a028631d12bf14b",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x82fd29029cfDf9BA835cCa16FD75cEA9C9CAc50a",
    "transactionIndex": 0,
    "gasUsed": "2952267",
    "logsBloom": "0x
    "blockHash": "0x446041e016c4e73200951ed7a598e5282840959be826a91c68a64883641c111d",
    "transactionHash": "0x1a6df6da1ab1eef53d72c2458061a4712375ad5827aeab2a3a028631d12bf14b",
    "logs": [],
    "blockNumber": 10617041,
    "cumulativeGasUsed": "2952267",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "e5c8659017a623cf0dcd55a079b98b64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"debug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPendingReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStakeAmounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserTimestamps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserUnstakedAmount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingEntitiesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc0xBPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"taxOfEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0xBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakeOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_entityIndices\",\"type\":\"uint8[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"params\":{\"_duration\":\"duration of pool\",\"_startTime\":\"timestamp to start pool\",\"_token\":\"address of LP token\",\"_totalDistribute\":\"total distribution in 0xB for this pool\"}},\"claimAllReward(uint32)\":{\"details\":\"update reward debt and send reward to user\",\"params\":{\"_poolId\":\"index of pool\"}},\"claimReward(uint32,uint32)\":{\"details\":\"update reward debt of user and send new reward to user\",\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of pool\"}},\"deposit(uint32,uint256)\":{\"details\":\"add new entity to control staking timestamp and taxes, never add token to older entities\",\"params\":{\"_amount\":\"amount to stake\",\"_poolId\":\"index of one pool\"}},\"getAPR(uint32)\":{\"params\":{\"_poolId\":\"index of pool\"},\"returns\":{\"apr\":\"current APR of an LP pool\"}},\"getPoolsCount()\":{\"returns\":{\"_0\":\"len number of pools\"}},\"getUserPendingReward(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserStakeAmounts(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrwn\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserTimestamps(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserUnstakedAmount(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"isWhitelisted(address)\":{\"params\":{\"addr\":\"address to query\"},\"returns\":{\"_0\":\"isWhitelisted true if `addr` is whitelisted\"}},\"pendingReward(uint32,address,uint32)\":{\"details\":\"the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool\",\"params\":{\"_index\":\"index of some entity\",\"_poolId\":\"id of pool\",\"addr\":\"address of user\"},\"returns\":{\"_0\":\"reward pending reward of user\"}},\"setToken(address)\":{\"params\":{\"_token\":\"address of 0xB\"}},\"taxOfEntity(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"tax amount of tax of an entity\"}},\"totalStakeOfUser(uint32,address)\":{\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of the user\"},\"returns\":{\"totalStake\":\"total amount of LP staked in the user\"}},\"updatePool(uint32)\":{\"details\":\"update accumulated reward per share of a pool for sake of reward optimization\",\"params\":{\"_poolId\":\"index of pool\"}},\"withdraw(uint32,uint32,uint256)\":{\"details\":\"reduce amount in pool and increase the withdrawn value\",\"params\":{\"_amount\":\"amount to withdraw\",\"_index\":\"index of entity\",\"_poolId\":\"index of pool\"}},\"withdrawMultiple(uint32,uint8[])\":{\"details\":\"same as withdraw, relocations of entities from an user is required\",\"params\":{\"_entityIndices\":\"indices of entities to withdraw\",\"_poolId\":\"index of pool\"}},\"withdrawable(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"withdrawable true if the entity is withdrawable\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"notice\":\"add new pool to stake LP\"},\"claimAllReward(uint32)\":{\"notice\":\"claim all reward from all entity of pool\"},\"claimReward(uint32,uint32)\":{\"notice\":\"claim reward from a pool, with a chosen entity\"},\"deposit(uint32,uint256)\":{\"notice\":\"deposit _amount of lp to the pool with index _poolId to start new entity of staking\"},\"getAPR(uint32)\":{\"notice\":\"calculate the current APR of one LP pool\"},\"getPoolsCount()\":{\"notice\":\"number of pools \"},\"getUserPendingReward(uint32,address)\":{\"notice\":\"get the pending rewards of every entity that user staked in one pool\"},\"getUserStakeAmounts(uint32,address)\":{\"notice\":\"get the stake amount of every entity that user staked in one pool\"},\"getUserTimestamps(uint32,address)\":{\"notice\":\"get the timestamps of every entity that user staked in one pool\"},\"getUserUnstakedAmount(uint32,address)\":{\"notice\":\"get the unstaked amount of every entity that user staked in one pool\"},\"isWhitelisted(address)\":{\"notice\":\"show if an address is whitelisted to create a pool\"},\"pendingReward(uint32,address,uint32)\":{\"notice\":\"calculate the unclaimed reward of a user in one entity\"},\"setToken(address)\":{\"notice\":\"set address of 0xB token\"},\"taxOfEntity(uint32,address,uint32)\":{\"notice\":\"return current tax of an entity\"},\"totalStakeOfUser(uint32,address)\":{\"notice\":\"calculate total stake of one address in a pool\"},\"updatePool(uint32)\":{\"notice\":\"update data in a lp staking pool\"},\"withdraw(uint32,uint32,uint256)\":{\"notice\":\"withdraw an amount from an entity. remove the entity if withdrawn everything\"},\"withdrawMultiple(uint32,uint8[])\":{\"notice\":\"withdraw an amount from an entity. remove the entity if withdrawn everything\"},\"withdrawable(uint32,address,uint32)\":{\"notice\":\"show if an entity is withdrawable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LPStaking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LPStaking is Initializable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant DAY = 86400;\\n    uint256 private constant YEAR = 86400 * 365;\\n    uint256 private constant ONE_LP = 1e18;\\n    string private constant SEPARATOR = \\\"#\\\";\\n\\n    // ----- Structs -----\\n    struct LPStakeEntity {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 creationTime;\\n        uint256 withdrawn;\\n    }\\n\\n    struct UserLPStakeInfo {\\n        uint8 size;\\n        mapping(uint8 => LPStakeEntity) entities;\\n    }\\n\\n    struct PoolInfo {\\n        string name;\\n        IERC20 lpToken;\\n        uint256 lpAmountInPool;\\n        uint256 totalDistribute;\\n        uint256 startTime;\\n        uint256 duration;\\n        uint256 acc0xBPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    // ----- Contract Storage -----\\n    uint256 public lpStakingEntitiesLimit;\\n\\n    // ----- Limits on withdrawal -----\\n    uint256 public withdrawTimeout;\\n    uint256[] public withdrawTaxLevel;\\n    uint256[] public withdrawTaxPortion;\\n    address public earlyWithdrawTaxPool;\\n\\n    PoolInfo[] public pools;\\n    mapping(uint32 => mapping(address => UserLPStakeInfo)) public userInfo;\\n    mapping(address => bool) private whitelistAuthorities;\\n\\n    // ----- Router Addresses -----\\n    address public token0xBAddress;\\n    address public admin0xB;\\n\\n    // ----- Debugger -----\\n    uint256 public deb;\\n\\n    // ----- Constructor -----\\n    function initialize() public initializer {\\n        admin0xB = msg.sender;\\n        lpStakingEntitiesLimit = 100;\\n        withdrawTimeout = DAY;\\n        withdrawTaxLevel = [0, 0, DAY * 30, DAY * 60];\\n        withdrawTaxPortion = [5_000_000, 5_000_000, 2_500_000, 0];\\n        earlyWithdrawTaxPool = msg.sender;\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n\\n    // ----- Events -----\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token0xBAddress || msg.sender == admin0xB || isWhitelisted(msg.sender), \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    /**\\n        @notice number of pools \\n        @return len number of pools\\n    */\\n    function getPoolsCount() public view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /**\\n        @notice calculate the current APR of one LP pool\\n        @param _poolId index of pool\\n        @return apr current APR of an LP pool\\n    */\\n    function getAPR(uint32 _poolId) public view returns (uint256 apr) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        apr = (pool.totalDistribute * YEAR * uint256(1e18)) / pool.duration / pool.lpAmountInPool;\\n    }\\n\\n    /**\\n        @notice calculate total stake of one address in a pool\\n        @param _poolId index of pool\\n        @param addr address of the user\\n        @return totalStake total amount of LP staked in the user\\n    */\\n    function totalStakeOfUser(uint32 _poolId, address addr) public view returns (uint256 totalStake) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        totalStake = 0;\\n        for (uint8 i = 1; i < user.size; i++) {\\n            totalStake += user.entities[i].amount;\\n        }\\n    }\\n\\n    /**\\n        @notice get the timestamps of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserTimestamps(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].creationTime);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].creationTime)));\\n        }\\n    }\\n\\n    /**\\n        @notice get the stake amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @dev for each entity, the amount staked at first is separated into 2 variable: amount + withdrwn\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserStakeAmounts(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].amount + user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 amount = user.entities[i].amount + user.entities[i].withdrawn;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(amount)));\\n        }\\n    }\\n\\n    /**\\n        @notice get the pending rewards of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserPendingReward(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(pendingReward(_poolId, addr, 0));\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(pendingReward(_poolId, addr, i))));\\n        }\\n    }\\n\\n    /**\\n        @notice get the unstaked amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserUnstakedAmount(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].withdrawn)));\\n        }\\n    }\\n\\n    /**\\n        @notice calculate the unclaimed reward of a user in one entity\\n        @dev the accumulated reward per share is considered, add with reward from latest pool update\\n        @dev using current state of pool (total lp in pool).\\n        @dev the formula is: (a * n) + delta(now - l) * c - rewardDebt\\n        @dev a: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last update\\n        @dev c: current reward per share per second, rewardDebt: reward already claimed by user in this pool\\n        @param _poolId id of pool\\n        @param addr address of user\\n        @param _index index of some entity\\n        @return reward pending reward of user\\n    */\\n    function pendingReward(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        LPStakeEntity memory entity = user.entities[uint8(_index)];\\n        uint256 acc0xBPerShare = pool.acc0xBPerShare;\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 reward = getDelta(pool.lastRewardTimestamp, block.timestamp) * getCurrentRewardPerLPPerSecond(pool);\\n            acc0xBPerShare = acc0xBPerShare + (reward * ONE_LP) / lpSupply;\\n        }\\n        return (entity.amount * acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    }\\n\\n    /**\\n        @notice show if an address is whitelisted to create a pool\\n        @param addr address to query\\n        @return isWhitelisted true if `addr` is whitelisted\\n    */\\n    function isWhitelisted(address addr) public view returns (bool) {\\n        return whitelistAuthorities[addr];\\n    }\\n\\n    /**\\n        @notice show if an entity is withdrawable\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return withdrawable true if the entity is withdrawable\\n    */\\n    function withdrawable(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (bool) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        return (entity.creationTime + withdrawTimeout < block.timestamp);\\n    }\\n\\n    /**\\n        @notice return current tax of an entity\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return tax amount of tax of an entity\\n    */\\n    function taxOfEntity(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        uint256 durationSinceStart = block.timestamp - entity.creationTime;\\n        for (uint256 i = withdrawTaxPortion.length - 1; i > 0; i--) {\\n            if (withdrawTaxLevel[i] <= durationSinceStart) {\\n                return withdrawTaxPortion[i];\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // ----- Admin WRITE functions -----\\n    /**\\n        @notice set address of 0xB token\\n        @param _token address of 0xB\\n    */\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        token0xBAddress = _token;\\n    }\\n\\n    function debug(uint32 _poolId, uint32 _index) external {\\n        deb = pendingReward(_poolId, msg.sender, _index);\\n    }\\n\\n    /**\\n        @notice add new pool to stake LP\\n        @param _token address of LP token\\n        @param _totalDistribute total distribution in 0xB for this pool\\n        @param _startTime timestamp to start pool\\n        @param _duration duration of pool\\n    */\\n    function addPool(\\n        string memory _name,\\n        address _token,\\n        uint256 _totalDistribute,\\n        uint256 _startTime,\\n        uint256 _duration\\n    ) external onlyAuthorities {\\n        require(_startTime >= block.timestamp, \\\"start time should be in the future\\\");\\n        IERC20(token0xBAddress).transferFrom(msg.sender, address(this), _totalDistribute);\\n        pools.push(\\n            PoolInfo({\\n                name: _name,\\n                lpToken: IERC20(_token),\\n                totalDistribute: _totalDistribute,\\n                startTime: _startTime,\\n                duration: _duration,\\n                acc0xBPerShare: 0,\\n                lpAmountInPool: 0,\\n                lastRewardTimestamp: _startTime\\n            })\\n        );\\n    }\\n\\n    // ----- Public WRITE functions -----\\n    /**\\n        @notice deposit _amount of lp to the pool with index _poolId to start new entity of staking\\n        @dev add new entity to control staking timestamp and taxes, never add token to older entities\\n        @param _poolId index of one pool\\n        @param _amount amount to stake\\n    */\\n    function deposit(uint32 _poolId, uint256 _amount) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please stake\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(user.size < lpStakingEntitiesLimit, \\\"too many entities, please withdraw some\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolActive(pool), \\\"pool inactive\\\");\\n        updatePool(_poolId);\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        pool.lpAmountInPool = pool.lpAmountInPool + _amount;\\n        user.entities[uint8(user.size)] = LPStakeEntity({\\n            amount: _amount,\\n            rewardDebt: 0,\\n            creationTime: block.timestamp,\\n            withdrawn: 0\\n        });\\n        user.size = user.size + 1;\\n    }\\n\\n    /**\\n        @notice withdraw an amount from an entity. remove the entity if withdrawn everything\\n        @dev reduce amount in pool and increase the withdrawn value\\n        @param _poolId index of pool\\n        @param _index index of entity\\n        @param _amount amount to withdraw\\n    */\\n    function withdraw(\\n        uint32 _poolId,\\n        uint32 _index,\\n        uint256 _amount\\n    ) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please unstake\\\");\\n        require(withdrawable(_poolId, msg.sender, _index), \\\"entity in withdrawal timeout\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(_index < user.size, \\\"wrong index\\\");\\n        require(_amount <= user.entities[uint8(_index)].amount, \\\"amount too big\\\");\\n\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        LPStakeEntity storage entity = user.entities[uint8(_index)];\\n\\n        // transfer 0xB reward\\n        uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n        IERC20(token0xBAddress).transfer(sender, reward);\\n        entity.rewardDebt = entity.rewardDebt + reward;\\n\\n        uint256 tax = taxOfEntity(_poolId, sender, _index);\\n        if (tax > 0) {\\n            tax = (tax * _amount) / HUNDRED_PERCENT;\\n            pool.lpToken.transferFrom(address(this), earlyWithdrawTaxPool, tax);\\n        }\\n        pool.lpToken.transferFrom(address(this), address(msg.sender), _amount - tax);\\n        pool.lpAmountInPool = pool.lpAmountInPool - _amount;\\n\\n        // swap from last place to current entity\\n        entity.amount = entity.amount - _amount;\\n        entity.withdrawn = entity.withdrawn + _amount;\\n        if (entity.amount == 0) {\\n            user.size = user.size - 1;\\n            user.entities[uint8(_index)] = user.entities[uint8(user.size)];\\n        }\\n    }\\n\\n    /**\\n        @notice withdraw an amount from an entity. remove the entity if withdrawn everything\\n        @dev same as withdraw, relocations of entities from an user is required\\n        @param _poolId index of pool\\n        @param _entityIndices indices of entities to withdraw\\n    */\\n    function withdrawMultiple(\\n        uint32 _poolId,\\n        uint8[] memory _entityIndices\\n    ) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        for (uint i = 0; i < _entityIndices.length; i++) {\\n            require(withdrawable(_poolId, msg.sender, _entityIndices[i]), \\\"entity in withdrawal timeout\\\");\\n            require(_entityIndices[i] < userInfo[_poolId][msg.sender].size, \\\"wrong index\\\");\\n        }\\n        address sender = msg.sender;\\n\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        uint256 totalPendingReward = 0;\\n        uint256 totalTax = 0;\\n        uint256 totalWithdrawn = 0;\\n        uint256 newReward;\\n        uint256 _amount;\\n\\n        for (uint i = 0; i < _entityIndices.length; i++) {\\n            LPStakeEntity storage entity = user.entities[_entityIndices[i]];\\n            _amount = entity.amount;\\n            newReward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalPendingReward += newReward;\\n            totalTax += _amount * taxOfEntity(_poolId, sender, _entityIndices[i]) / HUNDRED_PERCENT;\\n            totalWithdrawn += _amount;\\n            entity.rewardDebt = entity.rewardDebt + newReward;\\n            entity.amount = entity.amount - _amount;\\n            entity.withdrawn = entity.withdrawn + _amount;\\n        }\\n\\n        // transfer reward\\n        IERC20(token0xBAddress).transfer(sender, totalPendingReward);\\n\\n        // transfer lp tokens\\n        pool.lpToken.transferFrom(address(this), earlyWithdrawTaxPool, totalTax);\\n        pool.lpToken.transferFrom(address(this), sender, totalWithdrawn - totalTax);\\n        pool.lpAmountInPool = pool.lpAmountInPool - totalWithdrawn;\\n\\n        // refactor user storage using O(n) two-pointer algorithm\\n        uint8 ptrLeft = 0;\\n        uint8 ptrRight = user.size - 1;\\n        while (true) {\\n            while (ptrLeft < user.size && user.entities[ptrLeft].amount > 0) {\\n                ptrLeft++;\\n            }\\n            while (user.entities[ptrRight].amount == 0) {\\n                if (ptrRight == 0) break;\\n                ptrRight--;\\n            }\\n            if (ptrLeft >= ptrRight) break;\\n            user.entities[ptrLeft] = user.entities[ptrRight];\\n            ptrLeft++;\\n            ptrRight--;\\n        }\\n        user.size = (user.entities[ptrRight].amount == 0) ? 0 : ptrRight + 1;\\n    }\\n\\n    /**\\n        @notice claim reward from a pool, with a chosen entity\\n        @dev update reward debt of user and send new reward to user\\n        @param _poolId index of pool\\n        @param _index index of entity\\n     */\\n    function claimReward(uint32 _poolId, uint32 _index) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolClaimable(pool), \\\"pool has not started yet\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(_index < user.size, \\\"wrong index\\\");\\n\\n        updatePool(_poolId);\\n        LPStakeEntity storage entity = user.entities[uint8(_index)];\\n        uint256 reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n        IERC20(token0xBAddress).transfer(sender, reward);\\n        entity.rewardDebt = entity.rewardDebt + reward;\\n    }\\n\\n    /**\\n        @notice claim all reward from all entity of pool\\n        @dev update reward debt and send reward to user\\n        @param _poolId index of pool\\n    */\\n    function claimAllReward(uint32 _poolId) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolClaimable(pool), \\\"pool has not started yet\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n\\n        uint256 totalReward = 0;\\n        uint256 reward;\\n\\n        for (uint8 i = 0; i < user.size; i++) {\\n            LPStakeEntity storage entity = user.entities[i];\\n            reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalReward += reward;\\n            entity.rewardDebt = entity.rewardDebt + reward;\\n        }\\n        IERC20(token0xBAddress).transfer(sender, totalReward);\\n    }\\n\\n    /**\\n        @notice update data in a lp staking pool\\n        @dev update accumulated reward per share of a pool for sake of reward optimization\\n        @param _poolId index of pool\\n    */\\n    function updatePool(uint32 _poolId) public {\\n        PoolInfo storage pool = pools[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 rewardSinceLastChange = getDelta(pool.lastRewardTimestamp, block.timestamp) *\\n            getCurrentRewardPerLPPerSecond(pool);\\n        pool.acc0xBPerShare = pool.acc0xBPerShare + rewardSinceLastChange;\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice get time different from _from to _to\\n    function getDelta(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to - _from;\\n    }\\n\\n    /// @notice get current reward per LP per second\\n    function getCurrentRewardPerLPPerSecond(PoolInfo memory _pi) internal pure returns (uint256) {\\n        return (_pi.totalDistribute * uint256(ONE_LP)) / _pi.duration / _pi.lpAmountInPool;\\n    }\\n\\n    /// @notice true if able to start claiming from pool\\n    function isPoolClaimable(PoolInfo memory _pi) internal view returns (bool) {\\n        return (block.timestamp >= _pi.startTime);\\n    }\\n\\n    /// @notice true if pool is active\\n    function isPoolActive(PoolInfo memory _pi) internal view returns (bool) {\\n        return (isPoolClaimable(_pi) && block.timestamp <= _pi.startTime + _pi.duration);\\n    }\\n\\n    /// @notice convert uint to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x1321f8677a55a587be383e9c960759b6de7db340de40abea11eabe1eefa2483a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613473806100206000396000f3fe6080604052600436106101cc5760003560e01c8063a494a0c011610102578063b4ac686011610095578063d63c564b11610064578063d63c564b14610599578063e17f8d55146105b9578063eed873c2146105cf578063f78d4897146105ef57600080fd5b8063b4ac686014610524578063c3e691b514610539578063cedb682a14610559578063d4491a061461057957600080fd5b8063ac4afa38116100d1578063ac4afa3814610490578063aeeacef1146104c4578063b0cdad26146104e4578063b2a170491461050457600080fd5b8063a494a0c014610410578063a6503e7614610430578063a71f06f014610450578063aaf103981461047057600080fd5b80633da3a82d1161017a5780635959cff1116101495780635959cff1146103af5780638129fc1c146103cf5780639853e945146103e45780639c15d1a2146103fa57600080fd5b80633da3a82d146103225780633f07f552146103425780634b7ea33d146103625780635931583d1461038f57600080fd5b80630584aecf146101d8578063144fa6d71461021557806329efdc41146102375780632f3ef5da14610265578063303d50c2146102855780633530f80a146102a55780633af32abf146102f257600080fd5b366101d357005b600080fd5b3480156101e457600080fd5b50600a546101f8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b50610235610230366004612dfe565b61060f565b005b34801561024357600080fd5b50610257610252366004612f63565b6106f2565b60405190815260200161020c565b34801561027157600080fd5b50610235610280366004612f15565b61081a565b34801561029157600080fd5b506102576102a0366004612f63565b61099d565b3480156102b157600080fd5b506102e06102c0366004612f30565b600760209081526000928352604080842090915290825290205460ff1681565b60405160ff909116815260200161020c565b3480156102fe57600080fd5b5061031261030d366004612dfe565b610c49565b604051901515815260200161020c565b34801561032e57600080fd5b5061025761033d366004612efc565b610c67565b34801561034e57600080fd5b5061023561035d3660046130cb565b610c88565b34801561036e57600080fd5b5061038261037d366004612f30565b611104565b60405161020c91906131b3565b34801561039b57600080fd5b506102576103aa366004612efc565b611229565b3480156103bb57600080fd5b506102356103ca3660046130a1565b611239565b3480156103db57600080fd5b5061023561124b565b3480156103f057600080fd5b50610257600b5481565b34801561040657600080fd5b5061025760025481565b34801561041c57600080fd5b5061038261042b366004612f30565b6113b4565b34801561043c57600080fd5b5061025761044b366004612f30565b6114b1565b34801561045c57600080fd5b5061023561046b3660046130a1565b61154b565b34801561047c57600080fd5b5061023561048b366004613077565b611825565b34801561049c57600080fd5b506104b06104ab366004612efc565b611b91565b60405161020c9897969594939291906131c6565b3480156104d057600080fd5b506103126104df366004612f63565b611c7d565b3480156104f057600080fd5b506103826104ff366004612f30565b611d27565b34801561051057600080fd5b5061025761051f366004612f15565b611e43565b34801561053057600080fd5b50600654610257565b34801561054557600080fd5b50610235610554366004612f15565b611fe6565b34801561056557600080fd5b506009546101f8906001600160a01b031681565b34801561058557600080fd5b506005546101f8906001600160a01b031681565b3480156105a557600080fd5b506103826105b4366004612f30565b6121ea565b3480156105c557600080fd5b5061025760015481565b3480156105db57600080fd5b506102356105ea366004612e3b565b612317565b3480156105fb57600080fd5b5061023561060a366004612fa6565b612565565b6009546001600160a01b03163314806106325750600a546001600160a01b031633145b80610641575061064133610c49565b6106835760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b60448201526064015b60405180910390fd5b6001600160a01b0381166106d05760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161067a565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60065460009063ffffffff85161061071c5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff861684526001908101835281842082516080810184528154815291810154938201939093526002830154918101829052600390920154606083015290919061078f9042613310565b6004549091506000906107a490600190613310565b90505b801561080b5781600382815481106107c1576107c161343a565b9060005260206000200154116107f957600481815481106107e4576107e461343a565b90600052602060002001549350505050610813565b806108038161337a565b9150506107a7565b506000925050505b9392505050565b600060068263ffffffff16815481106108355761083561343a565b9060005260206000209060080201905080600701544211610854575050565b60028101548061086957504260079091015550565b6000610962836040518061010001604052908160008201805461088b906133ae565b80601f01602080910402602001604051908101604052809291908181526020018280546108b7906133ae565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612b18565b610970846007015442612b50565b61097a91906132f1565b905080836006015461098c9190613292565b600684015550504260079091015550565b60065460009063ffffffff8516106109c75760405162461bcd60e51b815260040161067a9061321a565b600060068563ffffffff16815481106109e2576109e261343a565b906000526020600020906008020160405180610100016040529081600082018054610a0c906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a38906133ae565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000600760008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360c0015190506000846040015190508460e0015142118015610bb757508015155b15610c0c576000610bc786612b18565b610bd58760e0015142612b50565b610bdf91906132f1565b905081610bf4670de0b6b3a7640000836132f1565b610bfe91906132cf565b610c089084613292565b9250505b60208301518351670de0b6b3a764000090610c289085906132f1565b610c3291906132cf565b610c3c9190613310565b9998505050505050505050565b6001600160a01b031660009081526008602052604090205460ff1690565b60048181548110610c7757600080fd5b600091825260209091200154905081565b60065463ffffffff841610610caf5760405162461bcd60e51b815260040161067a9061321a565b60008111610cf05760405162461bcd60e51b815260206004820152600e60248201526d706c6561736520756e7374616b6560901b604482015260640161067a565b610cfb833384611c7d565b610d475760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161067a565b63ffffffff808416600090815260076020908152604080832033808552925290912080549192909160ff1690851610610d925760405162461bcd60e51b815260040161067a9061323c565b60ff84166000908152600182016020526040902054831115610de75760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e7420746f6f2062696760901b604482015260640161067a565b610df08561081a565b600060068663ffffffff1681548110610e0b57610e0b61343a565b9060005260206000209060080201905060008260010160008760ff1660ff168152602001908152602001600020905060008160010154670de0b6b3a764000084600601548460000154610e5e91906132f1565b610e6891906132cf565b610e729190613310565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610ea5908890859060040161319a565b602060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190612e19565b50808260010154610f089190613292565b60018301556000610f1a89878a6106f2565b90508015610fcc576305f5e100610f3188836132f1565b610f3b91906132cf565b60018501546005546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92610f789230929116908690600401613176565b602060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190612e19565b505b60018401546001600160a01b03166323b872dd3033610feb858c613310565b6040518463ffffffff1660e01b815260040161100993929190613176565b602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612e19565b5086846002015461106c9190613310565b6002850155825461107e908890613310565b83556003830154611090908890613292565b600384015582546110f95784546110ac9060019060ff16613327565b855460ff191660ff9182169081178755600090815260018088016020526040808320938c168352909120825481558282015491810191909155600280830154908201556003918201549101555b505050505050505050565b60065460609063ffffffff84161061112e5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611176575050604080516020810190915260008152611223565b600080805260018201602052604090206003015461119390612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b8152506111ea8460010160008560ff1660ff16815260200190815260200160002060030154612b5c565b6040516020016111fc93929190613133565b6040516020818303038152906040529250808061121890613404565b915050611198565b50505b92915050565b60038181548110610c7757600080fd5b61124482338361099d565b600b555050565b600054610100900460ff166112665760005460ff161561126a565b303b155b6112cd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161067a565b600054610100900460ff161580156112ef576000805461ffff19166101011790555b600a80546001600160a01b0319163317905560646001556201518060028190556040805160808101825260008082526020820152919082019061133390601e6132f1565b815260200161134662015180603c6132f1565b9052611356906003906004612cb9565b5060408051608081018252624c4b408082526020820152622625a0918101919091526000606082015261138c9060049081612d04565b50600580546001600160a01b0319163317905580156113b1576000805461ff00191690555b50565b60065460609063ffffffff8416106113de5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611426575050604080516020810190915260008152611223565b61143a6114358585600061099d565b612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b81525061147b61143588888660ff1661099d565b60405160200161148d93929190613133565b604051602081830303815290604052925080806114a990613404565b91505061143f565b60065460009063ffffffff8416106114db5760405162461bcd60e51b815260040161067a9061321a565b5063ffffffff821660009081526007602090815260408083206001600160a01b0385168452909152812060015b815460ff90811690821610156112205760ff811660009081526001830160205260409020546115379084613292565b92508061154381613404565b915050611508565b60065463ffffffff8316106115725760405162461bcd60e51b815260040161067a9061321a565b600060068363ffffffff168154811061158d5761158d61343a565b9060005260206000209060080201905061169981604051806101000160405290816000820180546115bd906133ae565b80601f01602080910402602001604051908101604052809291908181526020018280546115e9906133ae565b80156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526080015142101590565b6116e05760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b604482015260640161067a565b63ffffffff808416600090815260076020908152604080832033808552925290912080549192909160ff169085161061172b5760405162461bcd60e51b815260040161067a9061323c565b6117348561081a565b60ff841660009081526001808301602052604082209081015460068601548254929392670de0b6b3a76400009161176a916132f1565b61177491906132cf565b61177e9190613310565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906117b1908790859060040161319a565b602060405180830381600087803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190612e19565b508082600101546118149190613292565b826001018190555050505050505050565b60065463ffffffff83161061184c5760405162461bcd60e51b815260040161067a9061321a565b6000811161188b5760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b604482015260640161067a565b63ffffffff82166000908152600760209081526040808320338085529252909120600154815460ff16106119115760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b606482015260840161067a565b600060068563ffffffff168154811061192c5761192c61343a565b90600052602060002090600802019050611a33816040518061010001604052908160008201805461195c906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611988906133ae565b80156119d55780601f106119aa576101008083540402835291602001916119d5565b820191906000526020600020905b8154815290600101906020018083116119b857829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612c85565b611a6f5760405162461bcd60e51b815260206004820152600d60248201526c706f6f6c20696e61637469766560981b604482015260640161067a565b611a788561081a565b60018101546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611aae90339030908990600401613176565b602060405180830381600087803b158015611ac857600080fd5b505af1158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b009190612e19565b50838160020154611b119190613292565b60028083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff90811686526001808c0190955296909420945185559051848301555194830194909455516003909101558354611b7b929116906132aa565b825460ff191660ff919091161790915550505050565b60068181548110611ba157600080fd5b9060005260206000209060080201600091509050806000018054611bc4906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf0906133ae565b8015611c3d5780601f10611c1257610100808354040283529160200191611c3d565b820191906000526020600020905b815481529060010190602001808311611c2057829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496976001600160a01b03909516969395509193909288565b60065460009063ffffffff851610611ca75760405162461bcd60e51b815260040161067a9061321a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352928190208151608081018352815481529381015492840192909252600280830154918401829052600390920154606084015290544291611d1d9190613292565b1095945050505050565b60065460609063ffffffff841610611d515760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611d99575050604080516020810190915260008152611223565b6000808052600182016020526040902060020154611db690612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b815250611e0d8460010160008560ff1660ff16815260200190815260200160002060020154612b5c565b604051602001611e1f93929190613133565b60405160208183030381529060405292508080611e3b90613404565b915050611dbb565b60065460009063ffffffff831610611e6d5760405162461bcd60e51b815260040161067a9061321a565b600060068363ffffffff1681548110611e8857611e8861343a565b906000526020600020906008020160405180610100016040529081600082018054611eb2906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611ede906133ae565b8015611f2b5780601f10611f0057610100808354040283529160200191611f2b565b820191906000526020600020905b815481529060010190602001808311611f0e57829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905080604001518160a00151670de0b6b3a76400006301e133808460600151611fc891906132f1565b611fd291906132f1565b611fdc91906132cf565b61081391906132cf565b60065463ffffffff82161061200d5760405162461bcd60e51b815260040161067a9061321a565b600060068263ffffffff16815481106120285761202861343a565b9060005260206000209060080201905061205881604051806101000160405290816000820180546115bd906133ae565b61209f5760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b604482015260640161067a565b63ffffffff821660009081526007602090815260408083203380855292529091206120c98461081a565b600080805b835460ff908116908216101561215c5760ff81166000908152600180860160205260409091209081015460068801548254670de0b6b3a764000091612112916132f1565b61211c91906132cf565b6121269190613310565b92506121328385613292565b93508281600101546121449190613292565b6001909101558061215481613404565b9150506120ce565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061218f908790869060040161319a565b602060405180830381600087803b1580156121a957600080fd5b505af11580156121bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e19190612e19565b50505050505050565b60065460609063ffffffff8416106122145760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff1661225c575050604080516020810190915260008152611223565b60008080526001820160205260409020600381015490546122809161143591613292565b915060015b815460ff90811690821610156112205760ff811660009081526001830160205260408120600381015490546122ba9190613292565b905083604051806040016040528060018152602001602360f81b8152506122e083612b5c565b6040516020016122f293929190613133565b604051602081830303815290604052935050808061230f90613404565b915050612285565b6009546001600160a01b031633148061233a5750600a546001600160a01b031633145b80612349575061234933610c49565b6123865760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161067a565b428210156123e15760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b606482015260840161067a565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061241590339030908890600401613176565b602060405180830381600087803b15801561242f57600080fd5b505af1158015612443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124679190612e19565b5060408051610100810182528681526001600160a01b0386166020808301919091526000928201839052606082018690526080820185905260a0820184905260c0820183905260e082018590526006805460018101825593528151805192936008027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926124f99284920190612d46565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b60065463ffffffff83161061258c5760405162461bcd60e51b815260040161067a9061321a565b60005b8151811015612680576125bf83338484815181106125af576125af61343a565b602002602001015160ff16611c7d565b61260b5760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161067a565b63ffffffff83166000908152600760209081526040808320338452909152902054825160ff909116908390839081106126465761264661343a565b602002602001015160ff161061266e5760405162461bcd60e51b815260040161067a9061323c565b80612678816133e9565b91505061258f565b5063ffffffff821660009081526007602090815260408083203380855292529091206126ab8461081a565b600060068563ffffffff16815481106126c6576126c661343a565b906000526020600020906008020190506000806000808060005b89518110156128105760008860010160008c84815181106127035761270361343a565b602002602001015160ff1660ff1681526020019081526020016000209050806000015492508060010154670de0b6b3a76400008960060154836000015461274a91906132f1565b61275491906132cf565b61275e9190613310565b935061276a8488613292565b96506305f5e1006127988d8c8e86815181106127885761278861343a565b602002602001015160ff166106f2565b6127a290856132f1565b6127ac91906132cf565b6127b69087613292565b95506127c28386613292565b94508381600101546127d49190613292565b600182015580546127e6908490613310565b815560038101546127f8908490613292565b60039091015580612808816133e9565b9150506126e0565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612843908b90899060040161319a565b602060405180830381600087803b15801561285d57600080fd5b505af1158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190612e19565b5060018601546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926128d1923092909116908990600401613176565b602060405180830381600087803b1580156128eb57600080fd5b505af11580156128ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129239190612e19565b5060018601546001600160a01b03166323b872dd308a6129438888613310565b6040518463ffffffff1660e01b815260040161296193929190613176565b602060405180830381600087803b15801561297b57600080fd5b505af115801561298f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b39190612e19565b508286600201546129c49190613310565b6002870155865460009081906129df9060019060ff16613327565b90505b885460ff908116908316108015612a0c575060ff8216600090815260018a01602052604090205415155b15612a235781612a1b81613404565b9250506129e2565b60ff8116600090815260018a016020526040902054612a5b5760ff8116612a4957612a5b565b80612a5381613391565b915050612a23565b8060ff168260ff1610612a6d57612ace565b60ff80821660009081526001808c01602052604080832093861683529091208254815582820154918101919091556002808301549082015560039182015491015581612ab881613404565b9250508080612ac690613391565b9150506129e2565b60ff8116600090815260018a01602052604090205415612af857612af38160016132aa565b612afb565b60005b895460ff191660ff91909116179098555050505050505050505050565b600081604001518260a00151670de0b6b3a76400008460600151612b3c91906132f1565b612b4691906132cf565b61122391906132cf565b60006108138383613310565b606081612b805750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612baa5780612b94816133e9565b9150612ba39050600a836132cf565b9150612b84565b60008167ffffffffffffffff811115612bc557612bc5613450565b6040519080825280601f01601f191660200182016040528015612bef576020820181803683370190505b509050815b8515612c7c57612c05600182613310565b90506000612c14600a886132cf565b612c1f90600a6132f1565b612c299088613310565b612c349060306132aa565b905060008160f81b905080848481518110612c5157612c5161343a565b60200101906001600160f81b031916908160001a905350612c73600a896132cf565b97505050612bf4565b50949350505050565b6000612c95826080015142101590565b801561122357508160a001518260800151612cb09190613292565b42111592915050565b828054828255906000526020600020908101928215612cf4579160200282015b82811115612cf4578251825591602001919060010190612cd9565b50612d00929150612db9565b5090565b828054828255906000526020600020908101928215612cf4579160200282015b82811115612cf4578251829062ffffff16905591602001919060010190612d24565b828054612d52906133ae565b90600052602060002090601f016020900481019282612d745760008555612cf4565b82601f10612d8d57805160ff1916838001178555612cf4565b82800160010185558215612cf45791820182811115612cf4578251825591602001919060010190612cd9565b5b80821115612d005760008155600101612dba565b80356001600160a01b0381168114612de557600080fd5b919050565b803563ffffffff81168114612de557600080fd5b600060208284031215612e1057600080fd5b61081382612dce565b600060208284031215612e2b57600080fd5b8151801515811461081357600080fd5b600080600080600060a08688031215612e5357600080fd5b853567ffffffffffffffff80821115612e6b57600080fd5b818801915088601f830112612e7f57600080fd5b8135602082821115612e9357612e93613450565b612ea5601f8301601f19168201613261565b92508183528a81838601011115612ebb57600080fd5b81818501828501376000818385010152829850612ed9818b01612dce565b989b989a5050505060408701359660608101359660809091013595509350505050565b600060208284031215612f0e57600080fd5b5035919050565b600060208284031215612f2757600080fd5b61081382612dea565b60008060408385031215612f4357600080fd5b612f4c83612dea565b9150612f5a60208401612dce565b90509250929050565b600080600060608486031215612f7857600080fd5b612f8184612dea565b9250612f8f60208501612dce565b9150612f9d60408501612dea565b90509250925092565b60008060408385031215612fb957600080fd5b612fc283612dea565b915060208084013567ffffffffffffffff80821115612fe057600080fd5b818601915086601f830112612ff457600080fd5b81358181111561300657613006613450565b8060051b9150613017848301613261565b8181528481019084860184860187018b101561303257600080fd5b600095508594505b8385101561306657803560ff81168114613052578687fd5b83526001949094019391860191860161303a565b508096505050505050509250929050565b6000806040838503121561308a57600080fd5b61309383612dea565b946020939093013593505050565b600080604083850312156130b457600080fd5b6130bd83612dea565b9150612f5a60208401612dea565b6000806000606084860312156130e057600080fd5b6130e984612dea565b92506130f760208501612dea565b9150604084013590509250925092565b6000815180845261311f81602086016020860161334a565b601f01601f19169290920160200192915050565b6000845161314581846020890161334a565b84519083019061315981836020890161334a565b845191019061316c81836020880161334a565b0195945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020815260006108136020830184613107565b60006101008083526131da8184018c613107565b6001600160a01b039a909a166020840152505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b6020808252600b908201526a0eee4dedcce40d2dcc8caf60ab1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561328a5761328a613450565b604052919050565b600082198211156132a5576132a5613424565b500190565b600060ff821660ff84168060ff038211156132c7576132c7613424565b019392505050565b6000826132ec57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561330b5761330b613424565b500290565b60008282101561332257613322613424565b500390565b600060ff821660ff84168082101561334157613341613424565b90039392505050565b60005b8381101561336557818101518382015260200161334d565b83811115613374576000848401525b50505050565b60008161338957613389613424565b506000190190565b600060ff8216806133a4576133a4613424565b6000190192915050565b600181811c908216806133c257607f821691505b602082108114156133e357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156133fd576133fd613424565b5060010190565b600060ff821660ff81141561341b5761341b613424565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106101cc5760003560e01c8063a494a0c011610102578063b4ac686011610095578063d63c564b11610064578063d63c564b14610599578063e17f8d55146105b9578063eed873c2146105cf578063f78d4897146105ef57600080fd5b8063b4ac686014610524578063c3e691b514610539578063cedb682a14610559578063d4491a061461057957600080fd5b8063ac4afa38116100d1578063ac4afa3814610490578063aeeacef1146104c4578063b0cdad26146104e4578063b2a170491461050457600080fd5b8063a494a0c014610410578063a6503e7614610430578063a71f06f014610450578063aaf103981461047057600080fd5b80633da3a82d1161017a5780635959cff1116101495780635959cff1146103af5780638129fc1c146103cf5780639853e945146103e45780639c15d1a2146103fa57600080fd5b80633da3a82d146103225780633f07f552146103425780634b7ea33d146103625780635931583d1461038f57600080fd5b80630584aecf146101d8578063144fa6d71461021557806329efdc41146102375780632f3ef5da14610265578063303d50c2146102855780633530f80a146102a55780633af32abf146102f257600080fd5b366101d357005b600080fd5b3480156101e457600080fd5b50600a546101f8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b50610235610230366004612dfe565b61060f565b005b34801561024357600080fd5b50610257610252366004612f63565b6106f2565b60405190815260200161020c565b34801561027157600080fd5b50610235610280366004612f15565b61081a565b34801561029157600080fd5b506102576102a0366004612f63565b61099d565b3480156102b157600080fd5b506102e06102c0366004612f30565b600760209081526000928352604080842090915290825290205460ff1681565b60405160ff909116815260200161020c565b3480156102fe57600080fd5b5061031261030d366004612dfe565b610c49565b604051901515815260200161020c565b34801561032e57600080fd5b5061025761033d366004612efc565b610c67565b34801561034e57600080fd5b5061023561035d3660046130cb565b610c88565b34801561036e57600080fd5b5061038261037d366004612f30565b611104565b60405161020c91906131b3565b34801561039b57600080fd5b506102576103aa366004612efc565b611229565b3480156103bb57600080fd5b506102356103ca3660046130a1565b611239565b3480156103db57600080fd5b5061023561124b565b3480156103f057600080fd5b50610257600b5481565b34801561040657600080fd5b5061025760025481565b34801561041c57600080fd5b5061038261042b366004612f30565b6113b4565b34801561043c57600080fd5b5061025761044b366004612f30565b6114b1565b34801561045c57600080fd5b5061023561046b3660046130a1565b61154b565b34801561047c57600080fd5b5061023561048b366004613077565b611825565b34801561049c57600080fd5b506104b06104ab366004612efc565b611b91565b60405161020c9897969594939291906131c6565b3480156104d057600080fd5b506103126104df366004612f63565b611c7d565b3480156104f057600080fd5b506103826104ff366004612f30565b611d27565b34801561051057600080fd5b5061025761051f366004612f15565b611e43565b34801561053057600080fd5b50600654610257565b34801561054557600080fd5b50610235610554366004612f15565b611fe6565b34801561056557600080fd5b506009546101f8906001600160a01b031681565b34801561058557600080fd5b506005546101f8906001600160a01b031681565b3480156105a557600080fd5b506103826105b4366004612f30565b6121ea565b3480156105c557600080fd5b5061025760015481565b3480156105db57600080fd5b506102356105ea366004612e3b565b612317565b3480156105fb57600080fd5b5061023561060a366004612fa6565b612565565b6009546001600160a01b03163314806106325750600a546001600160a01b031633145b80610641575061064133610c49565b6106835760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b60448201526064015b60405180910390fd5b6001600160a01b0381166106d05760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161067a565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60065460009063ffffffff85161061071c5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff861684526001908101835281842082516080810184528154815291810154938201939093526002830154918101829052600390920154606083015290919061078f9042613310565b6004549091506000906107a490600190613310565b90505b801561080b5781600382815481106107c1576107c161343a565b9060005260206000200154116107f957600481815481106107e4576107e461343a565b90600052602060002001549350505050610813565b806108038161337a565b9150506107a7565b506000925050505b9392505050565b600060068263ffffffff16815481106108355761083561343a565b9060005260206000209060080201905080600701544211610854575050565b60028101548061086957504260079091015550565b6000610962836040518061010001604052908160008201805461088b906133ae565b80601f01602080910402602001604051908101604052809291908181526020018280546108b7906133ae565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612b18565b610970846007015442612b50565b61097a91906132f1565b905080836006015461098c9190613292565b600684015550504260079091015550565b60065460009063ffffffff8516106109c75760405162461bcd60e51b815260040161067a9061321a565b600060068563ffffffff16815481106109e2576109e261343a565b906000526020600020906008020160405180610100016040529081600082018054610a0c906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a38906133ae565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000600760008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360c0015190506000846040015190508460e0015142118015610bb757508015155b15610c0c576000610bc786612b18565b610bd58760e0015142612b50565b610bdf91906132f1565b905081610bf4670de0b6b3a7640000836132f1565b610bfe91906132cf565b610c089084613292565b9250505b60208301518351670de0b6b3a764000090610c289085906132f1565b610c3291906132cf565b610c3c9190613310565b9998505050505050505050565b6001600160a01b031660009081526008602052604090205460ff1690565b60048181548110610c7757600080fd5b600091825260209091200154905081565b60065463ffffffff841610610caf5760405162461bcd60e51b815260040161067a9061321a565b60008111610cf05760405162461bcd60e51b815260206004820152600e60248201526d706c6561736520756e7374616b6560901b604482015260640161067a565b610cfb833384611c7d565b610d475760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161067a565b63ffffffff808416600090815260076020908152604080832033808552925290912080549192909160ff1690851610610d925760405162461bcd60e51b815260040161067a9061323c565b60ff84166000908152600182016020526040902054831115610de75760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e7420746f6f2062696760901b604482015260640161067a565b610df08561081a565b600060068663ffffffff1681548110610e0b57610e0b61343a565b9060005260206000209060080201905060008260010160008760ff1660ff168152602001908152602001600020905060008160010154670de0b6b3a764000084600601548460000154610e5e91906132f1565b610e6891906132cf565b610e729190613310565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610ea5908890859060040161319a565b602060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190612e19565b50808260010154610f089190613292565b60018301556000610f1a89878a6106f2565b90508015610fcc576305f5e100610f3188836132f1565b610f3b91906132cf565b60018501546005546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92610f789230929116908690600401613176565b602060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190612e19565b505b60018401546001600160a01b03166323b872dd3033610feb858c613310565b6040518463ffffffff1660e01b815260040161100993929190613176565b602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612e19565b5086846002015461106c9190613310565b6002850155825461107e908890613310565b83556003830154611090908890613292565b600384015582546110f95784546110ac9060019060ff16613327565b855460ff191660ff9182169081178755600090815260018088016020526040808320938c168352909120825481558282015491810191909155600280830154908201556003918201549101555b505050505050505050565b60065460609063ffffffff84161061112e5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611176575050604080516020810190915260008152611223565b600080805260018201602052604090206003015461119390612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b8152506111ea8460010160008560ff1660ff16815260200190815260200160002060030154612b5c565b6040516020016111fc93929190613133565b6040516020818303038152906040529250808061121890613404565b915050611198565b50505b92915050565b60038181548110610c7757600080fd5b61124482338361099d565b600b555050565b600054610100900460ff166112665760005460ff161561126a565b303b155b6112cd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161067a565b600054610100900460ff161580156112ef576000805461ffff19166101011790555b600a80546001600160a01b0319163317905560646001556201518060028190556040805160808101825260008082526020820152919082019061133390601e6132f1565b815260200161134662015180603c6132f1565b9052611356906003906004612cb9565b5060408051608081018252624c4b408082526020820152622625a0918101919091526000606082015261138c9060049081612d04565b50600580546001600160a01b0319163317905580156113b1576000805461ff00191690555b50565b60065460609063ffffffff8416106113de5760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611426575050604080516020810190915260008152611223565b61143a6114358585600061099d565b612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b81525061147b61143588888660ff1661099d565b60405160200161148d93929190613133565b604051602081830303815290604052925080806114a990613404565b91505061143f565b60065460009063ffffffff8416106114db5760405162461bcd60e51b815260040161067a9061321a565b5063ffffffff821660009081526007602090815260408083206001600160a01b0385168452909152812060015b815460ff90811690821610156112205760ff811660009081526001830160205260409020546115379084613292565b92508061154381613404565b915050611508565b60065463ffffffff8316106115725760405162461bcd60e51b815260040161067a9061321a565b600060068363ffffffff168154811061158d5761158d61343a565b9060005260206000209060080201905061169981604051806101000160405290816000820180546115bd906133ae565b80601f01602080910402602001604051908101604052809291908181526020018280546115e9906133ae565b80156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526080015142101590565b6116e05760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b604482015260640161067a565b63ffffffff808416600090815260076020908152604080832033808552925290912080549192909160ff169085161061172b5760405162461bcd60e51b815260040161067a9061323c565b6117348561081a565b60ff841660009081526001808301602052604082209081015460068601548254929392670de0b6b3a76400009161176a916132f1565b61177491906132cf565b61177e9190613310565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906117b1908790859060040161319a565b602060405180830381600087803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190612e19565b508082600101546118149190613292565b826001018190555050505050505050565b60065463ffffffff83161061184c5760405162461bcd60e51b815260040161067a9061321a565b6000811161188b5760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b604482015260640161067a565b63ffffffff82166000908152600760209081526040808320338085529252909120600154815460ff16106119115760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b606482015260840161067a565b600060068563ffffffff168154811061192c5761192c61343a565b90600052602060002090600802019050611a33816040518061010001604052908160008201805461195c906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611988906133ae565b80156119d55780601f106119aa576101008083540402835291602001916119d5565b820191906000526020600020905b8154815290600101906020018083116119b857829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152612c85565b611a6f5760405162461bcd60e51b815260206004820152600d60248201526c706f6f6c20696e61637469766560981b604482015260640161067a565b611a788561081a565b60018101546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611aae90339030908990600401613176565b602060405180830381600087803b158015611ac857600080fd5b505af1158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b009190612e19565b50838160020154611b119190613292565b60028083019190915560408051608081018252868152600060208083018281524284860190815260608501848152895460ff90811686526001808c0190955296909420945185559051848301555194830194909455516003909101558354611b7b929116906132aa565b825460ff191660ff919091161790915550505050565b60068181548110611ba157600080fd5b9060005260206000209060080201600091509050806000018054611bc4906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf0906133ae565b8015611c3d5780601f10611c1257610100808354040283529160200191611c3d565b820191906000526020600020905b815481529060010190602001808311611c2057829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496976001600160a01b03909516969395509193909288565b60065460009063ffffffff851610611ca75760405162461bcd60e51b815260040161067a9061321a565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff8616845260019081018352928190208151608081018352815481529381015492840192909252600280830154918401829052600390920154606084015290544291611d1d9190613292565b1095945050505050565b60065460609063ffffffff841610611d515760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611d99575050604080516020810190915260008152611223565b6000808052600182016020526040902060020154611db690612b5c565b915060015b815460ff90811690821610156112205782604051806040016040528060018152602001602360f81b815250611e0d8460010160008560ff1660ff16815260200190815260200160002060020154612b5c565b604051602001611e1f93929190613133565b60405160208183030381529060405292508080611e3b90613404565b915050611dbb565b60065460009063ffffffff831610611e6d5760405162461bcd60e51b815260040161067a9061321a565b600060068363ffffffff1681548110611e8857611e8861343a565b906000526020600020906008020160405180610100016040529081600082018054611eb2906133ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611ede906133ae565b8015611f2b5780601f10611f0057610100808354040283529160200191611f2b565b820191906000526020600020905b815481529060010190602001808311611f0e57829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905080604001518160a00151670de0b6b3a76400006301e133808460600151611fc891906132f1565b611fd291906132f1565b611fdc91906132cf565b61081391906132cf565b60065463ffffffff82161061200d5760405162461bcd60e51b815260040161067a9061321a565b600060068263ffffffff16815481106120285761202861343a565b9060005260206000209060080201905061205881604051806101000160405290816000820180546115bd906133ae565b61209f5760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b604482015260640161067a565b63ffffffff821660009081526007602090815260408083203380855292529091206120c98461081a565b600080805b835460ff908116908216101561215c5760ff81166000908152600180860160205260409091209081015460068801548254670de0b6b3a764000091612112916132f1565b61211c91906132cf565b6121269190613310565b92506121328385613292565b93508281600101546121449190613292565b6001909101558061215481613404565b9150506120ce565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061218f908790869060040161319a565b602060405180830381600087803b1580156121a957600080fd5b505af11580156121bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e19190612e19565b50505050505050565b60065460609063ffffffff8416106122145760405162461bcd60e51b815260040161067a9061321a565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff1661225c575050604080516020810190915260008152611223565b60008080526001820160205260409020600381015490546122809161143591613292565b915060015b815460ff90811690821610156112205760ff811660009081526001830160205260408120600381015490546122ba9190613292565b905083604051806040016040528060018152602001602360f81b8152506122e083612b5c565b6040516020016122f293929190613133565b604051602081830303815290604052935050808061230f90613404565b915050612285565b6009546001600160a01b031633148061233a5750600a546001600160a01b031633145b80612349575061234933610c49565b6123865760405162461bcd60e51b815260206004820152600e60248201526d4163636573732044656e6965642160901b604482015260640161067a565b428210156123e15760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b606482015260840161067a565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061241590339030908890600401613176565b602060405180830381600087803b15801561242f57600080fd5b505af1158015612443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124679190612e19565b5060408051610100810182528681526001600160a01b0386166020808301919091526000928201839052606082018690526080820185905260a0820184905260c0820183905260e082018590526006805460018101825593528151805192936008027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926124f99284920190612d46565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b60065463ffffffff83161061258c5760405162461bcd60e51b815260040161067a9061321a565b60005b8151811015612680576125bf83338484815181106125af576125af61343a565b602002602001015160ff16611c7d565b61260b5760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161067a565b63ffffffff83166000908152600760209081526040808320338452909152902054825160ff909116908390839081106126465761264661343a565b602002602001015160ff161061266e5760405162461bcd60e51b815260040161067a9061323c565b80612678816133e9565b91505061258f565b5063ffffffff821660009081526007602090815260408083203380855292529091206126ab8461081a565b600060068563ffffffff16815481106126c6576126c661343a565b906000526020600020906008020190506000806000808060005b89518110156128105760008860010160008c84815181106127035761270361343a565b602002602001015160ff1660ff1681526020019081526020016000209050806000015492508060010154670de0b6b3a76400008960060154836000015461274a91906132f1565b61275491906132cf565b61275e9190613310565b935061276a8488613292565b96506305f5e1006127988d8c8e86815181106127885761278861343a565b602002602001015160ff166106f2565b6127a290856132f1565b6127ac91906132cf565b6127b69087613292565b95506127c28386613292565b94508381600101546127d49190613292565b600182015580546127e6908490613310565b815560038101546127f8908490613292565b60039091015580612808816133e9565b9150506126e0565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612843908b90899060040161319a565b602060405180830381600087803b15801561285d57600080fd5b505af1158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190612e19565b5060018601546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926128d1923092909116908990600401613176565b602060405180830381600087803b1580156128eb57600080fd5b505af11580156128ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129239190612e19565b5060018601546001600160a01b03166323b872dd308a6129438888613310565b6040518463ffffffff1660e01b815260040161296193929190613176565b602060405180830381600087803b15801561297b57600080fd5b505af115801561298f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b39190612e19565b508286600201546129c49190613310565b6002870155865460009081906129df9060019060ff16613327565b90505b885460ff908116908316108015612a0c575060ff8216600090815260018a01602052604090205415155b15612a235781612a1b81613404565b9250506129e2565b60ff8116600090815260018a016020526040902054612a5b5760ff8116612a4957612a5b565b80612a5381613391565b915050612a23565b8060ff168260ff1610612a6d57612ace565b60ff80821660009081526001808c01602052604080832093861683529091208254815582820154918101919091556002808301549082015560039182015491015581612ab881613404565b9250508080612ac690613391565b9150506129e2565b60ff8116600090815260018a01602052604090205415612af857612af38160016132aa565b612afb565b60005b895460ff191660ff91909116179098555050505050505050505050565b600081604001518260a00151670de0b6b3a76400008460600151612b3c91906132f1565b612b4691906132cf565b61122391906132cf565b60006108138383613310565b606081612b805750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612baa5780612b94816133e9565b9150612ba39050600a836132cf565b9150612b84565b60008167ffffffffffffffff811115612bc557612bc5613450565b6040519080825280601f01601f191660200182016040528015612bef576020820181803683370190505b509050815b8515612c7c57612c05600182613310565b90506000612c14600a886132cf565b612c1f90600a6132f1565b612c299088613310565b612c349060306132aa565b905060008160f81b905080848481518110612c5157612c5161343a565b60200101906001600160f81b031916908160001a905350612c73600a896132cf565b97505050612bf4565b50949350505050565b6000612c95826080015142101590565b801561122357508160a001518260800151612cb09190613292565b42111592915050565b828054828255906000526020600020908101928215612cf4579160200282015b82811115612cf4578251825591602001919060010190612cd9565b50612d00929150612db9565b5090565b828054828255906000526020600020908101928215612cf4579160200282015b82811115612cf4578251829062ffffff16905591602001919060010190612d24565b828054612d52906133ae565b90600052602060002090601f016020900481019282612d745760008555612cf4565b82601f10612d8d57805160ff1916838001178555612cf4565b82800160010185558215612cf45791820182811115612cf4578251825591602001919060010190612cd9565b5b80821115612d005760008155600101612dba565b80356001600160a01b0381168114612de557600080fd5b919050565b803563ffffffff81168114612de557600080fd5b600060208284031215612e1057600080fd5b61081382612dce565b600060208284031215612e2b57600080fd5b8151801515811461081357600080fd5b600080600080600060a08688031215612e5357600080fd5b853567ffffffffffffffff80821115612e6b57600080fd5b818801915088601f830112612e7f57600080fd5b8135602082821115612e9357612e93613450565b612ea5601f8301601f19168201613261565b92508183528a81838601011115612ebb57600080fd5b81818501828501376000818385010152829850612ed9818b01612dce565b989b989a5050505060408701359660608101359660809091013595509350505050565b600060208284031215612f0e57600080fd5b5035919050565b600060208284031215612f2757600080fd5b61081382612dea565b60008060408385031215612f4357600080fd5b612f4c83612dea565b9150612f5a60208401612dce565b90509250929050565b600080600060608486031215612f7857600080fd5b612f8184612dea565b9250612f8f60208501612dce565b9150612f9d60408501612dea565b90509250925092565b60008060408385031215612fb957600080fd5b612fc283612dea565b915060208084013567ffffffffffffffff80821115612fe057600080fd5b818601915086601f830112612ff457600080fd5b81358181111561300657613006613450565b8060051b9150613017848301613261565b8181528481019084860184860187018b101561303257600080fd5b600095508594505b8385101561306657803560ff81168114613052578687fd5b83526001949094019391860191860161303a565b508096505050505050509250929050565b6000806040838503121561308a57600080fd5b61309383612dea565b946020939093013593505050565b600080604083850312156130b457600080fd5b6130bd83612dea565b9150612f5a60208401612dea565b6000806000606084860312156130e057600080fd5b6130e984612dea565b92506130f760208501612dea565b9150604084013590509250925092565b6000815180845261311f81602086016020860161334a565b601f01601f19169290920160200192915050565b6000845161314581846020890161334a565b84519083019061315981836020890161334a565b845191019061316c81836020880161334a565b0195945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020815260006108136020830184613107565b60006101008083526131da8184018c613107565b6001600160a01b039a909a166020840152505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b6020808252600b908201526a0eee4dedcce40d2dcc8caf60ab1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561328a5761328a613450565b604052919050565b600082198211156132a5576132a5613424565b500190565b600060ff821660ff84168060ff038211156132c7576132c7613424565b019392505050565b6000826132ec57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561330b5761330b613424565b500290565b60008282101561332257613322613424565b500390565b600060ff821660ff84168082101561334157613341613424565b90039392505050565b60005b8381101561336557818101518382015260200161334d565b83811115613374576000848401525b50505050565b60008161338957613389613424565b506000190190565b600060ff8216806133a4576133a4613424565b6000190192915050565b600181811c908216806133c257607f821691505b602082108114156133e357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156133fd576133fd613424565b5060010190565b600060ff821660ff81141561341b5761341b613424565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "params": {
          "_duration": "duration of pool",
          "_startTime": "timestamp to start pool",
          "_token": "address of LP token",
          "_totalDistribute": "total distribution in 0xB for this pool"
        }
      },
      "claimAllReward(uint32)": {
        "details": "update reward debt and send reward to user",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "claimReward(uint32,uint32)": {
        "details": "update reward debt of user and send new reward to user",
        "params": {
          "_index": "index of entity",
          "_poolId": "index of pool"
        }
      },
      "deposit(uint32,uint256)": {
        "details": "add new entity to control staking timestamp and taxes, never add token to older entities",
        "params": {
          "_amount": "amount to stake",
          "_poolId": "index of one pool"
        }
      },
      "getAPR(uint32)": {
        "params": {
          "_poolId": "index of pool"
        },
        "returns": {
          "apr": "current APR of an LP pool"
        }
      },
      "getPoolsCount()": {
        "returns": {
          "_0": "len number of pools"
        }
      },
      "getUserPendingReward(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserStakeAmounts(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrwn",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserTimestamps(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserUnstakedAmount(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "isWhitelisted(address)": {
        "params": {
          "addr": "address to query"
        },
        "returns": {
          "_0": "isWhitelisted true if `addr` is whitelisted"
        }
      },
      "pendingReward(uint32,address,uint32)": {
        "details": "the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool",
        "params": {
          "_index": "index of some entity",
          "_poolId": "id of pool",
          "addr": "address of user"
        },
        "returns": {
          "_0": "reward pending reward of user"
        }
      },
      "setToken(address)": {
        "params": {
          "_token": "address of 0xB"
        }
      },
      "taxOfEntity(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "tax amount of tax of an entity"
        }
      },
      "totalStakeOfUser(uint32,address)": {
        "params": {
          "_poolId": "index of pool",
          "addr": "address of the user"
        },
        "returns": {
          "totalStake": "total amount of LP staked in the user"
        }
      },
      "updatePool(uint32)": {
        "details": "update accumulated reward per share of a pool for sake of reward optimization",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "withdraw(uint32,uint32,uint256)": {
        "details": "reduce amount in pool and increase the withdrawn value",
        "params": {
          "_amount": "amount to withdraw",
          "_index": "index of entity",
          "_poolId": "index of pool"
        }
      },
      "withdrawMultiple(uint32,uint8[])": {
        "details": "same as withdraw, relocations of entities from an user is required",
        "params": {
          "_entityIndices": "indices of entities to withdraw",
          "_poolId": "index of pool"
        }
      },
      "withdrawable(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "withdrawable true if the entity is withdrawable"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "notice": "add new pool to stake LP"
      },
      "claimAllReward(uint32)": {
        "notice": "claim all reward from all entity of pool"
      },
      "claimReward(uint32,uint32)": {
        "notice": "claim reward from a pool, with a chosen entity"
      },
      "deposit(uint32,uint256)": {
        "notice": "deposit _amount of lp to the pool with index _poolId to start new entity of staking"
      },
      "getAPR(uint32)": {
        "notice": "calculate the current APR of one LP pool"
      },
      "getPoolsCount()": {
        "notice": "number of pools "
      },
      "getUserPendingReward(uint32,address)": {
        "notice": "get the pending rewards of every entity that user staked in one pool"
      },
      "getUserStakeAmounts(uint32,address)": {
        "notice": "get the stake amount of every entity that user staked in one pool"
      },
      "getUserTimestamps(uint32,address)": {
        "notice": "get the timestamps of every entity that user staked in one pool"
      },
      "getUserUnstakedAmount(uint32,address)": {
        "notice": "get the unstaked amount of every entity that user staked in one pool"
      },
      "isWhitelisted(address)": {
        "notice": "show if an address is whitelisted to create a pool"
      },
      "pendingReward(uint32,address,uint32)": {
        "notice": "calculate the unclaimed reward of a user in one entity"
      },
      "setToken(address)": {
        "notice": "set address of 0xB token"
      },
      "taxOfEntity(uint32,address,uint32)": {
        "notice": "return current tax of an entity"
      },
      "totalStakeOfUser(uint32,address)": {
        "notice": "calculate total stake of one address in a pool"
      },
      "updatePool(uint32)": {
        "notice": "update data in a lp staking pool"
      },
      "withdraw(uint32,uint32,uint256)": {
        "notice": "withdraw an amount from an entity. remove the entity if withdrawn everything"
      },
      "withdrawMultiple(uint32,uint8[])": {
        "notice": "withdraw an amount from an entity. remove the entity if withdrawn everything"
      },
      "withdrawable(uint32,address,uint32)": {
        "notice": "show if an entity is withdrawable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7469,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "lpStakingEntitiesLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7471,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTimeout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7474,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxLevel",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7477,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxPortion",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7479,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "earlyWithdrawTaxPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7483,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "pools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)7467_storage)dyn_storage"
      },
      {
        "astId": 7490,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))"
      },
      {
        "astId": 7494,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "whitelistAuthorities",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7496,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "token0xBAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7498,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "admin0xB",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7500,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "deb",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)7467_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7467_storage",
        "encoding": "dynamic_array",
        "label": "struct LPStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPStaking.UserLPStakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPStakeInfo)7449_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct LPStaking.UserLPStakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)"
      },
      "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LPStaking.LPStakeEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(LPStakeEntity)7441_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LPStakeEntity)7441_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.LPStakeEntity",
        "members": [
          {
            "astId": 7434,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7436,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7438,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7440,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "withdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)7467_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.PoolInfo",
        "members": [
          {
            "astId": 7451,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7454,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2517"
          },
          {
            "astId": 7456,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpAmountInPool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7458,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "totalDistribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7460,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7462,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7464,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "acc0xBPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7466,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserLPStakeInfo)7449_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.UserLPStakeInfo",
        "members": [
          {
            "astId": 7443,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7448,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "entities",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}