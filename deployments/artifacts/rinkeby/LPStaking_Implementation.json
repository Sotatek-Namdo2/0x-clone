{
  "address": "0x98D22d79C0A1A8BFDd055Dbc16d4bDc1EA0a45Da",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0xB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_indices",
          "type": "uint8[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawTaxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyActive",
          "type": "bool"
        }
      ],
      "name": "getJSONAllPoolsInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getJSONAllPoolsUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "getJSONSinglePoolInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getJSONSinglePoolUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserPendingReward",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ttl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserStakeAmounts",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ttl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserTimestamps",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserUnstakedAmount",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStakingEntitiesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmountInPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc0xBPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "setLPStakingEntitiesLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setWithdrawTaxPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "taxOfEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0xBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "totalStakeOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_entityIndices",
          "type": "uint8[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTaxPortion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf7e0df89cb802f043c8863099168e8395e2485e67f00ad80542596f3e32e4078",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x98D22d79C0A1A8BFDd055Dbc16d4bDc1EA0a45Da",
    "transactionIndex": 32,
    "gasUsed": "3626919",
    "logsBloom": "0x
    "blockHash": "0x29d7ff676724c7619b363885b2968548a04470487d27f6343a69d1fbb5eac216",
    "transactionHash": "0xf7e0df89cb802f043c8863099168e8395e2485e67f00ad80542596f3e32e4078",
    "logs": [],
    "blockNumber": 10644996,
    "cumulativeGasUsed": "7106043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "b1d916a8adb60cb6be0b06dcdbc24a9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0xB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_indices\",\"type\":\"uint8[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawTaxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyActive\",\"type\":\"bool\"}],\"name\":\"getJSONAllPoolsInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getJSONAllPoolsUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"getJSONSinglePoolInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getJSONSinglePoolUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPendingReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ttl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStakeAmounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ttl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserTimestamps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserUnstakedAmount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingEntitiesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc0xBPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLPStakingEntitiesLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithdrawTaxPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"taxOfEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0xBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakeOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_entityIndices\",\"type\":\"uint8[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTaxPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"params\":{\"_duration\":\"duration of pool\",\"_startTime\":\"timestamp to start pool\",\"_token\":\"address of LP token\",\"_totalDistribute\":\"total distribution in 0xB for this pool\"}},\"claimReward(uint32,uint8[])\":{\"details\":\"update reward debt and send reward to user\",\"params\":{\"_poolId\":\"index of pool\"}},\"deposit(uint32,uint256)\":{\"details\":\"add new entity to control staking timestamp and taxes, never add token to older entities. Set rewardDebt to amount of reward currently.\",\"params\":{\"_amount\":\"amount to stake\",\"_poolId\":\"index of one pool\"}},\"getAPR(uint32)\":{\"params\":{\"_poolId\":\"index of pool\"},\"returns\":{\"apr\":\"current APR of an LP pool\"}},\"getJSONAllPoolsInfo(bool)\":{\"params\":{\"_onlyActive\":\"decide if only return info of active pool\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONAllPoolsUser(bool,address)\":{\"params\":{\"_onlyActive\":\"decide if only return info of active pool\",\"_user\":\"address of an user\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONSinglePoolInfo(uint32)\":{\"params\":{\"_poolId\":\"index of pool\"},\"returns\":{\"res\":\"JSON\"}},\"getJSONSinglePoolUser(uint32,address)\":{\"params\":{\"_poolId\":\"index of pool\",\"_user\":\"address of an user\"},\"returns\":{\"res\":\"JSON\"}},\"getPoolsCount()\":{\"returns\":{\"_0\":\"len number of pools\"}},\"getUserPendingReward(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserStakeAmounts(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrawn\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserTimestamps(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"getUserUnstakedAmount(uint32,address)\":{\"details\":\"result is returned as a string, which entities is separated with SEPARATOR\",\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of user\"},\"returns\":{\"res\":\"result as a string\"}},\"isWhitelisted(address)\":{\"params\":{\"addr\":\"address to query\"},\"returns\":{\"_0\":\"isWhitelisted true if `addr` is whitelisted\"}},\"pendingReward(uint32,address,uint32)\":{\"details\":\"the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool\",\"params\":{\"_index\":\"index of some entity\",\"_poolId\":\"id of pool\",\"addr\":\"address of user\"},\"returns\":{\"_0\":\"reward pending reward of user\"}},\"setToken(address)\":{\"params\":{\"_token\":\"address of 0xB\"}},\"setWithdrawTaxPool(address)\":{\"params\":{\"_pool\":\"new tax pool\"}},\"setWithdrawTimeout(uint256)\":{\"params\":{\"_timeout\":\"new timeout\"}},\"taxOfEntity(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"tax amount of tax of an entity\"}},\"totalStakeOfUser(uint32,address)\":{\"params\":{\"_poolId\":\"index of pool\",\"addr\":\"address of the user\"},\"returns\":{\"totalStake\":\"total amount of LP staked in the user\"}},\"updatePool(uint32)\":{\"details\":\"update accumulated reward per share of a pool for sake of reward optimization\",\"params\":{\"_poolId\":\"index of pool\"}},\"withdraw(uint32,uint8[])\":{\"details\":\"same as withdraw, relocations of entities from an user is required\",\"params\":{\"_entityIndices\":\"indices of entities to withdraw\",\"_poolId\":\"index of pool\"}},\"withdrawable(uint32,address,uint32)\":{\"params\":{\"_index\":\"index of entity\",\"_poolId\":\"index of a pool\",\"addr\":\"address of an entity owner\"},\"returns\":{\"_0\":\"withdrawable true if the entity is withdrawable\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(string,address,uint256,uint256,uint256)\":{\"notice\":\"add new pool to stake LP\"},\"claimReward(uint32,uint8[])\":{\"notice\":\"claim all reward from all entity of pool\"},\"deposit(uint32,uint256)\":{\"notice\":\"deposit _amount of lp to the pool with index _poolId to start new entity of staking\"},\"getAPR(uint32)\":{\"notice\":\"calculate the current APR of one LP pool\"},\"getJSONAllPoolsInfo(bool)\":{\"notice\":\"return a JSON includes info of all pool, can choose to get only active pools or not\"},\"getJSONAllPoolsUser(bool,address)\":{\"notice\":\"return a JSON includes info of all pool that specific to an user, can choose to get only active pools or not\"},\"getJSONSinglePoolInfo(uint32)\":{\"notice\":\"return a JSON includes all info of a pool\"},\"getJSONSinglePoolUser(uint32,address)\":{\"notice\":\"return a JSON includes all info of an user in a pool\"},\"getPoolsCount()\":{\"notice\":\"number of pools \"},\"getUserPendingReward(uint32,address)\":{\"notice\":\"get the pending rewards of every entity that user staked in one pool\"},\"getUserStakeAmounts(uint32,address)\":{\"notice\":\"get the stake amount of every entity that user staked in one pool\"},\"getUserTimestamps(uint32,address)\":{\"notice\":\"get the timestamps of every entity that user staked in one pool\"},\"getUserUnstakedAmount(uint32,address)\":{\"notice\":\"get the unstaked amount of every entity that user staked in one pool\"},\"isWhitelisted(address)\":{\"notice\":\"show if an address is whitelisted to create a pool\"},\"pendingReward(uint32,address,uint32)\":{\"notice\":\"calculate the unclaimed reward of a user in one entity\"},\"setToken(address)\":{\"notice\":\"set address of 0xB token\"},\"setWithdrawTaxPool(address)\":{\"notice\":\"set new withdrawal tax pool\"},\"setWithdrawTimeout(uint256)\":{\"notice\":\"set new withdrawal timeout\"},\"taxOfEntity(uint32,address,uint32)\":{\"notice\":\"return current tax of an entity\"},\"totalStakeOfUser(uint32,address)\":{\"notice\":\"calculate total stake of one address in a pool\"},\"updatePool(uint32)\":{\"notice\":\"update data in a lp staking pool\"},\"withdraw(uint32,uint8[])\":{\"notice\":\"withdraw an amount from an entity. remove the entity if withdrawn everything\"},\"withdrawable(uint32,address,uint32)\":{\"notice\":\"show if an entity is withdrawable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/LPStaking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/dependencies/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\n\\ncontract LPStaking is Initializable {\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n    uint256 private constant DAY = 86400;\\n    uint256 private constant YEAR = 86400 * 365;\\n    uint256 private constant ONE_LP = 1e18;\\n    string private constant SEPARATOR = \\\"#\\\";\\n\\n    // ----- Structs -----\\n    struct LPStakeEntity {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 creationTime;\\n        uint256 withdrawn;\\n    }\\n\\n    struct UserLPStakeInfo {\\n        uint8 size;\\n        mapping(uint8 => LPStakeEntity) entities;\\n    }\\n\\n    struct PoolInfo {\\n        string name;\\n        IERC20 lpToken;\\n        uint256 lpAmountInPool;\\n        uint256 totalDistribute;\\n        uint256 startTime;\\n        uint256 duration;\\n        uint256 acc0xBPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    // ----- Contract Storage -----\\n    uint256 public lpStakingEntitiesLimit;\\n\\n    // ----- Limits on withdrawal -----\\n    uint256 public withdrawTimeout;\\n    uint256[] public withdrawTaxLevel;\\n    uint256[] public withdrawTaxPortion;\\n    address public earlyWithdrawTaxPool;\\n\\n    PoolInfo[] public pools;\\n    mapping(uint32 => mapping(address => UserLPStakeInfo)) public userInfo;\\n    mapping(address => bool) private whitelistAuthorities;\\n\\n    // ----- Router Addresses -----\\n    address public token0xBAddress;\\n    address public admin0xB;\\n\\n    // ----- Constructor -----\\n    function initialize() public initializer {\\n        admin0xB = msg.sender;\\n        lpStakingEntitiesLimit = 100;\\n        withdrawTimeout = 0;\\n        withdrawTaxLevel = [0, 0, DAY * 30, DAY * 60];\\n        withdrawTaxPortion = [5_000_000, 5_000_000, 2_500_000, 0];\\n        earlyWithdrawTaxPool = msg.sender;\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n\\n    // ----- Events -----\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token0xBAddress || msg.sender == admin0xB || isWhitelisted(msg.sender), \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External READ functions -----\\n    /**\\n        @notice return a JSON includes all info of a pool\\n        @param _poolId index of pool\\n        @return res JSON\\n    */\\n    /* solhint-disable */\\n    function getJSONSinglePoolInfo(uint32 _poolId) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong pool id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        res = string(abi.encodePacked('{\\\"index\\\":\\\"', uint2str(_poolId), '\\\",\\\"name\\\":\\\"'));\\n        res = string(abi.encodePacked(res, pool.name, '\\\",\\\"lpTokenAddress\\\":\\\"'));\\n        res = string(abi.encodePacked(res, toAsciiString(address(pool.lpToken)), '\\\",\\\"lpAmountInPool\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.lpAmountInPool), '\\\",\\\"totalDistribute\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.totalDistribute), '\\\",\\\"startTime\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.startTime), '\\\",\\\"duration\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.duration), '\\\",\\\"acc0xBPerShare\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.acc0xBPerShare), '\\\",\\\"lastRewardTimestamp\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(pool.lastRewardTimestamp), '\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes all info of an user in a pool\\n        @param _poolId index of pool\\n        @param _user address of an user\\n        @return res JSON\\n    */\\n    function getJSONSinglePoolUser(uint32 _poolId, address _user) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong pool id\\\");\\n        res = string(abi.encodePacked('{\\\"index\\\":\\\"', uint2str(_poolId), '\\\",\\\"stakedAmount\\\":\\\"'));\\n        res = string(abi.encodePacked(res, uint2str(totalStakeOfUser(_poolId, _user)), '\\\",\\\"pendingReward\\\":\\\"'));\\n        (, uint256 pendingRw) = getUserPendingReward(_poolId, _user);\\n        res = string(abi.encodePacked(res, uint2str(pendingRw), '\\\",\\\"minTimestamp\\\":\\\"'));\\n        (, uint256 minTstamp) = getUserTimestamps(_poolId, _user);\\n        res = string(abi.encodePacked(res, uint2str(minTstamp), '\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes info of all pool, can choose to get only active pools or not\\n        @param _onlyActive decide if only return info of active pool\\n        @return res JSON\\n    */\\n    function getJSONAllPoolsInfo(bool _onlyActive) public view returns (string memory res) {\\n        res = \\\"{\\\";\\n        for (uint32 _pi = 0; _pi < pools.length; _pi++) {\\n            if (!_onlyActive || isPoolActive(pools[_pi])) {\\n                res = string(abi.encodePacked(res, '\\\"', uint2str(_pi), '\\\":', getJSONSinglePoolInfo(_pi), \\\",\\\"));\\n            }\\n        }\\n        res = string(abi.encodePacked(res, '\\\"info\\\":\\\"\\\"}'));\\n    }\\n\\n    /**\\n        @notice return a JSON includes info of all pool that specific to an user,\\n        can choose to get only active pools or not\\n        @param _onlyActive decide if only return info of active pool\\n        @param _user address of an user\\n        @return res JSON\\n    */\\n    function getJSONAllPoolsUser(bool _onlyActive, address _user) public view returns (string memory res) {\\n        res = \\\"{\\\";\\n        for (uint32 _pi = 0; _pi < pools.length; _pi++) {\\n            if (!_onlyActive || isPoolActive(pools[_pi])) {\\n                res = string(abi.encodePacked(res, '\\\"', uint2str(_pi), '\\\":', getJSONSinglePoolUser(_pi, _user), \\\",\\\"));\\n            }\\n        }\\n        res = string(abi.encodePacked(res, '\\\"user\\\":\\\"\\\"}'));\\n    }\\n    /* solhint-enable */\\n\\n    /**\\n        @notice number of pools \\n        @return len number of pools\\n    */\\n    function getPoolsCount() public view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /**\\n        @notice calculate the current APR of one LP pool\\n        @param _poolId index of pool\\n        @return apr current APR of an LP pool\\n    */\\n    function getAPR(uint32 _poolId) public view returns (uint256 apr) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        apr = (pool.totalDistribute * YEAR * uint256(1e18)) / pool.duration / pool.lpAmountInPool;\\n    }\\n\\n    /**\\n        @notice calculate total stake of one address in a pool\\n        @param _poolId index of pool\\n        @param addr address of the user\\n        @return totalStake total amount of LP staked in the user\\n    */\\n    function totalStakeOfUser(uint32 _poolId, address addr) public view returns (uint256 totalStake) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        totalStake = 0;\\n        for (uint8 i = 1; i < user.size; i++) {\\n            totalStake += user.entities[i].amount;\\n        }\\n    }\\n\\n    /**\\n        @notice get the timestamps of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserTimestamps(uint32 _poolId, address addr) public view returns (string memory res, uint256 minTs) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        minTs = 2**256 - 1;\\n        if (user.size == 0) {\\n            return (\\\"\\\", minTs);\\n        }\\n        res = uint2str(user.entities[0].creationTime);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 creatime = user.entities[i].creationTime;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(creatime)));\\n            if (creatime < minTs) minTs = creatime;\\n        }\\n    }\\n\\n    /**\\n        @notice get the stake amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @dev for each entity, the amount staked at first is separated into 2 variable: amount + withdrawn\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserStakeAmounts(uint32 _poolId, address addr) public view returns (string memory res, uint256 ttl) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return (\\\"\\\", 0);\\n        }\\n        ttl = 0;\\n        res = uint2str(user.entities[0].amount + user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 amount = user.entities[i].amount + user.entities[i].withdrawn;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(amount)));\\n            ttl += amount;\\n        }\\n    }\\n\\n    /**\\n        @notice get the pending rewards of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserPendingReward(uint32 _poolId, address addr) public view returns (string memory res, uint256 ttl) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return (\\\"\\\", 0);\\n        }\\n        ttl = 0;\\n        res = uint2str(pendingReward(_poolId, addr, 0));\\n        for (uint8 i = 1; i < user.size; i++) {\\n            uint256 rw = pendingReward(_poolId, addr, i);\\n            ttl += rw;\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(rw)));\\n        }\\n    }\\n\\n    /**\\n        @notice get the unstaked amount of every entity that user staked in one pool\\n        @dev result is returned as a string, which entities is separated with SEPARATOR\\n        @param _poolId index of pool\\n        @param addr address of user\\n        @return res result as a string\\n    */\\n    function getUserUnstakedAmount(uint32 _poolId, address addr) public view returns (string memory res) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        if (user.size == 0) {\\n            return \\\"\\\";\\n        }\\n        res = uint2str(user.entities[0].withdrawn);\\n        for (uint8 i = 1; i < user.size; i++) {\\n            res = string(abi.encodePacked(res, SEPARATOR, uint2str(user.entities[i].withdrawn)));\\n        }\\n    }\\n\\n    /**\\n        @notice calculate the unclaimed reward of a user in one entity\\n        @dev the accumulated reward per share is considered, add with reward from latest pool update\\n        @dev using current state of pool (total lp in pool).\\n        @dev the formula is: (a * n) + delta(now - l) * c - rewardDebt\\n        @dev a: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last update\\n        @dev c: current reward per share per second, rewardDebt: reward already claimed by user in this pool\\n        @param _poolId id of pool\\n        @param addr address of user\\n        @param _index index of some entity\\n        @return reward pending reward of user\\n    */\\n    function pendingReward(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo memory pool = pools[_poolId];\\n        UserLPStakeInfo storage user = userInfo[_poolId][addr];\\n        LPStakeEntity memory entity = user.entities[uint8(_index)];\\n        uint256 acc0xBPerShare = pool.acc0xBPerShare;\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 reward = getDelta(pool.lastRewardTimestamp, block.timestamp) * getCurrentRewardPerLPPerSecond(pool);\\n            acc0xBPerShare = acc0xBPerShare + (reward * ONE_LP) / lpSupply;\\n        }\\n        return (entity.amount * acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n    }\\n\\n    /**\\n        @notice show if an address is whitelisted to create a pool\\n        @param addr address to query\\n        @return isWhitelisted true if `addr` is whitelisted\\n    */\\n    function isWhitelisted(address addr) public view returns (bool) {\\n        return whitelistAuthorities[addr];\\n    }\\n\\n    /**\\n        @notice show if an entity is withdrawable\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return withdrawable true if the entity is withdrawable\\n    */\\n    function withdrawable(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (bool) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        return (entity.creationTime + withdrawTimeout < block.timestamp);\\n    }\\n\\n    /**\\n        @notice return current tax of an entity\\n        @param _poolId index of a pool\\n        @param addr address of an entity owner\\n        @param _index index of entity\\n        @return tax amount of tax of an entity\\n    */\\n    function taxOfEntity(\\n        uint32 _poolId,\\n        address addr,\\n        uint32 _index\\n    ) public view returns (uint256) {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        LPStakeEntity memory entity = userInfo[_poolId][addr].entities[uint8(_index)];\\n        uint256 durationSinceStart = block.timestamp - entity.creationTime;\\n        for (uint256 i = withdrawTaxPortion.length - 1; i > 0; i--) {\\n            if (withdrawTaxLevel[i] <= durationSinceStart) {\\n                return withdrawTaxPortion[i];\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // ----- Admin WRITE functions -----\\n    /**\\n        @notice set address of 0xB token\\n        @param _token address of 0xB\\n    */\\n    function setToken(address _token) external onlyAuthorities {\\n        require(_token != address(0), \\\"NEW_TOKEN: zero addr\\\");\\n        token0xBAddress = _token;\\n    }\\n\\n    /**\\n        @notice set new withdrawal timeout\\n        @param _timeout new timeout\\n    */\\n    function setWithdrawTimeout(uint256 _timeout) external onlyAuthorities {\\n        withdrawTimeout = _timeout;\\n    }\\n\\n    /**\\n        @notice set new withdrawal tax pool\\n        @param _pool new tax pool\\n    */\\n    function setWithdrawTaxPool(address _pool) external onlyAuthorities {\\n        require(_pool != address(0), \\\"zero addr\\\");\\n        earlyWithdrawTaxPool = _pool;\\n    }\\n\\n    function setLPStakingEntitiesLimit(uint256 newLimit) external onlyAuthorities {\\n        require(newLimit > 0, \\\"limit must be positive\\\");\\n        lpStakingEntitiesLimit = newLimit;\\n    }\\n\\n    /**\\n        @notice add new pool to stake LP\\n        @param _token address of LP token\\n        @param _totalDistribute total distribution in 0xB for this pool\\n        @param _startTime timestamp to start pool\\n        @param _duration duration of pool\\n    */\\n    function addPool(\\n        string memory _name,\\n        address _token,\\n        uint256 _totalDistribute,\\n        uint256 _startTime,\\n        uint256 _duration\\n    ) external onlyAuthorities {\\n        require(_startTime >= block.timestamp, \\\"start time should be in the future\\\");\\n        IERC20(token0xBAddress).transferFrom(msg.sender, address(this), _totalDistribute);\\n        pools.push(\\n            PoolInfo({\\n                name: _name,\\n                lpToken: IERC20(_token),\\n                totalDistribute: _totalDistribute,\\n                startTime: _startTime,\\n                duration: _duration,\\n                acc0xBPerShare: 0,\\n                lpAmountInPool: 0,\\n                lastRewardTimestamp: _startTime\\n            })\\n        );\\n    }\\n\\n    // ----- Public WRITE functions -----\\n    /**\\n        @notice deposit _amount of lp to the pool with index _poolId to start new entity of staking\\n        @dev add new entity to control staking timestamp and taxes, never add token to older entities.\\n        Set rewardDebt to amount of reward currently.\\n        @param _poolId index of one pool\\n        @param _amount amount to stake\\n    */\\n    function deposit(uint32 _poolId, uint256 _amount) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        require(_amount > 0, \\\"please stake\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        require(user.size < lpStakingEntitiesLimit, \\\"too many entities, please withdraw some\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolActive(pool), \\\"pool inactive\\\");\\n        updatePool(_poolId);\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        pool.lpAmountInPool = pool.lpAmountInPool + _amount;\\n        user.entities[uint8(user.size)] = LPStakeEntity({\\n            amount: _amount,\\n            rewardDebt: _amount * pool.acc0xBPerShare / ONE_LP,\\n            creationTime: block.timestamp,\\n            withdrawn: 0\\n        });\\n        user.size = user.size + 1;\\n    }\\n\\n    /**\\n        @notice withdraw an amount from an entity. remove the entity if withdrawn everything\\n        @dev same as withdraw, relocations of entities from an user is required\\n        @param _poolId index of pool\\n        @param _entityIndices indices of entities to withdraw\\n    */\\n    function withdraw(uint32 _poolId, uint8[] memory _entityIndices) public {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        for (uint256 i = 0; i < _entityIndices.length; i++) {\\n            require(withdrawable(_poolId, msg.sender, _entityIndices[i]), \\\"entity in withdrawal timeout\\\");\\n            require(_entityIndices[i] < userInfo[_poolId][msg.sender].size, \\\"wrong index\\\");\\n        }\\n        address sender = msg.sender;\\n\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n        PoolInfo storage pool = pools[_poolId];\\n        uint256 totalPendingReward = 0;\\n        uint256 totalTax = 0;\\n        uint256 totalWithdrawn = 0;\\n        uint256 newReward;\\n        uint256 _amount;\\n\\n        for (uint256 i = 0; i < _entityIndices.length; i++) {\\n            LPStakeEntity storage entity = user.entities[_entityIndices[i]];\\n            _amount = entity.amount;\\n            newReward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalPendingReward += newReward;\\n            totalTax += (_amount * taxOfEntity(_poolId, sender, _entityIndices[i])) / HUNDRED_PERCENT;\\n            totalWithdrawn += _amount;\\n            entity.rewardDebt = entity.rewardDebt + newReward;\\n            entity.amount = entity.amount - _amount;\\n            entity.withdrawn = entity.withdrawn + _amount;\\n        }\\n\\n        // transfer reward\\n        IERC20(token0xBAddress).transfer(sender, totalPendingReward);\\n\\n        // transfer lp tokens\\n        pool.lpToken.transfer(earlyWithdrawTaxPool, totalTax);\\n        pool.lpToken.transfer(sender, totalWithdrawn - totalTax);\\n        pool.lpAmountInPool = pool.lpAmountInPool - totalWithdrawn;\\n\\n        // refactor user storage using O(n) two-pointer algorithm\\n        uint8 ptrLeft = 0;\\n        uint8 ptrRight = user.size - 1;\\n        LPStakeEntity memory _entity;\\n        while (true) {\\n            while (ptrLeft < user.size && user.entities[ptrLeft].amount > 0) {\\n                ptrLeft++;\\n            }\\n            while (user.entities[ptrRight].amount == 0) {\\n                if (ptrRight == 0) break;\\n                ptrRight--;\\n            }\\n            if (ptrLeft >= ptrRight) break;\\n            _entity = user.entities[ptrRight];\\n            user.entities[ptrLeft] = _entity;\\n            ptrLeft++;\\n            ptrRight--;\\n        }\\n        user.size = (user.entities[ptrRight].amount == 0) ? 0 : ptrRight + 1;\\n    }\\n\\n    function withdrawAll(uint32 _poolId) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][msg.sender];\\n        uint8[] memory indices = new uint8[](user.size);\\n        for (uint8 i = 0; i < user.size; i++) {\\n            require(withdrawable(_poolId, msg.sender, i), \\\"entity in withdrawal timeout\\\");\\n            indices[i] = i;\\n        }\\n        withdraw(_poolId, indices);\\n    }\\n\\n    /**\\n        @notice claim all reward from all entity of pool\\n        @dev update reward debt and send reward to user\\n        @param _poolId index of pool\\n    */\\n    function claimReward(uint32 _poolId, uint8[] memory _indices) public {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        PoolInfo storage pool = pools[_poolId];\\n        require(isPoolClaimable(pool), \\\"pool has not started yet\\\");\\n        address sender = msg.sender;\\n        UserLPStakeInfo storage user = userInfo[_poolId][sender];\\n        updatePool(_poolId);\\n\\n        uint256 totalReward = 0;\\n        uint256 reward;\\n\\n        for (uint8 i = 0; i < _indices.length; i++) {\\n            uint8 index = _indices[i];\\n            LPStakeEntity storage entity = user.entities[index];\\n            reward = (entity.amount * pool.acc0xBPerShare) / ONE_LP - entity.rewardDebt;\\n            totalReward += reward;\\n            entity.rewardDebt = entity.rewardDebt + reward;\\n        }\\n        IERC20(token0xBAddress).transfer(sender, totalReward);\\n    }\\n\\n    function claimAllReward(uint32 _poolId) external {\\n        require(_poolId < pools.length, \\\"wrong id\\\");\\n        UserLPStakeInfo storage user = userInfo[_poolId][msg.sender];\\n        uint8[] memory indices = new uint8[](user.size);\\n        for (uint8 i = 0; i < user.size; i++) {\\n            indices[i] = i;\\n        }\\n        claimReward(_poolId, indices);\\n    }\\n\\n    /**\\n        @notice update data in a lp staking pool\\n        @dev update accumulated reward per share of a pool for sake of reward optimization\\n        @param _poolId index of pool\\n    */\\n    function updatePool(uint32 _poolId) public {\\n        PoolInfo storage pool = pools[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpAmountInPool;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 rewardSinceLastChange = getDelta(pool.lastRewardTimestamp, block.timestamp) *\\n            getCurrentRewardPerLPPerSecond(pool);\\n        pool.acc0xBPerShare = pool.acc0xBPerShare + rewardSinceLastChange;\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    /// @notice get time different from _from to _to\\n    function getDelta(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to - _from;\\n    }\\n\\n    /// @notice get current reward per LP per second\\n    function getCurrentRewardPerLPPerSecond(PoolInfo memory _pi) internal pure returns (uint256) {\\n        return (_pi.totalDistribute * uint256(ONE_LP)) / _pi.duration / _pi.lpAmountInPool;\\n    }\\n\\n    /// @notice true if able to start claiming from pool\\n    function isPoolClaimable(PoolInfo memory _pi) internal view returns (bool) {\\n        return (block.timestamp >= _pi.startTime);\\n    }\\n\\n    /// @notice true if pool is active\\n    function isPoolActive(PoolInfo memory _pi) internal view returns (bool) {\\n        return (isPoolClaimable(_pi) && block.timestamp <= _pi.startTime + _pi.duration);\\n    }\\n\\n    /// @notice convert uint to string\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice convert address to human-readable ascii\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    /// @notice convert bytes1 to char\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\",\"keccak256\":\"0xb0dbcb43790834fe2fd781c9716982a72bc568b12296e0a318e601d096b27e6b\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506140a5806100206000396000f3fe6080604052600436106102135760003560e01c806399e9de0011610118578063b4ac6860116100a0578063d63c564b1161006f578063d63c564b14610678578063db7c641f14610698578063defd5307146106b8578063e17f8d55146106d8578063eed873c2146106ee57600080fd5b8063b4ac686014610603578063c3e691b514610618578063cedb682a14610638578063d4491a061461065857600080fd5b8063aaf10398116100e7578063aaf103981461054f578063ac4afa381461056f578063aeeacef1146105a3578063b0cdad26146105c3578063b2a17049146105e357600080fd5b806399e9de00146104cb5780639c15d1a2146104eb578063a494a0c014610501578063a6503e761461052f57600080fd5b806341c67a1d1161019b5780635643b4e31161016a5780635643b4e3146104365780635931583d1461045657806372941460146104765780638129fc1c14610496578063992b10f4146104ab57600080fd5b806341c67a1d146103a9578063480729df146103d65780634b7ea33d146103f65780634dc89ff81461041657600080fd5b80632f3ef5da116101e25780632f3ef5da146102cc578063303d50c2146102ec5780633530f80a1461030c5780633af32abf146103595780633da3a82d1461038957600080fd5b80630584aecf1461021f578063144fa6d71461025c578063190663991461027e57806329efdc411461029e57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b50600a5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b5061027c6102773660046134a1565b61070e565b005b34801561028a57600080fd5b5061027c6102993660046135ec565b6107d4565b3480156102aa57600080fd5b506102be6102b936600461363c565b610870565b604051908152602001610253565b3480156102d857600080fd5b5061027c6102e7366004613605565b610998565b3480156102f857600080fd5b506102be61030736600461363c565b610b1b565b34801561031857600080fd5b50610347610327366004613620565b600760209081526000928352604080842090915290825290205460ff1681565b60405160ff9091168152602001610253565b34801561036557600080fd5b506103796103743660046134a1565b610dc7565b6040519015158152602001610253565b34801561039557600080fd5b506102be6103a43660046135ec565b610de5565b3480156103b557600080fd5b506103c96103c4366004613620565b610e06565b6040516102539190613c58565b3480156103e257600080fd5b5061027c6103f13660046134a1565b610f33565b34801561040257600080fd5b506103c9610411366004613620565b610fe5565b34801561042257600080fd5b506103c9610431366004613605565b61110a565b34801561044257600080fd5b506103c96104513660046134bc565b611418565b34801561046257600080fd5b506102be6104713660046135ec565b6115e4565b34801561048257600080fd5b5061027c6104913660046135ec565b6115f4565b3480156104a257600080fd5b5061027c611647565b3480156104b757600080fd5b506103c96104c63660046134f6565b6117af565b3480156104d757600080fd5b5061027c6104e636600461367f565b61187c565b3480156104f757600080fd5b506102be60025481565b34801561050d57600080fd5b5061052161051c366004613620565b611b88565b604051610253929190613cbf565b34801561053b57600080fd5b506102be61054a366004613620565b611cac565b34801561055b57600080fd5b5061027c61056a366004613750565b611d46565b34801561057b57600080fd5b5061058f61058a3660046135ec565b61200a565b604051610253989796959493929190613c6b565b3480156105af57600080fd5b506103796105be36600461363c565b6120f6565b3480156105cf57600080fd5b506105216105de366004613620565b6121a0565b3480156105ef57600080fd5b506102be6105fe366004613605565b6122cd565b34801561060f57600080fd5b506006546102be565b34801561062457600080fd5b5061027c610633366004613605565b612470565b34801561064457600080fd5b5060095461023f906001600160a01b031681565b34801561066457600080fd5b5060055461023f906001600160a01b031681565b34801561068457600080fd5b50610521610693366004613620565b612560565b3480156106a457600080fd5b5061027c6106b3366004613605565b6126a5565b3480156106c457600080fd5b5061027c6106d336600461367f565b6127e6565b3480156106e457600080fd5b506102be60015481565b3480156106fa57600080fd5b5061027c61070936600461352b565b612e0d565b6009546001600160a01b03163314806107315750600a546001600160a01b031633145b80610740575061074033610dc7565b6107655760405162461bcd60e51b815260040161075c90613ce1565b60405180910390fd5b6001600160a01b0381166107b25760405162461bcd60e51b81526020600482015260146024820152732722abafaa27a5a2a71d103d32b9379030b2323960611b604482015260640161075c565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314806107f75750600a546001600160a01b031633145b80610806575061080633610dc7565b6108225760405162461bcd60e51b815260040161075c90613ce1565b6000811161086b5760405162461bcd60e51b81526020600482015260166024820152756c696d6974206d75737420626520706f73697469766560501b604482015260640161075c565b600155565b60065460009063ffffffff85161061089a5760405162461bcd60e51b815260040161075c90613d09565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff861684526001908101835281842082516080810184528154815291810154938201939093526002830154918101829052600390920154606083015290919061090d9042613efa565b60045490915060009061092290600190613efa565b90505b801561098957816003828154811061093f5761093f61405e565b90600052602060002001541161097757600481815481106109625761096261405e565b90600052602060002001549350505050610991565b8061098181613f64565b915050610925565b506000925050505b9392505050565b600060068263ffffffff16815481106109b3576109b361405e565b90600052602060002090600802019050806007015442116109d2575050565b6002810154806109e757504260079091015550565b6000610ae08360405180610100016040529081600082018054610a0990613f98565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3590613f98565b8015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015261303e565b610aee846007015442613076565b610af89190613eba565b9050808360060154610b0a9190613d5c565b600684015550504260079091015550565b60065460009063ffffffff851610610b455760405162461bcd60e51b815260040161075c90613d09565b600060068563ffffffff1681548110610b6057610b6061405e565b906000526020600020906008020160405180610100016040529081600082018054610b8a90613f98565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb690613f98565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000600760008763ffffffff1663ffffffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160008660ff1660ff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060008360c0015190506000846040015190508460e0015142118015610d3557508015155b15610d8a576000610d458661303e565b610d538760e0015142613076565b610d5d9190613eba565b905081610d72670de0b6b3a764000083613eba565b610d7c9190613d99565b610d869084613d5c565b9250505b60208301518351670de0b6b3a764000090610da6908590613eba565b610db09190613d99565b610dba9190613efa565b9998505050505050505050565b6001600160a01b031660009081526008602052604090205460ff1690565b60048181548110610df557600080fd5b600091825260209091200154905081565b60065460609063ffffffff841610610e505760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b604482015260640161075c565b610e5f8363ffffffff16613082565b604051602001610e6f9190613bf0565b604051602081830303815290604052905080610e93610e8e8585611cac565b613082565b604051602001610ea49291906138cb565b60405160208183030381529060405290506000610ec18484611b88565b91505081610ece82613082565b604051602001610edf929190613831565b60405160208183030381529060405291506000610efc85856121a0565b91505082610f0982613082565b604051602001610f1a929190613967565b6040516020818303038152906040529250505092915050565b6009546001600160a01b0316331480610f565750600a546001600160a01b031633145b80610f655750610f6533610dc7565b610f815760405162461bcd60e51b815260040161075c90613ce1565b6001600160a01b038116610fc35760405162461bcd60e51b81526020600482015260096024820152683d32b9379030b2323960b91b604482015260640161075c565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60065460609063ffffffff84161061100f5760405162461bcd60e51b815260040161075c90613d09565b63ffffffff831660009081526007602090815260408083206001600160a01b03861684529091529020805460ff16611057575050604080516020810190915260008152611104565b600080805260018201602052604090206003015461107490613082565b915060015b815460ff90811690821610156111015782604051806040016040528060018152602001602360f81b8152506110cb8460010160008560ff1660ff16815260200190815260200160002060030154613082565b6040516020016110dd939291906137a6565b604051602081830303815290604052925080806110f990614012565b915050611079565b50505b92915050565b60065460609063ffffffff8316106111545760405162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c81c1bdbdb081a59609a1b604482015260640161075c565b600060068363ffffffff168154811061116f5761116f61405e565b90600052602060002090600802016040518061010001604052908160008201805461119990613f98565b80601f01602080910402602001604051908101604052809291908181526020018280546111c590613f98565b80156112125780601f106111e757610100808354040283529160200191611212565b820191906000526020600020905b8154815290600101906020018083116111f557829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e090910152905061127c63ffffffff8416613082565b60405160200161128c9190613ba9565b60408051601f198184030181529082905282519093506112b19184919060200161387d565b6040516020818303038152906040529150816112d082602001516131ab565b6040516020016112e1929190613a48565b6040516020818303038152906040529150816113008260400151613082565b604051602001611311929190613918565b6040516020818303038152906040529150816113308260600151613082565b604051602001611341929190613a96565b6040516020818303038152906040529150816113608260800151613082565b6040516020016113719291906137e9565b6040516020818303038152906040529150816113908260a00151613082565b6040516020016113a19291906139fa565b6040516020818303038152906040529150816113c08260c00151613082565b6040516020016113d19291906139a3565b6040516020818303038152906040529150816113f08260e00151613082565b604051602001611401929190613967565b604051602081830303815290604052915050919050565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff821610156115bc57821580611568575061156860068263ffffffff16815481106114675761146761405e565b90600052602060002090600802016040518061010001604052908160008201805461149190613f98565b80601f01602080910402602001604051908101604052809291908181526020018280546114bd90613f98565b801561150a5780601f106114df5761010080835404028352916020019161150a565b820191906000526020600020905b8154815290600101906020018083116114ed57829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526132f2565b156115aa578161157d8263ffffffff16613082565b6115868361110a565b60405160200161159893929190613adf565b60405160208183030381529060405291505b806115b481613fee565b915050611433565b50806040516020016115ce9190613b4d565b6040516020818303038152906040529050919050565b60038181548110610df557600080fd5b6009546001600160a01b03163314806116175750600a546001600160a01b031633145b80611626575061162633610dc7565b6116425760405162461bcd60e51b815260040161075c90613ce1565b600255565b600054610100900460ff166116625760005460ff1615611666565b303b155b6116c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161075c565b600054610100900460ff161580156116eb576000805461ffff19166101011790555b600a80546001600160a01b03191633179055606460015560006002819055604080516080810182528281526020810192909252810161172e62015180601e613eba565b815260200161174162015180603c613eba565b9052611751906003906004613361565b5060408051608081018252624c4b408082526020820152622625a0918101919091526000606082015261178790600490816133ac565b50600580546001600160a01b0319163317905580156117ac576000805461ff00191690555b50565b6040805180820190915260018152607b60f81b602082015260005b60065463ffffffff82161015611853578315806117fe57506117fe60068263ffffffff16815481106114675761146761405e565b1561184157816118138263ffffffff16613082565b61181d8386610e06565b60405160200161182f93929190613adf565b60405160208183030381529060405291505b8061184b81613fee565b9150506117ca565b50806040516020016118659190613b7b565b604051602081830303815290604052905092915050565b60065463ffffffff8316106118a35760405162461bcd60e51b815260040161075c90613d09565b600060068363ffffffff16815481106118be576118be61405e565b906000526020600020906008020190506119ca81604051806101000160405290816000820180546118ee90613f98565b80601f016020809104026020016040519081016040528092919081815260200182805461191a90613f98565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e0909101526080015142101590565b611a115760405162461bcd60e51b81526020600482015260186024820152771c1bdbdb081a185cc81b9bdd081cdd185c9d1959081e595d60421b604482015260640161075c565b63ffffffff83166000908152600760209081526040808320338085529252909120611a3b85610998565b600080805b86518160ff161015611af9576000878260ff1681518110611a6357611a6361405e565b6020026020010151905060008560010160008360ff1660ff16815260200190815260200160002090508060010154670de0b6b3a764000089600601548360000154611aae9190613eba565b611ab89190613d99565b611ac29190613efa565b9350611ace8486613d5c565b9450838160010154611ae09190613d5c565b6001909101555080611af181614012565b915050611a40565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611b2c9087908690600401613c3f565b602060405180830381600087803b158015611b4657600080fd5b505af1158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e91906134d9565b5050505050505050565b60065460609060009063ffffffff851610611bb55760405162461bcd60e51b815260040161075c90613d09565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff16611c0157505060408051602081019091526000808252909150611ca5565b60009150611c14610e8e86866000610b1b565b925060015b815460ff9081169082161015611ca2576000611c3987878460ff16610b1b565b9050611c458185613d5c565b935084604051806040016040528060018152602001602360f81b815250611c6b83613082565b604051602001611c7d939291906137a6565b6040516020818303038152906040529450508080611c9a90614012565b915050611c19565b50505b9250929050565b60065460009063ffffffff841610611cd65760405162461bcd60e51b815260040161075c90613d09565b5063ffffffff821660009081526007602090815260408083206001600160a01b0385168452909152812060015b815460ff90811690821610156111015760ff81166000908152600183016020526040902054611d329084613d5c565b925080611d3e81614012565b915050611d03565b60065463ffffffff831610611d6d5760405162461bcd60e51b815260040161075c90613d09565b60008111611dac5760405162461bcd60e51b815260206004820152600c60248201526b706c65617365207374616b6560a01b604482015260640161075c565b63ffffffff82166000908152600760209081526040808320338085529252909120600154815460ff1610611e325760405162461bcd60e51b815260206004820152602760248201527f746f6f206d616e7920656e7469746965732c20706c6561736520776974686472604482015266617720736f6d6560c81b606482015260840161075c565b600060068563ffffffff1681548110611e4d57611e4d61405e565b90600052602060002090600802019050611e7d816040518061010001604052908160008201805461149190613f98565b611eb95760405162461bcd60e51b815260206004820152600d60248201526c706f6f6c20696e61637469766560981b604482015260640161075c565b611ec285610998565b60018101546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015611f1657600080fd5b505af1158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e91906134d9565b50838160020154611f5f9190613d5c565b81600201819055506040518060800160405280858152602001670de0b6b3a7640000836006015487611f919190613eba565b611f9b9190613d99565b81524260208083019190915260006040928301819052855460ff908116825260018088018452918490208551815592850151838301559284015160028301556060909301516003909101558354611ff492911690613d74565b825460ff191660ff919091161790915550505050565b6006818154811061201a57600080fd5b906000526020600020906008020160009150905080600001805461203d90613f98565b80601f016020809104026020016040519081016040528092919081815260200182805461206990613f98565b80156120b65780601f1061208b576101008083540402835291602001916120b6565b820191906000526020600020905b81548152906001019060200180831161209957829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496976001600160a01b03909516969395509193909288565b60065460009063ffffffff8516106121205760405162461bcd60e51b815260040161075c90613d09565b63ffffffff841660009081526007602090815260408083206001600160a01b0387168452825280832060ff86168452600190810183529281902081516080810183528154815293810154928401929092526002808301549184018290526003909201546060840152905442916121969190613d5c565b1095945050505050565b60065460609060009063ffffffff8516106121cd5760405162461bcd60e51b815260040161075c90613d09565b5063ffffffff831660009081526007602090815260408083206001600160a01b038616845290915290208054600019919060ff1661221c57506040805160208101909152600081529150611ca5565b600080805260018201602052604090206002015461223990613082565b925060015b815460ff9081169082161015611ca25760ff8116600090815260018084016020908152604092839020600201548351808501909452918352602360f81b9083015290859061228b83613082565b60405160200161229d939291906137a6565b6040516020818303038152906040529450838110156122ba578093505b50806122c581614012565b91505061223e565b60065460009063ffffffff8316106122f75760405162461bcd60e51b815260040161075c90613d09565b600060068363ffffffff16815481106123125761231261405e565b90600052602060002090600802016040518061010001604052908160008201805461233c90613f98565b80601f016020809104026020016040519081016040528092919081815260200182805461236890613f98565b80156123b55780601f1061238a576101008083540402835291602001916123b5565b820191906000526020600020905b81548152906001019060200180831161239857829003601f168201915b505050505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905080604001518160a00151670de0b6b3a76400006301e1338084606001516124529190613eba565b61245c9190613eba565b6124669190613d99565b6109919190613d99565b60065463ffffffff8216106124975760405162461bcd60e51b815260040161075c90613d09565b63ffffffff811660009081526007602090815260408083203384529091528120805490919060ff1667ffffffffffffffff8111156124d7576124d7614074565b604051908082528060200260200182016040528015612500578160200160208202803683370190505b50905060005b825460ff90811690821610156125505780828260ff168151811061252c5761252c61405e565b60ff909216602092830291909101909101528061254881614012565b915050612506565b5061255b838261187c565b505050565b60065460609060009063ffffffff85161061258d5760405162461bcd60e51b815260040161075c90613d09565b63ffffffff841660009081526007602090815260408083206001600160a01b03871684529091529020805460ff166125d957505060408051602081019091526000808252909150611ca5565b600080805260018201602052604081206003810154905491935061260191610e8e9190613d5c565b925060015b815460ff9081169082161015611ca25760ff8116600090815260018301602052604081206003810154905461263b9190613d5c565b905084604051806040016040528060018152602001602360f81b81525061266183613082565b604051602001612673939291906137a6565b60408051601f19818403018152919052945061268f8185613d5c565b935050808061269d90614012565b915050612606565b60065463ffffffff8216106126cc5760405162461bcd60e51b815260040161075c90613d09565b63ffffffff811660009081526007602090815260408083203384529091528120805490919060ff1667ffffffffffffffff81111561270c5761270c614074565b604051908082528060200260200182016040528015612735578160200160208202803683370190505b50905060005b825460ff90811690821610156127df5761275984338360ff166120f6565b6127a55760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161075c565b80828260ff16815181106127bb576127bb61405e565b60ff90921660209283029190910190910152806127d781614012565b91505061273b565b5061255b83825b60065463ffffffff83161061280d5760405162461bcd60e51b815260040161075c90613d09565b60005b815181101561291f5761284083338484815181106128305761283061405e565b602002602001015160ff166120f6565b61288c5760405162461bcd60e51b815260206004820152601c60248201527f656e7469747920696e207769746864726177616c2074696d656f757400000000604482015260640161075c565b63ffffffff83166000908152600760209081526040808320338452909152902054825160ff909116908390839081106128c7576128c761405e565b602002602001015160ff161061290d5760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b604482015260640161075c565b8061291781613fd3565b915050612810565b5063ffffffff8216600090815260076020908152604080832033808552925290912061294a84610998565b600060068563ffffffff16815481106129655761296561405e565b906000526020600020906008020190506000806000808060005b8951811015612aaf5760008860010160008c84815181106129a2576129a261405e565b602002602001015160ff1660ff1681526020019081526020016000209050806000015492508060010154670de0b6b3a7640000896006015483600001546129e99190613eba565b6129f39190613d99565b6129fd9190613efa565b9350612a098488613d5c565b96506305f5e100612a378d8c8e8681518110612a2757612a2761405e565b602002602001015160ff16610870565b612a419085613eba565b612a4b9190613d99565b612a559087613d5c565b9550612a618386613d5c565b9450838160010154612a739190613d5c565b60018201558054612a85908490613efa565b81556003810154612a97908490613d5c565b60039091015580612aa781613fd3565b91505061297f565b5060095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612ae2908b908990600401613c3f565b602060405180830381600087803b158015612afc57600080fd5b505af1158015612b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3491906134d9565b50600186015460055460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612b6d929116908890600401613c3f565b602060405180830381600087803b158015612b8757600080fd5b505af1158015612b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbf91906134d9565b5060018601546001600160a01b031663a9059cbb89612bde8787613efa565b6040518363ffffffff1660e01b8152600401612bfb929190613c3f565b602060405180830381600087803b158015612c1557600080fd5b505af1158015612c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4d91906134d9565b50828660020154612c5e9190613efa565b600287015586546000908190612c799060019060ff16613f11565b9050612ca66040518060800160405280600081526020016000815260200160008152602001600081525090565b895460ff908116908416108015612cd0575060ff8316600090815260018b01602052604090205415155b15612ce75782612cdf81614012565b935050612ca6565b60ff8216600090815260018b016020526040902054612d1f5760ff8216612d0d57612d1f565b81612d1781613f7b565b925050612ce7565b8160ff168360ff1610612d3157612dc2565b5060ff80821660009081526001808c016020818152604080852081516080810183528154815281860154818501908152600280840154838601908152600394850154606085019081529a8d168a52969095529290962086518155915194820194909455915190820155925192019190915582612dac81614012565b9350508180612dba90613f7b565b925050612ca6565b60ff8216600090815260018b01602052604090205415612dec57612de7826001613d74565b612def565b60005b8a5460ff191660ff9190911617909955505050505050505050505050565b6009546001600160a01b0316331480612e305750600a546001600160a01b031633145b80612e3f5750612e3f33610dc7565b612e5b5760405162461bcd60e51b815260040161075c90613ce1565b42821015612eb65760405162461bcd60e51b815260206004820152602260248201527f73746172742074696d652073686f756c6420626520696e207468652066757475604482015261726560f01b606482015260840161075c565b6009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015612f0857600080fd5b505af1158015612f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4091906134d9565b5060408051610100810182528681526001600160a01b0386166020808301919091526000928201839052606082018690526080820185905260a0820184905260c0820183905260e082018590526006805460018101825593528151805192936008027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0192612fd292849201906133ee565b5060208201516001820180546001600160a01b0319166001600160a01b0390921691909117905560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b600081604001518260a00151670de0b6b3a764000084606001516130629190613eba565b61306c9190613d99565b6111049190613d99565b60006109918383613efa565b6060816130a65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130d057806130ba81613fd3565b91506130c99050600a83613d99565b91506130aa565b60008167ffffffffffffffff8111156130eb576130eb614074565b6040519080825280601f01601f191660200182016040528015613115576020820181803683370190505b509050815b85156131a25761312b600182613efa565b9050600061313a600a88613d99565b61314590600a613eba565b61314f9088613efa565b61315a906030613d74565b905060008160f81b9050808484815181106131775761317761405e565b60200101906001600160f81b031916908160001a905350613199600a89613d99565b9750505061311a565b50949350505050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156132eb5760006131e8826013613efa565b6131f3906008613eba565b6131fe906002613e12565b613211906001600160a01b038716613d99565b60f81b9050600060108260f81c6132289190613dad565b60f81b905060008160f81c601061323f9190613ed9565b8360f81c61324d9190613f11565b60f81b905061325b82613326565b85613267866002613eba565b815181106132775761327761405e565b60200101906001600160f81b031916908160001a90535061329781613326565b856132a3866002613eba565b6132ae906001613d5c565b815181106132be576132be61405e565b60200101906001600160f81b031916908160001a90535050505080806132e390613fd3565b9150506131d2565b5092915050565b6000613302826080015142101590565b801561110457508160a00151826080015161331d9190613d5c565b42111592915050565b6000600a60f883901c101561334d5761334460f883901c6030613d74565b60f81b92915050565b61334460f883901c6057613d74565b919050565b82805482825590600052602060002090810192821561339c579160200282015b8281111561339c578251825591602001919060010190613381565b506133a8929150613461565b5090565b82805482825590600052602060002090810192821561339c579160200282015b8281111561339c578251829062ffffff169055916020019190600101906133cc565b8280546133fa90613f98565b90600052602060002090601f01602090048101928261341c576000855561339c565b82601f1061343557805160ff191683800117855561339c565b8280016001018555821561339c579182018281111561339c578251825591602001919060010190613381565b5b808211156133a85760008155600101613462565b80356001600160a01b038116811461335c57600080fd5b803563ffffffff8116811461335c57600080fd5b6000602082840312156134b357600080fd5b61099182613476565b6000602082840312156134ce57600080fd5b81356109918161408a565b6000602082840312156134eb57600080fd5b81516109918161408a565b6000806040838503121561350957600080fd5b82356135148161408a565b915061352260208401613476565b90509250929050565b600080600080600060a0868803121561354357600080fd5b853567ffffffffffffffff8082111561355b57600080fd5b818801915088601f83011261356f57600080fd5b813560208282111561358357613583614074565b613595601f8301601f19168201613d2b565b92508183528a818386010111156135ab57600080fd5b818185018285013760008183850101528298506135c9818b01613476565b989b989a5050505060408701359660608101359660809091013595509350505050565b6000602082840312156135fe57600080fd5b5035919050565b60006020828403121561361757600080fd5b6109918261348d565b6000806040838503121561363357600080fd5b6135148361348d565b60008060006060848603121561365157600080fd5b61365a8461348d565b925061366860208501613476565b91506136766040850161348d565b90509250925092565b6000806040838503121561369257600080fd5b61369b8361348d565b915060208084013567ffffffffffffffff808211156136b957600080fd5b818601915086601f8301126136cd57600080fd5b8135818111156136df576136df614074565b8060051b91506136f0848301613d2b565b8181528481019084860184860187018b101561370b57600080fd5b600095508594505b8385101561373f57803560ff8116811461372b578687fd5b835260019490940193918601918601613713565b508096505050505050509250929050565b6000806040838503121561376357600080fd5b61376c8361348d565b946020939093013593505050565b60008151808452613792816020860160208601613f34565b601f01601f19169290920160200192915050565b600084516137b8818460208901613f34565b8451908301906137cc818360208901613f34565b84519101906137df818360208801613f34565b0195945050505050565b600083516137fb818460208801613f34565b83519083019061380f818360208801613f34565b6d111611323ab930ba34b7b7111d1160911b9101908152600e01949350505050565b60008351613843818460208801613f34565b835190830190613857818360208801613f34565b7111161136b4b72a34b6b2b9ba30b6b8111d1160711b9101908152601201949350505050565b6000835161388f818460208801613f34565b8351908301906138a3818360208801613f34565b7311161136382a37b5b2b720b2323932b9b9911d1160611b9101908152601401949350505050565b600083516138dd818460208801613f34565b8351908301906138f1818360208801613f34565b721116113832b73234b733a932bbb0b932111d1160691b9101908152601301949350505050565b6000835161392a818460208801613f34565b83519083019061393e818360208801613f34565b741116113a37ba30b62234b9ba3934b13aba32911d1160591b9101908152601501949350505050565b60008351613979818460208801613f34565b83519083019061398d818360208801613f34565b61227d60f01b9101908152600201949350505050565b600083516139b5818460208801613f34565b8351908301906139c9818360208801613f34565b7f222c226c61737452657761726454696d657374616d70223a22000000000000009101908152601901949350505050565b60008351613a0c818460208801613f34565b835190830190613a20818360208801613f34565b7311161130b1b1983c212832b929b430b932911d1160611b9101908152601401949350505050565b60008351613a5a818460208801613f34565b835190830190613a6e818360208801613f34565b73111611363820b6b7bab73a24b72837b7b6111d1160611b9101908152601401949350505050565b60008351613aa8818460208801613f34565b835190830190613abc818360208801613f34565b6e11161139ba30b93a2a34b6b2911d1160891b9101908152600f01949350505050565b60008451613af1818460208901613f34565b601160f91b9083019081528451613b0f816001840160208901613f34565b61111d60f11b600192909101918201528351613b32816003840160208801613f34565b600b60fa1b6003929091019182015260040195945050505050565b60008251613b5f818460208701613f34565b6922696e666f223a22227d60b01b920191825250600a01919050565b60008251613b8d818460208701613f34565b692275736572223a22227d60b01b920191825250600a01919050565b693d9134b73232bc111d1160b11b81528151600090613bcf81600a850160208701613f34565b691116113730b6b2911d1160b11b600a939091019283015250601401919050565b693d9134b73232bc111d1160b11b81528151600090613c1681600a850160208701613f34565b7111161139ba30b5b2b220b6b7bab73a111d1160711b600a939091019283015250601c01919050565b6001600160a01b03929092168252602082015260400190565b602081526000610991602083018461377a565b6000610100808352613c7f8184018c61377a565b6001600160a01b039a909a166020840152505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b604081526000613cd2604083018561377a565b90508260208301529392505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252600890820152671ddc9bdb99c81a5960c21b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d5457613d54614074565b604052919050565b60008219821115613d6f57613d6f614032565b500190565b600060ff821660ff84168060ff03821115613d9157613d91614032565b019392505050565b600082613da857613da8614048565b500490565b600060ff831680613dc057613dc0614048565b8060ff84160491505092915050565b600181815b80851115613e0a578160001904821115613df057613df0614032565b80851615613dfd57918102915b93841c9390800290613dd4565b509250929050565b60006109918383600082613e2857506001611104565b81613e3557506000611104565b8160018114613e4b5760028114613e5557613e71565b6001915050611104565b60ff841115613e6657613e66614032565b50506001821b611104565b5060208310610133831016604e8410600b8410161715613e94575081810a611104565b613e9e8383613dcf565b8060001904821115613eb257613eb2614032565b029392505050565b6000816000190483118215151615613ed457613ed4614032565b500290565b600060ff821660ff84168160ff0481118215151615613eb257613eb2614032565b600082821015613f0c57613f0c614032565b500390565b600060ff821660ff841680821015613f2b57613f2b614032565b90039392505050565b60005b83811015613f4f578181015183820152602001613f37565b83811115613f5e576000848401525b50505050565b600081613f7357613f73614032565b506000190190565b600060ff821680613f8e57613f8e614032565b6000190192915050565b600181811c90821680613fac57607f821691505b60208210811415613fcd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613fe757613fe7614032565b5060010190565b600063ffffffff8083168181141561400857614008614032565b6001019392505050565b600060ff821660ff81141561402957614029614032565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146117ac57600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "params": {
          "_duration": "duration of pool",
          "_startTime": "timestamp to start pool",
          "_token": "address of LP token",
          "_totalDistribute": "total distribution in 0xB for this pool"
        }
      },
      "claimReward(uint32,uint8[])": {
        "details": "update reward debt and send reward to user",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "deposit(uint32,uint256)": {
        "details": "add new entity to control staking timestamp and taxes, never add token to older entities. Set rewardDebt to amount of reward currently.",
        "params": {
          "_amount": "amount to stake",
          "_poolId": "index of one pool"
        }
      },
      "getAPR(uint32)": {
        "params": {
          "_poolId": "index of pool"
        },
        "returns": {
          "apr": "current APR of an LP pool"
        }
      },
      "getJSONAllPoolsInfo(bool)": {
        "params": {
          "_onlyActive": "decide if only return info of active pool"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONAllPoolsUser(bool,address)": {
        "params": {
          "_onlyActive": "decide if only return info of active pool",
          "_user": "address of an user"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONSinglePoolInfo(uint32)": {
        "params": {
          "_poolId": "index of pool"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getJSONSinglePoolUser(uint32,address)": {
        "params": {
          "_poolId": "index of pool",
          "_user": "address of an user"
        },
        "returns": {
          "res": "JSON"
        }
      },
      "getPoolsCount()": {
        "returns": {
          "_0": "len number of pools"
        }
      },
      "getUserPendingReward(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserStakeAmounts(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATORfor each entity, the amount staked at first is separated into 2 variable: amount + withdrawn",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserTimestamps(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "getUserUnstakedAmount(uint32,address)": {
        "details": "result is returned as a string, which entities is separated with SEPARATOR",
        "params": {
          "_poolId": "index of pool",
          "addr": "address of user"
        },
        "returns": {
          "res": "result as a string"
        }
      },
      "isWhitelisted(address)": {
        "params": {
          "addr": "address to query"
        },
        "returns": {
          "_0": "isWhitelisted true if `addr` is whitelisted"
        }
      },
      "pendingReward(uint32,address,uint32)": {
        "details": "the accumulated reward per share is considered, add with reward from latest pool updateusing current state of pool (total lp in pool).the formula is: (a * n) + delta(now - l) * c - rewardDebta: accumulatedRewardPerShare in pool, n: total share, delta(now - l): seconds since last updatec: current reward per share per second, rewardDebt: reward already claimed by user in this pool",
        "params": {
          "_index": "index of some entity",
          "_poolId": "id of pool",
          "addr": "address of user"
        },
        "returns": {
          "_0": "reward pending reward of user"
        }
      },
      "setToken(address)": {
        "params": {
          "_token": "address of 0xB"
        }
      },
      "setWithdrawTaxPool(address)": {
        "params": {
          "_pool": "new tax pool"
        }
      },
      "setWithdrawTimeout(uint256)": {
        "params": {
          "_timeout": "new timeout"
        }
      },
      "taxOfEntity(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "tax amount of tax of an entity"
        }
      },
      "totalStakeOfUser(uint32,address)": {
        "params": {
          "_poolId": "index of pool",
          "addr": "address of the user"
        },
        "returns": {
          "totalStake": "total amount of LP staked in the user"
        }
      },
      "updatePool(uint32)": {
        "details": "update accumulated reward per share of a pool for sake of reward optimization",
        "params": {
          "_poolId": "index of pool"
        }
      },
      "withdraw(uint32,uint8[])": {
        "details": "same as withdraw, relocations of entities from an user is required",
        "params": {
          "_entityIndices": "indices of entities to withdraw",
          "_poolId": "index of pool"
        }
      },
      "withdrawable(uint32,address,uint32)": {
        "params": {
          "_index": "index of entity",
          "_poolId": "index of a pool",
          "addr": "address of an entity owner"
        },
        "returns": {
          "_0": "withdrawable true if the entity is withdrawable"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(string,address,uint256,uint256,uint256)": {
        "notice": "add new pool to stake LP"
      },
      "claimReward(uint32,uint8[])": {
        "notice": "claim all reward from all entity of pool"
      },
      "deposit(uint32,uint256)": {
        "notice": "deposit _amount of lp to the pool with index _poolId to start new entity of staking"
      },
      "getAPR(uint32)": {
        "notice": "calculate the current APR of one LP pool"
      },
      "getJSONAllPoolsInfo(bool)": {
        "notice": "return a JSON includes info of all pool, can choose to get only active pools or not"
      },
      "getJSONAllPoolsUser(bool,address)": {
        "notice": "return a JSON includes info of all pool that specific to an user, can choose to get only active pools or not"
      },
      "getJSONSinglePoolInfo(uint32)": {
        "notice": "return a JSON includes all info of a pool"
      },
      "getJSONSinglePoolUser(uint32,address)": {
        "notice": "return a JSON includes all info of an user in a pool"
      },
      "getPoolsCount()": {
        "notice": "number of pools "
      },
      "getUserPendingReward(uint32,address)": {
        "notice": "get the pending rewards of every entity that user staked in one pool"
      },
      "getUserStakeAmounts(uint32,address)": {
        "notice": "get the stake amount of every entity that user staked in one pool"
      },
      "getUserTimestamps(uint32,address)": {
        "notice": "get the timestamps of every entity that user staked in one pool"
      },
      "getUserUnstakedAmount(uint32,address)": {
        "notice": "get the unstaked amount of every entity that user staked in one pool"
      },
      "isWhitelisted(address)": {
        "notice": "show if an address is whitelisted to create a pool"
      },
      "pendingReward(uint32,address,uint32)": {
        "notice": "calculate the unclaimed reward of a user in one entity"
      },
      "setToken(address)": {
        "notice": "set address of 0xB token"
      },
      "setWithdrawTaxPool(address)": {
        "notice": "set new withdrawal tax pool"
      },
      "setWithdrawTimeout(uint256)": {
        "notice": "set new withdrawal timeout"
      },
      "taxOfEntity(uint32,address,uint32)": {
        "notice": "return current tax of an entity"
      },
      "totalStakeOfUser(uint32,address)": {
        "notice": "calculate total stake of one address in a pool"
      },
      "updatePool(uint32)": {
        "notice": "update data in a lp staking pool"
      },
      "withdraw(uint32,uint8[])": {
        "notice": "withdraw an amount from an entity. remove the entity if withdrawn everything"
      },
      "withdrawable(uint32,address,uint32)": {
        "notice": "show if an entity is withdrawable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7469,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "lpStakingEntitiesLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7471,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTimeout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7474,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxLevel",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7477,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "withdrawTaxPortion",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7479,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "earlyWithdrawTaxPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7483,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "pools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)7467_storage)dyn_storage"
      },
      {
        "astId": 7490,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))"
      },
      {
        "astId": 7494,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "whitelistAuthorities",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7496,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "token0xBAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7498,
        "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
        "label": "admin0xB",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)7467_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7467_storage",
        "encoding": "dynamic_array",
        "label": "struct LPStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2517": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPStaking.UserLPStakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserLPStakeInfo)7449_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct LPStaking.UserLPStakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserLPStakeInfo)7449_storage)"
      },
      "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LPStaking.LPStakeEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(LPStakeEntity)7441_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LPStakeEntity)7441_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.LPStakeEntity",
        "members": [
          {
            "astId": 7434,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7436,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7438,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7440,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "withdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoolInfo)7467_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.PoolInfo",
        "members": [
          {
            "astId": 7451,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7454,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2517"
          },
          {
            "astId": 7456,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lpAmountInPool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7458,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "totalDistribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7460,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7462,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7464,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "acc0xBPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7466,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserLPStakeInfo)7449_storage": {
        "encoding": "inplace",
        "label": "struct LPStaking.UserLPStakeInfo",
        "members": [
          {
            "astId": 7443,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7448,
            "contract": "contracts/dependencies/LPStaking.sol:LPStaking",
            "label": "entities",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_struct(LPStakeEntity)7441_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}