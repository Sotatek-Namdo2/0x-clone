{
  "address": "0x9D02eFe618d0A2c13AFa272cD890eDf3Ecb3cd31",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "protocol",
          "type": "bytes32"
        }
      ],
      "name": "ZapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "protocol",
          "type": "bytes32"
        }
      ],
      "name": "ZapOut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "protocols",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_type",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setFactoryAndRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_type",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "protocolType",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct Zap.ZapInForm",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "zapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_type",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroXBlockToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa242a5e2ee041886d894d17dbf8a4664a7a6c43dc8bdef92ed68664cd6ed1bf2",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0x9D02eFe618d0A2c13AFa272cD890eDf3Ecb3cd31",
    "transactionIndex": 13,
    "gasUsed": "2244036",
    "logsBloom": "0x
    "blockHash": "0xbfea0b3078d0561a96ac3f3ecdd94dc1b9aa58acf6dc473c40100125a047aac1",
    "transactionHash": "0xa242a5e2ee041886d894d17dbf8a4664a7a6c43dc8bdef92ed68664cd6ed1bf2",
    "logs": [],
    "blockNumber": 10548044,
    "cumulativeGasUsed": "3365334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c04d8e5b374999a2c0db764f83e64056",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setFactoryAndRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"protocolType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct Zap.ZapInForm\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"zapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroXBlockToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFactoryAndRouter(bytes32,address,address)\":{\"params\":{\"_factory\":\"factory address\",\"_router\":\"router address\",\"_type\":\"protocol type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"params\":{\"_token\":\"token address\"}},\"zapIn(bytes32,address,address)\":{\"params\":{\"_receiver\":\"receiver address\",\"_to\":\"lp token out\",\"_type\":\"protocol type\"}},\"zapInToken((bytes32,address,uint256,address,address))\":{\"params\":{\"_params\":\"zapIn params\"}},\"zapOut(bytes32,address,uint256,address,address)\":{\"params\":{\"_amount\":\"amount LP in\",\"_from\":\"lp token in\",\"_receiver\":\"receiver address\",\"_type\":\"protocol type\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw(address)\":{\"notice\":\"withdraw token that contract hold\"},\"zapIn(bytes32,address,address)\":{\"notice\":\"zap in ETH to LP\"},\"zapInToken((bytes32,address,uint256,address,address))\":{\"notice\":\"zap in for token ERC20\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/Zap.sol\":\"Zap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/dependencies/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/IJoeRouter02.sol\\\";\\nimport \\\"../interfaces/IJoeFactory.sol\\\";\\nimport \\\"../interfaces/IWNative.sol\\\";\\n\\ncontract Zap is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    struct ProtocolStats {\\n        address router;\\n        address factory;\\n    }\\n\\n    struct ZapInForm {\\n        bytes32 protocolType;\\n        address from;\\n        uint256 amount;\\n        address to;\\n        address receiver;\\n    }\\n\\n    /* ========== CONSTANT VARIABLES ========== */\\n\\n    address public usdtToken;\\n    address public wrappedNative;\\n    address public usdcToken;\\n    address public zeroXBlockToken;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    mapping(bytes32 => ProtocolStats) public protocols; // ex protocol: quickswap, sushiswap\\n\\n    event ZapIn(address indexed token, address indexed lpToken, uint256 indexed amount, bytes32 protocol);\\n\\n    event ZapOut(address indexed lpToken, uint256 indexed amount, bytes32 protocol);\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(\\n        address _usdtToken,\\n        address _wrappedNative,\\n        address _usdcToken\\n    ) external initializer {\\n        __Ownable_init();\\n        require(owner() != address(0), \\\"Zap: owner must be set\\\");\\n\\n        usdcToken = _usdcToken;\\n        usdtToken = _usdtToken;\\n        wrappedNative = _wrappedNative;\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n\\n    /// @notice zap in for token ERC20\\n    /// @param _params zapIn params\\n    function zapInToken(ZapInForm calldata _params) public returns (uint256 liquidity) {\\n        IERC20(_params.from).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _params.amount\\n        );\\n        address router = protocols[_params.protocolType].router;\\n\\n        _approveTokenIfNeeded(router, _params.from);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_params.to);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        _swapTokenToLPPairToken(\\n            _params.protocolType,\\n            _params.from,\\n            _params.amount,\\n            token0,\\n            token1,\\n            _params.to\\n        );\\n        liquidity = _addLiquidity(\\n            protocols[_params.protocolType].router,\\n            token0,\\n            token1,\\n            _params.receiver\\n        );\\n        // send excess amount to msg.sender\\n        _transferExcessBalance(token0, msg.sender);\\n        _transferExcessBalance(token1, msg.sender);\\n    }\\n\\n    /// @notice zap in ETH to LP\\n    /// @param _type protocol type\\n    /// @param _to lp token out\\n    /// @param _receiver receiver address\\n    function zapIn(\\n        bytes32 _type,\\n        address _to,\\n        address _receiver\\n    ) external payable {\\n        _swapETHToLP(_type, _to, msg.value, _receiver);\\n\\n        // send excess amount to msg.sender\\n        IUniswapV2Pair pair = IUniswapV2Pair(_to);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        _transferExcessBalance(token0, msg.sender);\\n        _transferExcessBalance(token1, msg.sender);\\n\\n        emit ZapIn(wrappedNative, _to, msg.value, _type);\\n    }\\n\\n    // @notice zap out LP to token\\n    /// @param _type protocol type\\n    /// @param _from lp token in\\n    /// @param _amount amount LP in\\n    /// @param _receiver receiver address\\n    function zapOut(\\n        bytes32 _type,\\n        address _from,\\n        uint256 _amount,\\n        address _to,\\n        address _receiver\\n    ) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), _amount);\\n        address router = protocols[_type].router;\\n        _approveTokenIfNeeded(router, _from);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_from);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        IJoeRouter02(router).removeLiquidity(\\n            token0,\\n            token1,\\n            _amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        // convert token0 to token 1\\n        {\\n            address[] memory path = new address[](2);\\n            path[0] = token0;\\n            path[1] = token1;\\n            _approveTokenIfNeeded(router, token0);\\n            IJoeRouter02(router).swapExactTokensForTokens(\\n                IERC20(token0).balanceOf(address(this)),\\n                0,\\n                path,\\n                _receiver,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint256 token1Balance = IERC20(token1).balanceOf(address(this));\\n        address[] memory tempPath = new address[](2);\\n        tempPath[0] = token1;\\n        tempPath[1] = _to;\\n\\n        IJoeRouter02(router).swapExactTokensForTokens(\\n            token1Balance,\\n            0,\\n            tempPath,\\n            _receiver,\\n            block.timestamp\\n        );\\n        bytes32 protocolType = _type;\\n        emit ZapOut(_from, _amount, protocolType);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n    function setToken(address token_) external onlyOwner {\\n        require(token_ != address(0), \\\"zero address\\\");\\n        zeroXBlockToken = token_;\\n    }\\n\\n    /// @notice withdraw token that contract hold\\n    /// @param _token token address\\n    function withdraw(address _token) external onlyOwner {\\n        if (_token == address(0)) {\\n            payable(owner()).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        IERC20(_token).transfer(\\n            owner(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    // @notice set factory and router for protocol\\n    /// @param _type protocol type\\n    /// @param _factory factory address\\n    /// @param _router router address\\n    function setFactoryAndRouter(\\n        bytes32 _type,\\n        address _factory,\\n        address _router\\n    ) external onlyOwner {\\n        protocols[_type].router = _router;\\n        protocols[_type].factory = _factory;\\n    }\\n\\n    /* ========== Private Functions ========== */\\n\\n    /// @notice swap ETH to LP token, ETH is MATIC in polygon\\n    /// @param _type protocol type\\n    /// @param _lp lp address\\n    /// @param _amount amount to swap\\n    /// @param _receiver receiver address\\n    function _swapETHToLP(\\n        bytes32 _type,\\n        address _lp,\\n        uint256 _amount,\\n        address _receiver\\n    ) private {\\n        IUniswapV2Pair pair = IUniswapV2Pair(_lp);\\n        address router = protocols[_type].router;\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        if (token0 == wrappedNative || token1 == wrappedNative) {\\n            address token = token0 == wrappedNative ? token1 : token0;\\n            uint256 swapValue = _amount / 2;\\n            uint256 tokenAmount = _swapETHForToken(\\n                _type,\\n                token,\\n                swapValue,\\n                address(this)\\n            );\\n\\n            _approveTokenIfNeeded(router, token);\\n            IJoeRouter02(router).addLiquidityAVAX{\\n                value: _amount - swapValue\\n            }(token, tokenAmount, 0, 0, _receiver, block.timestamp);\\n        } else {\\n            uint256 swapValue = _amount / 2;\\n            uint256 token0Amount = _swapETHForToken(\\n                _type,\\n                token0,\\n                swapValue,\\n                address(this)\\n            );\\n            uint256 token1Amount = _swapETHForToken(\\n                _type,\\n                token1,\\n                _amount - swapValue,\\n                address(this)\\n            );\\n\\n            _approveTokenIfNeeded(router, token0);\\n            _approveTokenIfNeeded(router, token1);\\n            IJoeRouter02(router).addLiquidity(\\n                token0,\\n                token1,\\n                token0Amount,\\n                token1Amount,\\n                0,\\n                0,\\n                _receiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice swap ETH to token, ETH is MATIC in polygon\\n    /// @param _type protocol type\\n    /// @param _token token address\\n    /// @param _value amount to swap\\n    /// @param _receiver receiver address\\n    function _swapETHForToken(\\n        bytes32 _type,\\n        address _token,\\n        uint256 _value,\\n        address _receiver\\n    ) private returns (uint256) {\\n        address[] memory path;\\n\\n        path = new address[](2);\\n        path[0] = wrappedNative;\\n        path[1] = _token;\\n\\n        uint256[] memory amounts = IJoeRouter02(protocols[_type].router)\\n            .swapExactAVAXForTokens{ value: _value }(\\n            0,\\n            path,\\n            _receiver,\\n            block.timestamp\\n        );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /// @notice swap token to token\\n    /// @param _type protocol type\\n    /// @param _from from token address\\n    /// @param _amount amount to swap\\n    /// @param _to to token address\\n    /// @param _receiver receiver address\\n    function _swap(\\n        bytes32 _type,\\n        address _from,\\n        uint256 _amount,\\n        address _to,\\n        address _receiver\\n    ) private returns (uint256) {\\n        // get pair of two token\\n        address factory = protocols[_type].factory;\\n\\n        address pair = IJoeFactory(factory).getPair(_from, _to);\\n        address[] memory path;\\n\\n        if (pair != address(0)) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[2] = _to;\\n\\n            if (_hasPair(factory, _from, wrappedNative) && _hasPair(factory, wrappedNative, _to)) {\\n                path[1] = wrappedNative;\\n            } else if (_hasPair(factory, _from, usdcToken) && _hasPair(factory, usdcToken, _to)) {\\n                path[1] = usdcToken;\\n            } else if (_hasPair(factory, _from, usdtToken) && _hasPair(factory, usdtToken, _to)) {\\n                path[1] = usdtToken;\\n            } else if (_hasPair(factory, _from, zeroXBlockToken) && _hasPair(factory, zeroXBlockToken, _to)) {\\n                path[1] = zeroXBlockToken;\\n            } else {\\n                revert(\\\"ZAP: NEP\\\"); // not exist path\\n            }\\n        }\\n\\n        _approveTokenIfNeeded(protocols[_type].router, path[0]);\\n        uint256[] memory amounts = IJoeRouter02(protocols[_type].router)\\n            .swapExactTokensForTokens(\\n                _amount,\\n                0,\\n                path,\\n                _receiver,\\n                block.timestamp\\n            );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /// @notice get key for pair token0 - token1 with key(token0, token1) === key(token1, token0)\\n    /// @param _token0 token0\\n    /// @param _token1 token1\\n    function _getBytes32Key(address _token0, address _token1)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        (_token0, _token1) = _token0 < _token1\\n            ? (_token0, _token1)\\n            : (_token1, _token0);\\n        return keccak256(abi.encodePacked(_token0, _token1));\\n    }\\n\\n    /// @notice approve if needed\\n    /// @param _spender spender address\\n    /// @param _token token to approve\\n    function _approveTokenIfNeeded(address _spender, address _token) private {\\n        if (IERC20(_token).allowance(address(this), address(_spender)) == 0) {\\n            IERC20(_token).safeApprove(address(_spender), type(uint256).max);\\n        }\\n    }\\n\\n    /// @notice check is has pair of token0 - token1\\n    /// @param _factory factory address\\n    /// @param _token0 token0 address\\n    /// @param _token1 token1 address\\n    function _hasPair(\\n        address _factory,\\n        address _token0,\\n        address _token1\\n    ) private view returns (bool) {\\n        return\\n            IJoeFactory(_factory).getPair(_token0, _token1) != address(0);\\n    }\\n\\n    /// @notice transfer excess balance to user, when user call zap func\\n    /// @param _token token to transfer\\n    /// @param _user receiver\\n    function _transferExcessBalance(address _token, address _user) private {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            IERC20(_token).safeTransfer(_user, amount);\\n        }\\n    }\\n\\n    function _swapTokenToLPPairToken(\\n        bytes32 _type,\\n        address _from,\\n        uint256 _amount,\\n        address _token0,\\n        address _token1,\\n        address _to\\n    ) private {\\n        // IERC20(_from).safeTransferFrom(msg.sender, address(this), _amount);\\n        // swap half amount for other\\n        if (_from == _token0 || _from == _token1) {\\n            address other = _from == _token0 ? _token1 : _token0;\\n            uint256 sellAmount = _amount / 2;\\n            _swap(_type, _from, sellAmount, other, address(this));\\n        } else {\\n            uint256 sellAmount = _amount / 2;\\n            _swap(_type, _from, sellAmount, _token0, address(this));\\n            _swap(_type, _from, _amount - sellAmount, _token1, address(this));\\n        }\\n        emit ZapIn(_from, _to, _amount, _type);\\n    }\\n\\n    function _addLiquidity(\\n        address _router,\\n        address _token0,\\n        address _token1,\\n        address _receiver\\n    ) private returns (uint256 liquidity) {\\n        _approveTokenIfNeeded(_router, _token0);\\n        _approveTokenIfNeeded(_router, _token1);\\n        (, , liquidity) = IJoeRouter02(_router).addLiquidity(\\n            _token0,\\n            _token1,\\n            IERC20(_token0).balanceOf(address(this)),\\n            IERC20(_token1).balanceOf(address(this)),\\n            0,\\n            0,\\n            _receiver,\\n            block.timestamp\\n        );\\n    }\\n}\",\"keccak256\":\"0xb22f718409f26c67156cd5881d8dd09a3ac156ea3b8f438ec23dc57547b50b72\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xd3c22a1e85b110ecec6e914c356b7c10c4b0be1f76d9a098635b34451d22f6d9\",\"license\":\"MIT\"},\"contracts/interfaces/IWNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IWNATIVE {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x2fabd5490daabe792383b04c1f2dd9e0d668de6f54954deb4a0a04d3da402c36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127a2806100206000396000f3fe6080604052600436106100dc5760003560e01c80638da5cb5b1161008a578063bacccdb211610059578063bacccdb214610283578063c0c53b8b146102a3578063eb6d3a11146102c3578063f2fde38b146102e357600080fd5b80638da5cb5b14610204578063a908367014610222578063a98ad46c14610235578063aee22b781461025557600080fd5b806311eac855146100e857806312d8e1101461011e578063144fa6d71461014057806348cb58761461016057806351cff8d9146101805780635515fe0a146101a0578063715018a6146101ef57600080fd5b366100e357005b600080fd5b3480156100f457600080fd5b50606754610108906001600160a01b031681565b6040516101159190612546565b60405180910390f35b34801561012a57600080fd5b5061013e6101393660046123dd565b610303565b005b34801561014c57600080fd5b5061013e61015b366004612258565b610373565b34801561016c57600080fd5b50606854610108906001600160a01b031681565b34801561018c57600080fd5b5061013e61019b366004612258565b610404565b3480156101ac57600080fd5b506101e16101bb3660046123c4565b606960205260009081526040902080546001909101546001600160a01b03918216911682565b60405161011592919061255a565b3480156101fb57600080fd5b5061013e610597565b34801561021057600080fd5b506033546001600160a01b0316610108565b61013e6102303660046123dd565b6105cd565b34801561024157600080fd5b50606554610108906001600160a01b031681565b34801561026157600080fd5b50610275610270366004612463565b61072c565b604051908152602001610115565b34801561028f57600080fd5b5061013e61029e366004612404565b610914565b3480156102af57600080fd5b5061013e6102be366004612292565b610e54565b3480156102cf57600080fd5b50606654610108906001600160a01b031681565b3480156102ef57600080fd5b5061013e6102fe366004612258565b610fb9565b6033546001600160a01b031633146103365760405162461bcd60e51b815260040161032d90612625565b60405180910390fd5b60009283526069602052604090922080546001600160a01b039384166001600160a01b031991821617825560019091018054929093169116179055565b6033546001600160a01b0316331461039d5760405162461bcd60e51b815260040161032d90612625565b6001600160a01b0381166103e25760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161032d565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461042e5760405162461bcd60e51b815260040161032d90612625565b6001600160a01b038116610479576033546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610475573d6000803e3d6000fd5b5050565b806001600160a01b031663a9059cbb61049a6033546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038516906370a08231906104c6903090600401612546565b60206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610516919061247b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047591906123a2565b50565b6033546001600160a01b031633146105c15760405162461bcd60e51b815260040161032d90612625565b6105cb600061104d565b565b6105d98383348461109f565b60008290506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561061957600080fd5b505afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190612275565b90506106d282336113c6565b6106dc81336113c6565b60665460405187815234916001600160a01b03888116929116907fcc11f9b552b14f6b75b7a35a5afb402bd25f24d8216334d195e162c42f72d026906020015b60405180910390a4505050505050565b60006107583330604085018035906107479060208801612258565b6001600160a01b0316929190611466565b8135600090815260696020908152604091829020546001600160a01b03169161079191839161078c91908701908701612258565b6114d1565b60006107a36080850160608601612258565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190612275565b90506108c086356108a46040890160208a01612258565b604089013585856108bb60808d0160608e01612258565b611569565b85356000908152606960205260409020546108f5906001600160a01b031683836108f060a08b0160808c01612258565b611664565b945061090182336113c6565b61090b81336113c6565b50505050919050565b6109296001600160a01b038516333086611466565b6000858152606960205260409020546001600160a01b031661094b81866114d1565b60008590506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0057600080fd5b505afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190612275565b604051635d5155ef60e11b81526001600160a01b0384811660048301528083166024830152604482018a905260006064830181905260848301523060a48301524260c48301529192509085169063baa2abde9060e4016040805180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf9190612494565b50506040805160028082526060820183526000926020830190803683370190505090508281600081518110610b1657610b16612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110610b4a57610b4a612754565b60200260200101906001600160a01b031690816001600160a01b031681525050610b7485846114d1565b846001600160a01b03166338ed1739846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610baf9190612546565b60206040518083038186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff919061247b565b6000848a426040518663ffffffff1660e01b8152600401610c249594939291906126a5565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c7a91908101906122dd565b50506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610cab903090600401612546565b60206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb919061247b565b60408051600280825260608201835292935060009290916020830190803683370190505090508281600081518110610d3557610d35612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610d6957610d69612754565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b8152908716906338ed173990610dad90859060009086908d9042906004016126a5565b600060405180830381600087803b158015610dc757600080fd5b505af1158015610ddb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0391908101906122dd565b506040518b81528b908a906001600160a01b038d16907f5312da833ca9ab61a63f7205eaa08ac243b9d2dc4518fb8b546fc26897209f949060200160405180910390a3505050505050505050505050565b600054610100900460ff16610e6f5760005460ff1615610e73565b303b155b610ed65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032d565b600054610100900460ff16158015610ef8576000805461ffff19166101011790555b610f00611808565b6000610f146033546001600160a01b031690565b6001600160a01b03161415610f645760405162461bcd60e51b815260206004820152601660248201527516985c0e881bdddb995c881b5d5cdd081899481cd95d60521b604482015260640161032d565b606780546001600160a01b038085166001600160a01b0319928316179092556065805487841690831617905560668054928616929091169190911790558015610fb3576000805461ff00191690555b50505050565b6033546001600160a01b03163314610fe35760405162461bcd60e51b815260040161032d90612625565b6001600160a01b0381166110485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032d565b610594815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000848152606960209081526040808320548151630dfe168160e01b8152915187946001600160a01b0392831694909392861692630dfe16819260048083019392829003018186803b1580156110f457600080fd5b505afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190612275565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b505afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190612275565b6066549091506001600160a01b03838116911614806111cd57506066546001600160a01b038281169116145b156112dc576066546000906001600160a01b038481169116146111f057826111f2565b815b905060006112016002896126e1565b905060006112118b848430611837565b905061121d86846114d1565b6001600160a01b03861663f91b3f72611236848c612703565b6040516001600160e01b031960e084901b1681526001600160a01b0380881660048301526024820186905260006044830181905260648301528c1660848201524260a482015260c4016060604051808303818588803b15801561129857600080fd5b505af11580156112ac573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112d191906124b8565b5050505050506113bc565b60006112e96002886126e1565b905060006112f98a858430611837565b905060006113128b8561130c868d612703565b30611837565b905061131e86866114d1565b61132886856114d1565b856001600160a01b031663e8e33700868685856000808f426040518963ffffffff1660e01b8152600401611363989796959493929190612574565b606060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906124b8565b5050505050505b5050505050505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906113f5903090600401612546565b60206040518083038186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611445919061247b565b90508015611461576114616001600160a01b0384168383611992565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fb39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c2565b604051636eb1769f60e11b81526001600160a01b0382169063dd62ed3e906114ff903090869060040161255a565b60206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f919061247b565b610475576104756001600160a01b03821683600019611a94565b826001600160a01b0316856001600160a01b0316148061159a5750816001600160a01b0316856001600160a01b0316145b156115e8576000836001600160a01b0316866001600160a01b0316146115c057836115c2565b825b905060006115d16002876126e1565b90506115e08888838530611bb7565b50505061161e565b60006115f56002866126e1565b90506116048787838730611bb7565b5061161b87876116148489612703565b8630611bb7565b50505b83816001600160a01b0316866001600160a01b03167fcc11f9b552b14f6b75b7a35a5afb402bd25f24d8216334d195e162c42f72d0268960405161071c91815260200190565b600061167085856114d1565b61167a85846114d1565b846001600160a01b031663e8e337008585876001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116b79190612546565b60206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611707919061247b565b6040516370a0823160e01b81526001600160a01b038916906370a0823190611733903090600401612546565b60206040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611783919061247b565b60008089426040518963ffffffff1660e01b81526004016117ab989796959493929190612574565b606060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd91906124b8565b979650505050505050565b600054610100900460ff1661182f5760405162461bcd60e51b815260040161032d9061265a565b6105cb612028565b6040805160028082526060808301845260009390929190602083019080368337505060665482519293506001600160a01b03169183915060009061187d5761187d612754565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106118b1576118b1612754565b6001600160a01b0392831660209182029290920181019190915260008881526069909152604080822054905163a2a1623d60e01b81529192169063a2a1623d90879061190790859087908a9042906004016125bd565b6000604051808303818588803b15801561192057600080fd5b505af1158015611934573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261195d91908101906122dd565b9050806001825161196e9190612703565b8151811061197e5761197e612754565b602002602001015192505050949350505050565b6040516001600160a01b03831660248201526044810182905261146190849063a9059cbb60e01b9060640161149a565b6000611a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120589092919063ffffffff16565b8051909150156114615780806020019051810190611a3591906123a2565b6114615760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032d565b801580611b1c5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90611aca903090869060040161255a565b60206040518083038186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a919061247b565b155b611b875760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161032d565b6040516001600160a01b03831660248201526044810182905261146190849063095ea7b360e01b9060640161149a565b60008581526069602052604080822060010154905163e6a4390560e01b81526001600160a01b03909116908290829063e6a4390590611bfc908a90899060040161255a565b60206040518083038186803b158015611c1457600080fd5b505afa158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c9190612275565b905060606001600160a01b03821615611cec5760408051600280825260608201835290916020830190803683370190505090508781600081518110611c9357611c93612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110611cc757611cc7612754565b60200260200101906001600160a01b031690816001600160a01b031681525050611f1a565b6040805160038082526080820190925290602082016060803683370190505090508781600081518110611d2157611d21612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600281518110611d5557611d55612754565b6001600160a01b039283166020918202929092010152606654611d7c9185918b9116612071565b8015611d9b5750606654611d9b9084906001600160a01b031688612071565b15611dc45760665481516001600160a01b039091169082906001908110611cc757611cc7612754565b606754611ddd9084908a906001600160a01b0316612071565b8015611dfc5750606754611dfc9084906001600160a01b031688612071565b15611e255760675481516001600160a01b039091169082906001908110611cc757611cc7612754565b606554611e3e9084908a906001600160a01b0316612071565b8015611e5d5750606554611e5d9084906001600160a01b031688612071565b15611e865760655481516001600160a01b039091169082906001908110611cc757611cc7612754565b606854611e9f9084908a906001600160a01b0316612071565b8015611ebe5750606854611ebe9084906001600160a01b031688612071565b15611ee75760685481516001600160a01b039091169082906001908110611cc757611cc7612754565b60405162461bcd60e51b815260206004820152600860248201526705a41503a204e45560c41b604482015260640161032d565b6000898152606960205260408120548251611f56926001600160a01b03909216918491611f4957611f49612754565b60200260200101516114d1565b6000898152606960205260408082205490516338ed173960e01b81526001600160a01b03909116906338ed173990611f9a908b90859087908c9042906004016126a5565b600060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff091908101906122dd565b905080600182516120019190612703565b8151811061201157612011612754565b602002602001015194505050505095945050505050565b600054610100900460ff1661204f5760405162461bcd60e51b815260040161032d9061265a565b6105cb3361104d565b60606120678484600085612107565b90505b9392505050565b60405163e6a4390560e01b815260009081906001600160a01b0386169063e6a43905906120a4908790879060040161255a565b60206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190612275565b6001600160a01b03161415949350505050565b6060824710156121685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161032d565b843b6121b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032d565b600080866001600160a01b031685876040516121d2919061252a565b60006040518083038185875af1925050503d806000811461220f576040519150601f19603f3d011682016040523d82523d6000602084013e612214565b606091505b50915091506117fd8282866060831561222e57508161206a565b82511561223e5782518084602001fd5b8160405162461bcd60e51b815260040161032d91906125f2565b60006020828403121561226a57600080fd5b813561206a81612780565b60006020828403121561228757600080fd5b815161206a81612780565b6000806000606084860312156122a757600080fd5b83356122b281612780565b925060208401356122c281612780565b915060408401356122d281612780565b809150509250925092565b600060208083850312156122f057600080fd5b825167ffffffffffffffff8082111561230857600080fd5b818501915085601f83011261231c57600080fd5b81518181111561232e5761232e61276a565b8060051b604051601f19603f830116810181811085821117156123535761235361276a565b604052828152858101935084860182860187018a101561237257600080fd5b600095505b83861015612395578051855260019590950194938601938601612377565b5098975050505050505050565b6000602082840312156123b457600080fd5b8151801515811461206a57600080fd5b6000602082840312156123d657600080fd5b5035919050565b6000806000606084860312156123f257600080fd5b8335925060208401356122c281612780565b600080600080600060a0868803121561241c57600080fd5b85359450602086013561242e81612780565b935060408601359250606086013561244581612780565b9150608086013561245581612780565b809150509295509295909350565b600060a0828403121561247557600080fd5b50919050565b60006020828403121561248d57600080fd5b5051919050565b600080604083850312156124a757600080fd5b505080516020909101519092909150565b6000806000606084860312156124cd57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b8381101561251f5781516001600160a01b0316875295820195908201906001016124fa565b509495945050505050565b6000825161253c818460208701612728565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b8481526080602082015260006125d660808301866124e6565b6001600160a01b03949094166040830152506060015292915050565b6020815260008251806020840152612611816040850160208701612728565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815284602082015260a0604082015260006126c460a08301866124e6565b6001600160a01b0394909416606083015250608001529392505050565b6000826126fe57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561272357634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561274357818101518382015260200161272b565b83811115610fb35750506000910152565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461059457600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106100dc5760003560e01c80638da5cb5b1161008a578063bacccdb211610059578063bacccdb214610283578063c0c53b8b146102a3578063eb6d3a11146102c3578063f2fde38b146102e357600080fd5b80638da5cb5b14610204578063a908367014610222578063a98ad46c14610235578063aee22b781461025557600080fd5b806311eac855146100e857806312d8e1101461011e578063144fa6d71461014057806348cb58761461016057806351cff8d9146101805780635515fe0a146101a0578063715018a6146101ef57600080fd5b366100e357005b600080fd5b3480156100f457600080fd5b50606754610108906001600160a01b031681565b6040516101159190612546565b60405180910390f35b34801561012a57600080fd5b5061013e6101393660046123dd565b610303565b005b34801561014c57600080fd5b5061013e61015b366004612258565b610373565b34801561016c57600080fd5b50606854610108906001600160a01b031681565b34801561018c57600080fd5b5061013e61019b366004612258565b610404565b3480156101ac57600080fd5b506101e16101bb3660046123c4565b606960205260009081526040902080546001909101546001600160a01b03918216911682565b60405161011592919061255a565b3480156101fb57600080fd5b5061013e610597565b34801561021057600080fd5b506033546001600160a01b0316610108565b61013e6102303660046123dd565b6105cd565b34801561024157600080fd5b50606554610108906001600160a01b031681565b34801561026157600080fd5b50610275610270366004612463565b61072c565b604051908152602001610115565b34801561028f57600080fd5b5061013e61029e366004612404565b610914565b3480156102af57600080fd5b5061013e6102be366004612292565b610e54565b3480156102cf57600080fd5b50606654610108906001600160a01b031681565b3480156102ef57600080fd5b5061013e6102fe366004612258565b610fb9565b6033546001600160a01b031633146103365760405162461bcd60e51b815260040161032d90612625565b60405180910390fd5b60009283526069602052604090922080546001600160a01b039384166001600160a01b031991821617825560019091018054929093169116179055565b6033546001600160a01b0316331461039d5760405162461bcd60e51b815260040161032d90612625565b6001600160a01b0381166103e25760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161032d565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461042e5760405162461bcd60e51b815260040161032d90612625565b6001600160a01b038116610479576033546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610475573d6000803e3d6000fd5b5050565b806001600160a01b031663a9059cbb61049a6033546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038516906370a08231906104c6903090600401612546565b60206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610516919061247b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047591906123a2565b50565b6033546001600160a01b031633146105c15760405162461bcd60e51b815260040161032d90612625565b6105cb600061104d565b565b6105d98383348461109f565b60008290506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561061957600080fd5b505afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190612275565b90506106d282336113c6565b6106dc81336113c6565b60665460405187815234916001600160a01b03888116929116907fcc11f9b552b14f6b75b7a35a5afb402bd25f24d8216334d195e162c42f72d026906020015b60405180910390a4505050505050565b60006107583330604085018035906107479060208801612258565b6001600160a01b0316929190611466565b8135600090815260696020908152604091829020546001600160a01b03169161079191839161078c91908701908701612258565b6114d1565b60006107a36080850160608601612258565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190612275565b90506108c086356108a46040890160208a01612258565b604089013585856108bb60808d0160608e01612258565b611569565b85356000908152606960205260409020546108f5906001600160a01b031683836108f060a08b0160808c01612258565b611664565b945061090182336113c6565b61090b81336113c6565b50505050919050565b6109296001600160a01b038516333086611466565b6000858152606960205260409020546001600160a01b031661094b81866114d1565b60008590506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612275565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0057600080fd5b505afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190612275565b604051635d5155ef60e11b81526001600160a01b0384811660048301528083166024830152604482018a905260006064830181905260848301523060a48301524260c48301529192509085169063baa2abde9060e4016040805180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf9190612494565b50506040805160028082526060820183526000926020830190803683370190505090508281600081518110610b1657610b16612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110610b4a57610b4a612754565b60200260200101906001600160a01b031690816001600160a01b031681525050610b7485846114d1565b846001600160a01b03166338ed1739846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610baf9190612546565b60206040518083038186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff919061247b565b6000848a426040518663ffffffff1660e01b8152600401610c249594939291906126a5565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c7a91908101906122dd565b50506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610cab903090600401612546565b60206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb919061247b565b60408051600280825260608201835292935060009290916020830190803683370190505090508281600081518110610d3557610d35612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610d6957610d69612754565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b8152908716906338ed173990610dad90859060009086908d9042906004016126a5565b600060405180830381600087803b158015610dc757600080fd5b505af1158015610ddb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0391908101906122dd565b506040518b81528b908a906001600160a01b038d16907f5312da833ca9ab61a63f7205eaa08ac243b9d2dc4518fb8b546fc26897209f949060200160405180910390a3505050505050505050505050565b600054610100900460ff16610e6f5760005460ff1615610e73565b303b155b610ed65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032d565b600054610100900460ff16158015610ef8576000805461ffff19166101011790555b610f00611808565b6000610f146033546001600160a01b031690565b6001600160a01b03161415610f645760405162461bcd60e51b815260206004820152601660248201527516985c0e881bdddb995c881b5d5cdd081899481cd95d60521b604482015260640161032d565b606780546001600160a01b038085166001600160a01b0319928316179092556065805487841690831617905560668054928616929091169190911790558015610fb3576000805461ff00191690555b50505050565b6033546001600160a01b03163314610fe35760405162461bcd60e51b815260040161032d90612625565b6001600160a01b0381166110485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032d565b610594815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000848152606960209081526040808320548151630dfe168160e01b8152915187946001600160a01b0392831694909392861692630dfe16819260048083019392829003018186803b1580156110f457600080fd5b505afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190612275565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b505afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190612275565b6066549091506001600160a01b03838116911614806111cd57506066546001600160a01b038281169116145b156112dc576066546000906001600160a01b038481169116146111f057826111f2565b815b905060006112016002896126e1565b905060006112118b848430611837565b905061121d86846114d1565b6001600160a01b03861663f91b3f72611236848c612703565b6040516001600160e01b031960e084901b1681526001600160a01b0380881660048301526024820186905260006044830181905260648301528c1660848201524260a482015260c4016060604051808303818588803b15801561129857600080fd5b505af11580156112ac573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112d191906124b8565b5050505050506113bc565b60006112e96002886126e1565b905060006112f98a858430611837565b905060006113128b8561130c868d612703565b30611837565b905061131e86866114d1565b61132886856114d1565b856001600160a01b031663e8e33700868685856000808f426040518963ffffffff1660e01b8152600401611363989796959493929190612574565b606060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906124b8565b5050505050505b5050505050505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906113f5903090600401612546565b60206040518083038186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611445919061247b565b90508015611461576114616001600160a01b0384168383611992565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fb39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c2565b604051636eb1769f60e11b81526001600160a01b0382169063dd62ed3e906114ff903090869060040161255a565b60206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f919061247b565b610475576104756001600160a01b03821683600019611a94565b826001600160a01b0316856001600160a01b0316148061159a5750816001600160a01b0316856001600160a01b0316145b156115e8576000836001600160a01b0316866001600160a01b0316146115c057836115c2565b825b905060006115d16002876126e1565b90506115e08888838530611bb7565b50505061161e565b60006115f56002866126e1565b90506116048787838730611bb7565b5061161b87876116148489612703565b8630611bb7565b50505b83816001600160a01b0316866001600160a01b03167fcc11f9b552b14f6b75b7a35a5afb402bd25f24d8216334d195e162c42f72d0268960405161071c91815260200190565b600061167085856114d1565b61167a85846114d1565b846001600160a01b031663e8e337008585876001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116b79190612546565b60206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611707919061247b565b6040516370a0823160e01b81526001600160a01b038916906370a0823190611733903090600401612546565b60206040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611783919061247b565b60008089426040518963ffffffff1660e01b81526004016117ab989796959493929190612574565b606060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd91906124b8565b979650505050505050565b600054610100900460ff1661182f5760405162461bcd60e51b815260040161032d9061265a565b6105cb612028565b6040805160028082526060808301845260009390929190602083019080368337505060665482519293506001600160a01b03169183915060009061187d5761187d612754565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106118b1576118b1612754565b6001600160a01b0392831660209182029290920181019190915260008881526069909152604080822054905163a2a1623d60e01b81529192169063a2a1623d90879061190790859087908a9042906004016125bd565b6000604051808303818588803b15801561192057600080fd5b505af1158015611934573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261195d91908101906122dd565b9050806001825161196e9190612703565b8151811061197e5761197e612754565b602002602001015192505050949350505050565b6040516001600160a01b03831660248201526044810182905261146190849063a9059cbb60e01b9060640161149a565b6000611a17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120589092919063ffffffff16565b8051909150156114615780806020019051810190611a3591906123a2565b6114615760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032d565b801580611b1c5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90611aca903090869060040161255a565b60206040518083038186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a919061247b565b155b611b875760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161032d565b6040516001600160a01b03831660248201526044810182905261146190849063095ea7b360e01b9060640161149a565b60008581526069602052604080822060010154905163e6a4390560e01b81526001600160a01b03909116908290829063e6a4390590611bfc908a90899060040161255a565b60206040518083038186803b158015611c1457600080fd5b505afa158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c9190612275565b905060606001600160a01b03821615611cec5760408051600280825260608201835290916020830190803683370190505090508781600081518110611c9357611c93612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110611cc757611cc7612754565b60200260200101906001600160a01b031690816001600160a01b031681525050611f1a565b6040805160038082526080820190925290602082016060803683370190505090508781600081518110611d2157611d21612754565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600281518110611d5557611d55612754565b6001600160a01b039283166020918202929092010152606654611d7c9185918b9116612071565b8015611d9b5750606654611d9b9084906001600160a01b031688612071565b15611dc45760665481516001600160a01b039091169082906001908110611cc757611cc7612754565b606754611ddd9084908a906001600160a01b0316612071565b8015611dfc5750606754611dfc9084906001600160a01b031688612071565b15611e255760675481516001600160a01b039091169082906001908110611cc757611cc7612754565b606554611e3e9084908a906001600160a01b0316612071565b8015611e5d5750606554611e5d9084906001600160a01b031688612071565b15611e865760655481516001600160a01b039091169082906001908110611cc757611cc7612754565b606854611e9f9084908a906001600160a01b0316612071565b8015611ebe5750606854611ebe9084906001600160a01b031688612071565b15611ee75760685481516001600160a01b039091169082906001908110611cc757611cc7612754565b60405162461bcd60e51b815260206004820152600860248201526705a41503a204e45560c41b604482015260640161032d565b6000898152606960205260408120548251611f56926001600160a01b03909216918491611f4957611f49612754565b60200260200101516114d1565b6000898152606960205260408082205490516338ed173960e01b81526001600160a01b03909116906338ed173990611f9a908b90859087908c9042906004016126a5565b600060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff091908101906122dd565b905080600182516120019190612703565b8151811061201157612011612754565b602002602001015194505050505095945050505050565b600054610100900460ff1661204f5760405162461bcd60e51b815260040161032d9061265a565b6105cb3361104d565b60606120678484600085612107565b90505b9392505050565b60405163e6a4390560e01b815260009081906001600160a01b0386169063e6a43905906120a4908790879060040161255a565b60206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190612275565b6001600160a01b03161415949350505050565b6060824710156121685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161032d565b843b6121b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032d565b600080866001600160a01b031685876040516121d2919061252a565b60006040518083038185875af1925050503d806000811461220f576040519150601f19603f3d011682016040523d82523d6000602084013e612214565b606091505b50915091506117fd8282866060831561222e57508161206a565b82511561223e5782518084602001fd5b8160405162461bcd60e51b815260040161032d91906125f2565b60006020828403121561226a57600080fd5b813561206a81612780565b60006020828403121561228757600080fd5b815161206a81612780565b6000806000606084860312156122a757600080fd5b83356122b281612780565b925060208401356122c281612780565b915060408401356122d281612780565b809150509250925092565b600060208083850312156122f057600080fd5b825167ffffffffffffffff8082111561230857600080fd5b818501915085601f83011261231c57600080fd5b81518181111561232e5761232e61276a565b8060051b604051601f19603f830116810181811085821117156123535761235361276a565b604052828152858101935084860182860187018a101561237257600080fd5b600095505b83861015612395578051855260019590950194938601938601612377565b5098975050505050505050565b6000602082840312156123b457600080fd5b8151801515811461206a57600080fd5b6000602082840312156123d657600080fd5b5035919050565b6000806000606084860312156123f257600080fd5b8335925060208401356122c281612780565b600080600080600060a0868803121561241c57600080fd5b85359450602086013561242e81612780565b935060408601359250606086013561244581612780565b9150608086013561245581612780565b809150509295509295909350565b600060a0828403121561247557600080fd5b50919050565b60006020828403121561248d57600080fd5b5051919050565b600080604083850312156124a757600080fd5b505080516020909101519092909150565b6000806000606084860312156124cd57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b8381101561251f5781516001600160a01b0316875295820195908201906001016124fa565b509495945050505050565b6000825161253c818460208701612728565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b8481526080602082015260006125d660808301866124e6565b6001600160a01b03949094166040830152506060015292915050565b6020815260008251806020840152612611816040850160208701612728565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815284602082015260a0604082015260006126c460a08301866124e6565b6001600160a01b0394909416606083015250608001529392505050565b6000826126fe57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561272357634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561274357818101518382015260200161272b565b83811115610fb35750506000910152565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461059457600080fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFactoryAndRouter(bytes32,address,address)": {
        "params": {
          "_factory": "factory address",
          "_router": "router address",
          "_type": "protocol type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "params": {
          "_token": "token address"
        }
      },
      "zapIn(bytes32,address,address)": {
        "params": {
          "_receiver": "receiver address",
          "_to": "lp token out",
          "_type": "protocol type"
        }
      },
      "zapInToken((bytes32,address,uint256,address,address))": {
        "params": {
          "_params": "zapIn params"
        }
      },
      "zapOut(bytes32,address,uint256,address,address)": {
        "params": {
          "_amount": "amount LP in",
          "_from": "lp token in",
          "_receiver": "receiver address",
          "_type": "protocol type"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw(address)": {
        "notice": "withdraw token that contract hold"
      },
      "zapIn(bytes32,address,address)": {
        "notice": "zap in ETH to LP"
      },
      "zapInToken((bytes32,address,uint256,address,address))": {
        "notice": "zap in for token ERC20"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8908,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "usdtToken",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8910,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "wrappedNative",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8912,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "usdcToken",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 8914,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "zeroXBlockToken",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 8919,
        "contract": "contracts/dependencies/Zap.sol:Zap",
        "label": "protocols",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_struct(ProtocolStats)8895_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(ProtocolStats)8895_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Zap.ProtocolStats)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtocolStats)8895_storage"
      },
      "t_struct(ProtocolStats)8895_storage": {
        "encoding": "inplace",
        "label": "struct Zap.ProtocolStats",
        "members": [
          {
            "astId": 8892,
            "contract": "contracts/dependencies/Zap.sol:Zap",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8894,
            "contract": "contracts/dependencies/Zap.sol:Zap",
            "label": "factory",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}