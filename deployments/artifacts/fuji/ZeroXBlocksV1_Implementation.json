{
  "address": "0xaaaf04238dD253Dad9F434beA3C27C9318fBf1B0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nrm",
      "outputs": [
        {
          "internalType": "contract NODERewardManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "automatedMarketMakerPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nodeIndex",
          "type": "uint256"
        }
      ],
      "name": "cashoutReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeEnableAutoSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeNodePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "deductPcent",
          "type": "int256"
        }
      ],
      "name": "changeRewardAPRPerNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFundPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableCashout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintNodes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getNodePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesLastCashoutTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesRewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "getRewardAPRPerNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "__cType",
          "type": "uint8"
        }
      ],
      "name": "getTotalNodesPerContractType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "uniV2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdcAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "mintNodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownedNodesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setAutomatedMarketMakerPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setBlacklistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableCashout",
          "type": "bool"
        }
      ],
      "name": "setEnableCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setEnableMintNodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nrm",
          "type": "address"
        }
      ],
      "name": "setNodeManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTokensAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensPaidForMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IJoeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateCashoutFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateDevelopmentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateDevelopmentFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateLiquidityWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateRewardsWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "updateSwapTokensAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6c8e1381937d4f03cf601abe9f0d3ea0943c5169b483dfca56f5e44a8a85e472",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xaaaf04238dD253Dad9F434beA3C27C9318fBf1B0",
    "transactionIndex": 1,
    "gasUsed": "5025621",
    "logsBloom": "0x
    "blockHash": "0x5c8470de6748023a35cf2321342b6b90fda09b120722404980cca235e433bc50",
    "transactionHash": "0x6c8e1381937d4f03cf601abe9f0d3ea0943c5169b483dfca56f5e44a8a85e472",
    "logs": [],
    "blockNumber": 6679010,
    "cumulativeGasUsed": "5100645",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3cf81d2c5926b0b17f03d5961b7d9309",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nrm\",\"outputs\":[{\"internalType\":\"contract NODERewardManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeIndex\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeEnableAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeNodePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"deductPcent\",\"type\":\"int256\"}],\"name\":\"changeRewardAPRPerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFundPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCashout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getNodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesLastCashoutTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"getRewardAPRPerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"__cType\",\"type\":\"uint8\"}],\"name\":\"getTotalNodesPerContractType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"uniV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"mintNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownedNodesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableCashout\",\"type\":\"bool\"}],\"name\":\"setEnableCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableMintNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nrm\",\"type\":\"address\"}],\"name\":\"setNodeManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensPaidForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IJoeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCashoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateDevelopmentFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZeroXBlocksV1.sol\":\"ZeroXBlocksV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        __PaymentSplitter_init_unchained(payees, shares_);\\n    }\\n\\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        AddressUpgradeable.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20Upgradeable token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x71297b4c051c770ae98850f8852998f541cca091176b5930edd475c862182f95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ZeroXBlocksV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol\\\";\\nimport \\\"./dependencies/NODERewardManagement.sol\\\";\\nimport \\\"./interfaces/IJoeRouter02.sol\\\";\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\n\\ncontract ZeroXBlocksV1 is Initializable, ERC20Upgradeable, OwnableUpgradeable, PaymentSplitterUpgradeable {\\n    NODERewardManagement public _nrm;\\n\\n    IJoeRouter02 public uniswapV2Router;\\n\\n    uint256 public ownedNodesLimit;\\n    uint256 private mintNodeLimit;\\n\\n    address public uniswapV2Pair;\\n\\n    uint256 public totalTokensPaidForMinting;\\n\\n    // ***** Pools Address *****\\n    address public developmentFundPool;\\n    address public treasuryPool;\\n    address public rewardsPool;\\n    address public liquidityPool;\\n\\n    // ***** Storage for fees *****\\n    uint256 public rewardsFee;\\n    uint256 public treasuryFee;\\n    uint256 public liquidityPoolFee;\\n    uint256 public developmentFee;\\n    uint256 public totalFees;\\n    uint256 public cashoutFee;\\n\\n    // ***** Storage for swapping *****\\n    bool public enableAutoSwap;\\n    uint256 public swapTokensAmount;\\n    address public usdcToken;\\n\\n    // ***** Blacklist storage *****\\n    mapping(address => bool) public _isBlacklisted;\\n\\n    // ***** Market makers pairs *****\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    // ***** Enable Cashout *****\\n    bool public enableCashout = true;\\n    bool public enableMintNodes = true;\\n\\n    // ***** Constructor *****\\n    function initialize(\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        address[] memory addresses,\\n        uint256[] memory balances,\\n        uint256[] memory fees,\\n        address uniV2Router,\\n        address usdcAddr\\n    ) public initializer {\\n        require(addresses.length > 0 && balances.length > 0, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(\\\"0xBlocks v1\\\", \\\"0XB\\\");\\n        __PaymentSplitter_init(payees, shares);\\n\\n        developmentFundPool = addresses[1];\\n        liquidityPool = addresses[2];\\n        treasuryPool = addresses[3];\\n        rewardsPool = addresses[4];\\n\\n        require(\\n            developmentFundPool != address(0) &&\\n                liquidityPool != address(0) &&\\n                treasuryPool != address(0) &&\\n                rewardsPool != address(0),\\n            \\\"POOL ZERO FOUND\\\"\\n        );\\n\\n        require(uniV2Router != address(0), \\\"ROUTER ZERO\\\");\\n        IJoeRouter02 _uniswapV2Router = IJoeRouter02(uniV2Router);\\n\\n        address _uniswapV2Pair = IJoeFactory(_uniswapV2Router.factory()).createPair(\\n            address(this),\\n            _uniswapV2Router.WAVAX()\\n        );\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n        require(fees[0] > 0 && fees[1] > 0 && fees[2] > 0 && fees[3] > 0 && fees[4] > 0, \\\"0% FEES FOUND\\\");\\n        developmentFee = fees[0];\\n        treasuryFee = fees[1];\\n        rewardsFee = fees[2];\\n        liquidityPoolFee = fees[3];\\n        cashoutFee = fees[4];\\n\\n        totalFees = rewardsFee + liquidityPoolFee + developmentFee + treasuryFee;\\n\\n        require(addresses.length == balances.length, \\\"ADDR & BALANCE ERROR\\\");\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], balances[i] * (10**18));\\n        }\\n        require(totalSupply() == 1012345e18, \\\"TTL SUPPLY DIFF 1 MIL\\\");\\n\\n        usdcToken = usdcAddr;\\n        ownedNodesLimit = 100;\\n        mintNodeLimit = 10;\\n        enableAutoSwap = true;\\n        swapTokensAmount = 0;\\n    }\\n\\n    // ***** WRITE functions for admin *****\\n    function setEnableCashout(bool _enableCashout) external onlyOwner {\\n        enableCashout = _enableCashout;\\n    }\\n\\n    function setEnableMintNodes(bool value) external onlyOwner {\\n        enableMintNodes = value;\\n    }\\n\\n    function setNodeManagement(address nrm) external onlyOwner {\\n        _nrm = NODERewardManagement(nrm);\\n    }\\n\\n    function changeNodePrice(ContractType _cType, uint256 newPrice) external onlyOwner {\\n        _nrm._changeNodePrice(_cType, newPrice);\\n    }\\n\\n    function changeRewardAPRPerNode(ContractType _cType, int256 deductPcent) external onlyOwner {\\n        _nrm._changeRewardAPRPerNode(_cType, deductPcent);\\n    }\\n\\n    function changeCashoutTimeout(uint256 newTime) external onlyOwner {\\n        _nrm._changeCashoutTimeout(newTime);\\n    }\\n\\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\\n        require(newAddress != address(uniswapV2Router), \\\"TKN: The router already has that address\\\");\\n        uniswapV2Router = IJoeRouter02(newAddress);\\n        address _uniswapV2Pair = IJoeFactory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            uniswapV2Router.WAVAX()\\n        );\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function updateSwapTokensAmount(uint256 newVal) external onlyOwner {\\n        swapTokensAmount = newVal;\\n    }\\n\\n    function updateDevelopmentFundWallet(address payable wall) external onlyOwner {\\n        developmentFundPool = wall;\\n    }\\n\\n    function updateLiquidityWallet(address payable wall) external onlyOwner {\\n        liquidityPool = wall;\\n    }\\n\\n    function updateRewardsWallet(address payable wall) external onlyOwner {\\n        rewardsPool = wall;\\n    }\\n\\n    function updateTreasuryWallet(address payable wall) external onlyOwner {\\n        treasuryPool = wall;\\n    }\\n\\n    function updateRewardsFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = liquidityPoolFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        rewardsFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateLiquidityFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + developmentFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        liquidityPoolFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateDevelopmentFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + treasuryFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        developmentFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateTreasuryFee(uint256 value) external onlyOwner {\\n        uint256 newTotalFee = rewardsFee + liquidityPoolFee + developmentFee + value;\\n        require(newTotalFee <= 100, \\\"FEES: total exceeding 100%\\\");\\n        treasuryFee = value;\\n        totalFees = newTotalFee;\\n    }\\n\\n    function updateCashoutFee(uint256 value) external onlyOwner {\\n        require(value <= 100, \\\"FEES: cashout exceeding 100%\\\");\\n        cashoutFee = value;\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n        require(pair != uniswapV2Pair, \\\"TKN: The PancakeSwap pair cannot be removed\\\");\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function setBlacklistStatus(address account, bool value) external onlyOwner {\\n        _isBlacklisted[account] = value;\\n    }\\n\\n    function changeEnableAutoSwap(bool newVal) external onlyOwner {\\n        enableAutoSwap = newVal;\\n    }\\n\\n    // ***** Private helpers functions *****\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(\\n            automatedMarketMakerPairs[pair] != value,\\n            \\\"TKN: Automated market maker pair is already set to that value\\\"\\n        );\\n        automatedMarketMakerPairs[pair] = value;\\n    }\\n\\n    function getNodeNumberOf(address account) private view returns (uint256) {\\n        return _nrm._getNodeNumberOf(account);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \\\"ERC20: Blacklisted address\\\");\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function swapAVAXSendTo(address targetWallet, uint256 tokens) private {\\n        if (enableAutoSwap) {\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = uniswapV2Router.WAVAX();\\n\\n            _approve(address(this), address(uniswapV2Router), tokens);\\n\\n            uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n                tokens,\\n                0, // accept any amount of AVAX\\n                path,\\n                targetWallet,\\n                block.timestamp\\n            );\\n        } else {\\n            super._transfer(address(this), targetWallet, tokens);\\n        }\\n    }\\n\\n    function swapUSDCSendTo(address targetWallet, uint256 tokens) private {\\n        if (enableAutoSwap) {\\n            address[] memory path = new address[](3);\\n            path[0] = address(this);\\n            path[1] = uniswapV2Router.WAVAX();\\n            path[2] = usdcToken;\\n\\n            _approve(address(this), address(uniswapV2Router), tokens);\\n\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                tokens,\\n                0, // accept any amount of USDC\\n                path,\\n                targetWallet,\\n                block.timestamp\\n            );\\n        } else {\\n            super._transfer(address(this), targetWallet, tokens);\\n        }\\n    }\\n\\n    // ***** WRITE functions for public *****\\n    function mintNodes(string[] memory names, ContractType _cType) external {\\n        require(enableMintNodes, \\\"NODEMINT: mint nodes disabled\\\");\\n        require(names.length <= mintNodeLimit, \\\"NODEMINT: too many nodes\\\");\\n        for (uint256 i = 0; i < names.length; i++) {\\n            require(bytes(names[i]).length > 3 && bytes(names[i]).length < 33, \\\"NODEMINT: improper character count\\\");\\n        }\\n\\n        address sender = _msgSender();\\n        require(sender != address(0), \\\"NODEMINT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"NODEMINT: blacklisted address\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"NODEMINT: pools cannot create node\\\"\\n        );\\n        uint256 nodeCount = getNodeNumberOf(sender);\\n        require(nodeCount + names.length <= ownedNodesLimit, \\\"NODEMINT: reached mint limit\\\");\\n        uint256 nodesPrice = _nrm.nodePrice(_cType) * names.length;\\n        totalTokensPaidForMinting += nodesPrice;\\n        require(balanceOf(sender) >= nodesPrice, \\\"NODEMINT: Balance too low for creation.\\\");\\n\\n        // DEV FUND\\n        uint256 developmentFundTokens = (nodesPrice * developmentFee) / 100;\\n        super._transfer(sender, address(this), developmentFundTokens);\\n        swapUSDCSendTo(developmentFundPool, developmentFundTokens);\\n\\n        // REWARDS POOL\\n        uint256 rewardsPoolTokens = (nodesPrice * rewardsFee) / 100;\\n        super._transfer(sender, rewardsPool, rewardsPoolTokens);\\n\\n        // TREASURY\\n        uint256 treasuryPoolTokens = (nodesPrice * treasuryFee) / 100;\\n        super._transfer(sender, address(this), treasuryPoolTokens);\\n        swapUSDCSendTo(treasuryPool, treasuryPoolTokens);\\n\\n        // LIQUIDITY\\n        uint256 liquidityTokens = (nodesPrice * liquidityPoolFee) / 100;\\n        super._transfer(sender, liquidityPool, liquidityTokens - liquidityTokens / 2);\\n        super._transfer(sender, address(this), liquidityTokens / 2);\\n        swapAVAXSendTo(liquidityPool, liquidityTokens / 2);\\n\\n        // EXTRA\\n        uint256 extraT = nodesPrice - developmentFundTokens - rewardsPoolTokens - treasuryPoolTokens - liquidityTokens;\\n        if (extraT > 0) {\\n            super._transfer(sender, address(this), extraT);\\n        }\\n\\n        _nrm.createNodes(sender, names, _cType);\\n    }\\n\\n    function cashoutReward(uint256 _nodeIndex) external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHT: Cashout Disabled\\\");\\n        require(sender != address(0), \\\"CSHT: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHT: this address has been blacklisted\\\");\\n        require(\\n            sender != developmentFundPool && sender != rewardsPool && sender != treasuryPool,\\n            \\\"CSHT: future and reward pools cannot cashout rewards\\\"\\n        );\\n        uint256 rewardAmount = _nrm._getRewardAmountOf(sender, _nodeIndex);\\n        require(rewardAmount > 0, \\\"CSHT: your reward is not ready yet\\\");\\n\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            super._transfer(rewardsPool, liquidityPool, feeAmount - feeAmount / 2);\\n            super._transfer(rewardsPool, address(this), feeAmount / 2);\\n            swapAVAXSendTo(liquidityPool, feeAmount / 2);\\n        }\\n        rewardAmount -= feeAmount;\\n\\n        super._transfer(rewardsPool, sender, rewardAmount);\\n        _nrm._cashoutNodeReward(sender, _nodeIndex);\\n    }\\n\\n    function cashoutAll() external {\\n        address sender = _msgSender();\\n        require(enableCashout == true, \\\"CSHTALL: cashout disabled\\\");\\n        require(sender != address(0), \\\"CSHTALL: zero address\\\");\\n        require(!_isBlacklisted[sender], \\\"CSHTALL: blacklisted address\\\");\\n        require(sender != developmentFundPool && sender != rewardsPool, \\\"CSHTALL: pools cannot cashout\\\");\\n        uint256 rewardAmount = _nrm._getRewardAmountOf(sender);\\n        require(rewardAmount > 0, \\\"CSHTALL: reward not ready\\\");\\n\\n        // LIQUIDITY POOL\\n        uint256 feeAmount = 0;\\n        if (cashoutFee > 0) {\\n            feeAmount = (rewardAmount * (cashoutFee)) / (100);\\n            super._transfer(rewardsPool, liquidityPool, feeAmount - feeAmount / 2);\\n            super._transfer(rewardsPool, address(this), feeAmount / 2);\\n            swapAVAXSendTo(liquidityPool, feeAmount / 2);\\n        }\\n        rewardAmount -= feeAmount;\\n\\n        super._transfer(rewardsPool, sender, rewardAmount);\\n        _nrm._cashoutAllNodesReward(sender);\\n    }\\n\\n    // ***** READ function for public *****\\n    function getRewardAmountOf(address account) external view onlyOwner returns (uint256) {\\n        return _nrm._getRewardAmountOf(account);\\n    }\\n\\n    function getRewardAmount() external view returns (uint256) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getRewardAmountOf(_msgSender());\\n    }\\n\\n    function getNodePrice(ContractType _cType) external view returns (uint256) {\\n        return _nrm.nodePrice(_cType);\\n    }\\n\\n    function getRewardAPRPerNode(ContractType _cType) external view returns (uint256) {\\n        return _nrm.rewardAPRPerNode(_cType);\\n    }\\n\\n    function getCashoutTimeout() external view returns (uint256) {\\n        return _nrm.cashoutTimeout();\\n    }\\n\\n    function getNodesNames() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesNames(_msgSender());\\n    }\\n\\n    function getNodesCurrentAPR() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesCurrentAPR(_msgSender());\\n    }\\n\\n    function getNodesInitialAPR() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesInitialAPR(_msgSender());\\n    }\\n\\n    function getNodesCreationTime() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesCreationTime(_msgSender());\\n    }\\n\\n    function getNodesTypes() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesTypes(_msgSender());\\n    }\\n\\n    function getNodesRewards() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesRewardAvailable(_msgSender());\\n    }\\n\\n    function getNodesLastCashoutTime() external view returns (string memory) {\\n        require(_msgSender() != address(0), \\\"SENDER IS 0\\\");\\n        require(_nrm._isNodeOwner(_msgSender()), \\\"NO NODE OWNER\\\");\\n        return _nrm._getNodesLastUpdateTime(_msgSender());\\n    }\\n\\n    function getTotalNodes() external view returns (uint256) {\\n        return _nrm.totalNodesCreated();\\n    }\\n\\n    function getTotalNodesPerContractType(ContractType __cType) external view returns (uint256) {\\n        return _nrm.totalNodesPerContractType(__cType);\\n    }\\n}\\n\",\"keccak256\":\"0xf7e6c198d6c63afff06b805eb8f8364753a1786313b5d4ab177b2597ecf34053\",\"license\":\"MIT\"},\"contracts/dependencies/NODERewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContractType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract NODERewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Node Structs -----\\n    struct NodeEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContractType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private nodeOwners;\\n    mapping(address => NodeEntity[]) private _nodesOfUser;\\n\\n    mapping(ContractType => uint256) public nodePrice;\\n    mapping(ContractType => uint256) public rewardAPRPerNode;\\n    mapping(ContractType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalNodesCreated;\\n    mapping(ContractType => uint256) private _totalNodesPerContractType;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _nodePrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalNodesCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            nodePrice[ContractType(i)] = _nodePrices[i];\\n            rewardAPRPerNode[ContractType(i)] = _rewardAPRs[i];\\n            _totalNodesPerContractType[ContractType(i)] = 0;\\n            aprChangesHistory[ContractType(i)];\\n            aprChangesHistory[ContractType(i)].push(\\n                APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 })\\n            );\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        token = token_;\\n    }\\n\\n    function createNodes(\\n        address account,\\n        string[] memory nodeNames,\\n        ContractType _cType\\n    ) external onlyAuthorities {\\n        _nodesOfUser[account];\\n\\n        for (uint256 i = 0; i < nodeNames.length; i++) {\\n            _nodesOfUser[account].push(\\n                NodeEntity({\\n                    name: nodeNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: nodePrice[_cType],\\n                    initialAPR: rewardAPRPerNode[_cType],\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        nodeOwners.set(account, _nodesOfUser[account].length);\\n        totalNodesCreated += nodeNames.length;\\n        _totalNodesPerContractType[_cType] += nodeNames.length;\\n    }\\n\\n    function _cashoutNodeReward(address account, uint256 _nodeIndex) external onlyAuthorities returns (uint256) {\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\n        require(_nodeIndex >= 0 && _nodeIndex < nodes.length, \\\"NODE: Index Error\\\");\\n        NodeEntity storage node = nodes[_nodeIndex];\\n        require(claimable(node.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this node.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardNode = nodeCurrentReward(node, currentTstamp);\\n        node.lastUpdateTime = currentTstamp;\\n        return rewardNode;\\n    }\\n\\n    function _cashoutAllNodesReward(address account) external onlyAuthorities returns (uint256) {\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        require(nodesCount > 0, \\\"CASHOUT ERROR: You don't have nodes to cash-out\\\");\\n        NodeEntity storage _node;\\n        uint256 rewardsTotal = 0;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            uint256 lastUpd = nodes[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all nodes.\\\");\\n\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            rewardsTotal += nodeCurrentReward(_node, currentTstamp);\\n            _node.lastUpdateTime = currentTstamp;\\n        }\\n        return rewardsTotal;\\n    }\\n\\n    function _changeNodePrice(ContractType _cType, uint256 newPrice) external onlyAuthorities {\\n        nodePrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerNode(ContractType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        rewardAPRPerNode[_cType] = reduceByPercent(rewardAPRPerNode[_cType], reducedPercentage);\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    function totalNodesPerContractType(ContractType _cType) external view returns (uint256) {\\n        return _totalNodesPerContractType[_cType];\\n    }\\n\\n    function _isNodeOwner(address account) external view returns (bool) {\\n        return isNodeOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\n        uint256 rewardCount = 0;\\n\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            NodeEntity memory _node = nodes[i];\\n            rewardCount += nodeCurrentReward(_node, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOf(address account, uint256 _nodeIndex) external view returns (uint256) {\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 numberOfNodes = nodes.length;\\n        require(_nodeIndex >= 0 && _nodeIndex < numberOfNodes, \\\"NODE: Node index is improper\\\");\\n        NodeEntity memory node = nodes[_nodeIndex];\\n        uint256 rewardNode = nodeCurrentReward(node, block.timestamp);\\n        return rewardNode;\\n    }\\n\\n    function _getNodesNames(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET NAMES: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory names = nodes[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            names = string(abi.encodePacked(names, separator, _node.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getNodesCreationTime(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _creationTimes = uint2str(nodes[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_node.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getNodesTypes(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(uint256(nodes[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_node.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesInitialAPR(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(nodes[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_node.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesCurrentAPR(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(currentAPRSingleNode(nodes[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleNode(_node))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesRewardAvailable(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET REWARD: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(nodeCurrentReward(nodes[0], currentTstamp));\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(_rewardsAvailable, separator, uint2str(nodeCurrentReward(nodes[i], currentTstamp)))\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getNodesLastUpdateTime(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"LAST CLAIM TIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _lastUpdateTimes = uint2str(nodes[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_node.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getNodeNumberOf(address account) public view returns (uint256) {\\n        return nodeOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function historyBinarySearch(ContractType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleNode(NodeEntity memory node) private view returns (uint256) {\\n        return nodeAPRAt(node, block.timestamp);\\n    }\\n\\n    function nodeAPRAt(NodeEntity memory node, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = node.creationTime;\\n        ContractType cType = node.cType;\\n        uint256 resultAPR = node.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function nodeCurrentReward(NodeEntity memory node, uint256 curTstamp) private view returns (uint256) {\\n        ContractType _cType = node.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, node.lastUpdateTime);\\n\\n        uint256 nodeBuyPrice = node.buyPrice;\\n        uint256 itrAPR = nodeAPRAt(node, node.lastUpdateTime);\\n        uint256 itrTstamp = node.lastUpdateTime;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = node.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((nodeBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != curTstamp) {\\n            nextTstamp = curTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((nodeBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isNodeOwner(address account) private view returns (bool) {\\n        return nodeOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1ef0cf1e3a235ccf4a304cdc1138e2e864cccf41f8c8dbd7fbfa636de694268a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x58a51a5068dd708ca7685b91dbe1f31317a181d9b999fb1ce9e39c990ad7e6bf\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x494c6da9a1a26cc8aa3602c02ae3323a7bdca265754ff0f9b4c936009223ed8a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8cc97f1ca9b1bb99f16c8c35eab7b4dce3f15dd9bcb9d998be9719278aa0fd4c\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260de805461ffff191661010117905534801561001f57600080fd5b5061598980620000306000396000f3fe6080604052600436106104985760003560e01c806365bfe43011610260578063a5f3d00311610144578063ce7c2ac2116100c1578063e33b7de311610085578063e33b7de314610e77578063e37ba8f914610e8c578063e9ebdca114610eac578063f2fde38b14610ecc578063f78d5c5514610eec578063fb0a749414610f0c57600080fd5b8063ce7c2ac214610d90578063cfad607514610dc6578063cfc0d02414610ddb578063d79779b214610dfb578063dd62ed3e14610e3157600080fd5b8063b62496f511610108578063b62496f514610cf0578063b96392c114610d20578063b9bd393314610d40578063c3491b4914610d5a578063cc32d17614610d7a57600080fd5b8063a5f3d00314610c64578063a79ebbcd14610c7a578063a9059cbb14610c9a578063b3328aae14610cba578063b47bef5014610cda57600080fd5b8063809d458d116101dd57806393a93355116101a157806393a9335514610b9957806395d89b4114610bb95780639723283014610bce5780639852595c14610bee5780639a7a23d614610c24578063a457c2d714610c4457600080fd5b8063809d458d14610afb578063810be66d14610b1b5780638b83209b14610b3b5780638da5cb5b14610b5b5780638e67566314610b7957600080fd5b806370a082311161022457806370a0823114610a665780637135404914610a9c578063715018a614610abc5780637650e15114610ad157806378045b4d14610ae657600080fd5b806365bfe430146109d0578063665a11ca146109f05780636770474b14610a105780636815a91c14610a305780636d9ae0be14610a5057600080fd5b80632bb14e1d1161038757806349bd5a5e11610304578063559bf302116102c8578063559bf302146109305780635b0d4674146109505780635d516efc146109655780635f1c31821461098557806363584ecd1461099b57806365b8dbc0146109b057600080fd5b806349bd5a5e146108b05780634be8f732146108d05780634d356c2f146108f0578063545579731461090557806354f12f1f1461091a57600080fd5b80633a98ef391161034b5780633a98ef39146107f5578063406072a91461080a57806341bc03121461085057806348b750441461087057806348df58291461089057600080fd5b80632bb14e1d14610778578063313ce5671461078e57806335292548146107aa57806339306140146107bf57806339509351146107d557600080fd5b806313114a9d1161041557806319165587116103d957806319165587146106ce5780631cdd3be3146106ee57806323b872dd1461071e5780632939a0a61461073e5780632aa0d2841461075e57600080fd5b806313114a9d14610659578063138a634a1461066f5780631694505e14610684578063177a33ac146106a457806318160ddd146106b957600080fd5b8063084a6bff1161045c578063084a6bff146105a7578063095ea7b3146105c757806309a69f57146105f75780630dae667b1461061a57806311eac8551461063957600080fd5b80630359fea9146104e657806303d29d281461052357806305060bd51461054557806306fdde0314610565578063080310121461058757600080fd5b366104e1577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156104f257600080fd5b5060d154610506906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561052f57600080fd5b5061054361053e366004615117565b610f2c565b005b34801561055157600080fd5b5060c954610506906001600160a01b031681565b34801561057157600080fd5b5061057a610f8a565b60405161051a9190615590565b34801561059357600080fd5b506105436105a2366004615171565b61101c565b3480156105b357600080fd5b506105436105c2366004615451565b61180d565b3480156105d357600080fd5b506105e76105e2366004615145565b61188f565b604051901515815260200161051a565b34801561060357600080fd5b5061060c6118a9565b60405190815260200161051a565b34801561062657600080fd5b5060de546105e790610100900460ff1681565b34801561064557600080fd5b5060db54610506906001600160a01b031681565b34801561066557600080fd5b5061060c60d75481565b34801561067b57600080fd5b5061057a6119fb565b34801561069057600080fd5b5060ca54610506906001600160a01b031681565b3480156106b057600080fd5b5061057a611b4d565b3480156106c557600080fd5b5060355461060c565b3480156106da57600080fd5b506105436106e9366004615063565b611c28565b3480156106fa57600080fd5b506105e7610709366004615063565b60dc6020526000908152604090205460ff1681565b34801561072a57600080fd5b506105e76107393660046150d6565b611d56565b34801561074a57600080fd5b50610543610759366004615369565b611d7c565b34801561076a57600080fd5b5060d9546105e79060ff1681565b34801561078457600080fd5b5061060c60d35481565b34801561079a57600080fd5b506040516012815260200161051a565b3480156107b657600080fd5b5061057a611dc0565b3480156107cb57600080fd5b5061060c60ce5481565b3480156107e157600080fd5b506105e76107f0366004615145565b611e9b565b34801561080157600080fd5b5060975461060c565b34801561081657600080fd5b5061060c61082536600461509d565b6001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b34801561085c57600080fd5b5061060c61086b3660046153a3565b611eda565b34801561087c57600080fd5b5061054361088b36600461509d565b611f5b565b34801561089c57600080fd5b5060d054610506906001600160a01b031681565b3480156108bc57600080fd5b5060cd54610506906001600160a01b031681565b3480156108dc57600080fd5b506105436108eb366004615264565b612143565b3480156108fc57600080fd5b5061057a612760565b34801561091157600080fd5b5061054361283b565b34801561092657600080fd5b5061060c60d55481565b34801561093c57600080fd5b5061054361094b366004615063565b612bbd565b34801561095c57600080fd5b5061057a612c09565b34801561097157600080fd5b506105436109803660046153be565b612ce4565b34801561099157600080fd5b5061060c60da5481565b3480156109a757600080fd5b5061060c612d76565b3480156109bc57600080fd5b506105436109cb366004615063565b612dbb565b3480156109dc57600080fd5b506105436109eb366004615451565b61301c565b3480156109fc57600080fd5b5060d254610506906001600160a01b031681565b348015610a1c57600080fd5b50610543610a2b366004615451565b6133f5565b348015610a3c57600080fd5b50610543610a4b366004615451565b613424565b348015610a5c57600080fd5b5061060c60d85481565b348015610a7257600080fd5b5061060c610a81366004615063565b6001600160a01b031660009081526033602052604090205490565b348015610aa857600080fd5b50610543610ab73660046153be565b6134a4565b348015610ac857600080fd5b50610543613500565b348015610add57600080fd5b5061057a613536565b348015610af257600080fd5b5061060c613611565b348015610b0757600080fd5b50610543610b16366004615063565b613656565b348015610b2757600080fd5b5060cf54610506906001600160a01b031681565b348015610b4757600080fd5b50610506610b56366004615451565b6136a2565b348015610b6757600080fd5b506065546001600160a01b0316610506565b348015610b8557600080fd5b50610543610b94366004615451565b6136d2565b348015610ba557600080fd5b5061060c610bb43660046153a3565b613754565b348015610bc557600080fd5b5061057a613785565b348015610bda57600080fd5b50610543610be9366004615451565b613794565b348015610bfa57600080fd5b5061060c610c09366004615063565b6001600160a01b03166000908152609a602052604090205490565b348015610c3057600080fd5b50610543610c3f366004615117565b613816565b348015610c5057600080fd5b506105e7610c5f366004615145565b6138c0565b348015610c7057600080fd5b5061060c60d65481565b348015610c8657600080fd5b5061060c610c953660046153a3565b61395d565b348015610ca657600080fd5b506105e7610cb5366004615145565b61398e565b348015610cc657600080fd5b50610543610cd5366004615369565b61399c565b348015610ce657600080fd5b5061060c60cb5481565b348015610cfc57600080fd5b506105e7610d0b366004615063565b60dd6020526000908152604090205460ff1681565b348015610d2c57600080fd5b5061060c610d3b366004615063565b6139d9565b348015610d4c57600080fd5b5060de546105e79060ff1681565b348015610d6657600080fd5b50610543610d75366004615451565b613a3d565b348015610d8657600080fd5b5061060c60d45481565b348015610d9c57600080fd5b5061060c610dab366004615063565b6001600160a01b031660009081526099602052604090205490565b348015610dd257600080fd5b5061057a613ac1565b348015610de757600080fd5b50610543610df6366004615063565b613b9c565b348015610e0757600080fd5b5061060c610e16366004615063565b6001600160a01b03166000908152609c602052604090205490565b348015610e3d57600080fd5b5061060c610e4c36600461509d565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610e8357600080fd5b5060985461060c565b348015610e9857600080fd5b50610543610ea7366004615063565b613be8565b348015610eb857600080fd5b50610543610ec7366004615369565b613c34565b348015610ed857600080fd5b50610543610ee7366004615063565b613c71565b348015610ef857600080fd5b50610543610f07366004615451565b613d0c565b348015610f1857600080fd5b50610543610f27366004615063565b613d8e565b6065546001600160a01b03163314610f5f5760405162461bcd60e51b8152600401610f569061565b565b60405180910390fd5b6001600160a01b0391909116600090815260dc60205260409020805460ff1916911515919091179055565b606060368054610f99906158c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc5906158c1565b80156110125780601f10610fe757610100808354040283529160200191611012565b820191906000526020600020905b815481529060010190602001808311610ff557829003601f168201915b5050505050905090565b600054610100900460ff166110375760005460ff161561103b565b303b155b61109e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f56565b600054610100900460ff161580156110c0576000805461ffff19166101011790555b600086511180156110d2575060008551115b6111155760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b6044820152606401610f56565b61111d613dda565b6111656040518060400160405280600b81526020016a3078426c6f636b7320763160a81b81525060405180604001604052806003815260200162182c2160e91b815250613e09565b61116f8888613e3a565b856001815181106111825761118261592d565b602002602001015160cf60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856002815181106111c3576111c361592d565b602002602001015160d260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856003815181106112045761120461592d565b602002602001015160d060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856004815181106112455761124561592d565b602090810291909101015160d180546001600160a01b0319166001600160a01b0392831617905560cf541615801590611288575060d2546001600160a01b031615155b801561129e575060d0546001600160a01b031615155b80156112b4575060d1546001600160a01b031615155b6112f25760405162461bcd60e51b815260206004820152600f60248201526e1413d3d30816915493c81193d55391608a1b6044820152606401610f56565b6001600160a01b0383166113365760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b6044820152606401610f56565b60008390506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190615080565b6001600160a01b031663c9c6539630846001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190615080565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae9190615080565b60ca80546001600160a01b038086166001600160a01b03199283161790925560cd80549284169290911691909117905590506114eb816001613e6b565b6000866000815181106115005761150061592d565b602002602001015111801561152f57506000866001815181106115255761152561592d565b6020026020010151115b8015611555575060008660028151811061154b5761154b61592d565b6020026020010151115b801561157b57506000866003815181106115715761157161592d565b6020026020010151115b80156115a157506000866004815181106115975761159761592d565b6020026020010151115b6115dd5760405162461bcd60e51b815260206004820152600d60248201526c0c094811915154c81193d55391609a1b6044820152606401610f56565b856000815181106115f0576115f061592d565b602002602001015160d681905550856001815181106116115761161161592d565b602002602001015160d481905550856002815181106116325761163261592d565b602002602001015160d381905550856003815181106116535761165361592d565b602002602001015160d581905550856004815181106116745761167461592d565b602002602001015160d88190555060d45460d65460d55460d3546116989190615825565b6116a29190615825565b6116ac9190615825565b60d75586518851146116f75760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b6044820152606401610f56565b60005b8851811015611764576117528982815181106117185761171861592d565b60200260200101518983815181106117325761173261592d565b6020026020010151670de0b6b3a764000061174d919061585f565b613f2b565b8061175c816158fc565b9150506116fa565b5060355469d65f55192a50a6440000146117b85760405162461bcd60e51b81526020600482015260156024820152741515130814d5541413164811125191880c48135253605a1b6044820152606401610f56565b505060db80546001600160a01b0319166001600160a01b038416179055606460cb55600a60cc5560d9805460ff19166001179055600060da558015611803576000805461ff00191690555b5050505050505050565b6065546001600160a01b031633146118375760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d65460d55461184d9190615825565b6118579190615825565b6118619190615825565b905060648111156118845760405162461bcd60e51b8152600401610f56906156b5565b60d39190915560d755565b60003361189d81858561400a565b60019150505b92915050565b6000336118c85760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190615386565b61196d5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663619a635e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156119be57600080fd5b505afa1580156119d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f6919061546a565b905090565b606033611a1a5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a6b57600080fd5b505afa158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa39190615386565b611abf5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663334de3a2335b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160006040518083038186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f691908101906153da565b606033611b6c5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190615386565b611c115760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316636b4da10233611ad2565b6001600160a01b038116600090815260996020526040902054611c5d5760405162461bcd60e51b8152600401610f56906155ca565b6000611c6860985490565b611c729047615825565b90506000611c9f8383611c9a866001600160a01b03166000908152609a602052604090205490565b61412e565b905080611cbe5760405162461bcd60e51b8152600401610f5690615610565b6001600160a01b0383166000908152609a602052604081208054839290611ce6908490615825565b925050819055508060986000828254611cff9190615825565b90915550611d0f90508382614174565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b600033611d64858285614292565b611d6f85858561431e565b60019150505b9392505050565b6065546001600160a01b03163314611da65760405162461bcd60e51b8152600401610f569061565b565b60de80549115156101000261ff0019909216919091179055565b606033611ddf5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e3057600080fd5b505afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190615386565b611e845760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663aa57be3033611ad2565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061189d9082908690611ed5908790615825565b61400a565b60c954604051631f7bcc4b60e01b81526000916001600160a01b031690631f7bcc4b90611f0b908590600401615567565b60206040518083038186803b158015611f2357600080fd5b505afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a3919061546a565b6001600160a01b038116600090815260996020526040902054611f905760405162461bcd60e51b8152600401610f56906155ca565b6001600160a01b0382166000908152609c60205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015611fe857600080fd5b505afa158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612020919061546a565b61202a9190615825565b905060006120638383611c9a87876001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b9050806120825760405162461bcd60e51b8152600401610f5690615610565b6001600160a01b038085166000908152609d60209081526040808320938716835292905290812080548392906120b9908490615825565b90915550506001600160a01b0384166000908152609c6020526040812080548392906120e6908490615825565b909155506120f790508484836143b7565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b60de54610100900460ff1661219a5760405162461bcd60e51b815260206004820152601d60248201527f4e4f44454d494e543a206d696e74206e6f6465732064697361626c65640000006044820152606401610f56565b60cc54825111156121ed5760405162461bcd60e51b815260206004820152601860248201527f4e4f44454d494e543a20746f6f206d616e79206e6f64657300000000000000006044820152606401610f56565b60005b82518110156122a657600383828151811061220d5761220d61592d565b60200260200101515111801561223d575060218382815181106122325761223261592d565b602002602001015151105b6122945760405162461bcd60e51b815260206004820152602260248201527f4e4f44454d494e543a20696d70726f7065722063686172616374657220636f756044820152611b9d60f21b6064820152608401610f56565b8061229e816158fc565b9150506121f0565b5033806122ee5760405162461bcd60e51b81526020600482015260166024820152754e4f44454d494e543a207a65726f206164647265737360501b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff16156123575760405162461bcd60e51b815260206004820152601d60248201527f4e4f44454d494e543a20626c61636b6c697374656420616464726573730000006044820152606401610f56565b60cf546001600160a01b03828116911614801590612383575060d1546001600160a01b03828116911614155b801561239d575060d0546001600160a01b03828116911614155b6123f45760405162461bcd60e51b815260206004820152602260248201527f4e4f44454d494e543a20706f6f6c732063616e6e6f7420637265617465206e6f604482015261646560f01b6064820152608401610f56565b60006123ff82614409565b905060cb548451826124119190615825565b111561245f5760405162461bcd60e51b815260206004820152601c60248201527f4e4f44454d494e543a2072656163686564206d696e74206c696d6974000000006044820152606401610f56565b835160c954604051631f7bcc4b60e01b8152600092916001600160a01b031690631f7bcc4b90612493908890600401615567565b60206040518083038186803b1580156124ab57600080fd5b505afa1580156124bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e3919061546a565b6124ed919061585f565b90508060ce60008282546125019190615825565b90915550506001600160a01b03831660009081526033602052604090205481111561257e5760405162461bcd60e51b815260206004820152602760248201527f4e4f44454d494e543a2042616c616e636520746f6f206c6f7720666f7220637260448201526632b0ba34b7b71760c91b6064820152608401610f56565b6000606460d65483612590919061585f565b61259a919061583d565b90506125a784308361443c565b60cf546125bd906001600160a01b03168261460a565b6000606460d354846125cf919061585f565b6125d9919061583d565b60d1549091506125f49086906001600160a01b03168361443c565b6000606460d45485612606919061585f565b612610919061583d565b905061261d86308361443c565b60d054612633906001600160a01b03168261460a565b6000606460d55486612645919061585f565b61264f919061583d565b60d25490915061267e9088906001600160a01b031661266f60028561583d565b612679908561587e565b61443c565b61268e873061267960028561583d565b60d2546126ae906001600160a01b03166126a960028461583d565b6147bd565b60008183856126bd888a61587e565b6126c7919061587e565b6126d1919061587e565b6126db919061587e565b905080156126ee576126ee88308361443c565b60c954604051637b358d0560e01b81526001600160a01b0390911690637b358d0590612722908b908e908e906004016154ed565b600060405180830381600087803b15801561273c57600080fd5b505af1158015612750573d6000803e3d6000fd5b5050505050505050505050505050565b60603361277f5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156127d057600080fd5b505afa1580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128089190615386565b6128245760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663fd8db54633611ad2565b60de54339060ff1615156001146128945760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20636173686f75742064697361626c6564000000000000006044820152606401610f56565b6001600160a01b0381166128e25760405162461bcd60e51b815260206004820152601560248201527443534854414c4c3a207a65726f206164647265737360581b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff161561294b5760405162461bcd60e51b815260206004820152601c60248201527f43534854414c4c3a20626c61636b6c69737465642061646472657373000000006044820152606401610f56565b60cf546001600160a01b03828116911614801590612977575060d1546001600160a01b03828116911614155b6129c35760405162461bcd60e51b815260206004820152601d60248201527f43534854414c4c3a20706f6f6c732063616e6e6f7420636173686f75740000006044820152606401610f56565b60c9546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b158015612a0957600080fd5b505afa158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a41919061546a565b905060008111612a935760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20726577617264206e6f74207265616479000000000000006044820152606401610f56565b60d85460009015612b1457606460d85483612aae919061585f565b612ab8919061583d565b60d15460d254919250612add916001600160a01b03918216911661266f60028561583d565b60d154612af9906001600160a01b03163061267960028561583d565b60d254612b14906001600160a01b03166126a960028461583d565b612b1e818361587e565b60d154909250612b38906001600160a01b0316848461443c565b60c95460405163170a62c760e21b81526001600160a01b03858116600483015290911690635c298b1c90602401602060405180830381600087803b158015612b7f57600080fd5b505af1158015612b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb7919061546a565b50505050565b6065546001600160a01b03163314612be75760405162461bcd60e51b8152600401610f569061565b565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b606033612c285760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612c7957600080fd5b505afa158015612c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb19190615386565b612ccd5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316634a389fae33611ad2565b6065546001600160a01b03163314612d0e5760405162461bcd60e51b8152600401610f569061565b565b60c9546040516353f63f7f60e01b81526001600160a01b03909116906353f63f7f90612d409085908590600401615575565b600060405180830381600087803b158015612d5a57600080fd5b505af1158015612d6e573d6000803e3d6000fd5b505050505050565b60c9546040805163b8527aef60e01b815290516000926001600160a01b03169163b8527aef916004808301926020929190829003018186803b1580156119be57600080fd5b6065546001600160a01b03163314612de55760405162461bcd60e51b8152600401610f569061565b565b60ca546001600160a01b0382811691161415612e545760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b6064820152608401610f56565b60ca80546001600160a01b0319166001600160a01b0383169081179091556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b158015612eab57600080fd5b505afa158015612ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee39190615080565b6001600160a01b031663c9c653963060ca60009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190615080565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015612fc057600080fd5b505af1158015612fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff89190615080565b60cd80546001600160a01b0319166001600160a01b03929092169190911790555050565b60de54339060ff16151560011461306e5760405162461bcd60e51b815260206004820152601660248201527510d4d2150e8810d85cda1bdd5d08111a5cd8589b195960521b6044820152606401610f56565b6001600160a01b0381166130b95760405162461bcd60e51b8152602060048201526012602482015271435348543a207a65726f206164647265737360701b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff16156131325760405162461bcd60e51b815260206004820152602760248201527f435348543a2074686973206164647265737320686173206265656e20626c61636044820152661adb1a5cdd195960ca1b6064820152608401610f56565b60cf546001600160a01b0382811691161480159061315e575060d1546001600160a01b03828116911614155b8015613178575060d0546001600160a01b03828116911614155b6131e15760405162461bcd60e51b815260206004820152603460248201527f435348543a2066757475726520616e642072657761726420706f6f6c732063616044820152736e6e6f7420636173686f7574207265776172647360601b6064820152608401610f56565b60c9546040516329b8573160e21b81526001600160a01b03838116600483015260248201859052600092169063a6e15cc49060440160206040518083038186803b15801561322e57600080fd5b505afa158015613242573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613266919061546a565b9050600081116132c35760405162461bcd60e51b815260206004820152602260248201527f435348543a20796f757220726577617264206973206e6f742072656164792079604482015261195d60f21b6064820152608401610f56565b60d8546000901561334457606460d854836132de919061585f565b6132e8919061583d565b60d15460d25491925061330d916001600160a01b03918216911661266f60028561583d565b60d154613329906001600160a01b03163061267960028561583d565b60d254613344906001600160a01b03166126a960028461583d565b61334e818361587e565b60d154909250613368906001600160a01b0316848461443c565b60c95460405163376db80160e11b81526001600160a01b0385811660048301526024820187905290911690636edb700290604401602060405180830381600087803b1580156133b657600080fd5b505af11580156133ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ee919061546a565b5050505050565b6065546001600160a01b0316331461341f5760405162461bcd60e51b8152600401610f569061565b565b60da55565b6065546001600160a01b0316331461344e5760405162461bcd60e51b8152600401610f569061565b565b606481111561349f5760405162461bcd60e51b815260206004820152601c60248201527f464545533a20636173686f757420657863656564696e672031303025000000006044820152606401610f56565b60d855565b6065546001600160a01b031633146134ce5760405162461bcd60e51b8152600401610f569061565b565b60c9546040516303f63ee760e01b81526001600160a01b03909116906303f63ee790612d409085908590600401615575565b6065546001600160a01b0316331461352a5760405162461bcd60e51b8152600401610f569061565b565b61353460006148fb565b565b6060336135555760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190615386565b6135fa5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663c92819ce33611ad2565b60c9546040805163055a757d60e41b815290516000926001600160a01b0316916355a757d0916004808301926020929190829003018186803b1580156119be57600080fd5b6065546001600160a01b031633146136805760405162461bcd60e51b8152600401610f569061565b565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6000609b82815481106136b7576136b761592d565b6000918252602090912001546001600160a01b031692915050565b6065546001600160a01b031633146136fc5760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d65460d3546137129190615825565b61371c9190615825565b6137269190615825565b905060648111156137495760405162461bcd60e51b8152600401610f56906156b5565b60d59190915560d755565b60c95460405163a3479b3360e01b81526000916001600160a01b03169063a3479b3390611f0b908590600401615567565b606060378054610f99906158c1565b6065546001600160a01b031633146137be5760405162461bcd60e51b8152600401610f569061565b565b60008160d65460d55460d3546137d49190615825565b6137de9190615825565b6137e89190615825565b9050606481111561380b5760405162461bcd60e51b8152600401610f56906156b5565b60d49190915560d755565b6065546001600160a01b031633146138405760405162461bcd60e51b8152600401610f569061565b565b60cd546001600160a01b03838116911614156138b25760405162461bcd60e51b815260206004820152602b60248201527f544b4e3a205468652050616e63616b655377617020706169722063616e6e6f7460448201526a081899481c995b5bdd995960aa1b6064820152608401610f56565b6138bc8282613e6b565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156139455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610f56565b613952828686840361400a565b506001949350505050565b60c9546040516367d65f5b60e11b81526000916001600160a01b03169063cfacbeb690611f0b908590600401615567565b60003361189d81858561431e565b6065546001600160a01b031633146139c65760405162461bcd60e51b8152600401610f569061565b565b60de805460ff1916911515919091179055565b6065546000906001600160a01b03163314613a065760405162461bcd60e51b8152600401610f569061565b565b60c9546040516330cd31af60e11b81526001600160a01b0384811660048301529091169063619a635e90602401611f0b565b919050565b6065546001600160a01b03163314613a675760405162461bcd60e51b8152600401610f569061565b565b60c954604051631c864c8f60e11b8152600481018390526001600160a01b039091169063390c991e90602401600060405180830381600087803b158015613aad57600080fd5b505af11580156133ee573d6000803e3d6000fd5b606033613ae05760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015613b3157600080fd5b505afa158015613b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b699190615386565b613b855760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316635b53f6fc33611ad2565b6065546001600160a01b03163314613bc65760405162461bcd60e51b8152600401610f569061565b565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613c125760405162461bcd60e51b8152600401610f569061565b565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613c5e5760405162461bcd60e51b8152600401610f569061565b565b60d9805460ff1916911515919091179055565b6065546001600160a01b03163314613c9b5760405162461bcd60e51b8152600401610f569061565b565b6001600160a01b038116613d005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f56565b613d09816148fb565b50565b6065546001600160a01b03163314613d365760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d55460d354613d4c9190615825565b613d569190615825565b613d609190615825565b90506064811115613d835760405162461bcd60e51b8152600401610f56906156b5565b60d69190915560d755565b6065546001600160a01b03163314613db85760405162461bcd60e51b8152600401610f569061565b565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16613e015760405162461bcd60e51b8152600401610f56906156ec565b61353461494d565b600054610100900460ff16613e305760405162461bcd60e51b8152600401610f56906156ec565b6138bc828261497d565b600054610100900460ff16613e615760405162461bcd60e51b8152600401610f56906156ec565b6138bc82826149cb565b6001600160a01b038216600090815260dd602052604090205460ff1615158115151415613f005760405162461bcd60e51b815260206004820152603d60248201527f544b4e3a204175746f6d61746564206d61726b6574206d616b6572207061697260448201527f20697320616c72656164792073657420746f20746861742076616c75650000006064820152608401610f56565b6001600160a01b0391909116600090815260dd60205260409020805460ff1916911515919091179055565b6001600160a01b038216613f815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610f56565b8060356000828254613f939190615825565b90915550506001600160a01b03821660009081526033602052604081208054839290613fc0908490615825565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03831661406c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610f56565b6001600160a01b0382166140cd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610f56565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6097546001600160a01b03841660009081526099602052604081205490918391614158908661585f565b614162919061583d565b61416c919061587e565b949350505050565b804710156141c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610f56565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614211576040519150601f19603f3d011682016040523d82523d6000602084013e614216565b606091505b505090508061428d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610f56565b505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114612bb757818110156143115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610f56565b612bb7848484840361400a565b6001600160a01b038316600090815260dc602052604090205460ff1615801561436057506001600160a01b038216600090815260dc602052604090205460ff16155b6143ac5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20426c61636b6c697374656420616464726573730000000000006044820152606401610f56565b61428d83838361443c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261428d908490614b09565b60c95460405163112469f960e21b81526001600160a01b0383811660048301526000921690634491a7e490602401611f0b565b6001600160a01b0383166144a05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610f56565b6001600160a01b0382166145025760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610f56565b6001600160a01b0383166000908152603360205260409020548181101561457a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610f56565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906145b1908490615825565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516145fd91815260200190565b60405180910390a3612bb7565b60d95460ff16156147b2576040805160038082526080820190925260009160208201606080368337019050509050308160008151811061464c5761464c61592d565b6001600160a01b0392831660209182029290920181019190915260ca54604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b1580156146a057600080fd5b505afa1580156146b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146d89190615080565b816001815181106146eb576146eb61592d565b6001600160a01b03928316602091820292909201015260db5482519116908290600290811061471c5761471c61592d565b6001600160a01b03928316602091820292909201015260ca54614742913091168461400a565b60ca54604051635c11d79560e01b81526001600160a01b0390911690635c11d7959061477b908590600090869089904290600401615737565b600060405180830381600087803b15801561479557600080fd5b505af11580156147a9573d6000803e3d6000fd5b50505050505050565b6138bc30838361443c565b60d95460ff16156147b25760408051600280825260608201835260009260208301908036833701905050905030816000815181106147fd576147fd61592d565b6001600160a01b0392831660209182029290920181019190915260ca54604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b15801561485157600080fd5b505afa158015614865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148899190615080565b8160018151811061489c5761489c61592d565b6001600160a01b03928316602091820292909201015260ca546148c2913091168461400a565b60ca54604051633b158ab160e11b81526001600160a01b039091169063762b15629061477b908590600090869089904290600401615737565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166149745760405162461bcd60e51b8152600401610f56906156ec565b613534336148fb565b600054610100900460ff166149a45760405162461bcd60e51b8152600401610f56906156ec565b81516149b7906036906020850190614ed5565b50805161428d906037906020840190614ed5565b600054610100900460ff166149f25760405162461bcd60e51b8152600401610f56906156ec565b8051825114614a5e5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610f56565b6000825111614aaf5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610f56565b60005b825181101561428d57614af7838281518110614ad057614ad061592d565b6020026020010151838381518110614aea57614aea61592d565b6020026020010151614bdb565b80614b01816158fc565b915050614ab2565b6000614b5e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dc19092919063ffffffff16565b80519091501561428d5780806020019051810190614b7c9190615386565b61428d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f56565b6001600160a01b038216614c465760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610f56565b60008111614c965760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610f56565b6001600160a01b03821660009081526099602052604090205415614d105760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401610f56565b609b8054600181019091557fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3490180546001600160a01b0319166001600160a01b0384169081179091556000908152609960205260409020819055609754614d78908290615825565b609755604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b606061416c8484600085856001600160a01b0385163b614e235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f56565b600080866001600160a01b03168587604051614e3f91906154d1565b60006040518083038185875af1925050503d8060008114614e7c576040519150601f19603f3d011682016040523d82523d6000602084013e614e81565b606091505b5091509150614e91828286614e9c565b979650505050505050565b60608315614eab575081611d75565b825115614ebb5782518084602001fd5b8160405162461bcd60e51b8152600401610f569190615590565b828054614ee1906158c1565b90600052602060002090601f016020900481019282614f035760008555614f49565b82601f10614f1c57805160ff1916838001178555614f49565b82800160010185558215614f49579182015b82811115614f49578251825591602001919060010190614f2e565b50614f55929150614f59565b5090565b5b80821115614f555760008155600101614f5a565b8035613a3881615959565b600082601f830112614f8a57600080fd5b81356020614f9f614f9a836157d9565b6157a8565b80838252828201915082860187848660051b8901011115614fbf57600080fd5b60005b85811015614fe7578135614fd581615959565b84529284019290840190600101614fc2565b5090979650505050505050565b600082601f83011261500557600080fd5b81356020615015614f9a836157d9565b80838252828201915082860187848660051b890101111561503557600080fd5b60005b85811015614fe757813584529284019290840190600101615038565b803560038110613a3857600080fd5b60006020828403121561507557600080fd5b8135611d7581615959565b60006020828403121561509257600080fd5b8151611d7581615959565b600080604083850312156150b057600080fd5b82356150bb81615959565b915060208301356150cb81615959565b809150509250929050565b6000806000606084860312156150eb57600080fd5b83356150f681615959565b9250602084013561510681615959565b929592945050506040919091013590565b6000806040838503121561512a57600080fd5b823561513581615959565b915060208301356150cb8161596e565b6000806040838503121561515857600080fd5b823561516381615959565b946020939093013593505050565b600080600080600080600060e0888a03121561518c57600080fd5b873567ffffffffffffffff808211156151a457600080fd5b6151b08b838c01614f79565b985060208a01359150808211156151c657600080fd5b6151d28b838c01614ff4565b975060408a01359150808211156151e857600080fd5b6151f48b838c01614f79565b965060608a013591508082111561520a57600080fd5b6152168b838c01614ff4565b955060808a013591508082111561522c57600080fd5b506152398a828b01614ff4565b93505061524860a08901614f6e565b915061525660c08901614f6e565b905092959891949750929550565b600080604080848603121561527857600080fd5b833567ffffffffffffffff8082111561529057600080fd5b818601915086601f8301126152a457600080fd5b813560206152b4614f9a836157d9565b8083825282820191508286018b848660051b89010111156152d457600080fd5b60005b85811015615349578135878111156152ee57600080fd5b8801603f81018e136152ff57600080fd5b8581013561530f614f9a826157fd565b8181528f8c83850101111561532357600080fd5b818c840189830137600091810188019190915285525092840192908401906001016152d7565b5050809850505061535b818901615054565b955050505050509250929050565b60006020828403121561537b57600080fd5b8135611d758161596e565b60006020828403121561539857600080fd5b8151611d758161596e565b6000602082840312156153b557600080fd5b611d7582615054565b600080604083850312156153d157600080fd5b61516383615054565b6000602082840312156153ec57600080fd5b815167ffffffffffffffff81111561540357600080fd5b8201601f8101841361541457600080fd5b8051615422614f9a826157fd565b81815285602083850101111561543757600080fd5b615448826020830160208601615895565b95945050505050565b60006020828403121561546357600080fd5b5035919050565b60006020828403121561547c57600080fd5b5051919050565b600381106154a157634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526154bd816020860160208601615895565b601f01601f19169290920160200192915050565b600082516154e3818460208701615895565b9190910192915050565b60006060820160018060a01b0386168352602060608185015281865180845260808601915060808160051b870101935082880160005b8281101561555157607f1988870301845261553f8683516154a5565b95509284019290840190600101615523565b50505050508091505061416c6040830184615483565b602081016118a38284615483565b604081016155838285615483565b8260208301529392505050565b602081526000611d7560208301846154a5565b6020808252600d908201526c2727902727a2229027aba722a960991b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600b908201526a053454e44455220495320360ac1b604082015260600190565b6020808252601a908201527f464545533a20746f74616c20657863656564696e672031303025000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156157875784516001600160a01b031683529383019391830191600101615762565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156157d1576157d1615943565b604052919050565b600067ffffffffffffffff8211156157f3576157f3615943565b5060051b60200190565b600067ffffffffffffffff82111561581757615817615943565b50601f01601f191660200190565b6000821982111561583857615838615917565b500190565b60008261585a57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561587957615879615917565b500290565b60008282101561589057615890615917565b500390565b60005b838110156158b0578181015183820152602001615898565b83811115612bb75750506000910152565b600181811c908216806158d557607f821691505b602082108114156158f657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561591057615910615917565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613d0957600080fd5b8015158114613d0957600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x6080604052600436106104985760003560e01c806365bfe43011610260578063a5f3d00311610144578063ce7c2ac2116100c1578063e33b7de311610085578063e33b7de314610e77578063e37ba8f914610e8c578063e9ebdca114610eac578063f2fde38b14610ecc578063f78d5c5514610eec578063fb0a749414610f0c57600080fd5b8063ce7c2ac214610d90578063cfad607514610dc6578063cfc0d02414610ddb578063d79779b214610dfb578063dd62ed3e14610e3157600080fd5b8063b62496f511610108578063b62496f514610cf0578063b96392c114610d20578063b9bd393314610d40578063c3491b4914610d5a578063cc32d17614610d7a57600080fd5b8063a5f3d00314610c64578063a79ebbcd14610c7a578063a9059cbb14610c9a578063b3328aae14610cba578063b47bef5014610cda57600080fd5b8063809d458d116101dd57806393a93355116101a157806393a9335514610b9957806395d89b4114610bb95780639723283014610bce5780639852595c14610bee5780639a7a23d614610c24578063a457c2d714610c4457600080fd5b8063809d458d14610afb578063810be66d14610b1b5780638b83209b14610b3b5780638da5cb5b14610b5b5780638e67566314610b7957600080fd5b806370a082311161022457806370a0823114610a665780637135404914610a9c578063715018a614610abc5780637650e15114610ad157806378045b4d14610ae657600080fd5b806365bfe430146109d0578063665a11ca146109f05780636770474b14610a105780636815a91c14610a305780636d9ae0be14610a5057600080fd5b80632bb14e1d1161038757806349bd5a5e11610304578063559bf302116102c8578063559bf302146109305780635b0d4674146109505780635d516efc146109655780635f1c31821461098557806363584ecd1461099b57806365b8dbc0146109b057600080fd5b806349bd5a5e146108b05780634be8f732146108d05780634d356c2f146108f0578063545579731461090557806354f12f1f1461091a57600080fd5b80633a98ef391161034b5780633a98ef39146107f5578063406072a91461080a57806341bc03121461085057806348b750441461087057806348df58291461089057600080fd5b80632bb14e1d14610778578063313ce5671461078e57806335292548146107aa57806339306140146107bf57806339509351146107d557600080fd5b806313114a9d1161041557806319165587116103d957806319165587146106ce5780631cdd3be3146106ee57806323b872dd1461071e5780632939a0a61461073e5780632aa0d2841461075e57600080fd5b806313114a9d14610659578063138a634a1461066f5780631694505e14610684578063177a33ac146106a457806318160ddd146106b957600080fd5b8063084a6bff1161045c578063084a6bff146105a7578063095ea7b3146105c757806309a69f57146105f75780630dae667b1461061a57806311eac8551461063957600080fd5b80630359fea9146104e657806303d29d281461052357806305060bd51461054557806306fdde0314610565578063080310121461058757600080fd5b366104e1577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156104f257600080fd5b5060d154610506906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561052f57600080fd5b5061054361053e366004615117565b610f2c565b005b34801561055157600080fd5b5060c954610506906001600160a01b031681565b34801561057157600080fd5b5061057a610f8a565b60405161051a9190615590565b34801561059357600080fd5b506105436105a2366004615171565b61101c565b3480156105b357600080fd5b506105436105c2366004615451565b61180d565b3480156105d357600080fd5b506105e76105e2366004615145565b61188f565b604051901515815260200161051a565b34801561060357600080fd5b5061060c6118a9565b60405190815260200161051a565b34801561062657600080fd5b5060de546105e790610100900460ff1681565b34801561064557600080fd5b5060db54610506906001600160a01b031681565b34801561066557600080fd5b5061060c60d75481565b34801561067b57600080fd5b5061057a6119fb565b34801561069057600080fd5b5060ca54610506906001600160a01b031681565b3480156106b057600080fd5b5061057a611b4d565b3480156106c557600080fd5b5060355461060c565b3480156106da57600080fd5b506105436106e9366004615063565b611c28565b3480156106fa57600080fd5b506105e7610709366004615063565b60dc6020526000908152604090205460ff1681565b34801561072a57600080fd5b506105e76107393660046150d6565b611d56565b34801561074a57600080fd5b50610543610759366004615369565b611d7c565b34801561076a57600080fd5b5060d9546105e79060ff1681565b34801561078457600080fd5b5061060c60d35481565b34801561079a57600080fd5b506040516012815260200161051a565b3480156107b657600080fd5b5061057a611dc0565b3480156107cb57600080fd5b5061060c60ce5481565b3480156107e157600080fd5b506105e76107f0366004615145565b611e9b565b34801561080157600080fd5b5060975461060c565b34801561081657600080fd5b5061060c61082536600461509d565b6001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b34801561085c57600080fd5b5061060c61086b3660046153a3565b611eda565b34801561087c57600080fd5b5061054361088b36600461509d565b611f5b565b34801561089c57600080fd5b5060d054610506906001600160a01b031681565b3480156108bc57600080fd5b5060cd54610506906001600160a01b031681565b3480156108dc57600080fd5b506105436108eb366004615264565b612143565b3480156108fc57600080fd5b5061057a612760565b34801561091157600080fd5b5061054361283b565b34801561092657600080fd5b5061060c60d55481565b34801561093c57600080fd5b5061054361094b366004615063565b612bbd565b34801561095c57600080fd5b5061057a612c09565b34801561097157600080fd5b506105436109803660046153be565b612ce4565b34801561099157600080fd5b5061060c60da5481565b3480156109a757600080fd5b5061060c612d76565b3480156109bc57600080fd5b506105436109cb366004615063565b612dbb565b3480156109dc57600080fd5b506105436109eb366004615451565b61301c565b3480156109fc57600080fd5b5060d254610506906001600160a01b031681565b348015610a1c57600080fd5b50610543610a2b366004615451565b6133f5565b348015610a3c57600080fd5b50610543610a4b366004615451565b613424565b348015610a5c57600080fd5b5061060c60d85481565b348015610a7257600080fd5b5061060c610a81366004615063565b6001600160a01b031660009081526033602052604090205490565b348015610aa857600080fd5b50610543610ab73660046153be565b6134a4565b348015610ac857600080fd5b50610543613500565b348015610add57600080fd5b5061057a613536565b348015610af257600080fd5b5061060c613611565b348015610b0757600080fd5b50610543610b16366004615063565b613656565b348015610b2757600080fd5b5060cf54610506906001600160a01b031681565b348015610b4757600080fd5b50610506610b56366004615451565b6136a2565b348015610b6757600080fd5b506065546001600160a01b0316610506565b348015610b8557600080fd5b50610543610b94366004615451565b6136d2565b348015610ba557600080fd5b5061060c610bb43660046153a3565b613754565b348015610bc557600080fd5b5061057a613785565b348015610bda57600080fd5b50610543610be9366004615451565b613794565b348015610bfa57600080fd5b5061060c610c09366004615063565b6001600160a01b03166000908152609a602052604090205490565b348015610c3057600080fd5b50610543610c3f366004615117565b613816565b348015610c5057600080fd5b506105e7610c5f366004615145565b6138c0565b348015610c7057600080fd5b5061060c60d65481565b348015610c8657600080fd5b5061060c610c953660046153a3565b61395d565b348015610ca657600080fd5b506105e7610cb5366004615145565b61398e565b348015610cc657600080fd5b50610543610cd5366004615369565b61399c565b348015610ce657600080fd5b5061060c60cb5481565b348015610cfc57600080fd5b506105e7610d0b366004615063565b60dd6020526000908152604090205460ff1681565b348015610d2c57600080fd5b5061060c610d3b366004615063565b6139d9565b348015610d4c57600080fd5b5060de546105e79060ff1681565b348015610d6657600080fd5b50610543610d75366004615451565b613a3d565b348015610d8657600080fd5b5061060c60d45481565b348015610d9c57600080fd5b5061060c610dab366004615063565b6001600160a01b031660009081526099602052604090205490565b348015610dd257600080fd5b5061057a613ac1565b348015610de757600080fd5b50610543610df6366004615063565b613b9c565b348015610e0757600080fd5b5061060c610e16366004615063565b6001600160a01b03166000908152609c602052604090205490565b348015610e3d57600080fd5b5061060c610e4c36600461509d565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610e8357600080fd5b5060985461060c565b348015610e9857600080fd5b50610543610ea7366004615063565b613be8565b348015610eb857600080fd5b50610543610ec7366004615369565b613c34565b348015610ed857600080fd5b50610543610ee7366004615063565b613c71565b348015610ef857600080fd5b50610543610f07366004615451565b613d0c565b348015610f1857600080fd5b50610543610f27366004615063565b613d8e565b6065546001600160a01b03163314610f5f5760405162461bcd60e51b8152600401610f569061565b565b60405180910390fd5b6001600160a01b0391909116600090815260dc60205260409020805460ff1916911515919091179055565b606060368054610f99906158c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc5906158c1565b80156110125780601f10610fe757610100808354040283529160200191611012565b820191906000526020600020905b815481529060010190602001808311610ff557829003601f168201915b5050505050905090565b600054610100900460ff166110375760005460ff161561103b565b303b155b61109e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f56565b600054610100900460ff161580156110c0576000805461ffff19166101011790555b600086511180156110d2575060008551115b6111155760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b6044820152606401610f56565b61111d613dda565b6111656040518060400160405280600b81526020016a3078426c6f636b7320763160a81b81525060405180604001604052806003815260200162182c2160e91b815250613e09565b61116f8888613e3a565b856001815181106111825761118261592d565b602002602001015160cf60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856002815181106111c3576111c361592d565b602002602001015160d260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856003815181106112045761120461592d565b602002602001015160d060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856004815181106112455761124561592d565b602090810291909101015160d180546001600160a01b0319166001600160a01b0392831617905560cf541615801590611288575060d2546001600160a01b031615155b801561129e575060d0546001600160a01b031615155b80156112b4575060d1546001600160a01b031615155b6112f25760405162461bcd60e51b815260206004820152600f60248201526e1413d3d30816915493c81193d55391608a1b6044820152606401610f56565b6001600160a01b0383166113365760405162461bcd60e51b815260206004820152600b60248201526a524f55544552205a45524f60a81b6044820152606401610f56565b60008390506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190615080565b6001600160a01b031663c9c6539630846001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190615080565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae9190615080565b60ca80546001600160a01b038086166001600160a01b03199283161790925560cd80549284169290911691909117905590506114eb816001613e6b565b6000866000815181106115005761150061592d565b602002602001015111801561152f57506000866001815181106115255761152561592d565b6020026020010151115b8015611555575060008660028151811061154b5761154b61592d565b6020026020010151115b801561157b57506000866003815181106115715761157161592d565b6020026020010151115b80156115a157506000866004815181106115975761159761592d565b6020026020010151115b6115dd5760405162461bcd60e51b815260206004820152600d60248201526c0c094811915154c81193d55391609a1b6044820152606401610f56565b856000815181106115f0576115f061592d565b602002602001015160d681905550856001815181106116115761161161592d565b602002602001015160d481905550856002815181106116325761163261592d565b602002602001015160d381905550856003815181106116535761165361592d565b602002602001015160d581905550856004815181106116745761167461592d565b602002602001015160d88190555060d45460d65460d55460d3546116989190615825565b6116a29190615825565b6116ac9190615825565b60d75586518851146116f75760405162461bcd60e51b815260206004820152601460248201527320a222291013102120a620a721a29022a92927a960611b6044820152606401610f56565b60005b8851811015611764576117528982815181106117185761171861592d565b60200260200101518983815181106117325761173261592d565b6020026020010151670de0b6b3a764000061174d919061585f565b613f2b565b8061175c816158fc565b9150506116fa565b5060355469d65f55192a50a6440000146117b85760405162461bcd60e51b81526020600482015260156024820152741515130814d5541413164811125191880c48135253605a1b6044820152606401610f56565b505060db80546001600160a01b0319166001600160a01b038416179055606460cb55600a60cc5560d9805460ff19166001179055600060da558015611803576000805461ff00191690555b5050505050505050565b6065546001600160a01b031633146118375760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d65460d55461184d9190615825565b6118579190615825565b6118619190615825565b905060648111156118845760405162461bcd60e51b8152600401610f56906156b5565b60d39190915560d755565b60003361189d81858561400a565b60019150505b92915050565b6000336118c85760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190615386565b61196d5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663619a635e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156119be57600080fd5b505afa1580156119d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f6919061546a565b905090565b606033611a1a5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a6b57600080fd5b505afa158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa39190615386565b611abf5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663334de3a2335b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160006040518083038186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f691908101906153da565b606033611b6c5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190615386565b611c115760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316636b4da10233611ad2565b6001600160a01b038116600090815260996020526040902054611c5d5760405162461bcd60e51b8152600401610f56906155ca565b6000611c6860985490565b611c729047615825565b90506000611c9f8383611c9a866001600160a01b03166000908152609a602052604090205490565b61412e565b905080611cbe5760405162461bcd60e51b8152600401610f5690615610565b6001600160a01b0383166000908152609a602052604081208054839290611ce6908490615825565b925050819055508060986000828254611cff9190615825565b90915550611d0f90508382614174565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b600033611d64858285614292565b611d6f85858561431e565b60019150505b9392505050565b6065546001600160a01b03163314611da65760405162461bcd60e51b8152600401610f569061565b565b60de80549115156101000261ff0019909216919091179055565b606033611ddf5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e3057600080fd5b505afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190615386565b611e845760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663aa57be3033611ad2565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061189d9082908690611ed5908790615825565b61400a565b60c954604051631f7bcc4b60e01b81526000916001600160a01b031690631f7bcc4b90611f0b908590600401615567565b60206040518083038186803b158015611f2357600080fd5b505afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a3919061546a565b6001600160a01b038116600090815260996020526040902054611f905760405162461bcd60e51b8152600401610f56906155ca565b6001600160a01b0382166000908152609c60205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015611fe857600080fd5b505afa158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612020919061546a565b61202a9190615825565b905060006120638383611c9a87876001600160a01b039182166000908152609d6020908152604080832093909416825291909152205490565b9050806120825760405162461bcd60e51b8152600401610f5690615610565b6001600160a01b038085166000908152609d60209081526040808320938716835292905290812080548392906120b9908490615825565b90915550506001600160a01b0384166000908152609c6020526040812080548392906120e6908490615825565b909155506120f790508484836143b7565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b60de54610100900460ff1661219a5760405162461bcd60e51b815260206004820152601d60248201527f4e4f44454d494e543a206d696e74206e6f6465732064697361626c65640000006044820152606401610f56565b60cc54825111156121ed5760405162461bcd60e51b815260206004820152601860248201527f4e4f44454d494e543a20746f6f206d616e79206e6f64657300000000000000006044820152606401610f56565b60005b82518110156122a657600383828151811061220d5761220d61592d565b60200260200101515111801561223d575060218382815181106122325761223261592d565b602002602001015151105b6122945760405162461bcd60e51b815260206004820152602260248201527f4e4f44454d494e543a20696d70726f7065722063686172616374657220636f756044820152611b9d60f21b6064820152608401610f56565b8061229e816158fc565b9150506121f0565b5033806122ee5760405162461bcd60e51b81526020600482015260166024820152754e4f44454d494e543a207a65726f206164647265737360501b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff16156123575760405162461bcd60e51b815260206004820152601d60248201527f4e4f44454d494e543a20626c61636b6c697374656420616464726573730000006044820152606401610f56565b60cf546001600160a01b03828116911614801590612383575060d1546001600160a01b03828116911614155b801561239d575060d0546001600160a01b03828116911614155b6123f45760405162461bcd60e51b815260206004820152602260248201527f4e4f44454d494e543a20706f6f6c732063616e6e6f7420637265617465206e6f604482015261646560f01b6064820152608401610f56565b60006123ff82614409565b905060cb548451826124119190615825565b111561245f5760405162461bcd60e51b815260206004820152601c60248201527f4e4f44454d494e543a2072656163686564206d696e74206c696d6974000000006044820152606401610f56565b835160c954604051631f7bcc4b60e01b8152600092916001600160a01b031690631f7bcc4b90612493908890600401615567565b60206040518083038186803b1580156124ab57600080fd5b505afa1580156124bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e3919061546a565b6124ed919061585f565b90508060ce60008282546125019190615825565b90915550506001600160a01b03831660009081526033602052604090205481111561257e5760405162461bcd60e51b815260206004820152602760248201527f4e4f44454d494e543a2042616c616e636520746f6f206c6f7720666f7220637260448201526632b0ba34b7b71760c91b6064820152608401610f56565b6000606460d65483612590919061585f565b61259a919061583d565b90506125a784308361443c565b60cf546125bd906001600160a01b03168261460a565b6000606460d354846125cf919061585f565b6125d9919061583d565b60d1549091506125f49086906001600160a01b03168361443c565b6000606460d45485612606919061585f565b612610919061583d565b905061261d86308361443c565b60d054612633906001600160a01b03168261460a565b6000606460d55486612645919061585f565b61264f919061583d565b60d25490915061267e9088906001600160a01b031661266f60028561583d565b612679908561587e565b61443c565b61268e873061267960028561583d565b60d2546126ae906001600160a01b03166126a960028461583d565b6147bd565b60008183856126bd888a61587e565b6126c7919061587e565b6126d1919061587e565b6126db919061587e565b905080156126ee576126ee88308361443c565b60c954604051637b358d0560e01b81526001600160a01b0390911690637b358d0590612722908b908e908e906004016154ed565b600060405180830381600087803b15801561273c57600080fd5b505af1158015612750573d6000803e3d6000fd5b5050505050505050505050505050565b60603361277f5760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156127d057600080fd5b505afa1580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128089190615386565b6128245760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663fd8db54633611ad2565b60de54339060ff1615156001146128945760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20636173686f75742064697361626c6564000000000000006044820152606401610f56565b6001600160a01b0381166128e25760405162461bcd60e51b815260206004820152601560248201527443534854414c4c3a207a65726f206164647265737360581b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff161561294b5760405162461bcd60e51b815260206004820152601c60248201527f43534854414c4c3a20626c61636b6c69737465642061646472657373000000006044820152606401610f56565b60cf546001600160a01b03828116911614801590612977575060d1546001600160a01b03828116911614155b6129c35760405162461bcd60e51b815260206004820152601d60248201527f43534854414c4c3a20706f6f6c732063616e6e6f7420636173686f75740000006044820152606401610f56565b60c9546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b158015612a0957600080fd5b505afa158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a41919061546a565b905060008111612a935760405162461bcd60e51b815260206004820152601960248201527f43534854414c4c3a20726577617264206e6f74207265616479000000000000006044820152606401610f56565b60d85460009015612b1457606460d85483612aae919061585f565b612ab8919061583d565b60d15460d254919250612add916001600160a01b03918216911661266f60028561583d565b60d154612af9906001600160a01b03163061267960028561583d565b60d254612b14906001600160a01b03166126a960028461583d565b612b1e818361587e565b60d154909250612b38906001600160a01b0316848461443c565b60c95460405163170a62c760e21b81526001600160a01b03858116600483015290911690635c298b1c90602401602060405180830381600087803b158015612b7f57600080fd5b505af1158015612b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb7919061546a565b50505050565b6065546001600160a01b03163314612be75760405162461bcd60e51b8152600401610f569061565b565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b606033612c285760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612c7957600080fd5b505afa158015612c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb19190615386565b612ccd5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316634a389fae33611ad2565b6065546001600160a01b03163314612d0e5760405162461bcd60e51b8152600401610f569061565b565b60c9546040516353f63f7f60e01b81526001600160a01b03909116906353f63f7f90612d409085908590600401615575565b600060405180830381600087803b158015612d5a57600080fd5b505af1158015612d6e573d6000803e3d6000fd5b505050505050565b60c9546040805163b8527aef60e01b815290516000926001600160a01b03169163b8527aef916004808301926020929190829003018186803b1580156119be57600080fd5b6065546001600160a01b03163314612de55760405162461bcd60e51b8152600401610f569061565b565b60ca546001600160a01b0382811691161415612e545760405162461bcd60e51b815260206004820152602860248201527f544b4e3a2054686520726f7574657220616c7265616479206861732074686174604482015267206164647265737360c01b6064820152608401610f56565b60ca80546001600160a01b0319166001600160a01b0383169081179091556040805163c45a015560e01b815290516000929163c45a0155916004808301926020929190829003018186803b158015612eab57600080fd5b505afa158015612ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee39190615080565b6001600160a01b031663c9c653963060ca60009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190615080565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015612fc057600080fd5b505af1158015612fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff89190615080565b60cd80546001600160a01b0319166001600160a01b03929092169190911790555050565b60de54339060ff16151560011461306e5760405162461bcd60e51b815260206004820152601660248201527510d4d2150e8810d85cda1bdd5d08111a5cd8589b195960521b6044820152606401610f56565b6001600160a01b0381166130b95760405162461bcd60e51b8152602060048201526012602482015271435348543a207a65726f206164647265737360701b6044820152606401610f56565b6001600160a01b038116600090815260dc602052604090205460ff16156131325760405162461bcd60e51b815260206004820152602760248201527f435348543a2074686973206164647265737320686173206265656e20626c61636044820152661adb1a5cdd195960ca1b6064820152608401610f56565b60cf546001600160a01b0382811691161480159061315e575060d1546001600160a01b03828116911614155b8015613178575060d0546001600160a01b03828116911614155b6131e15760405162461bcd60e51b815260206004820152603460248201527f435348543a2066757475726520616e642072657761726420706f6f6c732063616044820152736e6e6f7420636173686f7574207265776172647360601b6064820152608401610f56565b60c9546040516329b8573160e21b81526001600160a01b03838116600483015260248201859052600092169063a6e15cc49060440160206040518083038186803b15801561322e57600080fd5b505afa158015613242573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613266919061546a565b9050600081116132c35760405162461bcd60e51b815260206004820152602260248201527f435348543a20796f757220726577617264206973206e6f742072656164792079604482015261195d60f21b6064820152608401610f56565b60d8546000901561334457606460d854836132de919061585f565b6132e8919061583d565b60d15460d25491925061330d916001600160a01b03918216911661266f60028561583d565b60d154613329906001600160a01b03163061267960028561583d565b60d254613344906001600160a01b03166126a960028461583d565b61334e818361587e565b60d154909250613368906001600160a01b0316848461443c565b60c95460405163376db80160e11b81526001600160a01b0385811660048301526024820187905290911690636edb700290604401602060405180830381600087803b1580156133b657600080fd5b505af11580156133ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ee919061546a565b5050505050565b6065546001600160a01b0316331461341f5760405162461bcd60e51b8152600401610f569061565b565b60da55565b6065546001600160a01b0316331461344e5760405162461bcd60e51b8152600401610f569061565b565b606481111561349f5760405162461bcd60e51b815260206004820152601c60248201527f464545533a20636173686f757420657863656564696e672031303025000000006044820152606401610f56565b60d855565b6065546001600160a01b031633146134ce5760405162461bcd60e51b8152600401610f569061565b565b60c9546040516303f63ee760e01b81526001600160a01b03909116906303f63ee790612d409085908590600401615575565b6065546001600160a01b0316331461352a5760405162461bcd60e51b8152600401610f569061565b565b61353460006148fb565b565b6060336135555760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190615386565b6135fa5760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b031663c92819ce33611ad2565b60c9546040805163055a757d60e41b815290516000926001600160a01b0316916355a757d0916004808301926020929190829003018186803b1580156119be57600080fd5b6065546001600160a01b031633146136805760405162461bcd60e51b8152600401610f569061565b565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b6000609b82815481106136b7576136b761592d565b6000918252602090912001546001600160a01b031692915050565b6065546001600160a01b031633146136fc5760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d65460d3546137129190615825565b61371c9190615825565b6137269190615825565b905060648111156137495760405162461bcd60e51b8152600401610f56906156b5565b60d59190915560d755565b60c95460405163a3479b3360e01b81526000916001600160a01b03169063a3479b3390611f0b908590600401615567565b606060378054610f99906158c1565b6065546001600160a01b031633146137be5760405162461bcd60e51b8152600401610f569061565b565b60008160d65460d55460d3546137d49190615825565b6137de9190615825565b6137e89190615825565b9050606481111561380b5760405162461bcd60e51b8152600401610f56906156b5565b60d49190915560d755565b6065546001600160a01b031633146138405760405162461bcd60e51b8152600401610f569061565b565b60cd546001600160a01b03838116911614156138b25760405162461bcd60e51b815260206004820152602b60248201527f544b4e3a205468652050616e63616b655377617020706169722063616e6e6f7460448201526a081899481c995b5bdd995960aa1b6064820152608401610f56565b6138bc8282613e6b565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156139455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610f56565b613952828686840361400a565b506001949350505050565b60c9546040516367d65f5b60e11b81526000916001600160a01b03169063cfacbeb690611f0b908590600401615567565b60003361189d81858561431e565b6065546001600160a01b031633146139c65760405162461bcd60e51b8152600401610f569061565b565b60de805460ff1916911515919091179055565b6065546000906001600160a01b03163314613a065760405162461bcd60e51b8152600401610f569061565b565b60c9546040516330cd31af60e11b81526001600160a01b0384811660048301529091169063619a635e90602401611f0b565b919050565b6065546001600160a01b03163314613a675760405162461bcd60e51b8152600401610f569061565b565b60c954604051631c864c8f60e11b8152600481018390526001600160a01b039091169063390c991e90602401600060405180830381600087803b158015613aad57600080fd5b505af11580156133ee573d6000803e3d6000fd5b606033613ae05760405162461bcd60e51b8152600401610f5690615690565b60c9546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015613b3157600080fd5b505afa158015613b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b699190615386565b613b855760405162461bcd60e51b8152600401610f56906155a3565b60c9546001600160a01b0316635b53f6fc33611ad2565b6065546001600160a01b03163314613bc65760405162461bcd60e51b8152600401610f569061565b565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613c125760405162461bcd60e51b8152600401610f569061565b565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314613c5e5760405162461bcd60e51b8152600401610f569061565b565b60d9805460ff1916911515919091179055565b6065546001600160a01b03163314613c9b5760405162461bcd60e51b8152600401610f569061565b565b6001600160a01b038116613d005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f56565b613d09816148fb565b50565b6065546001600160a01b03163314613d365760405162461bcd60e51b8152600401610f569061565b565b60008160d45460d55460d354613d4c9190615825565b613d569190615825565b613d609190615825565b90506064811115613d835760405162461bcd60e51b8152600401610f56906156b5565b60d69190915560d755565b6065546001600160a01b03163314613db85760405162461bcd60e51b8152600401610f569061565b565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16613e015760405162461bcd60e51b8152600401610f56906156ec565b61353461494d565b600054610100900460ff16613e305760405162461bcd60e51b8152600401610f56906156ec565b6138bc828261497d565b600054610100900460ff16613e615760405162461bcd60e51b8152600401610f56906156ec565b6138bc82826149cb565b6001600160a01b038216600090815260dd602052604090205460ff1615158115151415613f005760405162461bcd60e51b815260206004820152603d60248201527f544b4e3a204175746f6d61746564206d61726b6574206d616b6572207061697260448201527f20697320616c72656164792073657420746f20746861742076616c75650000006064820152608401610f56565b6001600160a01b0391909116600090815260dd60205260409020805460ff1916911515919091179055565b6001600160a01b038216613f815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610f56565b8060356000828254613f939190615825565b90915550506001600160a01b03821660009081526033602052604081208054839290613fc0908490615825565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03831661406c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610f56565b6001600160a01b0382166140cd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610f56565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6097546001600160a01b03841660009081526099602052604081205490918391614158908661585f565b614162919061583d565b61416c919061587e565b949350505050565b804710156141c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610f56565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614211576040519150601f19603f3d011682016040523d82523d6000602084013e614216565b606091505b505090508061428d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610f56565b505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114612bb757818110156143115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610f56565b612bb7848484840361400a565b6001600160a01b038316600090815260dc602052604090205460ff1615801561436057506001600160a01b038216600090815260dc602052604090205460ff16155b6143ac5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20426c61636b6c697374656420616464726573730000000000006044820152606401610f56565b61428d83838361443c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261428d908490614b09565b60c95460405163112469f960e21b81526001600160a01b0383811660048301526000921690634491a7e490602401611f0b565b6001600160a01b0383166144a05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610f56565b6001600160a01b0382166145025760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610f56565b6001600160a01b0383166000908152603360205260409020548181101561457a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610f56565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906145b1908490615825565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516145fd91815260200190565b60405180910390a3612bb7565b60d95460ff16156147b2576040805160038082526080820190925260009160208201606080368337019050509050308160008151811061464c5761464c61592d565b6001600160a01b0392831660209182029290920181019190915260ca54604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b1580156146a057600080fd5b505afa1580156146b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146d89190615080565b816001815181106146eb576146eb61592d565b6001600160a01b03928316602091820292909201015260db5482519116908290600290811061471c5761471c61592d565b6001600160a01b03928316602091820292909201015260ca54614742913091168461400a565b60ca54604051635c11d79560e01b81526001600160a01b0390911690635c11d7959061477b908590600090869089904290600401615737565b600060405180830381600087803b15801561479557600080fd5b505af11580156147a9573d6000803e3d6000fd5b50505050505050565b6138bc30838361443c565b60d95460ff16156147b25760408051600280825260608201835260009260208301908036833701905050905030816000815181106147fd576147fd61592d565b6001600160a01b0392831660209182029290920181019190915260ca54604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b15801561485157600080fd5b505afa158015614865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148899190615080565b8160018151811061489c5761489c61592d565b6001600160a01b03928316602091820292909201015260ca546148c2913091168461400a565b60ca54604051633b158ab160e11b81526001600160a01b039091169063762b15629061477b908590600090869089904290600401615737565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166149745760405162461bcd60e51b8152600401610f56906156ec565b613534336148fb565b600054610100900460ff166149a45760405162461bcd60e51b8152600401610f56906156ec565b81516149b7906036906020850190614ed5565b50805161428d906037906020840190614ed5565b600054610100900460ff166149f25760405162461bcd60e51b8152600401610f56906156ec565b8051825114614a5e5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b6064820152608401610f56565b6000825111614aaf5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610f56565b60005b825181101561428d57614af7838281518110614ad057614ad061592d565b6020026020010151838381518110614aea57614aea61592d565b6020026020010151614bdb565b80614b01816158fc565b915050614ab2565b6000614b5e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dc19092919063ffffffff16565b80519091501561428d5780806020019051810190614b7c9190615386565b61428d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f56565b6001600160a01b038216614c465760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610f56565b60008111614c965760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610f56565b6001600160a01b03821660009081526099602052604090205415614d105760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401610f56565b609b8054600181019091557fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3490180546001600160a01b0319166001600160a01b0384169081179091556000908152609960205260409020819055609754614d78908290615825565b609755604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b606061416c8484600085856001600160a01b0385163b614e235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f56565b600080866001600160a01b03168587604051614e3f91906154d1565b60006040518083038185875af1925050503d8060008114614e7c576040519150601f19603f3d011682016040523d82523d6000602084013e614e81565b606091505b5091509150614e91828286614e9c565b979650505050505050565b60608315614eab575081611d75565b825115614ebb5782518084602001fd5b8160405162461bcd60e51b8152600401610f569190615590565b828054614ee1906158c1565b90600052602060002090601f016020900481019282614f035760008555614f49565b82601f10614f1c57805160ff1916838001178555614f49565b82800160010185558215614f49579182015b82811115614f49578251825591602001919060010190614f2e565b50614f55929150614f59565b5090565b5b80821115614f555760008155600101614f5a565b8035613a3881615959565b600082601f830112614f8a57600080fd5b81356020614f9f614f9a836157d9565b6157a8565b80838252828201915082860187848660051b8901011115614fbf57600080fd5b60005b85811015614fe7578135614fd581615959565b84529284019290840190600101614fc2565b5090979650505050505050565b600082601f83011261500557600080fd5b81356020615015614f9a836157d9565b80838252828201915082860187848660051b890101111561503557600080fd5b60005b85811015614fe757813584529284019290840190600101615038565b803560038110613a3857600080fd5b60006020828403121561507557600080fd5b8135611d7581615959565b60006020828403121561509257600080fd5b8151611d7581615959565b600080604083850312156150b057600080fd5b82356150bb81615959565b915060208301356150cb81615959565b809150509250929050565b6000806000606084860312156150eb57600080fd5b83356150f681615959565b9250602084013561510681615959565b929592945050506040919091013590565b6000806040838503121561512a57600080fd5b823561513581615959565b915060208301356150cb8161596e565b6000806040838503121561515857600080fd5b823561516381615959565b946020939093013593505050565b600080600080600080600060e0888a03121561518c57600080fd5b873567ffffffffffffffff808211156151a457600080fd5b6151b08b838c01614f79565b985060208a01359150808211156151c657600080fd5b6151d28b838c01614ff4565b975060408a01359150808211156151e857600080fd5b6151f48b838c01614f79565b965060608a013591508082111561520a57600080fd5b6152168b838c01614ff4565b955060808a013591508082111561522c57600080fd5b506152398a828b01614ff4565b93505061524860a08901614f6e565b915061525660c08901614f6e565b905092959891949750929550565b600080604080848603121561527857600080fd5b833567ffffffffffffffff8082111561529057600080fd5b818601915086601f8301126152a457600080fd5b813560206152b4614f9a836157d9565b8083825282820191508286018b848660051b89010111156152d457600080fd5b60005b85811015615349578135878111156152ee57600080fd5b8801603f81018e136152ff57600080fd5b8581013561530f614f9a826157fd565b8181528f8c83850101111561532357600080fd5b818c840189830137600091810188019190915285525092840192908401906001016152d7565b5050809850505061535b818901615054565b955050505050509250929050565b60006020828403121561537b57600080fd5b8135611d758161596e565b60006020828403121561539857600080fd5b8151611d758161596e565b6000602082840312156153b557600080fd5b611d7582615054565b600080604083850312156153d157600080fd5b61516383615054565b6000602082840312156153ec57600080fd5b815167ffffffffffffffff81111561540357600080fd5b8201601f8101841361541457600080fd5b8051615422614f9a826157fd565b81815285602083850101111561543757600080fd5b615448826020830160208601615895565b95945050505050565b60006020828403121561546357600080fd5b5035919050565b60006020828403121561547c57600080fd5b5051919050565b600381106154a157634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526154bd816020860160208601615895565b601f01601f19169290920160200192915050565b600082516154e3818460208701615895565b9190910192915050565b60006060820160018060a01b0386168352602060608185015281865180845260808601915060808160051b870101935082880160005b8281101561555157607f1988870301845261553f8683516154a5565b95509284019290840190600101615523565b50505050508091505061416c6040830184615483565b602081016118a38284615483565b604081016155838285615483565b8260208301529392505050565b602081526000611d7560208301846154a5565b6020808252600d908201526c2727902727a2229027aba722a960991b604082015260600190565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600b908201526a053454e44455220495320360ac1b604082015260600190565b6020808252601a908201527f464545533a20746f74616c20657863656564696e672031303025000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156157875784516001600160a01b031683529383019391830191600101615762565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156157d1576157d1615943565b604052919050565b600067ffffffffffffffff8211156157f3576157f3615943565b5060051b60200190565b600067ffffffffffffffff82111561581757615817615943565b50601f01601f191660200190565b6000821982111561583857615838615917565b500190565b60008261585a57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561587957615879615917565b500290565b60008282101561589057615890615917565b500390565b60005b838110156158b0578181015183820152602001615898565b83811115612bb75750506000910152565b600181811c908216806158d557607f821691505b602082108114156158f657634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561591057615910615917565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613d0957600080fd5b8015158114613d0957600080fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1889,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 684,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 690,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 692,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 694,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 696,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1277,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_totalShares",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_shares",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 173,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_released",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 176,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_payees",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 181,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 590,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 1910,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_nrm",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(NODERewardManagement)5647"
      },
      {
        "astId": 1913,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IJoeRouter02)6116"
      },
      {
        "astId": 1915,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "ownedNodesLimit",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 1917,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "mintNodeLimit",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 1919,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 1921,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "totalTokensPaidForMinting",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 1923,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "developmentFundPool",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 1925,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 1927,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "rewardsPool",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 1929,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 1931,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "rewardsFee",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 1933,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 1935,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "liquidityPoolFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 1937,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "developmentFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 1939,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "totalFees",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 1941,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "cashoutFee",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 1943,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "enableAutoSwap",
        "offset": 0,
        "slot": "217",
        "type": "t_bool"
      },
      {
        "astId": 1945,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "swapTokensAmount",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 1947,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "usdcToken",
        "offset": 0,
        "slot": "219",
        "type": "t_address"
      },
      {
        "astId": 1951,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1955,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "automatedMarketMakerPairs",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1958,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "enableCashout",
        "offset": 0,
        "slot": "222",
        "type": "t_bool"
      },
      {
        "astId": 1961,
        "contract": "contracts/ZeroXBlocksV1.sol:ZeroXBlocksV1",
        "label": "enableMintNodes",
        "offset": 1,
        "slot": "222",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1356": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)6116": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(NODERewardManagement)5647": {
        "encoding": "inplace",
        "label": "contract NODERewardManagement",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)1356,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)1356",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}