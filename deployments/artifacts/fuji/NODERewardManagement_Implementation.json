{
  "address": "0xcCc00c669E1882623ecc8860a6dFC2E4b24D2C7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_cashoutAllNodesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nodeIndex",
          "type": "uint256"
        }
      ],
      "name": "_cashoutNodeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "_changeAutoReduceAPRRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "_changeCashoutTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "_changeNodePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "reducedPercentage",
          "type": "int256"
        }
      ],
      "name": "_changeRewardAPRPerNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodeNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesCreationTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesCurrentAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesInitialAPR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesLastUpdateTime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesRewardAvailable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getNodesTypes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nodeIndex",
          "type": "uint256"
        }
      ],
      "name": "_getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isNodeOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "_resetAllAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "_undoRewardAPRChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin0XB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoReduceAPRRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "nodeNames",
          "type": "string[]"
        },
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "createNodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "currentRewardAPRPerNewNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initRewardAPRPerNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nodePrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAPRs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_cashoutTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoReduceAPRRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "nodePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNodesCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "_cType",
          "type": "uint8"
        }
      ],
      "name": "totalNodesPerContractType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbbeb5e099fd814d5d832ac73e3db112c2c9b7b5da4541e53a8a8d1e91fb4b75",
  "receipt": {
    "to": null,
    "from": "0x67616A06D0D20006fd7A0a46531C1Ca266A15EA6",
    "contractAddress": "0xcCc00c669E1882623ecc8860a6dFC2E4b24D2C7C",
    "transactionIndex": 1,
    "gasUsed": "3236156",
    "logsBloom": "0x
    "blockHash": "0x02e782c1b652d2d2c1d4303b11eefc485120695aa9f989211851f811d239b08a",
    "transactionHash": "0xbbbeb5e099fd814d5d832ac73e3db112c2c9b7b5da4541e53a8a8d1e91fb4b75",
    "logs": [],
    "blockNumber": 6736899,
    "cumulativeGasUsed": "3328212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "45fdf03ad7a6d67af091de218944dbec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_cashoutAllNodesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nodeIndex\",\"type\":\"uint256\"}],\"name\":\"_cashoutNodeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"_changeAutoReduceAPRRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"_changeCashoutTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"_changeNodePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"reducedPercentage\",\"type\":\"int256\"}],\"name\":\"_changeRewardAPRPerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodeNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesCreationTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesCurrentAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesInitialAPR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesLastUpdateTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesRewardAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getNodesTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nodeIndex\",\"type\":\"uint256\"}],\"name\":\"_getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isNodeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"_resetAllAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"_undoRewardAPRChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin0XB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReduceAPRRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"nodeNames\",\"type\":\"string[]\"},{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"createNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"currentRewardAPRPerNewNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initRewardAPRPerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nodePrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAPRs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_cashoutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoReduceAPRRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNodesCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_cType\",\"type\":\"uint8\"}],\"name\":\"totalNodesPerContractType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dependencies/NODERewardManagement.sol\":\"NODERewardManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/NODERewardManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/IterableMapping.sol\\\";\\n\\nenum ContractType {\\n    Square,\\n    Cube,\\n    Tesseract\\n}\\n\\ncontract NODERewardManagement is Initializable {\\n    using IterableMapping for IterableMapping.Map;\\n\\n    // ----- Constants -----\\n    uint256 private constant UNIX_YEAR = 31_536_000;\\n    uint256 private constant HUNDRED_PERCENT = 100_000_000;\\n\\n    // ----- Node Structs -----\\n    struct NodeEntity {\\n        string name;\\n        uint256 creationTime;\\n        uint256 lastUpdateTime;\\n        uint256 initialAPR;\\n        uint256 buyPrice;\\n        ContractType cType;\\n    }\\n\\n    // ----- Changes Structs -----\\n    struct APRChangesEntry {\\n        uint256 timestamp;\\n        int256 reducedPercentage;\\n    }\\n\\n    // ----- Contract Storage -----\\n    IterableMapping.Map private nodeOwners;\\n    mapping(address => NodeEntity[]) private _nodesOfUser;\\n\\n    mapping(ContractType => uint256) public nodePrice;\\n    mapping(ContractType => uint256) public initRewardAPRPerNode;\\n    mapping(ContractType => APRChangesEntry[]) private aprChangesHistory;\\n    uint256 public cashoutTimeout;\\n    uint256 public autoReduceAPRInterval;\\n    uint256 public autoReduceAPRRate;\\n\\n    address public admin0XB;\\n    address public token;\\n\\n    uint256 public totalNodesCreated;\\n    mapping(ContractType => uint256) private _totalNodesPerContractType;\\n\\n    // ----- Constructor -----\\n    function initialize(\\n        uint256[] memory _nodePrices,\\n        uint256[] memory _rewardAPRs,\\n        uint256 _cashoutTimeout,\\n        uint256 _autoReduceAPRRate\\n    ) public initializer {\\n        autoReduceAPRInterval = UNIX_YEAR;\\n        totalNodesCreated = 0;\\n        uint256 initialTstamp = block.timestamp;\\n        for (uint256 i = 0; i < 3; i++) {\\n            nodePrice[ContractType(i)] = _nodePrices[i];\\n            initRewardAPRPerNode[ContractType(i)] = _rewardAPRs[i];\\n            _totalNodesPerContractType[ContractType(i)] = 0;\\n            aprChangesHistory[ContractType(i)];\\n            aprChangesHistory[ContractType(i)].push(\\n                APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 })\\n            );\\n        }\\n        cashoutTimeout = _cashoutTimeout;\\n        admin0XB = msg.sender;\\n        autoReduceAPRRate = _autoReduceAPRRate;\\n    }\\n\\n    // ----- Modifier (filter) -----\\n    modifier onlyAuthorities() {\\n        require(msg.sender == token || msg.sender == admin0XB, \\\"Access Denied!\\\");\\n        _;\\n    }\\n\\n    // ----- External WRITE functions -----\\n    function setAdmin(address newAdmin) external onlyAuthorities {\\n        admin0XB = newAdmin;\\n    }\\n\\n    function setToken(address token_) external onlyAuthorities {\\n        token = token_;\\n    }\\n\\n    function createNodes(\\n        address account,\\n        string[] memory nodeNames,\\n        ContractType _cType\\n    ) external onlyAuthorities {\\n        _nodesOfUser[account];\\n        uint256 currentAPR = this.currentRewardAPRPerNewNode(_cType);\\n\\n        for (uint256 i = 0; i < nodeNames.length; i++) {\\n            _nodesOfUser[account].push(\\n                NodeEntity({\\n                    name: nodeNames[i],\\n                    creationTime: block.timestamp,\\n                    lastUpdateTime: block.timestamp,\\n                    buyPrice: nodePrice[_cType],\\n                    initialAPR: currentAPR,\\n                    cType: _cType\\n                })\\n            );\\n        }\\n\\n        nodeOwners.set(account, _nodesOfUser[account].length);\\n        totalNodesCreated += nodeNames.length;\\n        _totalNodesPerContractType[_cType] += nodeNames.length;\\n    }\\n\\n    function _cashoutNodeReward(address account, uint256 _nodeIndex) external onlyAuthorities returns (uint256) {\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\n        require(_nodeIndex >= 0 && _nodeIndex < nodes.length, \\\"NODE: Index Error\\\");\\n        NodeEntity storage node = nodes[_nodeIndex];\\n        require(claimable(node.lastUpdateTime), \\\"CASHOUT ERROR: You have to wait before claiming this node.\\\");\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 rewardNode = nodeCurrentReward(node, currentTstamp);\\n        node.lastUpdateTime = currentTstamp;\\n        return rewardNode;\\n    }\\n\\n    function _cashoutAllNodesReward(address account) external onlyAuthorities returns (uint256) {\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        require(nodesCount > 0, \\\"CASHOUT ERROR: You don't have nodes to cash-out\\\");\\n        NodeEntity storage _node;\\n        uint256 rewardsTotal = 0;\\n        uint256 currentTstamp = block.timestamp;\\n        uint256 latestCashout = 0;\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            uint256 lastUpd = nodes[i].lastUpdateTime;\\n            if (lastUpd > latestCashout) {\\n                latestCashout = lastUpd;\\n            }\\n        }\\n\\n        require(claimable(latestCashout), \\\"CASHOUT ERROR: You have to wait before claiming all nodes.\\\");\\n\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            rewardsTotal += nodeCurrentReward(_node, currentTstamp);\\n            _node.lastUpdateTime = currentTstamp;\\n        }\\n        return rewardsTotal;\\n    }\\n\\n    function _changeNodePrice(ContractType _cType, uint256 newPrice) external onlyAuthorities {\\n        nodePrice[_cType] = newPrice;\\n    }\\n\\n    function _changeRewardAPRPerNode(ContractType _cType, int256 reducedPercentage) external onlyAuthorities {\\n        require(reducedPercentage < int256(HUNDRED_PERCENT), \\\"REDUCE_RWD: do not reduce more than 100%\\\");\\n        aprChangesHistory[_cType].push(\\n            APRChangesEntry({ timestamp: block.timestamp, reducedPercentage: reducedPercentage })\\n        );\\n    }\\n\\n    function _undoRewardAPRChange(ContractType _cType) external onlyAuthorities {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        require(changesLength > 1, \\\"UNDO CHANGE: No changes found for cType\\\");\\n        aprChangesHistory[_cType].pop();\\n    }\\n\\n    function _resetAllAPRChange(ContractType _cType, uint256 _initialPrice) external onlyAuthorities {\\n        initRewardAPRPerNode[_cType] = _initialPrice;\\n        uint256 initialTstamp = aprChangesHistory[_cType][0].timestamp;\\n        delete aprChangesHistory[_cType];\\n        aprChangesHistory[_cType].push(APRChangesEntry({ timestamp: initialTstamp, reducedPercentage: 0 }));\\n    }\\n\\n    function _changeCashoutTimeout(uint256 newTime) external onlyAuthorities {\\n        cashoutTimeout = newTime;\\n    }\\n\\n    function _changeAutoReduceAPRInterval(uint256 newInterval) external onlyAuthorities {\\n        autoReduceAPRInterval = newInterval;\\n    }\\n\\n    function _changeAutoReduceAPRRate(uint256 newRate) external onlyAuthorities {\\n        autoReduceAPRRate = newRate;\\n    }\\n\\n    // ----- External READ functions -----\\n    function currentRewardAPRPerNewNode(ContractType _cType) external view returns (uint256) {\\n        uint256 changesLength = aprChangesHistory[_cType].length;\\n        uint256 result = initRewardAPRPerNode[_cType];\\n        for (uint256 i = 0; i < changesLength; i++) {\\n            result = reduceByPercent(result, aprChangesHistory[_cType][i].reducedPercentage);\\n        }\\n        return result;\\n    }\\n\\n    function totalNodesPerContractType(ContractType _cType) external view returns (uint256) {\\n        return _totalNodesPerContractType[_cType];\\n    }\\n\\n    function _isNodeOwner(address account) external view returns (bool) {\\n        return isNodeOwner(account);\\n    }\\n\\n    function _getRewardAmountOf(address account) external view returns (uint256) {\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\n        uint256 rewardCount = 0;\\n\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        uint256 currentTstamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < nodesCount; i++) {\\n            NodeEntity memory _node = nodes[i];\\n            rewardCount += nodeCurrentReward(_node, currentTstamp);\\n        }\\n\\n        return rewardCount;\\n    }\\n\\n    function _getRewardAmountOf(address account, uint256 _nodeIndex) external view returns (uint256) {\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 numberOfNodes = nodes.length;\\n        require(_nodeIndex >= 0 && _nodeIndex < numberOfNodes, \\\"NODE: Node index is improper\\\");\\n        NodeEntity memory node = nodes[_nodeIndex];\\n        uint256 rewardNode = nodeCurrentReward(node, block.timestamp);\\n        return rewardNode;\\n    }\\n\\n    function _getNodesNames(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET NAMES: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory names = nodes[0].name;\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            names = string(abi.encodePacked(names, separator, _node.name));\\n        }\\n        return names;\\n    }\\n\\n    function _getNodesCreationTime(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _creationTimes = uint2str(nodes[0].creationTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _creationTimes = string(abi.encodePacked(_creationTimes, separator, uint2str(_node.creationTime)));\\n        }\\n        return _creationTimes;\\n    }\\n\\n    function _getNodesTypes(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(uint256(nodes[0].cType));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(uint256(_node.cType))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesInitialAPR(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(nodes[0].initialAPR);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(_node.initialAPR)));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesCurrentAPR(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _types = uint2str(currentAPRSingleNode(nodes[0]));\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n            _types = string(abi.encodePacked(_types, separator, uint2str(currentAPRSingleNode(_node))));\\n        }\\n        return _types;\\n    }\\n\\n    function _getNodesRewardAvailable(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"GET REWARD: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        uint256 currentTstamp = block.timestamp;\\n        string memory _rewardsAvailable = uint2str(nodeCurrentReward(nodes[0], currentTstamp));\\n        string memory separator = \\\"#\\\";\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _rewardsAvailable = string(\\n                abi.encodePacked(_rewardsAvailable, separator, uint2str(nodeCurrentReward(nodes[i], currentTstamp)))\\n            );\\n        }\\n        return _rewardsAvailable;\\n    }\\n\\n    function _getNodesLastUpdateTime(address account) external view returns (string memory) {\\n        require(isNodeOwner(account), \\\"LAST CLAIM TIME: NO NODE OWNER\\\");\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\n        uint256 nodesCount = nodes.length;\\n        NodeEntity memory _node;\\n        string memory _lastUpdateTimes = uint2str(nodes[0].lastUpdateTime);\\n        string memory separator = \\\"#\\\";\\n\\n        for (uint256 i = 1; i < nodesCount; i++) {\\n            _node = nodes[i];\\n\\n            _lastUpdateTimes = string(abi.encodePacked(_lastUpdateTimes, separator, uint2str(_node.lastUpdateTime)));\\n        }\\n        return _lastUpdateTimes;\\n    }\\n\\n    function _getNodeNumberOf(address account) public view returns (uint256) {\\n        return nodeOwners.get(account);\\n    }\\n\\n    // ----- Private/Internal Helpers -----\\n    function historyBinarySearch(ContractType _cType, uint256 timestamp) private view returns (uint256) {\\n        uint256 leftIndex = 0;\\n        uint256 rightIndex = aprChangesHistory[_cType].length;\\n        while (rightIndex > leftIndex) {\\n            uint256 mid = (leftIndex + rightIndex) / 2;\\n            if (aprChangesHistory[_cType][mid].timestamp < timestamp) leftIndex = mid + 1;\\n            else rightIndex = mid;\\n        }\\n        return leftIndex;\\n    }\\n\\n    function currentAPRSingleNode(NodeEntity memory node) private view returns (uint256) {\\n        return nodeAPRAt(node, block.timestamp);\\n    }\\n\\n    function nodeAPRAt(NodeEntity memory node, uint256 tstamp) private view returns (uint256) {\\n        uint256 creatime = node.creationTime;\\n        ContractType cType = node.cType;\\n        uint256 resultAPR = node.initialAPR;\\n        uint256 startIndex = historyBinarySearch(cType, creatime);\\n        uint256 endIndex = historyBinarySearch(cType, tstamp);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            resultAPR = reduceByPercent(resultAPR, aprChangesHistory[cType][i].reducedPercentage);\\n        }\\n        uint256 intervalCount = fullIntervalCount(tstamp, creatime);\\n        while (intervalCount > 0) {\\n            intervalCount--;\\n            resultAPR = reduceByPercent(resultAPR, int256(autoReduceAPRRate));\\n        }\\n        return resultAPR;\\n    }\\n\\n    function nodeCurrentReward(NodeEntity memory node, uint256 curTstamp) private view returns (uint256) {\\n        ContractType _cType = node.cType;\\n\\n        uint256 lastUpdateIndex = historyBinarySearch(_cType, node.lastUpdateTime);\\n\\n        uint256 nodeBuyPrice = node.buyPrice;\\n        uint256 itrAPR = nodeAPRAt(node, node.lastUpdateTime);\\n        uint256 itrTstamp = node.lastUpdateTime;\\n        uint256 nextTstamp = 0;\\n        uint256 result = 0;\\n        uint256 deltaTstamp;\\n        uint256 intervalReward;\\n        uint256 creatime = node.creationTime;\\n        bool diffInterval;\\n        for (uint256 index = lastUpdateIndex; index < aprChangesHistory[_cType].length; index++) {\\n            nextTstamp = aprChangesHistory[_cType][index].timestamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((nodeBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n                index--;\\n            } else {\\n                itrAPR = reduceByPercent(itrAPR, aprChangesHistory[_cType][index].reducedPercentage);\\n            }\\n        }\\n\\n        while (itrTstamp != curTstamp) {\\n            nextTstamp = curTstamp;\\n            diffInterval = (fullIntervalCount(nextTstamp, creatime) != fullIntervalCount(itrTstamp, creatime));\\n            if (diffInterval) {\\n                nextTstamp = creatime + autoReduceAPRInterval * (fullIntervalCount(itrTstamp, creatime) + 1);\\n            }\\n            deltaTstamp = nextTstamp - itrTstamp;\\n            intervalReward = (((nodeBuyPrice * itrAPR) / HUNDRED_PERCENT) * deltaTstamp) / UNIX_YEAR;\\n            itrTstamp = nextTstamp;\\n            result += intervalReward;\\n\\n            if (diffInterval) {\\n                itrAPR = reduceByPercent(itrAPR, int256(autoReduceAPRRate));\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function fullIntervalCount(uint256 input, uint256 creatime) private view returns (uint256) {\\n        return (input - creatime) / autoReduceAPRInterval;\\n    }\\n\\n    function claimable(uint256 lastUpdateTime) private view returns (bool) {\\n        return lastUpdateTime + cashoutTimeout <= block.timestamp;\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function reduceByPercent(uint256 input, int256 reducePercent) internal pure returns (uint256) {\\n        uint256 newPercentage = uint256(int256(HUNDRED_PERCENT) - reducePercent);\\n        return ((input * newPercentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function isNodeOwner(address account) private view returns (bool) {\\n        return nodeOwners.get(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xaec8e39fa6d84b6f28f2a6e5847920f583371a730a7f0f6257626e376b766cc9\",\"license\":\"MIT\"},\"contracts/libraries/IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) internal {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41329c923732c9898f686a7efbcd81ee45af70172cc1633daf1ce222046c9914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80636eb5a7f41161011a5780639b28d1a7116100ad578063aa57be301161007c578063aa57be3014610478578063b8527aef1461048b578063c92819ce14610494578063fc0c546a146104a7578063fd8db546146104ba57600080fd5b80639b28d1a7146104365780639f227c531461043f578063a3479b3314610452578063a6e15cc41461046557600080fd5b80637b358d05116100e95780637b358d05146103dc5780638201bf26146103ef578063872a60ad1461040257806393520a801461042d57600080fd5b80636eb5a7f4146103905780636edb7002146103a3578063704b6c02146103b6578063754a9be8146103c957600080fd5b80634491a7e41161019d57806355a757d01161016c57806355a757d01461033b5780635b53f6fc146103445780635c298b1c14610357578063619a635e1461036a5780636b4da1021461037d57600080fd5b80634491a7e4146102e25780634a389fae146102f55780634d3f28841461030857806353f63f7f1461032857600080fd5b80631f7bcc4b116101d95780631f7bcc4b14610259578063334de3a21461028c578063390c991e146102ac57806341ac82b0146102bf57600080fd5b806303f63ee71461020b5780630d9f9f0c14610220578063144fa6d7146102335780631565f50e14610246575b600080fd5b61021e610219366004613609565b6104cd565b005b61021e61022e366004613625565b6105eb565b61021e61024136600461340a565b61062f565b61021e610254366004613625565b610690565b6102796102673660046135ee565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b61029f61029a36600461340a565b6106d4565b60405161028391906136c2565b61021e6102ba366004613625565b610949565b6102d26102cd36600461340a565b61098d565b6040519015158152602001610283565b6102796102f036600461340a565b61099e565b61029f61030336600461340a565b6109bc565b6102796103163660046135ee565b60076020526000908152604090205481565b61021e610336366004613609565b610c22565b61027960095481565b61029f61035236600461340a565b610c9e565b61027961036536600461340a565b610ef6565b61027961037836600461340a565b6111eb565b61029f61038b36600461340a565b6113fe565b61021e61039e36600461357a565b61163c565b6102796103b1366004613550565b611915565b61021e6103c436600461340a565b611b71565b6102796103d73660046135ee565b611bd2565b61021e6103ea366004613425565b611cd2565b61021e6103fd3660046135ee565b611f83565b600c54610415906001600160a01b031681565b6040516001600160a01b039091168152602001610283565b610279600b5481565b610279600a5481565b61021e61044d366004613609565b6120c4565b6102796104603660046135ee565b61224d565b610279610473366004613550565b61228c565b61029f61048636600461340a565b6124c5565b610279600e5481565b61029f6104a236600461340a565b612735565b600d54610415906001600160a01b031681565b61029f6104c836600461340a565b612975565b600d546001600160a01b03163314806104f05750600c546001600160a01b031633145b6105155760405162461bcd60e51b815260040161050c906136f5565b60405180910390fd5b6305f5e10081126105795760405162461bcd60e51b815260206004820152602860248201527f5245445543455f5257443a20646f206e6f7420726564756365206d6f7265207460448201526768616e203130302560c01b606482015260840161050c565b6008600083600281111561058f5761058f613930565b60028111156105a0576105a0613930565b81526020808201929092526040908101600090812082518084019093524283528284019485528054600181810183559183529390912091516002909302909101918255915191015550565b600d546001600160a01b031633148061060e5750600c546001600160a01b031633145b61062a5760405162461bcd60e51b815260040161050c906136f5565b600b55565b600d546001600160a01b03163314806106525750600c546001600160a01b031633145b61066e5760405162461bcd60e51b815260040161050c906136f5565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b03163314806106b35750600c546001600160a01b031633145b6106cf5760405162461bcd60e51b815260040161050c906136f5565b600a55565b60606106df82612bb5565b61072b5760405162461bcd60e51b815260206004820152601860248201527f474554204e414d45533a204e4f204e4f4445204f574e45520000000000000000604482015260640161050c565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561088057838290600052602060002090600602016040518060c0016040529081600082018054610794906138c4565b80601f01602080910402602001604051908101604052809291908181526020018280546107c0906138c4565b801561080d5780601f106107e25761010080835404028352916020019161080d565b820191906000526020600020905b8154815290600101906020018083116107f057829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561085c5761085c613930565b600281111561086d5761086d613930565b8152505081526020019060010190610761565b505050509050600081519050610894613254565b6000836000815181106108a9576108a961395c565b60200260200101516000015190506000604051806040016040528060018152602001602360f81b81525090506000600190505b8481101561093d578581815181106108f6576108f661395c565b602002602001015193508282856000015160405160200161091993929190613657565b60405160208183030381529060405292508080610935906138ff565b9150506108dc565b50909695505050505050565b600d546001600160a01b031633148061096c5750600c546001600160a01b031633145b6109885760405162461bcd60e51b815260040161050c906136f5565b600955565b600061099882612bb5565b92915050565b6001600160a01b038116600090815260026020526040812054610998565b60606109c782612bb5565b610a135760405162461bcd60e51b815260206004820152601960248201527f474554205245574152443a204e4f204e4f4445204f574e455200000000000000604482015260640161050c565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015610b6857838290600052602060002090600602016040518060c0016040529081600082018054610a7c906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa8906138c4565b8015610af55780601f10610aca57610100808354040283529160200191610af5565b820191906000526020600020905b815481529060010190602001808311610ad857829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115610b4457610b44613930565b6002811115610b5557610b55613930565b8152505081526020019060010190610a49565b5050825192935042915060009050610b9e610b99858386610b8b57610b8b61395c565b602002602001015184612bd2565b612e83565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d578282610bec610b99898581518110610bde57610bde61395c565b602002602001015188612bd2565b604051602001610bfe93929190613657565b60405160208183030381529060405292508080610c1a906138ff565b915050610bbc565b600d546001600160a01b0316331480610c455750600c546001600160a01b031633145b610c615760405162461bcd60e51b815260040161050c906136f5565b8060066000846002811115610c7857610c78613930565b6002811115610c8957610c89613930565b81526020810191909152604001600020555050565b6060610ca982612bb5565b610cc55760405162461bcd60e51b815260040161050c9061371d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015610e1a57838290600052602060002090600602016040518060c0016040529081600082018054610d2e906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5a906138c4565b8015610da75780601f10610d7c57610100808354040283529160200191610da7565b820191906000526020600020905b815481529060010190602001808311610d8a57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115610df657610df6613930565b6002811115610e0757610e07613930565b8152505081526020019060010190610cfb565b505050509050600081519050610e2e613254565b6000610e6384600081518110610e4657610e4661395c565b602002602001015160a001516002811115610b9957610b99613930565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d57858181518110610e9b57610e9b61395c565b602002602001015193508282610ec08660a001516002811115610b9957610b99613930565b604051602001610ed293929190613657565b60405160208183030381529060405292508080610eee906138ff565b915050610e81565b600d546000906001600160a01b0316331480610f1c5750600c546001600160a01b031633145b610f385760405162461bcd60e51b815260040161050c906136f5565b6001600160a01b0382166000908152600560205260409020805480610fb75760405162461bcd60e51b815260206004820152602f60248201527f434153484f5554204552524f523a20596f7520646f6e27742068617665206e6f60448201526e19195cc81d1bc818d85cda0b5bdd5d608a1b606482015260840161050c565b6000804281805b8581101561100d576000878281548110610fda57610fda61395c565b906000526020600020906006020160020154905082811115610ffa578092505b5080611005816138ff565b915050610fbe565b5061101781612fac565b6110895760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e6720616c6c206e6f6465732e000000000000606482015260840161050c565b60005b858110156111dc578681815481106110a6576110a661395c565b906000526020600020906006020194506111b7856040518060c00160405290816000820180546110d5906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611101906138c4565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561119d5761119d613930565b60028111156111ae576111ae613930565b90525084612bd2565b6111c190856137a9565b600286018490559350806111d4816138ff565b91505061108c565b5091955050505050505b919050565b60006111f682612bb5565b6112425760405162461bcd60e51b815260206004820152601c60248201527f47455420524557415244204f463a204e4f204e4f4445204f574e455200000000604482015260640161050c565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083528493849084015b8282101561139457838290600052602060002090600602016040518060c00160405290816000820180546112a8906138c4565b80601f01602080910402602001604051908101604052809291908181526020018280546112d4906138c4565b80156113215780601f106112f657610100808354040283529160200191611321565b820191906000526020600020905b81548152906001019060200180831161130457829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561137057611370613930565b600281111561138157611381613930565b8152505081526020019060010190611275565b50508251929350429150600090505b828110156113f35760008482815181106113bf576113bf61395c565b602002602001015190506113d38184612bd2565b6113dd90876137a9565b95505080806113eb906138ff565b9150506113a3565b509295945050505050565b606061140982612bb5565b6114255760405162461bcd60e51b815260040161050c9061371d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561157a57838290600052602060002090600602016040518060c001604052908160008201805461148e906138c4565b80601f01602080910402602001604051908101604052809291908181526020018280546114ba906138c4565b80156115075780601f106114dc57610100808354040283529160200191611507565b820191906000526020600020905b8154815290600101906020018083116114ea57829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561155657611556613930565b600281111561156757611567613930565b815250508152602001906001019061145b565b50505050905060008151905061158e613254565b60006115b6610b99856000815181106115a9576115a961395c565b6020026020010151612fc5565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d578581815181106115ee576115ee61395c565b602002602001015193508282611606610b9987612fc5565b60405160200161161893929190613657565b60405160208183030381529060405292508080611634906138ff565b9150506115d4565b600054610100900460ff166116575760005460ff161561165b565b303b155b6116be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161050c565b600054610100900460ff161580156116e0576000805461ffff19166101011790555b6301e13380600a556000600e81905542905b60038110156118de5786818151811061170d5761170d61395c565b60200260200101516006600083600281111561172b5761172b613930565b600281111561173c5761173c613930565b600281111561174d5761174d613930565b8152602001908152602001600020819055508581815181106117715761177161395c565b60200260200101516007600083600281111561178f5761178f613930565b60028111156117a0576117a0613930565b60028111156117b1576117b1613930565b8152602001908152602001600020819055506000600f60008360028111156117db576117db613930565b60028111156117ec576117ec613930565b60028111156117fd576117fd613930565b8152602001908152602001600020819055506008600082600281111561182557611825613930565b600281111561183657611836613930565b600281111561184757611847613930565b8152602001526008600082600281111561186357611863613930565b600281111561187457611874613930565b600281111561188557611885613930565b8152602080820192909252604090810160009081208251808401909352858352828401828152815460018181018455928452949092209251600290940290920192835551910155806118d6816138ff565b9150506116f2565b50506009839055600c80546001600160a01b03191633179055600b829055801561190e576000805461ff00191690555b5050505050565b600d546000906001600160a01b031633148061193b5750600c546001600160a01b031633145b6119575760405162461bcd60e51b815260040161050c906136f5565b6001600160a01b0383166000908152600560205260409020805483106119b35760405162461bcd60e51b81526020600482015260116024820152702727a2229d1024b73232bc1022b93937b960791b604482015260640161050c565b60008184815481106119c7576119c761395c565b906000526020600020906006020190506119e48160020154612fac565b611a565760405162461bcd60e51b815260206004820152603a60248201527f434153484f5554204552524f523a20596f75206861766520746f20776169742060448201527f6265666f726520636c61696d696e672074686973206e6f64652e000000000000606482015260840161050c565b60004290506000611b5e836040518060c0016040529081600082018054611a7c906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa8906138c4565b8015611af55780601f10611aca57610100808354040283529160200191611af5565b820191906000526020600020905b815481529060010190602001808311611ad857829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115611b4457611b44613930565b6002811115611b5557611b55613930565b90525083612bd2565b6002909301919091555091505092915050565b600d546001600160a01b0316331480611b945750600c546001600160a01b031633145b611bb05760405162461bcd60e51b815260040161050c906136f5565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60008060086000846002811115611beb57611beb613930565b6002811115611bfc57611bfc613930565b8152602001908152602001600020805490509050600060076000856002811115611c2857611c28613930565b6002811115611c3957611c39613930565b815260200190815260200160002054905060005b82811015611cca57611cb68260086000886002811115611c6f57611c6f613930565b6002811115611c8057611c80613930565b81526020019081526020016000208381548110611c9f57611c9f61395c565b906000526020600020906002020160010154612fd1565b915080611cc2816138ff565b915050611c4d565b509392505050565b600d546001600160a01b0316331480611cf55750600c546001600160a01b031633145b611d115760405162461bcd60e51b815260040161050c906136f5565b6001600160a01b03831660009081526005602052604051630ea9537d60e31b8152309063754a9be890611d4890859060040161369a565b60206040518083038186803b158015611d6057600080fd5b505afa158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d98919061363e565b905060005b8351811015611ef25760056000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868481518110611de857611de861395c565b6020026020010151815260200142815260200142815260200184815260200160066000876002811115611e1d57611e1d613930565b6002811115611e2e57611e2e613930565b8152602001908152602001600020548152602001856002811115611e5457611e54613930565b905281546001810183556000928352602092839020825180519394600690930290910192611e85928492019061329a565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836002811115611ed857611ed8613930565b021790555050508080611eea906138ff565b915050611d9d565b506001600160a01b038416600090815260056020526040902054611f1a906001908690613005565b8251600e6000828254611f2d91906137a9565b90915550508251600f6000846002811115611f4a57611f4a613930565b6002811115611f5b57611f5b613930565b81526020019081526020016000206000828254611f7891906137a9565b909155505050505050565b600d546001600160a01b0316331480611fa65750600c546001600160a01b031633145b611fc25760405162461bcd60e51b815260040161050c906136f5565b600060086000836002811115611fda57611fda613930565b6002811115611feb57611feb613930565b815260208101919091526040016000205490506001811161205e5760405162461bcd60e51b815260206004820152602760248201527f554e444f204348414e47453a204e6f206368616e67657320666f756e6420666f6044820152667220635479706560c81b606482015260840161050c565b6008600083600281111561207457612074613930565b600281111561208557612085613930565b81526020019081526020016000208054806120a2576120a2613946565b6000828152602081206002600019909301928302018181556001015590555050565b600d546001600160a01b03163314806120e75750600c546001600160a01b031633145b6121035760405162461bcd60e51b815260040161050c906136f5565b806007600084600281111561211a5761211a613930565b600281111561212b5761212b613930565b81526020019081526020016000208190555060006008600084600281111561215557612155613930565b600281111561216657612166613930565b81526020019081526020016000206000815481106121865761218661395c565b9060005260206000209060020201600001549050600860008460028111156121b0576121b0613930565b60028111156121c1576121c1613930565b815260200190815260200160002060006121db919061331e565b600860008460028111156121f1576121f1613930565b600281111561220257612202613930565b81526020808201929092526040908101600090812082518084019093529382528183018181528454600181810187559583529390912091516002909302909101918255519101555050565b6000600f600083600281111561226557612265613930565b600281111561227657612276613930565b8152602001908152602001600020549050919050565b600061229783612bb5565b6122e35760405162461bcd60e51b815260206004820152601c60248201527f47455420524557415244204f463a204e4f204e4f4445204f574e455200000000604482015260640161050c565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561243857838290600052602060002090600602016040518060c001604052908160008201805461234c906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054612378906138c4565b80156123c55780601f1061239a576101008083540402835291602001916123c5565b820191906000526020600020905b8154815290600101906020018083116123a857829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561241457612414613930565b600281111561242557612425613930565b8152505081526020019060010190612319565b5050825192935050508084106124905760405162461bcd60e51b815260206004820152601c60248201527f4e4f44453a204e6f646520696e64657820697320696d70726f70657200000000604482015260640161050c565b60008285815181106124a4576124a461395c565b6020026020010151905060006124ba8242612bd2565b979650505050505050565b60606124d082612bb5565b61251c5760405162461bcd60e51b815260206004820152601e60248201527f4c41535420434c41494d2054494d453a204e4f204e4f4445204f574e45520000604482015260640161050c565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b8282101561267157838290600052602060002090600602016040518060c0016040529081600082018054612585906138c4565b80601f01602080910402602001604051908101604052809291908181526020018280546125b1906138c4565b80156125fe5780601f106125d3576101008083540402835291602001916125fe565b820191906000526020600020905b8154815290600101906020018083116125e157829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561264d5761264d613930565b600281111561265e5761265e613930565b8152505081526020019060010190612552565b505050509050600081519050612685613254565b60006126ae8460008151811061269d5761269d61395c565b602002602001015160400151612e83565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d578581815181106126e6576126e661395c565b6020026020010151935082826126ff8660400151612e83565b60405160200161271193929190613657565b6040516020818303038152906040529250808061272d906138ff565b9150506126cc565b606061274082612bb5565b61275c5760405162461bcd60e51b815260040161050c9061371d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b828210156128b157838290600052602060002090600602016040518060c00160405290816000820180546127c5906138c4565b80601f01602080910402602001604051908101604052809291908181526020018280546127f1906138c4565b801561283e5780601f106128135761010080835404028352916020019161283e565b820191906000526020600020905b81548152906001019060200180831161282157829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff169081111561288d5761288d613930565b600281111561289e5761289e613930565b8152505081526020019060010190612792565b5050505090506000815190506128c5613254565b60006128ee846000815181106128dd576128dd61395c565b602002602001015160200151612e83565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d578581815181106129265761292661395c565b60200260200101519350828261293f8660200151612e83565b60405160200161295193929190613657565b6040516020818303038152906040529250808061296d906138ff565b91505061290c565b606061298082612bb5565b61299c5760405162461bcd60e51b815260040161050c9061371d565b6001600160a01b038216600090815260056020908152604080832080548251818502810185019093528083529192909190849084015b82821015612af157838290600052602060002090600602016040518060c0016040529081600082018054612a05906138c4565b80601f0160208091040260200160405190810160405280929190818152602001828054612a31906138c4565b8015612a7e5780601f10612a5357610100808354040283529160200191612a7e565b820191906000526020600020905b815481529060010190602001808311612a6157829003601f168201915b50505091835250506001820154602082015260028083015460408301526003830154606083015260048301546080830152600583015460a09092019160ff1690811115612acd57612acd613930565b6002811115612ade57612ade613930565b81525050815260200190600101906129d2565b505050509050600081519050612b05613254565b6000612b2e84600081518110612b1d57612b1d61395c565b602002602001015160600151612e83565b604080518082019091526001808252602360f81b6020830152919250905b8481101561093d57858181518110612b6657612b6661395c565b602002602001015193508282612b7f8660600151612e83565b604051602001612b9193929190613657565b60405160208183030381529060405292508080612bad906138ff565b915050612b4c565b6001600160a01b0316600090815260026020526040902054151590565b6000808360a0015190506000612bec8286604001516130ae565b90506000856080015190506000612c07878860400151613189565b604088015160208901519192509060009081908190819081895b600860008d6002811115612c3757612c37613930565b6002811115612c4857612c48613930565b8152602081019190915260400160002054811015612dad57600860008d6002811115612c7657612c76613930565b6002811115612c8757612c87613930565b81526020019081526020016000208181548110612ca657612ca661395c565b9060005260206000209060020201600001549650612cc48884613233565b612cce8885613233565b1480159250612d0657612ce18884613233565b612cec9060016137a9565b600a54612cf99190613808565b612d0390846137a9565b96505b612d108888613866565b94506301e13380856305f5e100612d278c8e613808565b612d3191906137e6565b612d3b9190613808565b612d4591906137e6565b93508697508386612d5691906137a9565b95508115612d7e57612d6a89600b54612fd1565b985080612d76816138ad565b915050612d9b565b612d9889600860008f6002811115611c6f57611c6f613930565b98505b80612da5816138ff565b915050612c21565b505b8c8714612e71578c9550612dc38783613233565b612dcd8784613233565b1480159150612e0557612de08783613233565b612deb9060016137a9565b600a54612df89190613808565b612e0290836137a9565b95505b612e0f8787613866565b93506301e13380846305f5e100612e268b8d613808565b612e3091906137e6565b612e3a9190613808565b612e4491906137e6565b92508596508285612e5591906137a9565b94508015612e6c57612e6988600b54612fd1565b97505b612daf565b50929c9b505050505050505050505050565b606081612ea75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ed15780612ebb816138ff565b9150612eca9050600a836137e6565b9150612eab565b60008167ffffffffffffffff811115612eec57612eec613972565b6040519080825280601f01601f191660200182016040528015612f16576020820181803683370190505b509050815b8515612fa357612f2c600182613866565b90506000612f3b600a886137e6565b612f4690600a613808565b612f509088613866565b612f5b9060306137c1565b905060008160f81b905080848481518110612f7857612f7861395c565b60200101906001600160f81b031916908160001a905350612f9a600a896137e6565b97505050612f1b565b50949350505050565b60004260095483612fbd91906137a9565b111592915050565b60006109988242613189565b600080612fe2836305f5e100613827565b90506305f5e100612ff38286613808565b612ffd91906137e6565b949350505050565b6001600160a01b038216600090815260038401602052604090205460ff161561304a576001600160a01b03821660009081526001840160205260409020819055505050565b6001600160a01b03821660008181526003850160209081526040808320805460ff19166001908117909155878101835281842086905587546002890184529184208290558101875586835291200180546001600160a01b0319169091179055505050565b600080806008818660028111156130c7576130c7613930565b60028111156130d8576130d8613930565b815260208101919091526040016000205490505b81811115611cca576000600261310283856137a9565b61310c91906137e6565b9050846008600088600281111561312557613125613930565b600281111561313657613136613930565b815260200190815260200160002082815481106131555761315561395c565b906000526020600020906002020160000154101561317f576131788160016137a9565b9250613183565b8091505b506130ec565b602082015160a083015160608401516000929190836131a883856130ae565b905060006131b684886130ae565b9050815b818110156131f0576131dc8460086000886002811115611c6f57611c6f613930565b9350806131e8816138ff565b9150506131ba565b5060006131fd8887613233565b90505b80156132265780613210816138ad565b91505061321f84600b54612fd1565b9350613200565b5091979650505050505050565b600a546000906132438385613866565b61324d91906137e6565b9392505050565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001600081526020016000600281111561329557613295613930565b905290565b8280546132a6906138c4565b90600052602060002090601f0160209004810192826132c8576000855561330e565b82601f106132e157805160ff191683800117855561330e565b8280016001018555821561330e579182015b8281111561330e5782518255916020019190600101906132f3565b5061331a929150613342565b5090565b508054600082556002029060005260206000209081019061333f9190613357565b50565b5b8082111561331a5760008155600101613343565b5b8082111561331a5760008082556001820155600201613358565b80356001600160a01b03811681146111e657600080fd5b600082601f83011261339a57600080fd5b813560206133af6133aa83613785565b613754565b80838252828201915082860187848660051b89010111156133cf57600080fd5b60005b858110156133ee578135845292840192908401906001016133d2565b5090979650505050505050565b8035600381106111e657600080fd5b60006020828403121561341c57600080fd5b61324d82613372565b60008060006060848603121561343a57600080fd5b61344384613372565b925060208085013567ffffffffffffffff8082111561346157600080fd5b818701915087601f83011261347557600080fd5b81356134836133aa82613785565b8082825285820191508585018b878560051b88010111156134a357600080fd5b60005b84811015613530578135868111156134bd57600080fd5b8701603f81018e136134ce57600080fd5b88810135878111156134e2576134e2613972565b6134f4601f8201601f19168b01613754565b8181528f604083850101111561350957600080fd5b81604084018c83013760009181018b019190915285525092870192908701906001016134a6565b5050809750505050505050613547604085016133fb565b90509250925092565b6000806040838503121561356357600080fd5b61356c83613372565b946020939093013593505050565b6000806000806080858703121561359057600080fd5b843567ffffffffffffffff808211156135a857600080fd5b6135b488838901613389565b955060208701359150808211156135ca57600080fd5b506135d787828801613389565b949794965050505060408301359260600135919050565b60006020828403121561360057600080fd5b61324d826133fb565b6000806040838503121561361c57600080fd5b61356c836133fb565b60006020828403121561363757600080fd5b5035919050565b60006020828403121561365057600080fd5b5051919050565b6000845161366981846020890161387d565b84519083019061367d81836020890161387d565b845191019061369081836020880161387d565b0195945050505050565b60208101600383106136bc57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526136e181604085016020870161387d565b601f01601f19169190910160400192915050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b6020808252601b908201527f474554204352454154494d453a204e4f204e4f4445204f574e45520000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561377d5761377d613972565b604052919050565b600067ffffffffffffffff82111561379f5761379f613972565b5060051b60200190565b600082198211156137bc576137bc61391a565b500190565b600060ff821660ff84168060ff038211156137de576137de61391a565b019392505050565b60008261380357634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156138225761382261391a565b500290565b60008083128015600160ff1b8501841216156138455761384561391a565b6001600160ff1b03840183138116156138605761386061391a565b50500390565b6000828210156138785761387861391a565b500390565b60005b83811015613898578181015183820152602001613880565b838111156138a7576000848401525b50505050565b6000816138bc576138bc61391a565b506000190190565b600181811c908216806138d857607f821691505b602082108114156138f957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139135761391361391a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 598,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 601,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3814,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "nodeOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)6281_storage"
      },
      {
        "astId": 3820,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "_nodesOfUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(NodeEntity)3806_storage)dyn_storage)"
      },
      {
        "astId": 3825,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "nodePrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ContractType)3780,t_uint256)"
      },
      {
        "astId": 3830,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "initRewardAPRPerNode",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ContractType)3780,t_uint256)"
      },
      {
        "astId": 3837,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "aprChangesHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(ContractType)3780,t_array(t_struct(APRChangesEntry)3811_storage)dyn_storage)"
      },
      {
        "astId": 3839,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "cashoutTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3841,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "autoReduceAPRInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3843,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "autoReduceAPRRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3845,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "admin0XB",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3847,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3849,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "totalNodesCreated",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3854,
        "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
        "label": "_totalNodesPerContractType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_enum(ContractType)3780,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(APRChangesEntry)3811_storage)dyn_storage": {
        "base": "t_struct(APRChangesEntry)3811_storage",
        "encoding": "dynamic_array",
        "label": "struct NODERewardManagement.APRChangesEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NodeEntity)3806_storage)dyn_storage": {
        "base": "t_struct(NodeEntity)3806_storage",
        "encoding": "dynamic_array",
        "label": "struct NODERewardManagement.NodeEntity[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ContractType)3780": {
        "encoding": "inplace",
        "label": "enum ContractType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(NodeEntity)3806_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NODERewardManagement.NodeEntity[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(NodeEntity)3806_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ContractType)3780,t_array(t_struct(APRChangesEntry)3811_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ContractType)3780",
        "label": "mapping(enum ContractType => struct NODERewardManagement.APRChangesEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(APRChangesEntry)3811_storage)dyn_storage"
      },
      "t_mapping(t_enum(ContractType)3780,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ContractType)3780",
        "label": "mapping(enum ContractType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(APRChangesEntry)3811_storage": {
        "encoding": "inplace",
        "label": "struct NODERewardManagement.APRChangesEntry",
        "members": [
          {
            "astId": 3808,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3810,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "reducedPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)6281_storage": {
        "encoding": "inplace",
        "label": "struct IterableMapping.Map",
        "members": [
          {
            "astId": 6268,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6272,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6276,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6280,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(NodeEntity)3806_storage": {
        "encoding": "inplace",
        "label": "struct NODERewardManagement.NodeEntity",
        "members": [
          {
            "astId": 3794,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3796,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3798,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3800,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "initialAPR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3802,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "buyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3805,
            "contract": "contracts/dependencies/NODERewardManagement.sol:NODERewardManagement",
            "label": "cType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ContractType)3780"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}